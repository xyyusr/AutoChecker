{
    "project_name": "pmd-java",
    "project_version": "7.0.0-rc4-release",
    "project_path": "your-pmd-loc/pmd-java/src/main/java/net/sourceforge/pmd/lang/java",
    "classes_contained_in_project_count": 148,
    "APIs_contained_in_project_count": 11642,
    "classes_contained_in_project_detail": [
        {
            "class_name": "TypesFromReflection",
            "class_package": "net.sourceforge.pmd.lang.java.types.TypesFromReflection",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/types/TypesFromReflection.java",
            "class_comment": "Builds type mirrors from {@link Type} instances. <p>This is intended as a public API to help rules build types.",
            "APIs_contained_in_class_count": 15,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "loadType",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror loadType(net.sourceforge.pmd.lang.java.types.TypeSystem, java.lang.String, net.sourceforge.pmd.lang.java.symbols.internal.UnresolvedClassStore)",
                    "method_comment": "Load a class. Supports loading array types like 'java.lang.String[]' and converting a canonical name to a binary name (eg 'java.util.Map.Entry' -> 'java.util.Map$Entry'). Types that are not on the classpath may be replaced by placeholder types if the {@link UnresolvedClassStore} parameter is non-null.",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypesFromReflection"
                },
                {
                    "method_name": "loadType",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror loadType(net.sourceforge.pmd.lang.java.types.TypeSystem, java.lang.String)",
                    "method_comment": "Load a class. Supports loading array types like 'java.lang.String[]' and converting a canonical name to a binary name (eg 'java.util.Map.Entry' -> 'java.util.Map$Entry').",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypesFromReflection"
                },
                {
                    "method_name": "loadSymbol",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.symbols.JClassSymbol loadSymbol(net.sourceforge.pmd.lang.java.types.TypeSystem, java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypesFromReflection"
                },
                {
                    "method_name": "fromReflect",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror fromReflect(org.apache.commons.lang3.reflect.Typed, net.sourceforge.pmd.lang.java.types.TypeSystem)",
                    "method_comment": "Builds a type from reflection. This overload expects a ground type, ie it will fail if the given type mentions type variables. This can be used to get a type quickly, eg: <pre>{@code // note the anonymous class body JTypeMirror streamOfInt = fromReflect(new TypeLiteral<Stream<Integer>>() {}, node.getTypeSystem()); if (node.getTypeMirror().equals(streamOfInt))   addViolation(node, \"Use IntStream instead of Stream<Integer>\"); // going the long way: TypeSystem ts = node.getTypeSystem(); JTypeMirror streamOfInt = ts.typeOf(ts.getClassSymbol(Stream.class), false)                             .withTypeParameters(listOf(ts.INT.box())); }</pre> @param ts        Type system that will build the type @param reflected A {@link Typed} instance, eg a {@link TypeLiteral}. @throws IllegalArgumentException If the given type mentions type variables @throws NullPointerException If the type, or the type system, are null",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypesFromReflection"
                },
                {
                    "method_name": "fromReflect",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror fromReflect(java.lang.reflect.Type, net.sourceforge.pmd.lang.java.types.TypeSystem)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypesFromReflection"
                },
                {
                    "method_name": "fromReflect",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror fromReflect(net.sourceforge.pmd.lang.java.types.TypeSystem, java.lang.reflect.Type, net.sourceforge.pmd.lang.java.types.LexicalScope, net.sourceforge.pmd.lang.java.types.Substitution)",
                    "method_comment": "Builds a type from reflection. This takes care of preserving the identity of type variables. @param ts           Type system @param reflected    A type instance obtained from reflection @param lexicalScope An index for the in-scope type variables. All                     type variables occurring in the type must be                     referenced. @param subst        Substitution to apply to tvars @return A type, or null if the type system's symbol resolver cannot map     the types to its own representation @throws IllegalArgumentException If there are free type variables in the type.                                  Any type variable should be accessible in the                                  lexical scope parameter. @throws NullPointerException     If any parameter is null",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypesFromReflection"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "TypeTestUtil",
            "class_package": "net.sourceforge.pmd.lang.java.types.TypeTestUtil",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/types/TypeTestUtil.java",
            "class_comment": "Public utilities to test the type of nodes. @see InvocationMatcher",
            "APIs_contained_in_class_count": 20,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isExactlyA",
                    "method_signature": "static public boolean isExactlyA(java.lang.Class, net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": "Checks whether the static type of the node is exactly the type of the class. This ignores strict supertypes, and type arguments, if the type of the node is parameterized. <pre>{@code isExactlyA(List.class, <new ArrayList<String>()>)      = false isExactlyA(ArrayList.class, <new ArrayList<String>()>) = true isExactlyA(int[].class, <new int[0]>)                  = true isExactlyA(Object[].class, <new String[0]>)            = false isExactlyA(_, null) = false isExactlyA(null, _) = NullPointerException }</pre> @param clazz a class (non-null) @param node  the type node to check @return true if the node is non-null and has the given type @throws NullPointerException if the class parameter is null",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isExactlyA",
                    "method_signature": "static public boolean isExactlyA(java.lang.Class, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isExactlyA",
                    "method_signature": "static public boolean isExactlyA(java.lang.Class, net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isExactlyA",
                    "method_signature": "static public boolean isExactlyA(java.lang.String, net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": "Checks whether the static type of the node is exactly the type given by the name. See {@link #isExactlyA(Class, TypeNode)} for examples and more info. @param canonicalName a canonical name of a class or array type @param node          the type node to check @return true if the node is non-null and has the given type @throws NullPointerException     if the class name parameter is null @throws IllegalArgumentException if the class name parameter is not a valid java binary name,                                  eg it has type arguments @see #isExactlyA(Class, TypeNode)",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isA",
                    "method_signature": "static public boolean isA(net.sourceforge.pmd.lang.java.types.JTypeMirror, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Checks whether the second type is a subtype of the first. This removes some behavior of isSubtypeOf that we don't want (eg, that unresolved types are subtypes of everything). @param t1 A supertype @param t2 A type @return Whether t1 is a subtype of t2",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isA",
                    "method_signature": "static public boolean isA(java.lang.Class, net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": "Checks whether the static type of the node is a subtype of the class identified by the given name. This ignores type arguments, if the type of the node is parameterized. Examples: <pre>{@code isA(List.class, <new ArrayList<String>()>)      = true isA(ArrayList.class, <new ArrayList<String>()>) = true isA(int[].class, <new int[0]>)                  = true isA(Object[].class, <new String[0]>)            = true isA(_, null) = false isA(null, _) = NullPointerException }</pre> <p>If either type is unresolved, the types are tested for equality, thus giving more useful results than {@link JTypeMirror#isSubtypeOf(JTypeMirror)}. <p>Note that primitives are NOT considered subtypes of one another by this method, even though {@link JTypeMirror#isSubtypeOf(JTypeMirror)} does. @param clazz a class (non-null) @param node  the type node to check @return true if the type test matches @throws NullPointerException if the class parameter is null",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isA",
                    "method_signature": "static public boolean isA(java.lang.Class, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Checks whether the given type of the node is a subtype of the first argument. See {@link #isA(Class, TypeNode)} for examples and more info. @param clazz a class or array type (without whitespace) @param type  the type node to check @return true if the second argument is not null and the type test matches @throws NullPointerException     if the class parameter is null @see #isA(Class, TypeNode)",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isA",
                    "method_signature": "static public boolean isA(java.lang.String, net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": "Checks whether the static type of the node is a subtype of the class identified by the given name. See {@link #isA(Class, TypeNode)} for examples and more info. @param canonicalName the canonical name of a class or array type (without whitespace) @param node          the type node to check @return true if the type test matches @throws NullPointerException     if the class name parameter is null @throws IllegalArgumentException if the class name parameter is not a valid java binary name,                                  eg it has type arguments @see #isA(Class, TypeNode)",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isA",
                    "method_signature": "static public boolean isA(java.lang.String, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isA",
                    "method_signature": "static public boolean isA(net.sourceforge.pmd.lang.java.types.JTypeMirror, net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "isDeclaredInClass",
                    "method_signature": "static public boolean isDeclaredInClass(java.lang.Class, net.sourceforge.pmd.lang.java.types.JMethodSig)",
                    "method_comment": "Returns true if the signature is that of a method declared in the given class. @param klass Class @param sig   Method signature to test @throws NullPointerException If any argument is null",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeTestUtil"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "TypeConversion",
            "class_package": "net.sourceforge.pmd.lang.java.types.TypeConversion",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/types/TypeConversion.java",
            "class_comment": "Utility class for type conversions, as defined in <a href=\"https://docs.oracle.com/javase/specs/jls/se10/html/jls-5.html\">JLS§5</a>.",
            "APIs_contained_in_class_count": 16,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "capture",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror capture(net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Perform capture conversion on the type t. This replaces wildcards with fresh type variables. Capture conversion is not applied recursively. Capture conversion on any type other than a parameterized type (§4.5) acts as an identity conversion (§5.1.1). @return The capture conversion of t",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "capture",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JClassType capture(net.sourceforge.pmd.lang.java.types.JClassType)",
                    "method_comment": "Perform capture conversion on the type t. This replaces wildcards with fresh type variables. Capture conversion is not applied recursively. Capture conversion on any type other than a parameterized type (§4.5) acts as an identity conversion (§5.1.1). @return The capture conversion of t",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "isWilcardParameterized",
                    "method_signature": "static public boolean isWilcardParameterized(net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Returns true if the type is a parameterized class type, which has wildcards as type arguments. Capture variables don't count.",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "unaryNumericPromotion",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror unaryNumericPromotion(net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Performs <a href=\"https://docs.oracle.com/javase/specs/jls/se9/html/jls-5.html#jls-5.6.1\">Unary numeric promotion (JLS§5.6.1)</a>. <p>This occurs in the following situations: <ul> <li>Each dimension expression in an array creation expression (§15.10.1) <li>The index expression in an array access expression (§15.10.3) <li>The operand of a unary plus operator + (§15.15.3) <li>The operand of a unary minus operator - (§15.15.4) <li>The operand of a bitwise complement operator ~ (§15.15.5) <li>Each operand, separately, of a shift operator &lt;&lt;, &gt;&gt;, or &gt;&gt;&gt; (§15.19). </ul> <p>Returns {@link TypeSystem#ERROR} if the given type is not a numeric type, {@link TypeSystem#UNKNOWN} if the type is unresolved.",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "binaryNumericPromotion",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror binaryNumericPromotion(net.sourceforge.pmd.lang.java.types.JTypeMirror, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "JLS§5.6.2 https://docs.oracle.com/javase/specs/jls/se9/html/jls-5.html#jls-5.6.2 Binary numeric promotion is performed on the operands of certain operators: <ul> <li>The multiplicative operators, /, and % (§15.17) <li>The addition and subtraction operators for numeric types + and - (§15.18.2) <li>The numerical comparison operators &lt;, &lt;=, &gt;, and &gt;= (§15.20.1) <li>The numerical equality operators == and != (§15.21.1) <li>The integer bitwise operators &amp;, ^, and | (§15.22.1) <li>In certain cases, the conditional operator ? : (§15.25) </ul> <p>Returns {@link TypeSystem#ERROR} if either of the parameters is not numeric. This DOES NOT care for unresolved types.",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "isConvertibleUsingBoxing",
                    "method_signature": "static public boolean isConvertibleUsingBoxing(net.sourceforge.pmd.lang.java.types.JTypeMirror, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Is t convertible to s by boxing/unboxing/widening conversion? Only t can undergo conversion.",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "isConvertibleInCastContext",
                    "method_signature": "static public boolean isConvertibleInCastContext(net.sourceforge.pmd.lang.java.types.JTypeMirror, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": "Is t convertible to s by boxing/unboxing conversion? Only t can undergo conversion.",
                    "method_class": "net.sourceforge.pmd.lang.java.types.TypeConversion"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "JavaRuleUtil",
            "class_package": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/rule/internal/JavaRuleUtil.java",
            "class_comment": "Utilities shared between rules.",
            "APIs_contained_in_class_count": 27,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isStringBuilderCtorOrAppend",
                    "method_signature": "static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isGetterCall",
                    "method_signature": "static public boolean isGetterCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "startsWithCamelCaseWord",
                    "method_signature": "static public boolean startsWithCamelCaseWord(java.lang.String, java.lang.String)",
                    "method_comment": "Returns true if the string has the given word as a strict prefix. There needs to be a camelcase word boundary after the prefix. <code> startsWithCamelCaseWord(\"getter\", \"get\") == false startsWithCamelCaseWord(\"get\", \"get\")    == false startsWithCamelCaseWord(\"getX\", \"get\")   == true </code> @param camelCaseString A string @param prefixWord      A prefix",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isNullCheck",
                    "method_signature": "static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.rule.internal.StablePathMatcher)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isNullCheck",
                    "method_signature": "static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol)",
                    "method_comment": "Returns true if the expression is a null check on the given variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isZeroChecked",
                    "method_signature": "static public boolean isZeroChecked(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Return true if the given expression is enclosed in a zero check. The expression must evaluate to a natural number (ie >= 0), so that {@code e < 1} actually means {@code e == 0}. @param e Expression",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isUtilityClass",
                    "method_signature": "static public boolean isUtilityClass(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration)",
                    "method_comment": "Returns true if the node is a utility class, according to this custom definition.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isExplicitUnusedVarName",
                    "method_signature": "static public boolean isExplicitUnusedVarName(java.lang.String)",
                    "method_comment": "Whether the name may be ignored by unused rules like UnusedAssignment.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "containsCamelCaseWord",
                    "method_signature": "static public boolean containsCamelCaseWord(java.lang.String, java.lang.String)",
                    "method_comment": "Returns true if the string has the given word as a word, not at the start. There needs to be a camelcase word boundary after the prefix. <code> containsCamelCaseWord(\"isABoolean\", \"Bool\") == false containsCamelCaseWord(\"isABoolean\", \"A\")    == true containsCamelCaseWord(\"isABoolean\", \"is\")   == error (not capitalized) </code> @param camelCaseString A string @param capitalizedWord A word, non-empty, capitalized @throws AssertionError If the word is empty or not capitalized",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isGetterOrSetterCall",
                    "method_signature": "static public boolean isGetterOrSetterCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isGetterOrSetter",
                    "method_signature": "static public boolean isGetterOrSetter(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isSerialPersistentFields",
                    "method_signature": "static public boolean isSerialPersistentFields(net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration)",
                    "method_comment": "Whether some variable declared by the given node is a serialPersistentFields (serialization-specific field).",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isSerialVersionUID",
                    "method_signature": "static public boolean isSerialVersionUID(net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration)",
                    "method_comment": "Whether some variable declared by the given node is a serialVersionUID (serialization-specific field).",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isSerializationReadObject",
                    "method_signature": "static public boolean isSerializationReadObject(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": "True if the method is a {@code readObject} method defined for serialization.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "hasSideEffect",
                    "method_signature": "static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set)",
                    "method_comment": "Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "getReferencedNode",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getReferencedNode(net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$ASTNamedReferenceExpr)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "hasLombokAnnotation",
                    "method_signature": "static public boolean hasLombokAnnotation(net.sourceforge.pmd.lang.java.ast.Annotatable)",
                    "method_comment": "Checks whether the given node is annotated with any lombok annotation. The node should be annotateable. @param node            the Annotatable node to check @return <code>true</code> if a lombok annotation has been found",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "isNullChecked",
                    "method_signature": "static public boolean isNullChecked(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if the expr is in a null check (its parent is a null check).",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "JavaPropertyUtil",
            "class_package": "net.sourceforge.pmd.lang.java.rule.internal.JavaPropertyUtil",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/rule/internal/JavaPropertyUtil.java",
            "class_comment": "",
            "APIs_contained_in_class_count": 11,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "ignoredAnnotationsDescriptor",
                    "method_signature": "static public net.sourceforge.pmd.properties.PropertyDescriptor<String>> ignoredAnnotationsDescriptor(java.util.Collection)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaPropertyUtil"
                },
                {
                    "method_name": "ignoredAnnotationsDescriptor",
                    "method_signature": "static public net.sourceforge.pmd.properties.PropertyDescriptor<String>> ignoredAnnotationsDescriptor([Ljava.lang.String;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.JavaPropertyUtil"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "TestFrameworksUtil",
            "class_package": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/rule/internal/TestFrameworksUtil.java",
            "class_comment": "Utilities for rules related to test frameworks (Junit, TestNG, etc).",
            "APIs_contained_in_class_count": 24,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isProbableAssertCall",
                    "method_signature": "static public boolean isProbableAssertCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isExpectAnnotated",
                    "method_signature": "static public boolean isExpectAnnotated(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": "Tells if the node contains a @Test annotation with an expected exception.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isCallOnAssertionContainer",
                    "method_signature": "static public boolean isCallOnAssertionContainer(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isTestClass",
                    "method_signature": "static public boolean isTestClass(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJUnit5NestedClass",
                    "method_signature": "static public boolean isJUnit5NestedClass(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isTestMethod",
                    "method_signature": "static public boolean isTestMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": "Returns true if this is either a JUnit test or a TestNG test.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isTestConfigurationMethod",
                    "method_signature": "static public boolean isTestConfigurationMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": "Returns true if this is a Before/setUp method or After/tearDown.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJunit4TestAnnotation",
                    "method_signature": "static public boolean isJunit4TestAnnotation(net.sourceforge.pmd.lang.java.ast.ASTAnnotation)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isExpectExceptionCall",
                    "method_signature": "static public boolean isExpectExceptionCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJUnit3Class",
                    "method_signature": "static public boolean isJUnit3Class(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration)",
                    "method_comment": "True if this is a {@code TestCase} class for Junit 3.",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJunit3MethodSignature",
                    "method_signature": "static public boolean isJunit3MethodSignature(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": "Does not check the class (use {@link #isJUnit3Class(ASTAnyTypeDeclaration)}).",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJUnit3Method",
                    "method_signature": "static public boolean isJUnit3Method(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJUnitMethod",
                    "method_signature": "static public boolean isJUnitMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": "True if this is a junit @Test method (or a junit 3 method).",
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJUnit4Method",
                    "method_signature": "static public boolean isJUnit4Method(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "isJUnit5Method",
                    "method_signature": "static public boolean isJUnit5Method(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ClassNamesUtil",
            "class_package": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/symbols/internal/asm/ClassNamesUtil.java",
            "class_comment": "When dealing with classes we have to handle a bunch of different kinds of names. From higher level to lower level: <ul> <li>Canonical name: {@code a.b.C.D} <li>Binary name: {@code a.b.C$D} <li>Internal name: {@code a/b/C$D} </ul> <p>Canonical names are on the Java language level. They are how you type a reference to a class from an another arbitrary class. Some classes may not even have one, eg local classes cannot be referenced from outside their scope. <p>Binary names lift the ambiguity between inner class selection and package name that exists in canonical names. They're more convenient to work with when loading classes. They're typically the kind of name you find when using reflective APIs. <p>Internal names are burned into class files are they allow getting a file path to the referenced class file just by appending {@code .class}. They are only useful at the level of class files, eg when using ASM. <p><i>Type descriptors</i> are another class of \"names\" that use internal names, but are more general, as they can represent all kinds of types. Eg the type descriptor for class {@code a.b.C.D} is {@code La/b/C$D;}, the one of {@code boolean} is {@code Z}, and the one of {@code boolean[]} is {@code [Z}. <p><i>Type signatures</i> are a superset of type descriptors that can also represent generic types. These need to be parsed when reading info from a class file.",
            "APIs_contained_in_class_count": 15,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getInternalName",
                    "method_signature": "static public java.lang.String getInternalName(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil"
                },
                {
                    "method_name": "classDescriptorToInternalName",
                    "method_signature": "static public java.lang.String classDescriptorToInternalName(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil"
                },
                {
                    "method_name": "classDescriptorToBinaryName",
                    "method_signature": "static public java.lang.String classDescriptorToBinaryName(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil"
                },
                {
                    "method_name": "getTypeDescriptor",
                    "method_signature": "static public java.lang.String getTypeDescriptor(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil"
                },
                {
                    "method_name": "internalToBinaryName",
                    "method_signature": "static public java.lang.String internalToBinaryName(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil"
                },
                {
                    "method_name": "binaryToInternal",
                    "method_signature": "static public java.lang.String binaryToInternal(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.asm.ClassNamesUtil"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "SymbolResolutionPass",
            "class_package": "net.sourceforge.pmd.lang.java.symbols.internal.ast.SymbolResolutionPass",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/symbols/internal/ast/SymbolResolutionPass.java",
            "class_comment": "Populates symbols on declaration nodes.",
            "APIs_contained_in_class_count": 11,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "traverse",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.symbols.SymbolResolver traverse(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit)",
                    "method_comment": "Traverse the given compilation unit, creating symbols on all {@link SymbolDeclaratorNode}s. @param processor Processor @param root      Root node @return A symbol resolver for all encountered type declarations.     This is used to avoid hitting the classloader for local declarations.",
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.ast.SymbolResolutionPass"
                },
                {
                    "method_name": "buildSymbolicAnnotations",
                    "method_signature": "static public org.pcollections.PSet<SymbolicValue$SymAnnot> buildSymbolicAnnotations(net.sourceforge.pmd.lang.ast.NodeStream)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.symbols.internal.ast.SymbolResolutionPass"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "JavaSemanticErrors",
            "class_package": "net.sourceforge.pmd.lang.java.symbols.table.internal.JavaSemanticErrors",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/symbols/table/internal/JavaSemanticErrors.java",
            "class_comment": "",
            "APIs_contained_in_class_count": 9,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "SymbolicValueHelper",
            "class_package": "net.sourceforge.pmd.lang.java.symbols.SymbolicValueHelper",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/symbols/SymbolicValueHelper.java",
            "class_comment": "Private helper for {@link SymbolicValue} and implementations. @author Clément Fournier",
            "APIs_contained_in_class_count": 9,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTForInit",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTForInit",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTForInit.java",
            "class_comment": "The initialization clause of a {@linkplain ASTForStatement for loop}. Note: ForInit nodes are necessary in the tree to differentiate them from the update clause. They just confer a contextual role to their child. <pre class=\"grammar\"> ForInit ::= {@link ASTLocalVariableDeclaration LocalVariableDeclaration} | {@link ASTStatementExpressionList StatementExpressionList} </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForInit"
                },
                {
                    "method_name": "getStatement",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getStatement()",
                    "method_comment": "Returns the statement nested within this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForInit"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForInit"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForInit"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "AstImplUtil",
            "class_package": "net.sourceforge.pmd.lang.java.ast.AstImplUtil",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/AstImplUtil.java",
            "class_comment": "KEEP PRIVATE @author Clément Fournier",
            "APIs_contained_in_class_count": 12,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getChildAs",
                    "method_signature": "static public T getChildAs(net.sourceforge.pmd.lang.java.ast.JavaNode, int, java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AstImplUtil"
                },
                {
                    "method_name": "getFirstSegment",
                    "method_signature": "static public java.lang.String getFirstSegment(java.lang.String, char)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AstImplUtil"
                },
                {
                    "method_name": "getLastSegment",
                    "method_signature": "static public java.lang.String getLastSegment(java.lang.String, char)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AstImplUtil"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTPatternExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[AtLeastOneChild, LeftRecursiveNode, ASTPrimaryExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTPatternExpression.java",
            "class_comment": "Wraps a {@link ASTPattern} node but presents the interface of {@link ASTExpression}. This is only used in the following contexts: <ul> <li>As the right-hand side of {@link BinaryOp#INSTANCEOF instanceof expressions}. </ul> <pre class=\"grammar\"> PatternExpression ::= {@link ASTPattern Pattern} </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getPattern",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTPattern getPattern()",
                    "method_comment": "Gets the wrapped pattern.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": "Returns 0, patterns can never be parenthesized.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns false, patterns can never be parenthesized.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPatternExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTAssignmentExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[InternalInterfaces.BinaryExpressionLike]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAssignmentExpression.java",
            "class_comment": "Represents an assignment expression. <pre class=\"grammar\"> AssignmentExpression ::= {@link ASTAssignableExpr AssignableExpr} {@link AssignmentOp} {@link ASTExpression Expression} </pre>",
            "APIs_contained_in_class_count": 88,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isCompound",
                    "method_signature": "public boolean isCompound()",
                    "method_comment": "Returns whether this is a compound assignment (any operator except \"=\").",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getOperator",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.InternalInterfaces$OperatorLike getOperator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getOperator",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AssignmentOp getOperator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getLeftOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()",
                    "method_comment": "Returns the left-hand side, ie the expression being assigned to.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getLeftOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getLeftOperand()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getRightOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()",
                    "method_comment": "Returns the right-hand side operand.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$BinaryExpressionLike"
                }
            ]
        },
        {
            "class_name": "JavaNode",
            "class_package": "net.sourceforge.pmd.lang.java.ast.JavaNode",
            "class_extends": "[JjtreeNode<JavaNode>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/JavaNode.java",
            "class_comment": "Root interface for all Nodes of the Java AST.",
            "APIs_contained_in_class_count": 63,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": "Returns the type system with which this node was created. This is the object responsible for representing types in the compilation unit.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": "Returns the symbol table for the program point represented by this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                }
            ]
        },
        {
            "class_name": "ASTTypeParameters",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameters",
            "class_extends": "[ASTNonEmptyList<ASTTypeParameter>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTypeParameters.java",
            "class_comment": "Represents a list of type parameters. <pre class=\"grammar\"> TypeParameters ::= \"&lt;\" {@linkplain ASTTypeParameter TypeParameter} ( \",\" {@linkplain ASTTypeParameter TypeParameter} ) \"&gt;\" </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameters"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTModuleUsesDirective",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleUsesDirective",
            "class_extends": "[AbstractJavaNode, ASTModuleDirective]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleUsesDirective.java",
            "class_comment": "A \"uses\" directive of a {@linkplain ASTModuleDeclaration module declaration}. <pre class=\"grammar\"> ModuleUsesDirective ::= \"uses\" &lt;PACKAGE_NAME&gt; \";\" </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getService",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getService()",
                    "method_comment": "Returns the node representing the consumed service.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleUsesDirective"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTList",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[Iterable<N>]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTList.java",
            "class_comment": "Common supertype for nodes that act as a kind of list of other nodes. This is mainly provided as a way to share API and not a structural distinction in the AST. <p>This node can be converted to a list with {@link #toList()}. Often these nodes are optional in their parent, and so might be null. The method {@link ASTList#orEmpty(ASTList) orEmpty} helps in such cases. For example <pre>{@code // This will throw NullPointerException if the class is not generic. for (ASTTypeParameter tparam : classDecl.getTypeParameters()) { } }</pre> Instead of explicitly checking for null, which is annoying, use the following idiom: <pre>{@code for (ASTTypeParameter tparam : ASTList.orEmpty(classDecl.getTypeParameters())) { } }</pre> <p>Note that though it is usually the case that the node lists all its children, there is no guarantee about that. For instance, {@link ASTFormalParameters} excludes the {@linkplain ASTReceiverParameter receiver parameter}. @param <N> Type of node contained within this list node",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTNonEmptyList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTList$ASTNonEmptyList",
            "class_extends": "[ASTMaybeEmptyListOf<T>]",
            "class_implements": "[AtLeastOneChildOfType<T>]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTList.java",
            "class_comment": "Super type fornonempty lists thatonly have nodes of type {@code <T>} as a child.",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTMaybeEmptyListOf",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf",
            "class_extends": "[ASTList<T>]",
            "class_implements": "[AllChildrenAreOfType<T>]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTList.java",
            "class_comment": "Super type for lists thatonly have nodes of type {@code <T>} as a child.",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTTypeParameter",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter",
            "class_extends": "[AbstractTypedSymbolDeclarator<JTypeParameterSymbol>]",
            "class_implements": "[Annotatable]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTypeParameter.java",
            "class_comment": "Represents a type parameter declaration of a method, constructor, class or interface declaration. <p>The bound of a type parameter may only be an upper bound (\"extends\"). The bound is represented by the type node directly. The type node may be an {@link ASTIntersectionType intersection type}. <pre class=\"grammar\"> TypeParameter ::= {@link ASTAnnotation Annotation} &lt;IDENTIFIER&gt; ( \"extends\" {@link ASTReferenceType Type} )? </pre> @see <a href=\"https://docs.oracle.com/javase/specs/jls/se9/html/jls-4.html#jls-4.4\">JLS</a>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the type variable introduced by this declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getOwner",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode getOwner()",
                    "method_comment": "Returns the node to which this type parameter belongs.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeVar getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "hasTypeBound",
                    "method_signature": "public boolean hasTypeBound()",
                    "method_comment": "Returns true if this type parameter is bounded, in which case {@link #getTypeBoundNode()} doesn't return {@code null}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getTypeBoundNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeBoundNode()",
                    "method_comment": "Returns the type bound node of this parameter, or null if it is not bounded.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeParameter"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTArgumentList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArgumentList",
            "class_extends": "[ASTMaybeEmptyListOf<ASTExpression>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArgumentList.java",
            "class_comment": "The argument list of a {@linkplain ASTMethodCall method}, {@linkplain ASTConstructorCall constructor call}, or {@linkplain ASTExplicitConstructorInvocation explicit constructor invocation}. <pre class=\"grammar\"> ArgumentList ::= \"(\" ( {@link ASTExpression Expression} ( \",\" {@link ASTExpression Expression}) )? \")\" </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArgumentList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTTemplateExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTemplateExpression.java",
            "class_comment": "This is a Java 21 Preview feature. <pre class=\"grammar\"> TemplateExpression ::= ({@link ASTVariableAccess VariableAccess} | {@link ASTFieldAccess FieldAccess})({@link ASTTemplate Template} | {@link ASTStringLiteral StringLiteral}) </pre> @see <a href=\"https://openjdk.org/jeps/430\">JEP 430: String Templates (Preview)</a>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getTemplateProcessor",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getTemplateProcessor()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getTemplateArgument",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getTemplateArgument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "isStringTemplate",
                    "method_signature": "public boolean isStringTemplate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTWhileStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTWhileStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[ASTLoopStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTWhileStatement.java",
            "class_comment": "Represents a {@code while} loop. <pre class=\"grammar\"> WhileStatement ::= \"while\" \"(\" {@linkplain ASTExpression Expression} \")\" {@linkplain ASTStatement Statement} </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWhileStatement"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": "Returns the node that represents the guard of this loop. This may be any expression of type boolean.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWhileStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWhileStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWhileStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody()",
                    "method_comment": "Returns the statement that represents the body of this loop.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLoopStatement"
                }
            ]
        },
        {
            "class_name": "ASTTryStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTryStatement.java",
            "class_comment": "Try statement node. <pre class=\"grammar\"> TryStatement ::= \"try\" {@link ASTResourceList ResourceList}?{@link ASTBlock Block}{@link ASTCatchClause CatchClause}{@link ASTFinallyClause FinallyClause}? </pre>",
            "APIs_contained_in_class_count": 78,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getResources",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTResourceList getResources()",
                    "method_comment": "Returns the node for the resource list. This is null if this is not a try-with-resources.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": "Returns the body of this try statement.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "getCatchClauses",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTCatchClause> getCatchClauses()",
                    "method_comment": "Returns the catch statement nodes of this try statement. If there are none, returns an empty list.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "isTryWithResources",
                    "method_signature": "public boolean isTryWithResources()",
                    "method_comment": "Returns true if this node is a try-with-resources, in which case it has a ResourceSpecification child node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "getFinallyClause",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause()",
                    "method_comment": "Returns the {@code finally} clause of this try statement, if any. @return The finally statement, or null if there is none",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTryStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTSwitchLabel",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[Iterable<ASTExpression>]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSwitchLabel.java",
            "class_comment": "Represents either a {@code case} or {@code default} label inside a {@linkplain ASTSwitchStatement switch statement} or {@linkplain ASTSwitchExpression expression}. Since Java 14, labels may have several expressions. <pre class=\"grammar\"> SwitchLabel ::=\"case\" {@linkplain ASTExpression Expression} (\",\" {@linkplain ASTExpression Expression} )| \"case\" \"null [ \",\" \"default\" ]| \"case\" ( {@linkplain ASTTypePattern TypePattern} | {@linkplain ASTRecordPattern RecordPattern} )| \"default\" </pre> <p>Note: case null and the case patterns are a Java 21 language feature</p> @see <a href=\"https://openjdk.org/jeps/441\">JEP 441: Pattern Matching for switch</a> @see <a href=\"https://openjdk.org/jeps/432\">JEP 432: Record Patterns (Second Preview)</a>",
            "APIs_contained_in_class_count": 78,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTExpression> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel"
                },
                {
                    "method_name": "isDefault",
                    "method_signature": "public boolean isDefault()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel"
                },
                {
                    "method_name": "getExprList",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTExpression> getExprList()",
                    "method_comment": "Returns the expressions of this label, or an empty list if this is the default label. This may contain {@linkplain  ASTPatternExpression pattern expressions} to represent patterns.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTSuperExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTPrimaryExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSuperExpression.java",
            "class_comment": "The \"super\" keyword. Technically not an expression but it's easier to analyse that way. <pre class=\"grammar\"> SuperExpression ::= \"super\" | {@link ASTClassOrInterfaceType TypeName} \".\" \"super\" </pre>",
            "APIs_contained_in_class_count": 83,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getQualifier()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSuperExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTArrayType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[ASTReferenceType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayType.java",
            "class_comment": "Represents an array type. <pre class=\"grammar\"> ArrayType ::= {@link ASTPrimitiveType PrimitiveType} {@link ASTArrayDimensions ArrayDimensions} | {@link ASTClassOrInterfaceType ClassOrInterfaceType} {@link ASTArrayDimensions ArrayDimensions} </pre>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getDimensions",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions getDimensions()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getElementType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getElementType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTUnnamedPattern",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTUnnamedPattern",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTPattern]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTUnnamedPattern.java",
            "class_comment": "An unnamed pattern, a Java 21 Preview language feature. <pre class=\"grammar\"> UnnamedPattern ::= \"_\" </pre> @see <a href=\"https://openjdk.org/jeps/443\">JEP 443: Unnamed patterns and variables (Preview)</a> (Java 21)",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnnamedPattern"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnnamedPattern"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnnamedPattern"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnnamedPattern"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTExplicitConstructorInvocation",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[InvocationNode, ASTStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTExplicitConstructorInvocation.java",
            "class_comment": "An explicit constructor invocation, occurring at the start of a {@linkplain ASTConstructorDeclaration constructor declaration}. <p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-8.8.7.1\">JLS 8.8.7.1</a>. <pre class=\"grammar\"> ExplicitConstructorInvocation ::= {@link ASTTypeArguments TypeArguments}? \"this\" {@link ASTArgumentList ArgumentList} \";\" | {@link ASTTypeArguments TypeArguments}? \"super\" {@link ASTArgumentList ArgumentList} \";\" | {@link ASTExpression Expression} \".\" {@link ASTTypeArguments TypeArguments}? \"super\" {@link ASTArgumentList ArgumentList} \";\" </pre>",
            "APIs_contained_in_class_count": 86,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isQualified",
                    "method_signature": "public boolean isQualified()",
                    "method_comment": "Returns true if this is a qualified superclass constructor invocation. They allow a subclass constructor to explicitly specify the newly created object's immediately enclosing instance with respect to the direct superclass (§8.1.3). This may be necessary when the superclass is an inner class.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "isThis",
                    "method_signature": "public boolean isThis()",
                    "method_comment": "Returns true if this statement calls a constructor of the same class. The JLS calls that an <i>alternate constructor invocation</i>.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "isSuper",
                    "method_signature": "public boolean isSuper()",
                    "method_comment": "Returns true if this statement calls a constructor of the direct superclass. The JLS calls that a <i>superclass constructor invocation</i>.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()",
                    "method_comment": "Returns the qualifying expression if this is a {@linkplain #isQualified() qualified superclass constructor invocation}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getOverloadSelectionInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.OverloadSelectionResult getOverloadSelectionInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getExplicitTypeArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeArguments getExplicitTypeArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getArgumentCount",
                    "method_signature": "public int getArgumentCount()",
                    "method_comment": "Returns the number of arguments of the called constructor.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "getMethodType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType()",
                    "method_comment": "Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InvocationNode"
                },
                {
                    "method_name": "getMethodName",
                    "method_signature": "public java.lang.String getMethodName()",
                    "method_comment": "Returns the name of the called method. If this is a constructor call, returns {@link JConstructorSymbol#CTOR_NAME}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.MethodUsage"
                }
            ]
        },
        {
            "class_name": "ASTWildcardType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[ASTReferenceType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTWildcardType.java",
            "class_comment": "Represents a wildcard type. Those can only occur when nested in an {@link ASTTypeArguments} node. <pre class=\"grammar\"> WildcardType ::= \"?\" ( (\"extends\" | \"super\") {@link ASTReferenceType ReferenceType} )? </pre>",
            "APIs_contained_in_class_count": 90,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "isUpperBound",
                    "method_signature": "public boolean isUpperBound()",
                    "method_comment": "Return true if this is an upper type bound, e.g. {@code <? extends Integer>}, or the unbounded wildcard {@code <?>}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "getTypeBoundNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTReferenceType getTypeBoundNode()",
                    "method_comment": "Returns the type node representing the bound, e.g. the {@code Node} in {@code <? super Node>}, or null in the unbounded wildcard {@code <?>}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "isLowerBound",
                    "method_signature": "public boolean isLowerBound()",
                    "method_comment": "Returns true if this is a lower type bound, e.g. in {@code <? super Node>}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTWildcardType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTReturnStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTReturnStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTReturnStatement.java",
            "class_comment": "A return statement in a method or constructor body. <pre class=\"grammar\"> ReturnStatement ::= \"return\" {@link ASTExpression Expression}? \";\" </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReturnStatement"
                },
                {
                    "method_name": "getExpr",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()",
                    "method_comment": "Returns the returned expression, or null if this is a simple return.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReturnStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReturnStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReturnStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTArrayAccess",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[QualifiableExpression, ASTAssignableExpr]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayAccess.java",
            "class_comment": "An array access expression. <pre class=\"grammar\"> ArrayAccess ::={@link ASTExpression Expression} \"[\"{@link ASTExpression Expression} \"]\" </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()",
                    "method_comment": "Returns the expression to the left of the \"[\". This can never be a {@linkplain ASTTypeExpression type}, and is never {@linkplain ASTAmbiguousName ambiguous}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getIndexExpression",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getIndexExpression()",
                    "method_comment": "Returns the expression within the brackets.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAccess"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getAccessType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$AccessType getAccessType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr"
                }
            ]
        },
        {
            "class_name": "ASTLocalClassStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTLocalClassStatement.java",
            "class_comment": "A statement that contains a local class declaration. Note that this is not a declaration itself. <pre class=\"grammar\"> LocalClassStatement ::= {@link ASTAnyTypeDeclaration TypeDeclaration} </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement"
                },
                {
                    "method_name": "getDeclaration",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getDeclaration()",
                    "method_comment": "Returns the contained declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTDefaultValue",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTDefaultValue",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTDefaultValue.java",
            "class_comment": "Represents the {@code default} clause of an {@linkplain ASTMethodDeclaration annotation method}. <pre class=\"grammar\"> DefaultValue ::= \"default\" {@link ASTMemberValue MemberValue} </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDefaultValue"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDefaultValue"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDefaultValue"
                },
                {
                    "method_name": "getConstant",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTMemberValue getConstant()",
                    "method_comment": "Returns the constant value nested in this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDefaultValue"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTEnumConstant",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[Annotatable, JavadocCommentOwner, ASTBodyDeclaration, AccessNode, InvocationNode, InternalInterfaces.VariableIdOwner]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTEnumConstant.java",
            "class_comment": "Represents an enum constant declaration within an {@linkplain ASTEnumDeclaration enum type declaration}. <pre class=\"grammar\"> EnumConstant ::= {@link ASTModifierList AnnotationList} {@link ASTVariableDeclaratorId VariableDeclaratorId} {@linkplain ASTArgumentList ArgumentList}? {@linkplain ASTAnonymousClassDeclaration AnonymousClassDeclaration}? </pre>",
            "APIs_contained_in_class_count": 112,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the enum constant.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "isAnonymousClass",
                    "method_signature": "public boolean isAnonymousClass()",
                    "method_comment": "Returns true if this enum constant defines a body, which is compiled like an anonymous class.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getOverloadSelectionInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.OverloadSelectionResult getOverloadSelectionInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getExplicitTypeArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeArguments getExplicitTypeArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getAnonymousClass",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration getAnonymousClass()",
                    "method_comment": "Returns the anonymous class declaration, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumConstant"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getMethodType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType()",
                    "method_comment": "Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InvocationNode"
                },
                {
                    "method_name": "getMethodName",
                    "method_signature": "public java.lang.String getMethodName()",
                    "method_comment": "Returns the name of the called method. If this is a constructor call, returns {@link JConstructorSymbol#CTOR_NAME}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.MethodUsage"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTStringLiteral",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral",
            "class_extends": "[AbstractLiteral]",
            "class_implements": "[ASTLiteral]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTStringLiteral.java",
            "class_comment": "Represents a string literal. The image of this node is the literal as it appeared in the source ({@link #getText()}). {@link #getConstValue()} allows to recover the actual runtime value, by processing escapes.",
            "APIs_contained_in_class_count": 96,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "length",
                    "method_signature": "public int length()",
                    "method_comment": "Length of the constant value in characters.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": "True if the constant value is empty. Does not necessarily compute the constant value.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.String getConstValue()",
                    "method_comment": "Returns the value without delimiters and unescaped.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "isTextBlock",
                    "method_signature": "public boolean isTextBlock()",
                    "method_comment": "Returns true if this is a text block (currently Java 13 preview feature).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "toPrintableString",
                    "method_signature": "public java.lang.String toPrintableString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStringLiteral"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isStringLiteral",
                    "method_signature": "public boolean isStringLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTStringLiteral string literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isCharLiteral",
                    "method_signature": "public boolean isCharLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTCharLiteral character literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNullLiteral",
                    "method_signature": "public boolean isNullLiteral()",
                    "method_comment": "Returns true if this is the {@linkplain ASTNullLiteral null literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "public boolean isBooleanLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNumericLiteral",
                    "method_signature": "public boolean isNumericLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral numeric literal} of any kind.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isIntLiteral",
                    "method_signature": "public boolean isIntLiteral()",
                    "method_comment": "Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isLongLiteral",
                    "method_signature": "public boolean isLongLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isFloatLiteral",
                    "method_signature": "public boolean isFloatLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral float literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isDoubleLiteral",
                    "method_signature": "public boolean isDoubleLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral double literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                }
            ]
        },
        {
            "class_name": "ASTSynchronizedStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSynchronizedStatement.java",
            "class_comment": "A synchronized statement. <pre class=\"grammar\"> SynchronizedStatement ::= \"synchronized\" \"(\" {@link ASTExpression Expression} \")\" {@link ASTBlock Block} </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": "Returns the body of this statement.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement"
                },
                {
                    "method_name": "getLockExpression",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getLockExpression()",
                    "method_comment": "Returns the expression evaluating to the lock object.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTEmptyDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTTopLevelDeclaration, ASTBodyDeclaration]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTEmptyDeclaration.java",
            "class_comment": "An empty declaration (useless). This is kept separate from {@link ASTStatement} because they don't occur in the same syntactic contexts. <pre class=\"grammar\"> EmptyDeclaration ::= \";\" </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTBooleanLiteral",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral",
            "class_extends": "[AbstractLiteral]",
            "class_implements": "[ASTLiteral]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTBooleanLiteral.java",
            "class_comment": "The boolean literal, either \"true\" or \"false\".",
            "APIs_contained_in_class_count": 93,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isTrue",
                    "method_signature": "public boolean isTrue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Boolean getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isStringLiteral",
                    "method_signature": "public boolean isStringLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTStringLiteral string literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isCharLiteral",
                    "method_signature": "public boolean isCharLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTCharLiteral character literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNullLiteral",
                    "method_signature": "public boolean isNullLiteral()",
                    "method_comment": "Returns true if this is the {@linkplain ASTNullLiteral null literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "public boolean isBooleanLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNumericLiteral",
                    "method_signature": "public boolean isNumericLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral numeric literal} of any kind.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isIntLiteral",
                    "method_signature": "public boolean isIntLiteral()",
                    "method_comment": "Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isLongLiteral",
                    "method_signature": "public boolean isLongLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isFloatLiteral",
                    "method_signature": "public boolean isFloatLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral float literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isDoubleLiteral",
                    "method_signature": "public boolean isDoubleLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral double literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                }
            ]
        },
        {
            "class_name": "ASTCompilationUnit",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[RootNode, GenericNode<JavaNode>, JjtreeNode<JavaNode>, JavaNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTCompilationUnit.java",
            "class_comment": "The root node of all Java ASTs. <pre class=\"grammar\"> CompilationUnit ::= OrdinaryCompilationUnit | UnnamedClassCompilationUnit | ModularCompilationUnit RegularCompilationUnit ::= {@linkplain ASTPackageDeclaration PackageDeclaration}? {@linkplain ASTImportDeclaration ImportDeclaration} {@linkplain ASTAnyTypeDeclaration TypeDeclaration} UnnamedClassCompilationUnit ::= {@linkplain ASTImportDeclaration ImportDeclaration} {@linkplain ASTFieldDeclaration FieldDeclaration} {@linkplain ASTMethodDeclaration MethodDeclaration} {@linkplain ASTBodyDeclaration BodyDeclaration} ModularCompilationUnit ::= {@linkplain ASTImportDeclaration ImportDeclaration} {@linkplain ASTModuleDeclaration ModuleDeclaration} </pre> @see <a href=\"https://openjdk.org/jeps/445\">JEP 445: Unnamed Classes and Instance Main Methods (Preview)</a> (Java 21) @see #isUnnamedClass()",
            "APIs_contained_in_class_count": 79,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the package name of this compilation unit. If there is no package declaration, then returns the empty string.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<ASTCompilationUnit> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getComments",
                    "method_signature": "public java.util.List<JavaComment> getComments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getPackageDeclaration",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration getPackageDeclaration()",
                    "method_comment": "Returns the package declaration, if there is one.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "isUnnamedClass",
                    "method_signature": "public boolean isUnnamedClass()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getTypeDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnyTypeDeclaration> getTypeDeclarations()",
                    "method_comment": "Returns the top-level type declarations declared in this compilation unit. This may be empty, eg if this a package-info.java, or a modular compilation unit (but ordinary compilation units may also be empty).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getModuleDeclaration",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration getModuleDeclaration()",
                    "method_comment": "Returns the module declaration, if this is a modular compilation unit.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTThrowsList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTThrowsList",
            "class_extends": "[ASTNonEmptyList<ASTClassOrInterfaceType>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTThrowsList.java",
            "class_comment": "Throws clause of an {@link ASTConstructorDeclaration} or {@link ASTMethodDeclaration}. <pre class=\"grammar\"> ThrowsList ::= \"throws\" {@link ASTClassOrInterfaceType ClassType} (\",\" {@link ASTClassOrInterfaceType ClassType}) </pre>",
            "APIs_contained_in_class_count": 88,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getOwner",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration getOwner()",
                    "method_comment": "Returns the method or constructor that owns this throws clause.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThrowsList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThrowsList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTVariableDeclaratorId",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId",
            "class_extends": "[AbstractTypedSymbolDeclarator<JVariableSymbol>]",
            "class_implements": "[AccessNode, FinalizableNode, SymbolDeclaratorNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTVariableDeclaratorId.java",
            "class_comment": null,
            "APIs_contained_in_class_count": 123,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isEnumConstant",
                    "method_signature": "public boolean isEnumConstant()",
                    "method_comment": "Returns true if this node declares an enum constant.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isField",
                    "method_signature": "public boolean isField()",
                    "method_comment": "Returns true if this node declares a field from a regular {@link ASTFieldDeclaration}. This returns false for enum constants (use {@link JVariableSymbol#isField() getSymbol().isField()} if you want that).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": "@deprecated Use {@link #getName()}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getInitializer",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getInitializer()",
                    "method_comment": "Returns the initializer of the variable, or null if it doesn't exist.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Determines the type node of this variable id, that is, the type node belonging to the variable declaration of this node (either a FormalParameter, LocalVariableDeclaration or FieldDeclaration). <p>The type of the returned node is not necessarily the type of this node. See {@link #getType()} for an explanation. @return the type node, or {@code null} if there is no explicit type,     e.g. if {@link #isTypeInferred()} returns true.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getExtraDimensions",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions getExtraDimensions()",
                    "method_comment": "Returns the extra array dimensions associated with this variable. For example in the declaration {@code int a[]}, {@link #getTypeNode()} returns {@code int}, and this method returns the dimensions that follow the variable ID. Returns null if there are no such dimensions.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getVariableName",
                    "method_signature": "public java.lang.String getVariableName()",
                    "method_comment": "Returns the name of the variable. @deprecated Use {@link #getName()}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isPatternBinding",
                    "method_signature": "public boolean isPatternBinding()",
                    "method_comment": "Returns true if this is a binding variable in a {@linkplain ASTPattern pattern}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isLambdaParameter",
                    "method_signature": "public boolean isLambdaParameter()",
                    "method_comment": "Returns true if this node declares a formal parameter for a lambda expression. In that case, the type of this parameter is not necessarily inferred, see {@link #isTypeInferred()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isResourceDeclaration",
                    "method_signature": "public boolean isResourceDeclaration()",
                    "method_comment": "Returns true if this declarator id declares a resource in a try-with-resources statement.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isForeachVariable",
                    "method_signature": "public boolean isForeachVariable()",
                    "method_comment": "Returns true if this node is a variable declared in a {@linkplain ASTForeachStatement foreach loop}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getLocalUsages",
                    "method_signature": "public java.util.List<ASTAssignableExpr$ASTNamedReferenceExpr> getLocalUsages()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "hasArrayType",
                    "method_signature": "public boolean hasArrayType()",
                    "method_comment": "Returns true if the declared variable has an array type.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isExceptionBlockParameter",
                    "method_signature": "public boolean isExceptionBlockParameter()",
                    "method_comment": "Returns true if this nodes declares an exception parameter in a {@code catch} statement.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isFormalParameter",
                    "method_signature": "public boolean isFormalParameter()",
                    "method_comment": "Returns true if this node declares a formal parameter for a method declaration or a lambda expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isRecordComponent",
                    "method_signature": "public boolean isRecordComponent()",
                    "method_comment": "Returns true if this node declares a record component. The symbol born by this node is the symbol of the corresponding field (not the formal parameter of the record constructor).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isLocalVariable",
                    "method_signature": "public boolean isLocalVariable()",
                    "method_comment": "Returns true if this node declares a local variable from within a regular {@link ASTLocalVariableDeclaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isForLoopVariable",
                    "method_signature": "public boolean isForLoopVariable()",
                    "method_comment": "Returns true if this node is a variable declared in the init clause of a {@linkplain ASTForStatement for loop}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "isTypeInferred",
                    "method_signature": "public boolean isTypeInferred()",
                    "method_comment": "Returns true if the declared variable's type is inferred by the compiler. In Java 8, this can happen if it's in a formal parameter of a lambda with an inferred type (e.g. {@code (a, b) -> a + b}). Since Java 10, the type of local variables can be inferred too, e.g. {@code var i = 2;}. <p>This method returns true for declarator IDs in those contexts, in which case {@link #getTypeNode()} returns {@code null}, since the type node is absent.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getTypeNameNode",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getTypeNameNode()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTConstructorCall",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall",
            "class_extends": "[AbstractInvocationExpr]",
            "class_implements": "[QualifiableExpression, LeftRecursiveNode, ASTPrimaryExpression, InvocationNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTConstructorCall.java",
            "class_comment": "A class instance creation expression. Represents both {@linkplain #isQualifiedInstanceCreation() qualified} and unqualified instance creation. May declare an anonymous class body. <pre class=\"grammar\"> ConstructorCall ::= UnqualifiedAlloc | {@link ASTExpression Expression} \".\" UnqualifiedAlloc UnqualifiedAlloc::=\"new\" {@link ASTTypeArguments TypeArguments}? {@link ASTClassOrInterfaceType ClassOrInterfaceType} {@link ASTArgumentList ArgumentList} {@link ASTAnonymousClassDeclaration AnonymousClassDeclaration}? </pre>",
            "APIs_contained_in_class_count": 93,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isAnonymousClass",
                    "method_signature": "public boolean isAnonymousClass()",
                    "method_comment": "Returns true if this expression defines a body, which is compiled to an anonymous class. If this method returns false.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "isQualifiedInstanceCreation",
                    "method_signature": "public boolean isQualifiedInstanceCreation()",
                    "method_comment": "Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getAnonymousClassDeclaration",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration getAnonymousClassDeclaration()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()",
                    "method_comment": "Returns the outer instance expression, if this is a {@linkplain #isQualifiedInstanceCreation() qualified} constructor call. Otherwise returns null. This can never be a {@linkplain ASTTypeExpression type expression}, and is never {@linkplain ASTAmbiguousName ambiguous}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "usesDiamondTypeArgs",
                    "method_signature": "public boolean usesDiamondTypeArgs()",
                    "method_comment": "Returns true if type arguments to the constructed instance's type are inferred.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()",
                    "method_comment": "Returns the type node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getOverloadSelectionInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.OverloadSelectionResult getOverloadSelectionInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getExplicitTypeArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeArguments getExplicitTypeArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorCall"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getMethodType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType()",
                    "method_comment": "Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InvocationNode"
                },
                {
                    "method_name": "getMethodName",
                    "method_signature": "public java.lang.String getMethodName()",
                    "method_comment": "Returns the name of the called method. If this is a constructor call, returns {@link JConstructorSymbol#CTOR_NAME}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.MethodUsage"
                }
            ]
        },
        {
            "class_name": "ASTArrayDimensions",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions",
            "class_extends": "[ASTNonEmptyList<ASTArrayTypeDim>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayDimensions.java",
            "class_comment": "Represents array type dimensions. This node may occur in several contexts: <ul> <li>In an {@linkplain ASTArrayType array type}</li> <li>As the {@linkplain ASTMethodDeclaration#getExtraDimensions() extra dimensions of a method declaration}, after the formal parameter list. For example: <pre>public int newIntArray(int length) [];</pre> </li> <li>As the {@linkplain ASTVariableDeclaratorId#getExtraDimensions() extra dimensions of a variable declarator id}, in a {@linkplain ASTVariableDeclarator variable declarator}. For example: <pre>public int a[], b[][];</pre> </li> </ul> <p>Some dimensions may be initialized with an expression, but only in the array type of an {@linkplain ASTArrayAllocation array allocation expression}. <pre class=\"grammar\"> ArrayDimensions ::= {@link ASTArrayTypeDim ArrayTypeDim}+ {@link ASTArrayDimExpr ArrayDimExpr} </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTAnnotationMemberList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList",
            "class_extends": "[ASTMaybeEmptyListOf<ASTMemberValuePair>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAnnotationMemberList.java",
            "class_comment": "Represents the list of {@link ASTMemberValuePair member-value pairs} in an {@link ASTAnnotation annotation}. <pre class=\"grammar\"> AnnotationMemberList ::= \"(\" {@link ASTMemberValuePair MemberValuePair} ( \",\" {@link ASTMemberValuePair MemberValuePair} ) \")\"| \"(\" {@link ASTMemberValuePair ValueShorthand} \")\"| \"(\" \")\" </pre>",
            "APIs_contained_in_class_count": 88,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getAttribute",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTMemberValue getAttribute(java.lang.String)",
                    "method_comment": "Returns the value of the attribute with the given name, returns null if no such attribute was mentioned. @param attrName Name of an attribute",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTEnumBody",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTEnumBody",
            "class_extends": "[ASTTypeBody, ASTList<ASTBodyDeclaration>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTEnumBody.java",
            "class_comment": "Body of an {@linkplain ASTEnumDeclaration enum declaration}. <pre class=\"grammar\"> EnumBody ::= \"{\"[ {@link ASTEnumConstant EnumConstant} ( \",\" ( {@link ASTEnumConstant EnumConstant} ) ][ \",\" ][ \";\" ( {@link ASTBodyDeclaration ClassOrInterfaceBodyDeclaration} ) ]\"}\" </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "hasSeparatorSemi",
                    "method_signature": "public boolean hasSeparatorSemi()",
                    "method_comment": "Returns true if the last enum constant has a trailing semi-colon. This semi is not optional when the enum has other members. For example: <pre>{@code enum Foo {   A(2);   Foo(int i) {...} } enum Bar { A; } enum Baz { ; } }</pre>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumBody"
                },
                {
                    "method_name": "hasTrailingComma",
                    "method_signature": "public boolean hasTrailingComma()",
                    "method_comment": "Returns true if the last enum constant has a trailing comma. For example: <pre>{@code enum Foo { A, B, C, } enum Bar { , } }</pre>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumBody"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTImportDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTTopLevelDeclaration]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTImportDeclaration.java",
            "class_comment": "Represents an import declaration in a Java file. <pre class=\"grammar\"> ImportDeclaration ::= \"import\" \"static\"? Name ( \".\" \"\" )? \";\" </pre> @see <a href=\"https://docs.oracle.com/javase/specs/jls/se9/html/jls-7.html#jls-7.5\">JLS 7.5</a>",
            "APIs_contained_in_class_count": 78,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the \"package\" prefix of the imported name. For type imports, including on-demand imports, this is really the package name of the imported type(s). For static imports, this is actually the qualified name of the enclosing type, including the type name.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": "Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "getImportedSimpleName",
                    "method_signature": "public java.lang.String getImportedSimpleName()",
                    "method_comment": "Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "getImportedName",
                    "method_signature": "public java.lang.String getImportedName()",
                    "method_comment": "Returns the full name of the import. For on-demand imports, this is the name without the final dot and asterisk.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "isImportOnDemand",
                    "method_signature": "public boolean isImportOnDemand()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTModuleRequiresDirective",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleRequiresDirective",
            "class_extends": "[AbstractJavaNode, ASTModuleDirective]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleRequiresDirective.java",
            "class_comment": "A \"requires\"directive of a {@linkplain ASTModuleDeclaration module declaration}. <pre class=\"grammar\"> ModuleRequiresDirective ::= \"requires\" ( \"transitive\" | \"static\" )? {@linkplain ASTModuleName ModuleName} \";\" </pre>",
            "APIs_contained_in_class_count": 76,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleRequiresDirective"
                },
                {
                    "method_name": "isTransitive",
                    "method_signature": "public boolean isTransitive()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleRequiresDirective"
                },
                {
                    "method_name": "getRequiredModule",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModuleName getRequiredModule()",
                    "method_comment": "Returns the name of the required module.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleRequiresDirective"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTInfixExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[AtLeastOneChild, BinaryExpressionLike]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTInfixExpression.java",
            "class_comment": "Represents a binary infix expression. {@linkplain ASTAssignmentExpression Assignment expressions} are not represented by this node, because they're right-associative. <p>This node is used to represent expressions of different precedences. The {@linkplain BinaryOp operator} is used to differentiate those expressions. <pre class=\"grammar\"> InfixExpression ::= {@link ASTExpression Expression} {@link BinaryOp} {@link ASTExpression Expression} </pre> <p>Binary expressions are all left-associative, and are parsed left-recursively. For example, the expression {@code 1 2 3 % 4} parses as the following tree: <figure> <img src=\"doc-files/binaryExpr_70x.svg\" /> </figure> <p>In PMD 6.0.x, it would have parsed into the tree: <figure> <img src=\"doc-files/binaryExpr_60x.svg\" /> </figure>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "setImage",
                    "method_signature": "public void setImage(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getOperator",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.InternalInterfaces$OperatorLike getOperator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getOperator",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.BinaryOp getOperator()",
                    "method_comment": "Returns the operator.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getRightOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()",
                    "method_comment": "Returns the right-hand side operand. <p>If this is an {@linkplain BinaryOp#INSTANCEOF instanceof expression}, then the right operand is a {@linkplain ASTTypeExpression TypeExpression}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInfixExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getLeftOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getLeftOperand()",
                    "method_comment": "Returns the left-hand-side operand.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$BinaryExpressionLike"
                }
            ]
        },
        {
            "class_name": "ASTMemberValuePair",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTMemberValuePair.java",
            "class_comment": "Represents a single pair of member name to value in an annotation. This node also represents the shorthand syntax, see {@link #isShorthand()}. <pre class=\"grammar\"> MemberValuePair ::= &lt;IDENTIFIER&gt; \"=\" {@linkplain ASTMemberValue MemberValue} ValueShorthand::= {@linkplain ASTMemberValue MemberValue} </pre>",
            "APIs_contained_in_class_count": 76,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the member set by this pair. This returns {@code \"value\"} if this is a shorthand declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair"
                },
                {
                    "method_name": "getValue",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTMemberValue getValue()",
                    "method_comment": "Returns the value of the member set by this pair.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair"
                },
                {
                    "method_name": "isShorthand",
                    "method_signature": "public boolean isShorthand()",
                    "method_comment": "Returns true if this is a shorthand for the {@code value} attribute. For example, {@code @A(\"v\")} has exactly the same structure as {@code @A(value = \"v\")}, except this attribute returns true for the first one only.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValuePair"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTArrayTypeDim",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[Annotatable]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayTypeDim.java",
            "class_comment": "Represents an array dimension in an {@linkplain ASTArrayType array type}, or in an {@linkplain ASTArrayAllocation array allocation expression}. <p>{@linkplain ASTArrayDimExpr ArrayDimExpr} represents array dimensions that are initialized with a length, in array allocation expressions. <pre class=\"grammar\"> ArrayTypeDim ::= {@link ASTAnnotation TypeAnnotation} \"[\" \"]\" </pre>",
            "APIs_contained_in_class_count": 79,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if this is a varargs dimension. Varargs parameters are represented as an array type whose last dimension has this attribute set to true. Querying {@link ASTFormalParameter#isVarargs()} is more convenient.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTThrowStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTThrowStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[ASTSwitchArrowRHS]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTThrowStatement.java",
            "class_comment": "A {@code throw} statement. <pre class=\"grammar\"> ThrowStatement ::= \"throw\" {@link ASTExpression Expression} \";\" </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThrowStatement"
                },
                {
                    "method_name": "getExpr",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()",
                    "method_comment": "Returns the expression for the thrown exception.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThrowStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThrowStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThrowStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "JavaAstUtils",
            "class_package": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/internal/JavaAstUtils.java",
            "class_comment": "Common utility functions to work with the Java AST. See also {@link TypeTestUtil}. Only add here things that are not specific to rules (use {@link JavaRuleUtil} for that). This API may be eventually published.",
            "APIs_contained_in_class_count": 64,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getOtherOperandIfInAssignmentExpr",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTExpression getOtherOperandIfInAssignmentExpr(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "getOtherOperandIfInInfixExpr",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTExpression getOtherOperandIfInInfixExpr(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": "If the parameter is an operand of a binary infix expression, returns the other operand. Otherwise returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isComment",
                    "method_signature": "static public boolean isComment(net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken)",
                    "method_comment": "Returns true if the given token is a Java comment.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "hasField",
                    "method_signature": "static public boolean hasField(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration, java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "peelCasts",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTExpression peelCasts(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isLiteralInt",
                    "method_signature": "static public boolean isLiteralInt(net.sourceforge.pmd.lang.java.ast.JavaNode, int)",
                    "method_comment": "Returns true if this is a numeric literal with the given int value. This also considers long literals.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isMainMethod",
                    "method_signature": "static public boolean isMainMethod(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": "Returns true if the node is a {@link ASTMethodDeclaration} that is a main method.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "hasExceptionList",
                    "method_signature": "static public boolean hasExceptionList(net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration, [Ljava.lang.Class;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "hasParameters",
                    "method_signature": "static public boolean hasParameters(net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration, [Ljava.lang.Class;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isReferenceToVar",
                    "method_signature": "static public boolean isReferenceToVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, java.util.Set)",
                    "method_comment": "Returns true if the expression is a {@link ASTNamedReferenceExpr} that references any of the symbol in the set.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isReferenceToVar",
                    "method_signature": "static public boolean isReferenceToVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol)",
                    "method_comment": "Returns true if the expression is a {@link ASTNamedReferenceExpr} that references the symbol.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isReferenceToLocal",
                    "method_signature": "static public boolean isReferenceToLocal(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if the expression is a reference to a local variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isUnqualifiedThis",
                    "method_signature": "static public boolean isUnqualifiedThis(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isNullLiteral",
                    "method_signature": "static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "static public boolean isBooleanLiteral(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": "Returns true if the node is a boolean literal with any value.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "static public boolean isBooleanLiteral(net.sourceforge.pmd.lang.java.ast.JavaNode, boolean)",
                    "method_comment": "Returns true if the node is a boolean literal with the given constant value.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isBooleanNegation",
                    "method_signature": "static public boolean isBooleanNegation(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isSyntacticThisFieldAccess",
                    "method_signature": "static public boolean isSyntacticThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Whether the expression is a {@code this.field}, with no outer instance qualifier ({@code Outer.this.field}). The field symbol is not checked to resolve to a field declared in this class (it may be inherited)",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isRefToFieldOfThisClass",
                    "method_signature": "static public boolean isRefToFieldOfThisClass(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if the expression is a reference to a field declared in this class (not a superclass), on any instance (not just `this`).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isArrayLengthFieldAccess",
                    "method_signature": "static public boolean isArrayLengthFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "mayBeBreakTarget",
                    "method_signature": "static public boolean mayBeBreakTarget(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": "@see ASTBreakStatement#getTarget()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isStringConcatExpr",
                    "method_signature": "static public boolean isStringConcatExpr(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": "This is type-aware, so will not pick up on numeric addition.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isConditional",
                    "method_signature": "static public boolean isConditional(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isLastChild",
                    "method_signature": "static public boolean isLastChild(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": "Returns true if the node is the last child of its parent. Returns false if this is the root node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isVarAccessStrictlyWrite",
                    "method_signature": "static public boolean isVarAccessStrictlyWrite(net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$ASTNamedReferenceExpr)",
                    "method_comment": "True if the variable access is a non-compound assignment.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "getStatementLabels",
                    "method_signature": "static public java.util.Set<String> getStatementLabels(net.sourceforge.pmd.lang.java.ast.ASTStatement)",
                    "method_comment": "Returns the set of labels on this statement.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "getTopLevelExpr",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTExpression getTopLevelExpr(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Will cut through argument lists, except those of enum constants and explicit invocation nodes.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isArrayInitializer",
                    "method_signature": "static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isAnonymousClassCreation",
                    "method_signature": "static public boolean isAnonymousClassCreation(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "areComplements",
                    "method_signature": "static public boolean areComplements(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Whether one expression is the boolean negation of the other. Many forms are not yet supported. This method is symmetric so only needs to be called once.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isVarAccessReadAndWrite",
                    "method_signature": "static public boolean isVarAccessReadAndWrite(net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$ASTNamedReferenceExpr)",
                    "method_comment": "True if the variable is incremented or decremented via a compound assignment operator, or a unary increment/decrement expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "hasAnyAnnotation",
                    "method_signature": "static public boolean hasAnyAnnotation(net.sourceforge.pmd.lang.java.ast.Annotatable, java.util.Collection)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isDefaultValue",
                    "method_signature": "static public boolean isDefaultValue(net.sourceforge.pmd.lang.java.types.JTypeMirror, net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if the expression is the default field value for the given type.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "unaryOperand",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTExpression unaryOperand(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "If the argument is a unary expression, returns its operand, otherwise returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "numAlternatives",
                    "method_signature": "static public int numAlternatives(net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isEqualsMethod",
                    "method_signature": "static public boolean isEqualsMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isReferenceToSameVar",
                    "method_signature": "static public boolean isReferenceToSameVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if both expressions refer to the same variable. A \"variable\" here can also means a field path, eg, {@code this.field.a}. This method unifies {@code this.field} and {@code field} if possible, and also considers {@code this}. <p>Note that while this is more useful than just checking whether both expressions access the same symbol, it still does not mean that they both access the same <i>value</i>. The actual value is data-flow dependent.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isNeverUsed",
                    "method_signature": "static public boolean isNeverUsed(net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId)",
                    "method_comment": "True if the variable is never used. Note that the visibility of the variable must be less than {@link Visibility#V_PRIVATE} for us to be sure of it.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isThisFieldAccess",
                    "method_signature": "static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isHashCodeMethod",
                    "method_signature": "static public boolean isHashCodeMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isInfixExprWithOperator",
                    "method_signature": "static public boolean isInfixExprWithOperator(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set)",
                    "method_comment": "Tests if the node is an {@link ASTInfixExpression} with one of the given operators.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isInfixExprWithOperator",
                    "method_signature": "static public boolean isInfixExprWithOperator(net.sourceforge.pmd.lang.java.ast.JavaNode, net.sourceforge.pmd.lang.java.ast.BinaryOp)",
                    "method_comment": "Tests if the node is an {@link ASTInfixExpression} with the given operator.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "flattenOperands",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<ASTExpression> flattenOperands(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Return a node stream containing all the operands of an addition expression. For instance, {@code a+b+c} will be parsed as a tree with two levels. This method will return a flat node stream containing {@code a, b, c}. @param e An expression, if it is not a string concatenation expression,          then returns an empty node stream.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isRefToFieldOfThisInstance",
                    "method_signature": "static public boolean isRefToFieldOfThisInstance(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns true if the expression has the form `field`, or `this.field`, where `field` is a field declared in the enclosing class. Considers inherited fields. Assumes we're not in a static context.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "followingCallChain",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<QualifiableExpression> followingCallChain(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": "Returns a node stream of enclosing expressions in the same call chain. For instance in {@code a.b().c().d()}, called on {@code a}, this will yield {@code a.b()}, and {@code a.b().c()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "tokenEquals",
                    "method_signature": "static public boolean tokenEquals(net.sourceforge.pmd.lang.java.ast.JavaNode, net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": "Returns true if both nodes have exactly the same tokens. @param node First node @param that Other node",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "tokenEquals",
                    "method_signature": "static public boolean tokenEquals(net.sourceforge.pmd.lang.java.ast.JavaNode, net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.function.Function)",
                    "method_comment": "Returns true if both nodes have the same tokens, modulo some renaming function. The renaming function maps unqualified variables and type identifiers of the first node to the other. This should be used in nodes living in the same lexical scope, so that unqualified names mean the same thing. @param node       First node @param other      Other node @param varRenamer A renaming function. If null, no renaming is applied.                   Must not return null, if no renaming occurs, returns its argument.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isUnqualifiedThisOrSuper",
                    "method_signature": "static public boolean isUnqualifiedThisOrSuper(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "getLoopVariables",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<ASTVariableDeclaratorId> getLoopVariables(net.sourceforge.pmd.lang.java.ast.ASTForStatement)",
                    "method_comment": "Returns the variable IDS corresponding to variables declared in the init clause of the loop.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isUnqualifiedSuper",
                    "method_signature": "static public boolean isUnqualifiedSuper(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isCallOnThisInstance",
                    "method_signature": "static public boolean isCallOnThisInstance(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isThisOrSuper",
                    "method_signature": "static public boolean isThisOrSuper(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isJustRethrowException",
                    "method_signature": "static public boolean isJustRethrowException(net.sourceforge.pmd.lang.java.ast.ASTCatchClause)",
                    "method_comment": "Return true if the catch clause just rethrows the caught exception immediately.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "getThisOrSuperQualifier",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getThisOrSuperQualifier(net.sourceforge.pmd.lang.java.ast.ASTExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "isCloneMethod",
                    "method_signature": "static public boolean isCloneMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTCatchParameter",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[FinalizableNode, InternalInterfaces.VariableIdOwner]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTCatchParameter.java",
            "class_comment": "Formal parameter of a {@linkplain ASTCatchClause catch clause} to represent the declared exception variable. <pre class=\"grammar\"> CatchParameter ::= {@link ASTModifierList LocalVarModifierList} {@link ASTType Type} {@link ASTVariableDeclaratorId VariableDeclaratorId} </pre>",
            "APIs_contained_in_class_count": 104,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of this parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Returns the type node of this catch parameter. May be a {@link ASTUnionType UnionType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "isMulticatch",
                    "method_signature": "public boolean isMulticatch()",
                    "method_comment": "Returns true if this is a multi-catch parameter, that is, it catches several unrelated exception types at the same time. For example: <pre>catch (IllegalStateException | IllegalArgumentException e) {}</pre>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "getAllExceptionTypes",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getAllExceptionTypes()",
                    "method_comment": "Returns a stream of all declared exception types (expanding a union type if present). <p>Note that this is the only reliable way to inspect multi-catch clauses, as the type mirror of a {@link ASTUnionType} is not itself a {@link JIntersectionType}, but the {@link TypeSystem#lub(Collection) LUB} of the components. Since exception types cannot be interfaces, the LUB always erases to a single class supertype (eg {@link RuntimeException}).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchParameter"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTTemplateFragment",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTemplateFragment",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTemplateFragment.java",
            "class_comment": "This is a Java 21 Preview feature. <pre class=\"grammar\"> TemplateFragment ::= StringTemplateBegin|StringTemplateMid|StringTemplateEnd|TextBlockTemplateBegin|TextBlockTemplateMid|TextBlockTemplateEnd </pre> @see <a href=\"https://openjdk.org/jeps/430\">JEP 430: String Templates (Preview)</a>",
            "APIs_contained_in_class_count": 73,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateFragment"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateFragment"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplateFragment"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTLabeledStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTLabeledStatement.java",
            "class_comment": "A wrapper around a statement that assigns it a label. <pre class=\"grammar\"> LabeledStatement ::= &lt;IDENTIFIER&gt; \":\" {@link ASTStatement Statement} </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getLabel",
                    "method_signature": "public java.lang.String getLabel()",
                    "method_comment": "Returns the name of the label.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement"
                },
                {
                    "method_name": "getStatement",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getStatement()",
                    "method_comment": "Returned the statement named by this label.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLabeledStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTAnnotationTypeDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration",
            "class_extends": "[AbstractAnyTypeDeclaration]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAnnotationTypeDeclaration.java",
            "class_comment": "The declaration of an annotation type. This is a {@linkplain Node#isFindBoundary() find boundary} for tree traversal methods. <p>Note that in contrast to interface types, no {@linkplain ASTExtendsList extends clause} is permitted, and an annotation type cannot be generic. <pre class=\"grammar\"> AnnotationTypeDeclaration ::= {@link ASTModifierList ModifierList} \"@\" \"interface\" &lt;IDENTIFIER&gt; {@link ASTAnnotationTypeBody AnnotationTypeBody} </pre>",
            "APIs_contained_in_class_count": 129,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isInterface",
                    "method_signature": "public boolean isInterface()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getCanonicalName",
                    "method_signature": "public java.lang.String getCanonicalName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JClassSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JClassType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getBinaryName",
                    "method_signature": "public java.lang.String getBinaryName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isAnnotation",
                    "method_signature": "public boolean isAnnotation()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnnotationTypeDeclaration annotation type declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isEnum",
                    "method_signature": "public boolean isEnum()",
                    "method_comment": "Returns true if this is an {@linkplain ASTEnumDeclaration enum class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRecord",
                    "method_signature": "public boolean isRecord()",
                    "method_comment": "Returns true if this is an {@linkplain ASTRecordDeclaration record class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the name of the package in which this class is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getRecordComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList getRecordComponents()",
                    "method_comment": "Returns the record components declared by this class. If this is not a record declaration, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getEnumConstants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTEnumConstant> getEnumConstants()",
                    "method_comment": "Returns the enum constants declared by this enum. If this is not an enum declaration, returns an empty stream.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": "Returns true if this is an abstract type. Interfaces and annotations types are implicitly abstract.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody()",
                    "method_comment": "Returns the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isTopLevel",
                    "method_signature": "public boolean isTopLevel()",
                    "method_comment": "Returns true if this type is declared at the top-level of a file.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isNested",
                    "method_signature": "public boolean isNested()",
                    "method_comment": "Returns true if this type declaration is nested inside an interface, class or annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isLocal",
                    "method_signature": "public boolean isLocal()",
                    "method_comment": "Returns true if the class is declared inside a block other than the body of another class, or the top level. Anonymous classes are not considered local. Only class declarations can be local. Local classes cannot be static.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularClass",
                    "method_signature": "public boolean isRegularClass()",
                    "method_comment": "Returns true if this is a regular class declaration (not an enum, not a record, not an interface or annotation). Note that eg {@link JClassSymbol#isClass()} counts records and enums in, just like {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getSuperInterfaceTypeNodes",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()",
                    "method_comment": "Returns the list of interfaces implemented by this class, or extended by this interface. Returns null if no such list is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTBodyDeclaration> getDeclarations()",
                    "method_comment": "Retrieves the member declarations (fields, methods, classes, etc.) from the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getOperations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMethodOrConstructorDeclaration> getOperations()",
                    "method_comment": "Returns the operations declared in this class (methods and constructors).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnonymous",
                    "method_signature": "public boolean isAnonymous()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnonymousClassDeclaration anonymous class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularInterface",
                    "method_signature": "public boolean isRegularInterface()",
                    "method_comment": "Returns true if this is a regular interface declaration (not an annotation). Note that {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTResourceList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTResourceList",
            "class_extends": "[ASTNonEmptyList<ASTResource>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTResourceList.java",
            "class_comment": "A list of resources in a {@linkplain ASTTryStatement try-with-resources}. <pre class=\"grammar\"> ResourceList ::= \"(\" {@link ASTResource Resource} ( \";\" {@link ASTResource Resource} ) \";\"? \")\" </pre>",
            "APIs_contained_in_class_count": 88,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResourceList"
                },
                {
                    "method_name": "hasTrailingSemiColon",
                    "method_signature": "public boolean hasTrailingSemiColon()",
                    "method_comment": "Returns true if this resource list has a trailing semicolon, eg in {@code try (InputStream is = getInputStream();) { ... }}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResourceList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTUnionType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTUnionType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[AtLeastOneChildOfType<ASTClassOrInterfaceType>, Iterable<ASTClassOrInterfaceType>, ASTReferenceType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTUnionType.java",
            "class_comment": "Represents the type node of a multi-catch statement. This node is used to make the grammar of {@link ASTCatchParameter CatchParameter} more straightforward. Note though, that the Java type system does not feature union types at all. The type of this node is defined as the least upper-bound of all its components. <pre class=\"grammar\"> UnionType ::= {@link ASTClassOrInterfaceType ClassType} (\"|\" {@link ASTClassOrInterfaceType ClassType})+ </pre> @see ASTCatchParameter#getAllExceptionTypes()",
            "APIs_contained_in_class_count": 93,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTClassOrInterfaceType> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "getComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getComponents()",
                    "method_comment": "Returns a stream of component types.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnionType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTArrayAllocation",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTPrimaryExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayAllocation.java",
            "class_comment": "An array creation expression. The dimensions of the array type may be initialized with a length expression (in which case they're {@link ASTArrayDimExpr ArrayDimExpr} nodes). <pre class=\"grammar\"> ArrayCreationExpression ::= \"new\" {@link ASTArrayType ArrayType} {@link ASTArrayInitializer ArrayInitializer}? </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArrayType getTypeNode()",
                    "method_comment": "Returns the node representing the array type being instantiated.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of dimensions of the created array.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getArrayInitializer",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer getArrayInitializer()",
                    "method_comment": "Returns the initializer, if present.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTAmbiguousName",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTPrimaryExpression, ASTReferenceType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAmbiguousName.java",
            "class_comment": "An ambiguous name occurring in any context. Without a disambiguation pass that taking care of obscuring rules and the current declarations in scope, this node could be a type, package, or variable name -we can't know for sure. The node is a placeholder for that unknown entity. It implements both {@link ASTType} and {@link ASTPrimaryExpression} to be able to be inserted in their hierarchy (maybe that should be changed though). <p>This node corresponds simultaneously to the <a href=\"https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-AmbiguousName\">AmbiguousName</a> and PackageOrTypeName productions of the JLS. <pre class=\"grammar\"> AmbiguousNameExpr ::= &lt;IDENTIFIER&gt; ( \".\" &lt;IDENTIFIER&gt;) </pre> @implNote <h3>Disambiguation</h3> <p>Some ambiguous names are pushed by the expression parser because we don't want to look too far ahead (in primary prefix). But it can happen that the next segment (primary suffix) constrains the name to be e.g. a type name or an expression name. E.g. From the JLS: <blockquote> A name is syntactically classified as an ExpressionName in these contexts: ... - As the qualifying expression in a qualified class instance creationexpression (§15.9) </blockquote> We don't know at the moment the name is parsed that it will be followed by \".\" \"new\" and a constructor call. But as soon as the {@link ASTConstructorCall} is pushed, we know that the LHS must be an expression. In that case, the name can be reclassified, and e.g. if it's a simple name be promoted to {@link ASTVariableAccess}. This type of immediate disambiguation is carried out by the {@link AbstractJavaNode#jjtClose()} method of those nodes that do force a specific context on their left-hand side. See also {@link LeftRecursiveNode}. <p>Another mechanism is {@link #forceExprContext()} and {@link #forceTypeContext()}, which are called by the parser to promote an ambiguous name to an expression or a type when exiting from the {@link JavaParserImpl#PrimaryExpression()} production or {@link JavaParserImpl#ClassOrInterfaceType()}. <p>Those two mechanisms perform the first classification step, the one that only depends on the syntactic context and not on semantic information. A second pass on the AST after building the symbol tables would allow us to remove all the remaining ambiguous names.",
            "APIs_contained_in_class_count": 94,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the entire name, including periods if any.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAmbiguousName"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTTypeBody",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTypeBody",
            "class_extends": "[ASTList<ASTBodyDeclaration>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTypeBody.java",
            "class_comment": "Body of a type declaration. <pre class=\"grammar\"> TypeBody ::= {@link ASTClassOrInterfaceBody ClassOrInterfaceBody}| {@link ASTEnumBody EnumBody}| {@link ASTRecordBody RecordBody}| {@link ASTAnnotationTypeBody AnnotationTypeBody} </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTBreakStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTBreakStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTBreakStatement.java",
            "class_comment": "A break statement, that jumps to a named label (or exits the current loop). <pre class=\"grammar\"> BreakStatement ::= \"break\" &lt;IDENTIFIER&gt;? \";\" </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getTarget",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getTarget()",
                    "method_comment": "Returns the statement that is the target of this break. This may be a loop, or a switch statement, or a labeled statement. This may return null if the code is invalid.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBreakStatement"
                },
                {
                    "method_name": "getLabel",
                    "method_signature": "public java.lang.String getLabel()",
                    "method_comment": "Returns the label, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBreakStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBreakStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBreakStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBreakStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTModuleDirective",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleDirective.java",
            "class_comment": "A directive of a {@linkplain ASTModuleDeclaration module declaration}. Implementations provide more specific attributes. <pre class=\"grammar\"> ModuleDirective ::= {@linkplain ASTModuleRequiresDirective ModuleRequiresDirective} | {@linkplain ASTModuleOpensDirective ModuleOpensDirective} | {@linkplain ASTModuleExportsDirective ModuleExportsDirective} | {@linkplain ASTModuleProvidesDirective ModuleProvidesDirective} | {@linkplain ASTModuleUsesDirective ModuleUsesDirective} </pre>",
            "APIs_contained_in_class_count": 73,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTTemplate",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTemplate",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTemplate.java",
            "class_comment": "This is a Java 21 Preview feature. <pre class=\"grammar\"> Template ::= ({@link ASTTemplateFragment TemplateFragment} {@link ASTExpression Expression}?) {@link ASTTemplateFragment TemplateFragment} </pre> @see <a href=\"https://openjdk.org/jeps/430\">JEP 430: String Templates (Preview)</a>",
            "APIs_contained_in_class_count": 73,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplate"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplate"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTemplate"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTRecordBody",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTRecordBody",
            "class_extends": "[ASTTypeBody, ASTList<ASTBodyDeclaration>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTRecordBody.java",
            "class_comment": "Defines the body of a {@linkplain ASTRecordDeclaration RecordDeclaration} (JDK 16 feature). This can contain additional methods and or constructors. <pre class=\"grammar\"> RecordBody ::= \"{\" ( {@linkplain ASTCompactConstructorDeclaration CompactConstructorDeclaration}| {@linkplain ASTBodyDeclaration BodyDeclaration} ) \"}\" </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTForStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTForStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[ASTLoopStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTForStatement.java",
            "class_comment": "Represents a {@code for} loop (distinct from {@linkplain ASTForeachStatement foreach loops}). <pre class=\"grammar\"> ForStatement ::= \"for\" \"(\" {@linkplain ASTForInit ForInit}? \";\" {@linkplain ASTExpression Expression}? \";\" {@linkplain ASTForUpdate ForUpdate}? \")\"{@linkplain ASTStatement Statement} </pre>",
            "APIs_contained_in_class_count": 77,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getUpdate",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList getUpdate()",
                    "method_comment": "Returns the statement nested within the update clause, if it exists.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForStatement"
                },
                {
                    "method_name": "getInit",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getInit()",
                    "method_comment": "Returns the statement nested within the {@linkplain ASTForInit init clause}, if it exists. This is either a {@linkplain ASTLocalVariableDeclaration local variable declaration} or a {@linkplain ASTStatementExpressionList statement expression list}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForStatement"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody()",
                    "method_comment": "Returns the statement that represents the body of this loop.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLoopStatement"
                }
            ]
        },
        {
            "class_name": "ASTRecordDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration",
            "class_extends": "[AbstractAnyTypeDeclaration]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTRecordDeclaration.java",
            "class_comment": "A record declaration is a special data class type (JDK 16 feature). This is a {@linkplain Node#isFindBoundary() find boundary} for tree traversal methods. <pre class=\"grammar\"> RecordDeclaration ::= {@link ASTModifierList ModifierList} \"record\" &lt;IDENTIFIER&gt; {@linkplain ASTTypeParameters TypeParameters}? {@linkplain ASTRecordComponentList RecordComponents} {@linkplain ASTImplementsList ImplementsList}? {@linkplain ASTRecordBody RecordBody} </pre> @see <a href=\"https://openjdk.java.net/jeps/395\">JEP 395: Records</a>",
            "APIs_contained_in_class_count": 129,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getCanonicalName",
                    "method_signature": "public java.lang.String getCanonicalName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getRecordComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList getRecordComponents()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JClassSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JClassType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getBinaryName",
                    "method_signature": "public java.lang.String getBinaryName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTBodyDeclaration> getDeclarations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isInterface",
                    "method_signature": "public boolean isInterface()",
                    "method_comment": "Returns true if this is an interface type declaration (including annotation types). This is consistent with {@link Class#isInterface()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnnotation",
                    "method_signature": "public boolean isAnnotation()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnnotationTypeDeclaration annotation type declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isEnum",
                    "method_signature": "public boolean isEnum()",
                    "method_comment": "Returns true if this is an {@linkplain ASTEnumDeclaration enum class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRecord",
                    "method_signature": "public boolean isRecord()",
                    "method_comment": "Returns true if this is an {@linkplain ASTRecordDeclaration record class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the name of the package in which this class is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getEnumConstants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTEnumConstant> getEnumConstants()",
                    "method_comment": "Returns the enum constants declared by this enum. If this is not an enum declaration, returns an empty stream.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": "Returns true if this is an abstract type. Interfaces and annotations types are implicitly abstract.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody()",
                    "method_comment": "Returns the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isTopLevel",
                    "method_signature": "public boolean isTopLevel()",
                    "method_comment": "Returns true if this type is declared at the top-level of a file.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isNested",
                    "method_signature": "public boolean isNested()",
                    "method_comment": "Returns true if this type declaration is nested inside an interface, class or annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isLocal",
                    "method_signature": "public boolean isLocal()",
                    "method_comment": "Returns true if the class is declared inside a block other than the body of another class, or the top level. Anonymous classes are not considered local. Only class declarations can be local. Local classes cannot be static.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularClass",
                    "method_signature": "public boolean isRegularClass()",
                    "method_comment": "Returns true if this is a regular class declaration (not an enum, not a record, not an interface or annotation). Note that eg {@link JClassSymbol#isClass()} counts records and enums in, just like {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getSuperInterfaceTypeNodes",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()",
                    "method_comment": "Returns the list of interfaces implemented by this class, or extended by this interface. Returns null if no such list is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getOperations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMethodOrConstructorDeclaration> getOperations()",
                    "method_comment": "Returns the operations declared in this class (methods and constructors).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnonymous",
                    "method_signature": "public boolean isAnonymous()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnonymousClassDeclaration anonymous class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularInterface",
                    "method_signature": "public boolean isRegularInterface()",
                    "method_comment": "Returns true if this is a regular interface declaration (not an annotation). Note that {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTUnaryExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTUnaryExpression.java",
            "class_comment": "Represents a unary operation on a value. The syntactic form may be prefix or postfix, which are represented with the same nodes, even though they have different precedences. <pre class=\"grammar\"> UnaryExpression ::= PrefixExpression | PostfixExpression PrefixExpression::= {@link UnaryOp PrefixOp} {@link ASTExpression Expression} PostfixExpression ::= {@link ASTExpression Expression} {@link UnaryOp PostfixOp} </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isPrefix",
                    "method_signature": "public boolean isPrefix()",
                    "method_comment": "Returns true if this is a prefix expression. @deprecated XPath-attribute only, use {@code getOperator().isPrefix()} in java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getOperand()",
                    "method_comment": "Returns the expression nested within this expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getOperator",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.UnaryOp getOperator()",
                    "method_comment": "Returns the constant representing the operator of this expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTUnaryExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTCastExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTCastExpression.java",
            "class_comment": "Represents a type cast expression. This is syntactically a unary prefix operation and has the same precedence. <pre class=\"grammar\"> CastExpression ::= \"(\" {@link ASTType Type} \")\" {@linkplain ASTExpression Expression} </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getOperand",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getOperand()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getCastType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getCastType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCastExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTCatchClause",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTCatchClause",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTCatchClause.java",
            "class_comment": "A \"catch\" clause of a {@linkplain ASTTryStatement try statement}. <pre class=\"grammar\"> CatchClause ::= \"catch\" \"(\" {@link ASTCatchParameter CatchParameter} \")\" {@link ASTBlock Block} </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": "Returns the body of this catch branch.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchClause"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchClause"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchClause"
                },
                {
                    "method_name": "getParameter",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCatchParameter getParameter()",
                    "method_comment": "Returns the catch parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchClause"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCatchClause"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTMemberValueArrayInitializer",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTMemberValue, Iterable<ASTMemberValue>]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTMemberValueArrayInitializer.java",
            "class_comment": "Represents an array of member values in an annotation {@linkplain ASTMemberValue member value}. <pre class=\"grammar\"> MemberValueArrayInitializer ::= \"{\" ( {@linkplain ASTMemberValue MemberValue} ( \",\" {@linkplain ASTMemberValue MemberValue} )\",\"? )? \"}\" </pre>",
            "APIs_contained_in_class_count": 77,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTMemberValue> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": "Returns the constant value of this node, if this is a constant expression. Otherwise, or if some references couldn't be resolved, returns null. Note that {@link ASTNullLiteral null} is not a constant value, so this method's returning null is not a problem. Note that annotations are not given a constant value by this implementation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValue"
                }
            ]
        },
        {
            "class_name": "ASTConditionalExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTConditionalExpression.java",
            "class_comment": "Represents a conditional expression, aka ternary expression. <pre class=\"grammar\"> ConditionalExpression ::= {@linkplain ASTExpression Expression} \"?\"{@linkplain ASTExpression Expression} \":\" {@linkplain ASTExpression Expression} </pre>",
            "APIs_contained_in_class_count": 86,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": "Returns the node that represents the guard of this conditional. That is the expression before the '?'.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getElseBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getElseBranch()",
                    "method_comment": "Returns the node that represents the expression that will be evaluated if the guard evaluates to false.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getThenBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getThenBranch()",
                    "method_comment": "Returns the node that represents the expression that will be evaluated if the guard evaluates to true.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTContinueStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTContinueStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTContinueStatement.java",
            "class_comment": "A continue statement, that jumps to the next iteration of an enclosing loop. <pre class=\"grammar\"> ContinueStatement ::= \"continue\" &lt;IDENTIFIER&gt;? \";\" </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getTarget",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getTarget()",
                    "method_comment": "Returns the statement that is the target of this break. This can be a loop, or an {@link ASTLabeledStatement}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTContinueStatement"
                },
                {
                    "method_name": "getLabel",
                    "method_signature": "public java.lang.String getLabel()",
                    "method_comment": "Returns the label, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTContinueStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTContinueStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTContinueStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTContinueStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTSwitchExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTExpression, ASTSwitchLike]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSwitchExpression.java",
            "class_comment": "A switch expression, as introduced in Java 12. This node only occurs in the contexts where an expression is expected. In particular, switch constructs occurring in statement position are parsed as a {@linkplain ASTSwitchStatement SwitchStatement}, and not a {@link ASTSwitchExpression SwitchExpression} within a {@link ASTExpressionStatement ExpressionStatement}. That is because switch statements are not required to be exhaustive, contrary to switch expressions. <p>Their syntax is identical though, and described on {@link ASTSwitchLike}.",
            "APIs_contained_in_class_count": 92,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getYieldExpressions",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTExpression> getYieldExpressions()",
                    "method_comment": "Returns a stream of all expressions which can be the value of this switch. Eg in the following, the yield expressions are marked by a comment. <pre>{@code switch (foo) {    case 1  -> 1;         // <- <1>    case 2  -> 2;         // <- <2>    default -> {        int i = foo 2;        yield i foo;    // <- <i foo>    } } }</pre>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTSwitchBranch> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "isFallthroughSwitch",
                    "method_signature": "public boolean isFallthroughSwitch()",
                    "method_comment": "Returns true if this a switch which uses fallthrough branches (old school {@code case label: break;}) and not arrow branches. If the switch has no branches, returns false.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "isEnumSwitch",
                    "method_signature": "public boolean isEnumSwitch()",
                    "method_comment": "Returns true if this switch statement tests an expression having an enum type.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "hasDefaultCase",
                    "method_signature": "public boolean hasDefaultCase()",
                    "method_comment": "Returns true if this switch has a {@code default} case.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "getBranches",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches()",
                    "method_comment": "Returns a stream of all branches of this switch.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "isExhaustiveEnumSwitch",
                    "method_signature": "public boolean isExhaustiveEnumSwitch()",
                    "method_comment": "Returns true if this switch statement tests an expression having an enum type and all the constants of this type are covered by a switch case. Returns false if the type of the tested expression could not be resolved.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "getTestedExpression",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getTestedExpression()",
                    "method_comment": "Gets the expression tested by this switch. This is the expression between the parentheses.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "InternalApiBridge",
            "class_package": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/InternalApiBridge.java",
            "class_comment": "Acts as a bridge between outer parts of PMD and the restricted access internal API of this package. <p><b>None of this is published API, and compatibility can be broken anytime!</b> Use this only at your own risk. @author Clément Fournier @since 7.0.0",
            "APIs_contained_in_class_count": 37,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "setSymbol",
                    "method_signature": "static public void setSymbol(net.sourceforge.pmd.lang.java.ast.SymbolDeclaratorNode, net.sourceforge.pmd.lang.java.symbols.JElementSymbol)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "newVarId",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId newVarId(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setQname",
                    "method_signature": "static public void setQname(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration, java.lang.String, java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "getProcessor",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.internal.JavaAstProcessor getProcessor(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setTypedSym",
                    "method_signature": "static public void setTypedSym(net.sourceforge.pmd.lang.java.ast.ASTFieldAccess, net.sourceforge.pmd.lang.java.types.JVariableSig$FieldSig)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setTypedSym",
                    "method_signature": "static public void setTypedSym(net.sourceforge.pmd.lang.java.ast.ASTVariableAccess, net.sourceforge.pmd.lang.java.types.JVariableSig)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setFunctionalMethod",
                    "method_signature": "static public void setFunctionalMethod(net.sourceforge.pmd.lang.java.ast.FunctionalExpression, net.sourceforge.pmd.lang.java.types.JMethodSig)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setCompileTimeDecl",
                    "method_signature": "static public void setCompileTimeDecl(net.sourceforge.pmd.lang.java.ast.ASTMethodReference, net.sourceforge.pmd.lang.java.types.JMethodSig)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setTypeMirrorInternal",
                    "method_signature": "static public void setTypeMirrorInternal(net.sourceforge.pmd.lang.java.ast.TypeNode, net.sourceforge.pmd.lang.java.types.JTypeMirror)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setSignature",
                    "method_signature": "static public void setSignature(net.sourceforge.pmd.lang.java.ast.ASTVariableAccess, net.sourceforge.pmd.lang.java.types.JVariableSig)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setSignature",
                    "method_signature": "static public void setSignature(net.sourceforge.pmd.lang.java.ast.ASTFieldAccess, net.sourceforge.pmd.lang.java.types.JVariableSig$FieldSig)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "getInferenceEntryPoint",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.internal.infer.Infer getInferenceEntryPoint(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "getTopLevelExprContext",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.ast.ExprContext getTopLevelExprContext(net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "javaTokenDoc",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccTokenDocument$TokenDocumentBehavior javaTokenDoc()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "isStandaloneInternal",
                    "method_signature": "static public boolean isStandaloneInternal(net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "buildTypeFromAstInternal",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror buildTypeFromAstInternal(net.sourceforge.pmd.lang.java.types.TypeSystem, net.sourceforge.pmd.lang.java.types.Substitution, net.sourceforge.pmd.lang.java.ast.ASTType)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setStandaloneTernary",
                    "method_signature": "static public void setStandaloneTernary(net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "getReferencedSym",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.symbols.JTypeDeclSymbol getReferencedSym(net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "getLazyTypeResolver",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.ast.LazyTypeResolver getLazyTypeResolver(net.sourceforge.pmd.lang.java.ast.JavaNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setSymbolTable",
                    "method_signature": "static public void setSymbolTable(net.sourceforge.pmd.lang.java.ast.JavaNode, net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "setOverload",
                    "method_signature": "static public void setOverload(net.sourceforge.pmd.lang.java.ast.InvocationNode, net.sourceforge.pmd.lang.java.types.OverloadSelectionResult)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "getTypeMirrorInternal",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirrorInternal(net.sourceforge.pmd.lang.java.ast.TypeNode)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "initTypeResolver",
                    "method_signature": "static public void initTypeResolver(net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit, net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.types.internal.infer.TypeInferenceLogger)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "overrideResolution",
                    "method_signature": "static public void overrideResolution(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "usageResolution",
                    "method_signature": "static public void usageResolution(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "assignComments",
                    "method_signature": "static public void assignComments(net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "forceTypeResolutionPhase",
                    "method_signature": "static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit)",
                    "method_comment": "Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "disambigWithCtx",
                    "method_signature": "static public void disambigWithCtx(net.sourceforge.pmd.lang.ast.NodeStream, net.sourceforge.pmd.lang.java.symbols.table.internal.ReferenceCtx)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalApiBridge"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTBlock",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTBlock",
            "class_extends": "[ASTMaybeEmptyListOf<ASTStatement>]",
            "class_implements": "[ASTSwitchArrowRHS, AllChildrenAreOfType<ASTStatement>, ASTStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTBlock.java",
            "class_comment": "A block of code. This is a {@linkplain ASTStatement statement} that contains other statements. <pre class=\"grammar\"> Block ::=\"{\" {@link ASTStatement Statement} \"}\" </pre>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBlock"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBlock"
                },
                {
                    "method_name": "containsComment",
                    "method_signature": "public boolean containsComment()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTBlock"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTFieldDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[JavadocCommentOwner, InternalInterfaces.MultiVariableIdOwner, Iterable<ASTVariableDeclaratorId>, LeftRecursiveNode, ASTBodyDeclaration, AccessNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTFieldDeclaration.java",
            "class_comment": "Represents a field declaration in the body of a type declaration. <p>This declaration may define several variables, possibly of different types. The nodes corresponding to the declared variables are accessible through {@link #iterator()}. <pre class=\"grammar\"> FieldDeclaration ::= {@link ASTModifierList ModifierList} {@linkplain ASTType Type} {@linkplain ASTVariableDeclarator VariableDeclarator} ( \",\" {@linkplain ASTVariableDeclarator VariableDeclarator} ) \";\" </pre>",
            "APIs_contained_in_class_count": 106,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Returns the type node at the beginning of this field declaration. The type of this node is not necessarily the type of the variables, see {@link ASTVariableDeclaratorId#getType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration"
                },
                {
                    "method_name": "getVariableName",
                    "method_signature": "public java.lang.String getVariableName()",
                    "method_comment": "Gets the variable name of this field. This method searches the first VariableDeclaratorId node and returns its image or <code>null</code> if the child node is not found. @return a String representing the name of the variable @deprecated FieldDeclaration may declare several variables, so this is not exhaustive     Iterate on the {@linkplain ASTVariableDeclaratorId VariableDeclaratorIds} instead",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTVariableDeclaratorId> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$MultiVariableIdOwner"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getVarIds",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTVariableDeclaratorId> getVarIds()",
                    "method_comment": "Returns a stream of the variable ids declared by this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$MultiVariableIdOwner"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTPermitsList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTPermitsList",
            "class_extends": "[ASTNonEmptyList<ASTClassOrInterfaceType>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTPermitsList.java",
            "class_comment": "Represents the {@code permits} clause of a (sealed) class declaration. <p>This is a Java 17 Feature. <p>See https://openjdk.java.net/jeps/409 <pre class=\"grammar\">PermitsList ::= \"permits\" ClassOrInterfaceType( \",\" ClassOrInterfaceType ) </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPermitsList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTSwitchStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[ASTSwitchLike]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSwitchStatement.java",
            "class_comment": "Represents a {@code switch} statement. See {@link ASTSwitchLike} for its grammar.",
            "APIs_contained_in_class_count": 82,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTSwitchBranch> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "isFallthroughSwitch",
                    "method_signature": "public boolean isFallthroughSwitch()",
                    "method_comment": "Returns true if this a switch which uses fallthrough branches (old school {@code case label: break;}) and not arrow branches. If the switch has no branches, returns false.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "isEnumSwitch",
                    "method_signature": "public boolean isEnumSwitch()",
                    "method_comment": "Returns true if this switch statement tests an expression having an enum type.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "hasDefaultCase",
                    "method_signature": "public boolean hasDefaultCase()",
                    "method_comment": "Returns true if this switch has a {@code default} case.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "getBranches",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches()",
                    "method_comment": "Returns a stream of all branches of this switch.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "isExhaustiveEnumSwitch",
                    "method_signature": "public boolean isExhaustiveEnumSwitch()",
                    "method_comment": "Returns true if this switch statement tests an expression having an enum type and all the constants of this type are covered by a switch case. Returns false if the type of the tested expression could not be resolved.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "getTestedExpression",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getTestedExpression()",
                    "method_comment": "Gets the expression tested by this switch. This is the expression between the parentheses.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchLike"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTExpressionStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTExpressionStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTExpressionStatement.java",
            "class_comment": "A statement that contains an expression. Note that this is not an expression itself. <pre class=\"grammar\"> ExpressionStatement ::= {@link ASTExpression StatementExpression} \";\" </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpressionStatement"
                },
                {
                    "method_name": "getExpr",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()",
                    "method_comment": "Returns the contained expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpressionStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpressionStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpressionStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTPrimitiveType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[ASTType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTPrimitiveType.java",
            "class_comment": "Represents a primitive type. <pre class=\"grammar\"> PrimitiveType ::= {@link ASTAnnotation Annotation} (\"boolean\" | \"char\" | \"byte\" | \"short\" | \"int\" | \"long\" | \"float\" | \"double\") </pre>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getKind",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JPrimitiveType$PrimitiveTypeKind getKind()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JPrimitiveType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTSwitchFallthroughBranch",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSwitchFallthroughBranch",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTSwitchBranch]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSwitchFallthroughBranch.java",
            "class_comment": "A fallthrough switch branch. This contains exactly one label, and zero or more statements. Fallthrough must be handled by looking at the siblings. For example, in the following, the branch for {@code case 1:} has no statements, while the branch for {@code case 2:} has two. <pre>{@code switch (foo) {case 1:case 2:do1Or2();break;default:doDefault();break; } }</pre> <pre class=\"grammar\"> SwitchFallthroughBranch ::= {@link ASTSwitchLabel SwitchLabel} \":\" {@link ASTStatement Statement} </pre>",
            "APIs_contained_in_class_count": 78,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchFallthroughBranch"
                },
                {
                    "method_name": "getStatements",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTStatement> getStatements()",
                    "method_comment": "Returns the list of statements dominated by the labels. This list is possibly empty.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchFallthroughBranch"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchFallthroughBranch"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchFallthroughBranch"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isDefault",
                    "method_signature": "public boolean isDefault()",
                    "method_comment": "Return true if this is the default branch.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                },
                {
                    "method_name": "getLabel",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel getLabel()",
                    "method_comment": "Returns the label, which may be compound.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                },
                {
                    "method_name": "getNextBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch getNextBranch()",
                    "method_comment": "Returns the next branch, if it exists.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                },
                {
                    "method_name": "getPreviousBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch getPreviousBranch()",
                    "method_comment": "Returns the previous branch, if it exists.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                }
            ]
        },
        {
            "class_name": "ASTLambdaExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[FunctionalExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTLambdaExpression.java",
            "class_comment": "A lambda expression. <pre class=\"grammar\"> LambdaExpression ::= {@link ASTLambdaParameterList LambdaParameterList} \"->\" ( {@link ASTExpression Expression} | {@link ASTBlock Block} ) </pre>",
            "APIs_contained_in_class_count": 91,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTLambdaParameterList getParameters()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getArity",
                    "method_signature": "public int getArity()",
                    "method_comment": "Returns the number of formal parameters of this lambda.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getBlock",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBlock()",
                    "method_comment": "Returns the body of this expression, if it is a block.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getExpression",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpression()",
                    "method_comment": "Returns the body of this expression, if it is an expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getExpressionBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpressionBody()",
                    "method_comment": "Returns the body of this lambda if it is an expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": "Returns the type of the functional interface. E.g. in {@code stringStream.map(s -> s.isEmpty())}, this is {@code java.util.function.Function<java.lang.String, java.lang.Boolean>}. @see #getFunctionalMethod()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getBlockBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBlockBody()",
                    "method_comment": "Returns the body of this lambda if it is a block.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "isExpressionBody",
                    "method_signature": "public boolean isExpressionBody()",
                    "method_comment": "Returns true if this lambda has an expression for body.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "isBlockBody",
                    "method_signature": "public boolean isBlockBody()",
                    "method_comment": "Returns true if this lambda has a block for body.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getFunctionalMethod",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getFunctionalMethod()",
                    "method_comment": "Returns the method that is overridden in the functional interface. E.g. in {@code stringStream.map(s -> s.isEmpty())}, this is {@code java.util.function.Function#apply(java.lang.String) -> java.lang.Boolean} @see #getTypeMirror()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTArrayInitializer",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[Iterable<ASTExpression>, ASTExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayInitializer.java",
            "class_comment": "An array initializer. May occur in two syntactic contexts: <ul> <li>The right-hand side of a {@linkplain ASTVariableDeclarator variable declarator} <li>Inside an {@linkplain ASTArrayAllocation array allocation expression} </ul> <pre class=\"grammar\"> ArrayInitializer ::= \"{\" ( \",\" )? \"}\"| \"{\" {@link ASTExpression Expression} ( \",\" {@link ASTExpression Expression} ) ( \",\" )? \"}\" </pre>",
            "APIs_contained_in_class_count": 86,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "length",
                    "method_signature": "public int length()",
                    "method_comment": "Return the number of elements.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTExpression> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTClassOrInterfaceType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[ASTReferenceType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTClassOrInterfaceType.java",
            "class_comment": null,
            "APIs_contained_in_class_count": 92,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": "Returns the simple name of this type. Use the {@linkplain #getReferencedSym() symbol} to get more information.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "isReferenceToClassSameCompilationUnit",
                    "method_signature": "public boolean isReferenceToClassSameCompilationUnit()",
                    "method_comment": "Checks whether the type this node is referring to is declared within the same compilation unit - either a class/interface or a enum type. You want to check this, if {@link #getType()} is null. @return {@code true} if this node referencing a type in the same compilation unit, {@code false} otherwise. @deprecated This may be removed once type resolution is afoot",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getTypeArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeArguments getTypeArguments()",
                    "method_comment": "Returns the type arguments of this segment if some are specified.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getQualifier()",
                    "method_comment": "Gets the owner type of this type if it's not ambiguous. This is a type we know for sure that this type is a member of. @return A type, or null if this is a base type",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "isFullyQualified",
                    "method_signature": "public boolean isFullyQualified()",
                    "method_comment": "Returns true if the type was written with a full package qualification. For example, {@code java.lang.Override}. For nested types, only the leftmost type is considered fully qualified. Eg in {@code p.Outer.Inner}, this method will return true for the type corresponding to {@code p.Outer}, but false for the enclosing {@code p.Outer.Inner}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTModuleProvidesDirective",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleProvidesDirective",
            "class_extends": "[AbstractJavaNode, ASTModuleDirective]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleProvidesDirective.java",
            "class_comment": "A \"provides\" directive of a {@linkplain ASTModuleDeclaration module declaration}. <pre class=\"grammar\"> ModuleProvidesDirective ::= \"provides\" {@linkplain ASTClassOrInterfaceType ClassType} \"with\" {@linkplain ASTClassOrInterfaceType ClassType} ( \",\" {@linkplain ASTClassOrInterfaceType ClassType} ) \";\" </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getService",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getService()",
                    "method_comment": "Returns the node representing the provided interface.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleProvidesDirective"
                },
                {
                    "method_name": "getServiceProviders",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getServiceProviders()",
                    "method_comment": "Returns the nodes representing the service providers, that is, the service implementations.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleProvidesDirective"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTAnnotationTypeBody",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody",
            "class_extends": "[ASTTypeBody, ASTList<ASTBodyDeclaration>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAnnotationTypeBody.java",
            "class_comment": null,
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTYieldStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTYieldStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTYieldStatement.java",
            "class_comment": "A {@code yield} statement in a {@linkplain ASTSwitchExpression switch expression}. <pre class=\"grammar\"> YieldStatement ::= \"yield\" {@link ASTExpression} \";\" </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTYieldStatement"
                },
                {
                    "method_name": "getExpr",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()",
                    "method_comment": "Returns the yielded expression.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTYieldStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTYieldStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTYieldStatement"
                },
                {
                    "method_name": "getYieldTarget",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchExpression getYieldTarget()",
                    "method_comment": "Returns the switch expression to which this statement yields a value.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTYieldStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTModuleOpensDirective",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleOpensDirective",
            "class_extends": "[AbstractPackageNameModuleDirective]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleOpensDirective.java",
            "class_comment": "An \"opens\" directive of a {@linkplain ASTModuleDeclaration module declaration}. <pre class=\"grammar\"> ModuleOpensDirective ::= \"opens\" &lt;PACKAGE_NAME&gt; ( \"to\" {@linkplain ASTModuleName ModuleName} ( \",\" {@linkplain ASTModuleName ModuleName}) )? \";\" </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getTargetModules",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTModuleName> getTargetModules()",
                    "method_comment": "Returns a stream of the module names that are found after the \"to\" keyword. May be empty",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleOpensDirective"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractPackageNameModuleDirective"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractPackageNameModuleDirective"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTTypePattern",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTPattern, AccessNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTypePattern.java",
            "class_comment": "A type pattern (JDK16). This can be found on the right-hand side of an {@link ASTInfixExpression InstanceOfExpression}, in a {@link ASTPatternExpression PatternExpression}. <pre class=\"grammar\"> TypePattern ::= ( \"final\" | {@linkplain ASTAnnotation Annotation} ) {@linkplain ASTType Type} {@link ASTVariableDeclaratorId VariableDeclaratorId} </pre> @see <a href=\"https://openjdk.java.net/jeps/394\">JEP 394: Pattern Matching for instanceof</a>",
            "APIs_contained_in_class_count": 102,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": "Returns the declared variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Gets the type against which the expression is tested.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypePattern"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTStatementExpressionList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList",
            "class_extends": "[ASTNonEmptyList<ASTExpression>]",
            "class_implements": "[ASTStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTStatementExpressionList.java",
            "class_comment": "A list of statement expressions. Statement expressions are those expressions which can appear in an {@linkplain ASTExpressionStatement expression statement}. <p>Statement expression lists occur only {@link ASTForInit} and {@link ASTForUpdate}. To improve the API of {@link ASTForInit}, however, this node implements {@link ASTStatement}. <pre class=\"grammar\"> StatementExpressionList ::= {@link ASTExpression Expression} ( \",\" {@link ASTExpression Expression} ) </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTModuleExportsDirective",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleExportsDirective",
            "class_extends": "[AbstractPackageNameModuleDirective]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleExportsDirective.java",
            "class_comment": "An \"exports\" directive of a {@linkplain ASTModuleDeclaration module declaration}. <pre class=\"grammar\"> ModuleExportsDirective ::= \"exports\" &lt;PACKAGE_NAME&gt; ( \"to\" {@linkplain ASTModuleName ModuleName} ( \",\" {@linkplain ASTModuleName ModuleName}) )? \";\" </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getTargetModules",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTModuleName> getTargetModules()",
                    "method_comment": "Returns a stream of the module names that are found after the \"to\" keyword. May be empty",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleExportsDirective"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractPackageNameModuleDirective"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractPackageNameModuleDirective"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDirective"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTVariableDeclarator",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[InternalInterfaces.VariableIdOwner]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTVariableDeclarator.java",
            "class_comment": "Groups a variable ID and its initializer if it exists. May be found as a child of {@linkplain ASTFieldDeclaration field declarations} and {@linkplain ASTLocalVariableDeclaration local variable declarations}. <p>The {@linkplain #getInitializer() initializer} is the only place {@linkplain ASTArrayInitializer array initializer expressions} can be found. <pre class=\"grammar\"> VariableDeclarator ::= {@linkplain ASTVariableDeclaratorId VariableDeclaratorId} ( \"=\" {@linkplain ASTExpression Expression} )? </pre>",
            "APIs_contained_in_class_count": 77,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the declared variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": "Returns the id of the declared variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "getInitializer",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getInitializer()",
                    "method_comment": "Returns the initializer, of the variable, or null if it doesn't exist.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "hasInitializer",
                    "method_signature": "public boolean hasInitializer()",
                    "method_comment": "Returns true if the declared variable is initialized. Otherwise, {@link #getInitializer()} returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTTypeExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[AtLeastOneChild, LeftRecursiveNode, ASTPrimaryExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTypeExpression.java",
            "class_comment": "Wraps a type node but presents the interface of {@link ASTExpression}. This is only used in the following contexts: <ul> <li>As the right-hand side of {@link BinaryOp#INSTANCEOF instanceof expressions}. <li>As the qualifier of {@linkplain ASTMethodCall method calls}, {@link ASTFieldAccess field accesses}, when they access a static method or field <li>As the qualifier of {@linkplain ASTMethodReference method references}, if it references a static method, or is a constructor reference </ul> <pre class=\"grammar\"> TypeExpression ::= {@link ASTType Type} </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Gets the wrapped type node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": "Returns 0, type expressions can never be parenthesized.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns false, type expressions can never be parenthesized.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavaNode getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChild"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": "Returns the compile-time type of this node. For example, for a string literal, returns the type mirror for {@link String}, for a method call, returns the return type of the call, etc. <p>This method ignores conversions applied to the value of the node because of its context. For example, in {@code 1 + \"\"}, the numeric literal will have type {@code int}, but it is converted to {@code String} by the surrounding concatenation expression. Similarly, in {@code Collections.singletonList(1)}, the {@link ASTNumericLiteral} node has type {@code int}, but the type of the method formal is {@link Integer}, and boxing is applied at runtime. Possibly, an API will be added to expose this information. @return The type mirror. Never returns null; if the type is unresolved, returns     {@link TypeSystem#UNKNOWN}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                }
            ]
        },
        {
            "class_name": "ASTIntersectionType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[InternalInterfaces.AtLeastOneChildOfType<ASTType>, Iterable<ASTType>, ASTReferenceType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTIntersectionType.java",
            "class_comment": "Represents an <a href=\"https://docs.oracle.com/javase/specs/jls/se9/html/jls-4.html#jls-4.9\">intersection type</a>. Can only occur in the following contexts: <ul> <li>As the bound of a {@linkplain ASTTypeParameter TypeParameter}</li> <li>As the target type of a {@linkplain ASTCastExpression CastExpression}, on Java 8 and above</li> </ul> The first type can be a class or interface type, while the additional bounds are necessarily interface types. <pre class=\"grammar\"> IntersectionType ::= {@link ASTClassOrInterfaceType ClassOrInterfaceType} (\"&amp;\" {@link ASTClassOrInterfaceType InterfaceType})+ </pre>",
            "APIs_contained_in_class_count": 93,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTType> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "getComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getComponents()",
                    "method_comment": "Returns a stream of component types.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIntersectionType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTFieldAccess",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTNamedReferenceExpr, QualifiableExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTFieldAccess.java",
            "class_comment": "A field access expression. <pre class=\"grammar\"> FieldAccess ::= {@link ASTExpression Expression} \".\" &lt;IDENTIFIER&gt; </pre>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getSignature",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JVariableSig$FieldSig getSignature()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getSignature",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JVariableSig getSignature()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getReferencedSym",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JFieldSymbol getReferencedSym()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getReferencedSym",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JVariableSymbol getReferencedSym()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFieldAccess"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getAccessType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$AccessType getAccessType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr"
                }
            ]
        },
        {
            "class_name": "ASTPackageDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[Annotatable, JavadocCommentOwner, ASTTopLevelDeclaration]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTPackageDeclaration.java",
            "class_comment": "Package declaration at the top of a {@linkplain ASTCompilationUnit source file}. Since 7.0, there is no Name node anymore. Use {@link #getName()} instead. <pre class=\"grammar\"> PackageDeclaration ::= {@link ASTModifierList AnnotationList} \"package\" Name \";\" </pre>",
            "APIs_contained_in_class_count": 80,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the package. @since 6.30.0",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTVoidType",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTVoidType",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[ASTType]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTVoidType.java",
            "class_comment": "Type node to represent the void pseudo-type. This represents the absence of a type, not a type, but it's easier to process that way. Can only occur as return type of method declarations, and as the qualifier of a {@linkplain ASTClassLiteral class literal}. <pre class=\"grammar\"> VoidType ::= \"void\" </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVoidType"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVoidType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVoidType"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVoidType"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVoidType"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if this is the \"void\" pseudo-type, ie an {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isPrimitiveType",
                    "method_signature": "public boolean isPrimitiveType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isClassOrInterfaceType",
                    "method_signature": "public boolean isClassOrInterfaceType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isArrayType",
                    "method_signature": "public boolean isArrayType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getArrayDepth",
                    "method_signature": "public int getArrayDepth()",
                    "method_comment": "Returns the number of array dimensions of this type. This is 0 unless this node {@linkplain #isArrayType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "getTypeImage",
                    "method_signature": "public java.lang.String getTypeImage()",
                    "method_comment": "For now this returns the name of the type with all the segments, without annotations, array dimensions, or type parameters. Experimental because we need to specify it, eg it would be more useful to have a method return a qualified name with help of the symbol table. @deprecated This is not meaningful. Use {@link PrettyPrintingUtil}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTType"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTGuard",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTGuard",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTGuard.java",
            "class_comment": "A guard for refining a switch case in {@link ASTSwitchLabel}s. This is a Java 21 language feature. <pre class=\"grammar\"> SwitchLabel := \"case\" {@linkplain ASTPattern Pattern} Guard? Guard ::= \"when\" {@linkplain ASTExpression Expression} </pre> @see <a href=\"https://openjdk.org/jeps/441\">JEP 441: Pattern Matching for switch</a>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTGuard"
                },
                {
                    "method_name": "getGuard",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getGuard()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTGuard"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTGuard"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTGuard"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "CommentAssignmentPass",
            "class_package": "net.sourceforge.pmd.lang.java.ast.CommentAssignmentPass",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/CommentAssignmentPass.java",
            "class_comment": null,
            "APIs_contained_in_class_count": 10,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "assignCommentsToDeclarations",
                    "method_signature": "static public void assignCommentsToDeclarations(net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.CommentAssignmentPass"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTModifierList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModifierList",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModifierList.java",
            "class_comment": "List of modifiers of a declaration. <p>This class keeps track of two modifier sets: the {@linkplain #getExplicitModifiers() explicit} one, which is the modifiers that appeared in the source, and the {@linkplain #getEffectiveModifiers() effective} one, which includes modifiers implicitly given by the context of the node. <pre class=\"grammar\"> ModifierList ::= Modifier Modifier ::= \"public\" | \"private\"| \"protected\"| \"final\"| \"abstract\" | \"static\" | \"strictfp\"| \"synchronized\" | \"native\" | \"default\"| \"volatile\" | \"transient\"| {@linkplain ASTAnnotation Annotation} LocalVarModifierList ::= ( \"final\" | {@link ASTAnnotation Annotation} ) AnnotationList ::= {@link ASTAnnotation Annotation} EmptyModifierList::= () </pre>",
            "APIs_contained_in_class_count": 80,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getOwner",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.Annotatable getOwner()",
                    "method_comment": "Returns the node owning this modifier list.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "hasAny",
                    "method_signature": "public boolean hasAny(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "hasAll",
                    "method_signature": "public boolean hasAll(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "getExplicitModifiers",
                    "method_signature": "public java.util.Set<JModifier> getExplicitModifiers()",
                    "method_comment": "Returns the set of modifiers written out in the source explicitly. The returned set is unmodifiable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "hasAnyExplicitly",
                    "method_signature": "public boolean hasAnyExplicitly(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "getEffectiveModifiers",
                    "method_signature": "public java.util.Set<JModifier> getEffectiveModifiers()",
                    "method_comment": "Returns the {@linkplain #getExplicitModifiers() declared modifiers}, plus the modifiers that are implicitly bestowed by the context or the type of this declaration. E.g. an interface is implicitly abstract, while an interface field is implicitly static. The returned set is unmodifiable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "hasAllExplicitly",
                    "method_signature": "public boolean hasAllExplicitly(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModifierList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTMethodReference",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[QualifiableExpression, LeftRecursiveNode, ASTPrimaryExpression, MethodUsage, FunctionalExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTMethodReference.java",
            "class_comment": "Method or constructor reference expression. <pre class=\"grammar\"> MethodReference ::= {@link ASTExpression Expression} \"::\" {@link ASTTypeArguments TypeArguments}? &lt;IDENTIFIER&gt; | {@link ASTTypeExpression TypeExpression} \"::\" {@link ASTTypeArguments TypeArguments}? \"new\" </pre>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getMethodName",
                    "method_signature": "public java.lang.String getMethodName()",
                    "method_comment": "Returns the method name, or an {@link JConstructorSymbol#CTOR_NAME} if this is a {@linkplain #isConstructorReference() constructor reference}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getLhs",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.TypeNode getLhs()",
                    "method_comment": "Returns the LHS, whether it is a type or an expression. Returns null if this is an unqualified method call.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()",
                    "method_comment": "Returns the node to the left of the \"::\". This may be a {@link ASTTypeExpression type expression}, or an {@link ASTAmbiguousName ambiguous name}. <p>Note that if this is a {@linkplain #isConstructorReference() constructor reference}, then this can only return a {@linkplain ASTTypeExpression type expression}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": "Returns the type of the functional interface. E.g. in {@code stringStream.map(String::isEmpty)}, this is {@code java.util.function.Function<java.lang.String, java.lang.Boolean>}. @see #getFunctionalMethod() @see #getReferencedMethod()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getFunctionalMethod",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getFunctionalMethod()",
                    "method_comment": "Returns the method that is overridden in the functional interface. E.g. in {@code stringStream.map(String::isEmpty)}, this is {@code java.util.function.Function#apply(java.lang.String) -> java.lang.Boolean} @see #getReferencedMethod() @see #getTypeMirror()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "isConstructorReference",
                    "method_signature": "public boolean isConstructorReference()",
                    "method_comment": "Returns true if this is a constructor reference, e.g. {@code ArrayList::new}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getReferencedMethod",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getReferencedMethod()",
                    "method_comment": "Returns the method that is referenced. E.g. in {@code stringStream.map(String::isEmpty)}, this is {@code java.lang.String.isEmpty() -> boolean}. <p>This is called the <i>compile-time declaration</i> of the method reference in the JLS. <p>If no such method can be found, returns {@link TypeSystem#UNRESOLVED_METHOD}. @see #getFunctionalMethod() @see #getTypeMirror()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getExplicitTypeArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeArguments getExplicitTypeArguments()",
                    "method_comment": "Returns the explicit type arguments mentioned after the \"::\" if they exist. Type arguments mentioned before the \"::\", if any, are contained within the {@linkplain #getQualifier() lhs type}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodReference"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTRecordComponentList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList",
            "class_extends": "[ASTMaybeEmptyListOf<ASTRecordComponent>]",
            "class_implements": "[AllChildrenAreOfType<ASTRecordComponent>, SymbolDeclaratorNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTRecordComponentList.java",
            "class_comment": "Defines the state description of a {@linkplain ASTRecordDeclaration RecordDeclaration} (JDK 16 feature). <pre class=\"grammar\"> RecordComponentList ::= \"(\" ( {@linkplain ASTRecordComponent RecordComponent} ( \",\" {@linkplain ASTRecordComponent RecordComponent} ) )? \")\" </pre>",
            "APIs_contained_in_class_count": 90,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if the last component is varargs.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JConstructorSymbol getSymbol()",
                    "method_comment": "This returns the symbol for the canonical constructor of the record. There may be a compact record constructor declaration, in which case they share the same symbol.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTFormalParameter",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[Annotatable, VariableIdOwner, TypeNode, FinalizableNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTFormalParameter.java",
            "class_comment": "Formal parameter node for a {@linkplain ASTFormalParameters formal parameter list}. This is distinct from {@linkplain ASTLambdaParameter lambda parameters}. <p>The varargs ellipsis {@code \"...\"} is parsed as an {@linkplain ASTArrayTypeDim array dimension} in the type node. <pre class=\"grammar\"> FormalParameter ::= {@link ASTModifierList LocalVarModifierList} {@link ASTType Type} {@link ASTVariableDeclaratorId VariableDeclaratorId} </pre>",
            "APIs_contained_in_class_count": 106,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if this node is a varargs parameter. Then, the type node is an {@link ASTArrayType ArrayType}, and its last dimension {@linkplain ASTArrayTypeDim#isVarargs() is varargs}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": "Returns the declarator ID of this formal parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getOwnerList",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getOwnerList()",
                    "method_comment": "Returns the list of formal parameters containing this param.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Returns the type node of this formal parameter. <p>If this formal parameter is varargs, the type node is an {@link ASTArrayType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameter"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": "Returns the compile-time type of this node. For example, for a string literal, returns the type mirror for {@link String}, for a method call, returns the return type of the call, etc. <p>This method ignores conversions applied to the value of the node because of its context. For example, in {@code 1 + \"\"}, the numeric literal will have type {@code int}, but it is converted to {@code String} by the surrounding concatenation expression. Similarly, in {@code Collections.singletonList(1)}, the {@link ASTNumericLiteral} node has type {@code int}, but the type of the method formal is {@link Integer}, and boxing is applied at runtime. Possibly, an API will be added to expose this information. @return The type mirror. Never returns null; if the type is unresolved, returns     {@link TypeSystem#UNKNOWN}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                }
            ]
        },
        {
            "class_name": "ASTTypeArguments",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTTypeArguments",
            "class_extends": "[ASTMaybeEmptyListOf<ASTType>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTTypeArguments.java",
            "class_comment": "Represents a list of type arguments. This is different from {@linkplain ASTTypeParameters type parameters}! <pre class=\"grammar\">TypeArguments ::= \"&lt;\" {@linkplain ASTReferenceType TypeArgument} ( \",\" {@linkplain ASTReferenceType TypeArgument} ) \"&gt;\"| \"&lt;\" \"&gt;\" </pre>",
            "APIs_contained_in_class_count": 88,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeArguments"
                },
                {
                    "method_name": "isDiamond",
                    "method_signature": "public boolean isDiamond()",
                    "method_comment": "Returns true if this is a diamond, that is, the actual type arguments are inferred. In this case this list has no children.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTTypeArguments"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTModuleDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[Annotatable]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleDeclaration.java",
            "class_comment": "A module declaration. This is found at the top-level of a {@linkplain ASTCompilationUnit modular compilation unit}. <pre clas=\"grammar\"> ModuleDeclaration ::= {@linkplain ASTModifierList AnnotationList} \"open\"? \"module\" {@linkplain ASTModuleName ModuleName} \"{\" {@linkplain ASTModuleDirective ModuleDirective} \"}\" </pre>",
            "APIs_contained_in_class_count": 81,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the declared module. Module names look like package names, eg {@code java.base}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration"
                },
                {
                    "method_name": "isOpen",
                    "method_signature": "public boolean isOpen()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration"
                },
                {
                    "method_name": "getDirectives",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTModuleDirective> getDirectives()",
                    "method_comment": "Returns a stream with all directives declared by the module.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTAnnotation",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[ASTMemberValue, TypeNode, Iterable<ASTMemberValuePair>]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAnnotation.java",
            "class_comment": "Represents an annotation. <pre class=\"grammar\"> Annotation ::= \"@\" {@link ASTClassOrInterfaceType ClassName} {@link ASTAnnotationMemberList AnnotationMemberList}? </pre>",
            "APIs_contained_in_class_count": 89,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTMemberValuePair> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": "Returns the simple name of the annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getMembers",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMemberValuePair> getMembers()",
                    "method_comment": "Returns the stream of explicit members for this annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getAttribute",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTMemberValue getAttribute(java.lang.String)",
                    "method_comment": "Returns the value of the attribute with the given name, returns null if no such attribute was mentioned. For example, for the attribute named \"value\": <pre>{@code - @SuppressWarnings -> returns null - @SuppressWarning(\"fallthrough\") -> returns \"fallthrough\" - @SuppressWarning(value={\"fallthrough\"}) -> returns {\"fallthrough\"} - @SuppressWarning({\"fallthrough\", \"rawtypes\"}) -> returns {\"fallthrough\", \"rawtypes\"} }</pre> @param attrName Name of an attribute",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getFlatValue",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMemberValue> getFlatValue(java.lang.String)",
                    "method_comment": "Return the expression values for the attribute with the given name. This may flatten an array initializer. For example, for the attribute named \"value\": <pre>{@code - @SuppressWarnings -> returns empty node stream - @SuppressWarning(\"fallthrough\") -> returns [\"fallthrough\"] - @SuppressWarning(value={\"fallthrough\"}) -> returns [\"fallthrough\"] - @SuppressWarning({\"fallthrough\", \"rawtypes\"}) -> returns [\"fallthrough\", \"rawtypes\"] }</pre>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getMemberList",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList getMemberList()",
                    "method_comment": "Returns the list of members, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getAnnotationName",
                    "method_signature": "public java.lang.String getAnnotationName()",
                    "method_comment": "Returns the name of the annotation as it is used, eg {@code java.lang.Override} or {@code Override}. @deprecated Use {@link #getTypeMirror()} instead",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JClassType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()",
                    "method_comment": "Returns the node that represents the name of the annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnnotation"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": "Returns the constant value of this node, if this is a constant expression. Otherwise, or if some references couldn't be resolved, returns null. Note that {@link ASTNullLiteral null} is not a constant value, so this method's returning null is not a problem. Note that annotations are not given a constant value by this implementation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMemberValue"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTMethodDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration",
            "class_extends": "[AbstractMethodOrConstructorDeclaration<JMethodSymbol>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTMethodDeclaration.java",
            "class_comment": "A method declaration, in a class or interface declaration. Since 7.0, this also represents annotation methods. Annotation methods have a much more restricted grammar though, in particular: <ul> <li>They can't declare a {@linkplain #getThrowsList() throws clause} <li>They can't declare {@linkplain #getTypeParameters() type parameters} <li>Their {@linkplain #getFormalParameters() formal parameters} must be empty <li>They can't be declared void <li>They must be abstract </ul> They can however declare a {@link #getDefaultClause() default value}. <pre class=\"grammar\"> MethodDeclaration ::= {@link ASTModifierList ModifierList} {@link ASTTypeParameters TypeParameters}? {@link ASTType Type} &lt;IDENTIFIER&gt; {@link ASTFormalParameters FormalParameters} {@link ASTArrayDimensions ArrayDimensions}? {@link ASTThrowsList ThrowsList}? ({@link ASTBlock Block} | \";\" ) </pre>",
            "APIs_contained_in_class_count": 120,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the simple name of the method.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getGenericSignature",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "isVoid",
                    "method_signature": "public boolean isVoid()",
                    "method_comment": "Returns true if the result type of this method is {@code void}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getMethodName",
                    "method_signature": "public java.lang.String getMethodName()",
                    "method_comment": "Returns the simple name of the method. @deprecated Use {@link #getName()}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JExecutableSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "isMainMethod",
                    "method_signature": "public boolean isMainMethod()",
                    "method_comment": "Returns whether this is a main method declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getResultTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getResultTypeNode()",
                    "method_comment": "Returns the result type node of the method. This may be a {@link ASTVoidType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "isOverridden",
                    "method_signature": "public boolean isOverridden()",
                    "method_comment": "Returns true if this method is overridden.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getOverriddenMethod",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getOverriddenMethod()",
                    "method_comment": "Returns the signature of the method this method overrides in a supertype. Note that this method may be implementing several methods of super-interfaces at once, in that case, an arbitrary one is returned. <p>If the method has an {@link Override} annotation, but we couldn't resolve any method that is actually implemented, this will return {@link TypeSystem#UNRESOLVED_METHOD}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getAccessedRecordComponent",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordComponent getAccessedRecordComponent()",
                    "method_comment": "If this method declaration is an explicit record component accessor, returns the corresponding record component. Otherwise returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getDefaultClause",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTDefaultValue getDefaultClause()",
                    "method_comment": "Returns the default clause, if this is an annotation method declaration that features one. Otherwise returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getExtraDimensions",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions getExtraDimensions()",
                    "method_comment": "Returns the extra array dimensions that may be after the formal parameters.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if this node's last formal parameter is varargs.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": "Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getArity",
                    "method_signature": "public int getArity()",
                    "method_comment": "Returns the number of formal parameters expected by this declaration. This excludes any receiver parameter, which is irrelevant to arity.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getFormalParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()",
                    "method_comment": "Returns the formal parameters node of this method or constructor.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getThrowsList",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList()",
                    "method_comment": "Returns the {@code throws} clause of this declaration, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTReceiverParameter",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTReceiverParameter",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTReceiverParameter.java",
            "class_comment": "Receiver parameter. A receiver parameter is syntactically part of a {@linkplain ASTFormalParameters formal parameter list}, though it does not declare a variable or affect the arity of the method in any way. Its only purpose is to annotate the type of the object on which the method call is issued. It was introduced with Java 8. <p>For example: <pre> class Foo { abstract void foo(@Bar Foo this); } </pre> <p>Receiver parameters are only allowed on two types of declarations: <ul> <li>Instance method declarations of a class or interface (not annotation) type <li>Constructor declaration of a non-static inner class. It then has the type of the enclosing instance. </ul> In both cases it must be the first parameter of the formal parameter list, and is entirely optional. <pre class=\"grammar\"> ReceiverParameter ::= {@link ASTClassOrInterfaceType ClassOrInterfaceType} (&lt;IDENTIFIER&gt; \".\")? \"this\" </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReceiverParameter"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReceiverParameter"
                },
                {
                    "method_name": "getReceiverType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getReceiverType()",
                    "method_comment": "Returns the type of the receiver parameter (eg {@code Foo} in {@code Foo this}. In an instance method, that type must be the class or interface in which the method is declared, and the name of the receiver parameter must be {@code this}. <p> In an inner class's constructor, the type of the receiver parameter must be the class or interface which is the immediately enclosing type declaration of the inner class, call it C, and the name of the parameter must be {@code Identifier.this} where {@code Identifier} is the simple name of C.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReceiverParameter"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTReceiverParameter"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTEmptyStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTEmptyStatement.java",
            "class_comment": "An empty statement (useless). <pre class=\"grammar\"> EmptyStatement ::= \";\" </pre>",
            "APIs_contained_in_class_count": 73,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTVariableAccess",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTNamedReferenceExpr]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTVariableAccess.java",
            "class_comment": "An unqualified reference to a variable (either local, or a field that is in scope). <pre class=\"grammar\"> VariableAccess ::= &lt;IDENTIFIER&gt; </pre> @implNote {@linkplain ASTAmbiguousName Ambiguous names} are promoted to this status in the syntactic contexts, where we know they're definitely variable references.",
            "APIs_contained_in_class_count": 86,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getSignature",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JVariableSig getSignature()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTVariableAccess"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getReferencedSym",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JVariableSymbol getReferencedSym()",
                    "method_comment": "Returns the symbol referenced by this variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$ASTNamedReferenceExpr"
                },
                {
                    "method_name": "getAccessType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr$AccessType getAccessType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr"
                }
            ]
        },
        {
            "class_name": "TypesFromAst",
            "class_package": "net.sourceforge.pmd.lang.java.ast.TypesFromAst",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/TypesFromAst.java",
            "class_comment": "Builds type mirrors from AST nodes.",
            "APIs_contained_in_class_count": 11,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "fromAst",
                    "method_signature": "static public java.util.List<JTypeMirror> fromAst(net.sourceforge.pmd.lang.java.types.TypeSystem, net.sourceforge.pmd.lang.java.types.Substitution, java.util.List)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypesFromAst"
                },
                {
                    "method_name": "fromAst",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.types.JTypeMirror fromAst(net.sourceforge.pmd.lang.java.types.TypeSystem, net.sourceforge.pmd.lang.java.types.Substitution, net.sourceforge.pmd.lang.java.ast.ASTType)",
                    "method_comment": "Builds a type from an AST node. @param lexicalSubst A substitution to apply to type variables @param node         An ast node",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypesFromAst"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTModuleName",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTModuleName",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTModuleName.java",
            "class_comment": "The name of a module. Module names look like package names, eg {@code java.base}.",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": "Returns the name of the declared module. Module names look like package names, eg {@code java.base}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleName"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleName"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleName"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleName"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleName"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTModuleName"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTClassOrInterfaceBody",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody",
            "class_extends": "[ASTTypeBody, ASTList<ASTBodyDeclaration>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTClassOrInterfaceBody.java",
            "class_comment": "Represents the body of a {@linkplain ASTClassOrInterfaceDeclaration class or interface declaration}. This includes anonymous classes, including those defined within an {@linkplain ASTEnumConstant enum constant}. <pre class=\"grammar\"> ClassOrInterfaceBody ::=\"{\"{@linkplain ASTBodyDeclaration ClassOrInterfaceBodyDeclaration} \"}\" </pre>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTNullLiteral",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral",
            "class_extends": "[AbstractLiteral]",
            "class_implements": "[ASTLiteral]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTNullLiteral.java",
            "class_comment": "The null literal. <pre class=\"grammar\"> NullLiteral ::= \"null\" </pre>",
            "APIs_contained_in_class_count": 92,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNullLiteral"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isStringLiteral",
                    "method_signature": "public boolean isStringLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTStringLiteral string literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isCharLiteral",
                    "method_signature": "public boolean isCharLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTCharLiteral character literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNullLiteral",
                    "method_signature": "public boolean isNullLiteral()",
                    "method_comment": "Returns true if this is the {@linkplain ASTNullLiteral null literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "public boolean isBooleanLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNumericLiteral",
                    "method_signature": "public boolean isNumericLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral numeric literal} of any kind.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isIntLiteral",
                    "method_signature": "public boolean isIntLiteral()",
                    "method_comment": "Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isLongLiteral",
                    "method_signature": "public boolean isLongLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isFloatLiteral",
                    "method_signature": "public boolean isFloatLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral float literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isDoubleLiteral",
                    "method_signature": "public boolean isDoubleLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral double literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                }
            ]
        },
        {
            "class_name": "ASTForUpdate",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTForUpdate",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTForUpdate.java",
            "class_comment": "Update clause of a {@linkplain ASTForStatement for statement}. <pre class=\"grammar\"> ForUpdate ::= {@linkplain ASTStatementExpressionList StatementExpressionList} </pre>",
            "APIs_contained_in_class_count": 74,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForUpdate"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForUpdate"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForUpdate"
                },
                {
                    "method_name": "getExprList",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList getExprList()",
                    "method_comment": "Returns the expression list nested within this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForUpdate"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTLambdaParameter",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter",
            "class_extends": "[AbstractJavaTypeNode]",
            "class_implements": "[FinalizableNode, InternalInterfaces.VariableIdOwner]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTLambdaParameter.java",
            "class_comment": "Formal parameter of a lambda expression. Child of {@link ASTLambdaParameterList}. <pre class=\"grammar\"> LambdaParameter ::= {@link ASTModifierList LocalVarModifierList} ( \"var\" | {@link ASTType Type} ) {@link ASTVariableDeclaratorId VariableDeclaratorId} | {@link ASTModifierList EmptyModifierList} {@link ASTVariableDeclaratorId VariableDeclaratorId} </pre>",
            "APIs_contained_in_class_count": 106,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getOwner",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression getOwner()",
                    "method_comment": "Returns the lambda that owns this parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": "Returns the declarator ID of this formal parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Returns the type node of this formal parameter.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "isTypeInferred",
                    "method_signature": "public boolean isTypeInferred()",
                    "method_comment": "If true, this formal parameter represents one without explicit types. This can appear as part of a lambda expression with java11 using \"var\". @see ASTVariableDeclaratorId#isTypeInferred()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameter"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTCharLiteral",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral",
            "class_extends": "[AbstractLiteral]",
            "class_implements": "[ASTLiteral]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTCharLiteral.java",
            "class_comment": "Represents a character literal. The image of this node can be the literal as it appeared in the source, but JavaCC performs its own unescaping and some escapes may be lost. At the very least it has delimiters. {@link #getConstValue()} allows to recover the actual runtime value.",
            "APIs_contained_in_class_count": 92,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Character getConstValue()",
                    "method_comment": "Gets the char value of this literal.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCharLiteral"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isStringLiteral",
                    "method_signature": "public boolean isStringLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTStringLiteral string literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isCharLiteral",
                    "method_signature": "public boolean isCharLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTCharLiteral character literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNullLiteral",
                    "method_signature": "public boolean isNullLiteral()",
                    "method_comment": "Returns true if this is the {@linkplain ASTNullLiteral null literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "public boolean isBooleanLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNumericLiteral",
                    "method_signature": "public boolean isNumericLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral numeric literal} of any kind.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isIntLiteral",
                    "method_signature": "public boolean isIntLiteral()",
                    "method_comment": "Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isLongLiteral",
                    "method_signature": "public boolean isLongLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isFloatLiteral",
                    "method_signature": "public boolean isFloatLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral float literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isDoubleLiteral",
                    "method_signature": "public boolean isDoubleLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral double literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                }
            ]
        },
        {
            "class_name": "ASTRecordComponent",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[VariableIdOwner, AccessNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTRecordComponent.java",
            "class_comment": "Defines a single component of a {@linkplain ASTRecordDeclaration RecordDeclaration} (JDK 16 feature). <p>The varargs ellipsis {@code \"...\"} is parsed as an {@linkplain ASTArrayTypeDim array dimension} in the type node. <p>Record components declare a field, and if a canonical constructor is synthesized by the compiler, also a formal parameter (which is in scope in the body of a {@linkplain ASTRecordConstructorDeclaration compact record constructor}). They also may imply the declaration of an accessor method. <ul> <li>The symbol exposed by the {@link ASTVariableDeclaratorId} is the field symbol. <li> The formal parameter symbol is accessible in the formal parameter list of the {@link JConstructorSymbol} for the {@linkplain ASTRecordComponentList#getSymbol() canonical constructor}. <li>The symbol for the accessor method can be found in the {@link JClassSymbol#getDeclaredMethods() declared methods} of the symbol for the record declaration. TODO when we support usage search this needs to be more straightforward </ul> <pre class=\"grammar\"> RecordComponent ::= {@linkplain ASTAnnotation Annotation} {@linkplain ASTType Type} {@linkplain ASTVariableDeclaratorId VariableDeclaratorId} </pre>",
            "APIs_contained_in_class_count": 102,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if this component's corresponding formal parameter in the canonical constructor of the record is varargs. The type node of this component is in this case an {@link ASTArrayType}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent"
                },
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordComponent"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTRecordPattern",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTPattern]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTRecordPattern.java",
            "class_comment": "A record pattern, a Java 21 language feature. <pre class=\"grammar\"> RecordPattern ::= {@linkplain ASTReferenceType ReferenceType} {@linkplain ASTPatternList PatternList} </pre> @see ASTRecordDeclaration @see <a href=\"https://openjdk.org/jeps/405\">JEP 405: Record Patterns (Preview)</a> (Java 19) @see <a href=\"https://openjdk.org/jeps/432\">JEP 432: Record Patterns (Second Preview)</a> (Java 20) @see <a href=\"https://openjdk.org/jeps/440\">JEP 440: Record Patterns</a> (Java 21)",
            "APIs_contained_in_class_count": 76,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": "Returns the declared variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTReferenceType getTypeNode()",
                    "method_comment": "Gets the type against which the expression is tested.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTRecordPattern"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTImplementsList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTImplementsList",
            "class_extends": "[ASTNonEmptyList<ASTClassOrInterfaceType>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTImplementsList.java",
            "class_comment": "Represents the {@code implements} clause of a class declaration. <pre class=\"grammar\"> ImplementsList ::= \"implements\" {@link ASTClassOrInterfaceType ClassOrInterfaceType} ( \",\" {@link ASTClassOrInterfaceType ClassOrInterfaceType}) </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTImplementsList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTAssertStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAssertStatement.java",
            "class_comment": "Represents an {@code assert} statement. <pre class=\"grammar\"> AssertStatement ::= \"assert\" {@linkplain ASTExpression Expression} ( \":\" {@linkplain ASTExpression Expression} )? \";\" </pre>",
            "APIs_contained_in_class_count": 76,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": "Returns the expression tested by this assert statement.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement"
                },
                {
                    "method_name": "getDetailMessageNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getDetailMessageNode()",
                    "method_comment": "Returns the expression that corresponds to the detail message, i.e. the expression after the colon, if it's present.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement"
                },
                {
                    "method_name": "hasDetailMessage",
                    "method_signature": "public boolean hasDetailMessage()",
                    "method_comment": "Returns true if this assert statement has a \"detail message\" expression. In that case, {@link #getDetailMessageNode()} doesn't return null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAssertStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTEnumDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration",
            "class_extends": "[AbstractAnyTypeDeclaration]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTEnumDeclaration.java",
            "class_comment": "Represents an enum declaration. This is a {@linkplain Node#isFindBoundary() find boundary} for tree traversal methods. <p>An enum declaration is implicitly final <i>unless it contains at least one enum constant that has a class body</i>. A nested enum type is implicitly static. <pre class=\"grammar\"> EnumDeclaration ::= {@link ASTModifierList ModifierList} \"enum\" &lt;IDENTIFIER&gt; {@linkplain ASTImplementsList ImplementsList}? {@link ASTEnumBody EnumBody} </pre>",
            "APIs_contained_in_class_count": 130,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getCanonicalName",
                    "method_signature": "public java.lang.String getCanonicalName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JClassSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTEnumBody getBody()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JClassType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getBinaryName",
                    "method_signature": "public java.lang.String getBinaryName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTEnumDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isInterface",
                    "method_signature": "public boolean isInterface()",
                    "method_comment": "Returns true if this is an interface type declaration (including annotation types). This is consistent with {@link Class#isInterface()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnnotation",
                    "method_signature": "public boolean isAnnotation()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnnotationTypeDeclaration annotation type declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isEnum",
                    "method_signature": "public boolean isEnum()",
                    "method_comment": "Returns true if this is an {@linkplain ASTEnumDeclaration enum class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRecord",
                    "method_signature": "public boolean isRecord()",
                    "method_comment": "Returns true if this is an {@linkplain ASTRecordDeclaration record class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the name of the package in which this class is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getRecordComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList getRecordComponents()",
                    "method_comment": "Returns the record components declared by this class. If this is not a record declaration, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getEnumConstants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTEnumConstant> getEnumConstants()",
                    "method_comment": "Returns the enum constants declared by this enum. If this is not an enum declaration, returns an empty stream.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": "Returns true if this is an abstract type. Interfaces and annotations types are implicitly abstract.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isTopLevel",
                    "method_signature": "public boolean isTopLevel()",
                    "method_comment": "Returns true if this type is declared at the top-level of a file.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isNested",
                    "method_signature": "public boolean isNested()",
                    "method_comment": "Returns true if this type declaration is nested inside an interface, class or annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isLocal",
                    "method_signature": "public boolean isLocal()",
                    "method_comment": "Returns true if the class is declared inside a block other than the body of another class, or the top level. Anonymous classes are not considered local. Only class declarations can be local. Local classes cannot be static.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularClass",
                    "method_signature": "public boolean isRegularClass()",
                    "method_comment": "Returns true if this is a regular class declaration (not an enum, not a record, not an interface or annotation). Note that eg {@link JClassSymbol#isClass()} counts records and enums in, just like {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getSuperInterfaceTypeNodes",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()",
                    "method_comment": "Returns the list of interfaces implemented by this class, or extended by this interface. Returns null if no such list is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTBodyDeclaration> getDeclarations()",
                    "method_comment": "Retrieves the member declarations (fields, methods, classes, etc.) from the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getOperations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMethodOrConstructorDeclaration> getOperations()",
                    "method_comment": "Returns the operations declared in this class (methods and constructors).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnonymous",
                    "method_signature": "public boolean isAnonymous()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnonymousClassDeclaration anonymous class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularInterface",
                    "method_signature": "public boolean isRegularInterface()",
                    "method_comment": "Returns true if this is a regular interface declaration (not an annotation). Note that {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTDoStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[ASTLoopStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTDoStatement.java",
            "class_comment": "Represents a {@code do ... while} statement. <pre class=\"grammar\"> DoStatement ::= \"do\" {@linkplain ASTStatement Statement} \"while\" \"(\" {@linkplain ASTExpression Expression} \")\" \";\" </pre>",
            "APIs_contained_in_class_count": 76,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody()",
                    "method_comment": "Returns the statement that will be run while the guard evaluates to true.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": "Returns the node that represents the guard of this loop. This may be any expression of type boolean.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTDoStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTClassOrInterfaceDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration",
            "class_extends": "[AbstractAnyTypeDeclaration]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTClassOrInterfaceDeclaration.java",
            "class_comment": "Represents class and interface declarations. This is a {@linkplain Node#isFindBoundary() find boundary} for tree traversal methods. <pre class=\"grammar\"> ClassOrInterfaceDeclaration ::= {@link ASTModifierList ModifierList} ( \"class\" | \"interface\" ) &lt;IDENTIFIER&gt; {@link ASTTypeParameters TypeParameters}? {@link ASTExtendsList ExtendsList}? {@link ASTImplementsList ImplementsList}? {@link ASTClassOrInterfaceBody ClassOrInterfaceBody} </pre>",
            "APIs_contained_in_class_count": 131,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isInterface",
                    "method_signature": "public boolean isInterface()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getCanonicalName",
                    "method_signature": "public java.lang.String getCanonicalName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getPermittedSubclasses",
                    "method_signature": "public java.util.List<ASTClassOrInterfaceType> getPermittedSubclasses()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JClassSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JClassType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getBinaryName",
                    "method_signature": "public java.lang.String getBinaryName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "isRegularClass",
                    "method_signature": "public boolean isRegularClass()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getSuperClassTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()",
                    "method_comment": "Returns the superclass type node if this node is a class declaration and explicitly declares an {@code extends} clause. Superinterfaces of an interface are not considered. <p>Returns {@code null} otherwise.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "isRegularInterface",
                    "method_signature": "public boolean isRegularInterface()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isAnnotation",
                    "method_signature": "public boolean isAnnotation()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnnotationTypeDeclaration annotation type declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isEnum",
                    "method_signature": "public boolean isEnum()",
                    "method_comment": "Returns true if this is an {@linkplain ASTEnumDeclaration enum class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRecord",
                    "method_signature": "public boolean isRecord()",
                    "method_comment": "Returns true if this is an {@linkplain ASTRecordDeclaration record class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the name of the package in which this class is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getRecordComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList getRecordComponents()",
                    "method_comment": "Returns the record components declared by this class. If this is not a record declaration, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getEnumConstants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTEnumConstant> getEnumConstants()",
                    "method_comment": "Returns the enum constants declared by this enum. If this is not an enum declaration, returns an empty stream.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": "Returns true if this is an abstract type. Interfaces and annotations types are implicitly abstract.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody()",
                    "method_comment": "Returns the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isTopLevel",
                    "method_signature": "public boolean isTopLevel()",
                    "method_comment": "Returns true if this type is declared at the top-level of a file.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isNested",
                    "method_signature": "public boolean isNested()",
                    "method_comment": "Returns true if this type declaration is nested inside an interface, class or annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isLocal",
                    "method_signature": "public boolean isLocal()",
                    "method_comment": "Returns true if the class is declared inside a block other than the body of another class, or the top level. Anonymous classes are not considered local. Only class declarations can be local. Local classes cannot be static.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getSuperInterfaceTypeNodes",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()",
                    "method_comment": "Returns the list of interfaces implemented by this class, or extended by this interface. Returns null if no such list is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTBodyDeclaration> getDeclarations()",
                    "method_comment": "Retrieves the member declarations (fields, methods, classes, etc.) from the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getOperations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMethodOrConstructorDeclaration> getOperations()",
                    "method_comment": "Returns the operations declared in this class (methods and constructors).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnonymous",
                    "method_signature": "public boolean isAnonymous()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnonymousClassDeclaration anonymous class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "TokenUtils",
            "class_package": "net.sourceforge.pmd.lang.java.ast.TokenUtils",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/TokenUtils.java",
            "class_comment": "PRIVATE FOR NOW, find out what is useful to move to the interface (probably everything). @author Clément Fournier",
            "APIs_contained_in_class_count": 12,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "expectKind",
                    "method_signature": "static public void expectKind(net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken, int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TokenUtils"
                },
                {
                    "method_name": "nthPrevious",
                    "method_signature": "static public T nthPrevious(net.sourceforge.pmd.lang.ast.GenericToken, net.sourceforge.pmd.lang.ast.GenericToken, int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TokenUtils"
                },
                {
                    "method_name": "nthFollower",
                    "method_signature": "static public T nthFollower(net.sourceforge.pmd.lang.ast.GenericToken, int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TokenUtils"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        },
        {
            "class_name": "ASTLocalVariableDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[// ModifierList is parsed separately in BlockStatement\nLeftRecursiveNode, InternalInterfaces.MultiVariableIdOwner, Iterable<ASTVariableDeclaratorId>, FinalizableNode, ASTStatement]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTLocalVariableDeclaration.java",
            "class_comment": null,
            "APIs_contained_in_class_count": 105,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Gets the type node for this variable declaration statement. With Java10 and local variable type inference, there might be no type node at all. @return The type node or <code>null</code> @see #isTypeInferred()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "isTypeInferred",
                    "method_signature": "public boolean isTypeInferred()",
                    "method_comment": "If true, this local variable declaration represents a declaration, which makes use of local variable type inference, e.g. java10 \"var\". You can receive the inferred type via {@link ASTVariableDeclarator#getType()}. @see ASTVariableDeclaratorId#isTypeInferred()",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<ASTVariableDeclaratorId> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$MultiVariableIdOwner"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getVarIds",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTVariableDeclaratorId> getVarIds()",
                    "method_comment": "Returns a stream of the variable ids declared by this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$MultiVariableIdOwner"
                }
            ]
        },
        {
            "class_name": "ASTFormalParameters",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameters",
            "class_extends": "[ASTList<ASTFormalParameter>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTFormalParameters.java",
            "class_comment": "A list of {@linkplain ASTFormalParameter formal parameters} in a method or constructor declaration. Some formal parameter lists may feature a {@linkplain ASTReceiverParameter receiver parameter}. That is not treated as a regular formal parameter, as it does not declare a variable. <pre class=\"grammar\"> FormalParameters ::=\"(\" \")\"|\"(\" ({@link ASTReceiverParameter ReceiverParameter} | {@link ASTFormalParameter FormalParameter}) (\",\" {@link ASTFormalParameter FormalParameter}) \")\" </pre>",
            "APIs_contained_in_class_count": 86,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of formal parameters. This excludes the receiver parameter, if any.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameters"
                },
                {
                    "method_name": "getReceiverParameter",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTReceiverParameter getReceiverParameter()",
                    "method_comment": "Returns the receiver parameter if it is present, otherwise returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFormalParameters"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTPatternList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTPatternList",
            "class_extends": "[ASTList<ASTPattern>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTPatternList.java",
            "class_comment": "Contains a potentially empty list of nested Patterns for {@linkplain ASTRecordPattern RecordPattern} (Java 21). <pre class=\"grammar\"> PatternList ::= \"(\" {@linkplain ASTPattern Pattern} ( \",\" {@linkplain ASTPattern pattern} ) \")\" </pre> @see <a href=\"https://openjdk.org/jeps/440\">JEP 440: Record Patterns</a>",
            "APIs_contained_in_class_count": 85,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTSwitchArrowBranch",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTSwitchBranch]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTSwitchArrowBranch.java",
            "class_comment": "A non-fallthrough switch rule, introduced with switch expressions. See {@link ASTSwitchLike}. <pre class=\"grammar\"> SwitchLabeledExpression ::= {@link ASTSwitchLabel SwitchLabel} \"-&gt;\" {@link ASTSwitchArrowRHS SwitchArrowRHS} </pre>",
            "APIs_contained_in_class_count": 78,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch"
                },
                {
                    "method_name": "getRightHandSide",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowRHS getRightHandSide()",
                    "method_comment": "Returns the right hand side of the arrow.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isDefault",
                    "method_signature": "public boolean isDefault()",
                    "method_comment": "Return true if this is the default branch.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                },
                {
                    "method_name": "getLabel",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchLabel getLabel()",
                    "method_comment": "Returns the label, which may be compound.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                },
                {
                    "method_name": "getNextBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch getNextBranch()",
                    "method_comment": "Returns the next branch, if it exists.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                },
                {
                    "method_name": "getPreviousBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch getPreviousBranch()",
                    "method_comment": "Returns the previous branch, if it exists.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTSwitchBranch"
                }
            ]
        },
        {
            "class_name": "ASTLambdaParameterList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameterList",
            "class_extends": "[ASTMaybeEmptyListOf<ASTLambdaParameter>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTLambdaParameterList.java",
            "class_comment": "The parameter list of a {@linkplain ASTLambdaExpression lambda expression}. <pre class=\"grammar\"> LambdaParameterList ::= \"(\" \")\" | \"(\" {@link ASTLambdaParameter LambdaParameter} (\",\" {@link ASTLambdaParameter LambdaParameter})\")\" </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLambdaParameterList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AllChildrenAreOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTForeachStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTForeachStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[ASTLoopStatement, InternalInterfaces.VariableIdOwner]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTForeachStatement.java",
            "class_comment": "Represents a \"foreach\"-loop on an {@link Iterable}. <pre class=\"grammar\"> ForeachStatement ::= \"for\" \"(\" ( {@linkplain ASTLocalVariableDeclaration LocalVariableDeclaration} | {@linkplain ASTRecordPattern RecordPattern} ) \":\" {@linkplain ASTExpression Expression} \")\" {@linkplain ASTStatement Statement} </pre> <p>Note: Using a {@linkplain ASTRecordPattern RecordPattern} in an enhanced for statement is a Java 20 Preview feature</p> @see <a href=\"https://openjdk.org/jeps/432\">JEP 432: Record Patterns (Second Preview)</a>",
            "APIs_contained_in_class_count": 77,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getVarId",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForeachStatement"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForeachStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForeachStatement"
                },
                {
                    "method_name": "getIterableExpr",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getIterableExpr()",
                    "method_comment": "Returns the expression that evaluates to the {@link Iterable} being looped upon.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForeachStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTForeachStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody()",
                    "method_comment": "Returns the statement that represents the body of this loop.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLoopStatement"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": "Returns the node that represents the condition of this loop. This may be any expression of type boolean. <p>If there is no specified guard, then returns null (in particular, returns null if this is a foreach loop).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLoopStatement"
                }
            ]
        },
        {
            "class_name": "ASTResource",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTResource",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTResource.java",
            "class_comment": "A resource of a {@linkplain ASTTryStatement try-with-resources}. This contains another node that represents the resource, according to the grammar below. <p>In the case of concise try-with resources, the subexpressions are required to be only field accesses or variable references to compile. <pre class=\"grammar\"> Resource ::= {@link ASTLocalVariableDeclaration LocalVariableDeclaration}| {@link ASTPrimaryExpression PrimaryExpression} </pre>",
            "APIs_contained_in_class_count": 77,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "getInitializer",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getInitializer()",
                    "method_comment": "Returns the initializer of the expression. If this is a concise resource, then returns that expression. If this is a local variable declaration, returns the initializer of the variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "isConciseResource",
                    "method_signature": "public boolean isConciseResource()",
                    "method_comment": "Returns true if this appears as an expression, and not as a local variable declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "getStableName",
                    "method_signature": "public java.lang.String getStableName()",
                    "method_comment": "Gets the name with which the resource can be accessed in the body of the try statement. If this is a {@linkplain #isConciseResource() concise resource}, then returns the sequence of names that identifies the expression. If this has a local variable declaration, then returns the name of the variable.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "asLocalVariableDeclaration",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration asLocalVariableDeclaration()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTResource"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTConstructorDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration",
            "class_extends": "[AbstractMethodOrConstructorDeclaration<JConstructorSymbol>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTConstructorDeclaration.java",
            "class_comment": "A constructor of a {@linkplain ASTConstructorDeclaration class} or {@linkplain ASTEnumDeclaration enum} declaration. <pre class=\"grammar\"> ConstructorDeclaration ::= {@link ASTModifierList ModifierList}{@link ASTTypeParameters TypeParameters}?&lt;IDENTIFIER&gt;{@link ASTFormalParameters FormalParameters}({@link ASTThrowsList ThrowsList})?{@link ASTBlock Block} </pre>",
            "APIs_contained_in_class_count": 112,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getName",
                    "method_signature": "public java.lang.String getName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getGenericSignature",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JExecutableSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "containsComment",
                    "method_signature": "public boolean containsComment()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if this node's last formal parameter is varargs.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getArity",
                    "method_signature": "public int getArity()",
                    "method_comment": "Returns the number of formal parameters expected by this declaration. This excludes any receiver parameter, which is irrelevant to arity.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getFormalParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()",
                    "method_comment": "Returns the formal parameters node of this method or constructor.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getThrowsList",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList()",
                    "method_comment": "Returns the {@code throws} clause of this declaration, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodOrConstructorDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTMethodCall",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall",
            "class_extends": "[AbstractInvocationExpr]",
            "class_implements": "[QualifiableExpression, ASTPrimaryExpression, MethodUsage, InvocationNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTMethodCall.java",
            "class_comment": "A method invocation expression. This node represents both qualified (with a left-hand side) and unqualified invocation expressions. <pre class=\"grammar\"> MethodCall ::=&lt;IDENTIFIER&gt; {@link ASTArgumentList ArgumentList}|{@link ASTExpression Expression} \".\" {@link ASTTypeArguments TypeArguments}? &lt;IDENTIFIER&gt; {@link ASTArgumentList ArgumentList} </pre>",
            "APIs_contained_in_class_count": 88,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getMethodName",
                    "method_signature": "public java.lang.String getMethodName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getOverloadSelectionInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.OverloadSelectionResult getOverloadSelectionInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getExplicitTypeArguments",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeArguments getExplicitTypeArguments()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTMethodCall"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getMethodType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType()",
                    "method_comment": "Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InvocationNode"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()",
                    "method_comment": "Returns the expression to the left of the \".\" if it exists. This may be a {@link ASTTypeExpression type expression}, or an {@link ASTAmbiguousName ambiguous name}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.QualifiableExpression"
                }
            ]
        },
        {
            "class_name": "ASTCompactConstructorDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTBodyDeclaration, AccessNode, SymbolDeclaratorNode]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTCompactConstructorDeclaration.java",
            "class_comment": "This defines a compact constructor for a {@linkplain ASTRecordDeclaration RecordDeclaration} (JDK 16 feature). Compact constructors implicitly declares formal parameters corresponding to the record component list. These can be fetched from {@link #getSymbol()}. <p>Compact record constructors must be declared \"public\". TODO make implicit formal parameter node and implement ASTMethodOrConstructorDeclaration. <pre class=\"grammar\"> CompactConstructorDeclaration ::={@link ASTModifierList Modifiers} &lt;IDENTIFIER&gt; {@link ASTBlock Block} </pre>",
            "APIs_contained_in_class_count": 104,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JConstructorSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordDeclaration getEnclosingType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getDeclarationNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration getDeclarationNode()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTCompactConstructorDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTExtendsList",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTExtendsList",
            "class_extends": "[ASTNonEmptyList<ASTClassOrInterfaceType>]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTExtendsList.java",
            "class_comment": "Represents the {@code extends} clause of a class or interface declaration. If the parent is an interface declaration, then these types are all interface types. Otherwise, then this list contains exactly one element. <pre class=\"grammar\"> ExtendsList ::= \"extends\" {@link ASTType Type} ( \",\" {@link ASTType Type} ) </pre>",
            "APIs_contained_in_class_count": 87,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "toStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream toStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExtendsList"
                },
                {
                    "method_name": "get",
                    "method_signature": "public N get(int)",
                    "method_comment": "@throws IndexOutOfBoundsException if not in range",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "isEmpty",
                    "method_signature": "public boolean isEmpty()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "size",
                    "method_signature": "public int size()",
                    "method_comment": "Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "iterator",
                    "method_signature": "public java.util.Iterator<Iterator<N> iterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "toList",
                    "method_signature": "public java.util.List<List<N> toList()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "sizeOrZero",
                    "method_signature": "static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmpty",
                    "method_signature": "static public java.util.List<List<N> orEmpty(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "orEmptyStream",
                    "method_signature": "static public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> orEmptyStream(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "singleOrNull",
                    "method_signature": "static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)",
                    "method_comment": "Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTList"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public T getFirstChild()",
                    "method_comment": "Returns the first child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public T getLastChild()",
                    "method_comment": "Returns the last child of this node, never null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.InternalInterfaces$AtLeastOneChildOfType"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "spliterator",
                    "method_signature": "public java.util.Spliterator<Spliterator<T> spliterator()",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                },
                {
                    "method_name": "forEach",
                    "method_signature": "public void forEach(java.util.function.Consumer)",
                    "method_comment": null,
                    "method_class": "java.lang.Iterable"
                }
            ]
        },
        {
            "class_name": "ASTThisExpression",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTPrimaryExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTThisExpression.java",
            "class_comment": "The \"this\" expression. Related to the {@link ASTSuperExpression \"super\"} pseudo-expression. <pre class=\"grammar\"> ThisExpression ::= \"this\"| {@link ASTClassOrInterfaceType TypeName} \".\" \"this\" </pre>",
            "APIs_contained_in_class_count": 83,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getQualifier",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getQualifier()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTThisExpression"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTArrayDimExpr",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTArrayDimExpr",
            "class_extends": "[AbstractJavaNode, ASTArrayTypeDim]",
            "class_implements": "[Annotatable]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTArrayDimExpr.java",
            "class_comment": "Represents an array dimension initialized with an expression in an {@linkplain ASTArrayAllocation array allocation expression}. This is always a child of {@link ASTArrayDimensions ArrayDimensions}. TODO not sure we need a separate node type here? <pre class=\"grammar\"> ArrayDimExpr ::= {@link ASTAnnotation TypeAnnotation} \"[\" {@link ASTExpression Expression} \"]\" </pre>",
            "APIs_contained_in_class_count": 80,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getLengthExpression",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getLengthExpression()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayDimExpr"
                },
                {
                    "method_name": "isVarargs",
                    "method_signature": "public boolean isVarargs()",
                    "method_comment": "Returns true if this is a varargs dimension. Varargs parameters are represented as an array type whose last dimension has this attribute set to true. Querying {@link ASTFormalParameter#isVarargs()} is more convenient.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTArrayTypeDim"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": "Returns all annotations present on this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                }
            ]
        },
        {
            "class_name": "ASTFinallyClause",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTFinallyClause",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTFinallyClause.java",
            "class_comment": "The \"finally\" clause of a {@linkplain ASTTryStatement try statement}. <pre class=\"grammar\"> FinallyClause ::= \"finally\" {@link ASTBlock Block} </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": "Returns the body of this finally clause.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFinallyClause"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFinallyClause"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFinallyClause"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFinallyClause"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTFinallyClause"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTClassLiteral",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral",
            "class_extends": "[AbstractJavaExpr]",
            "class_implements": "[ASTPrimaryExpression]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTClassLiteral.java",
            "class_comment": "A class literal. Class literals are {@linkplain ASTPrimaryExpression primary expressions}, but not proper {@linkplain ASTLiteral literals}, since they are represented by several tokens. <pre class=\"grammar\"> ClassLiteral ::= {@link ASTType Type} \".\" \"class\" </pre>",
            "APIs_contained_in_class_count": 83,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getTypeNode",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()",
                    "method_comment": "Returns the type node (this may be a {@link ASTVoidType}).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTClassLiteral"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": "Returns true if this expression is a compile-time constant, and is inlined.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                }
            ]
        },
        {
            "class_name": "ASTAnonymousClassDeclaration",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration",
            "class_extends": "[AbstractAnyTypeDeclaration]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTAnonymousClassDeclaration.java",
            "class_comment": "An anonymous class declaration. This can occur in a {@linkplain ASTConstructorCall class instance creation expression} or in an {@linkplain ASTEnumConstant enum constant declaration}. This is a {@linkplain Node#isFindBoundary() find boundary} for tree traversal methods. <pre class=\"grammar\"> AnonymousClassDeclaration ::= {@link ASTModifierList EmptyModifierList} {@link ASTClassOrInterfaceBody} </pre>",
            "APIs_contained_in_class_count": 129,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "getSimpleName",
                    "method_signature": "public java.lang.String getSimpleName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getCanonicalName",
                    "method_signature": "public java.lang.String getCanonicalName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JElementSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JClassSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getSymbol",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.JTypeParameterOwnerSymbol getSymbol()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JClassType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractAnyTypeDeclaration"
                },
                {
                    "method_name": "getBinaryName",
                    "method_signature": "public java.lang.String getBinaryName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getSuperInterfaceTypeNodes",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isInterface",
                    "method_signature": "public boolean isInterface()",
                    "method_comment": "Returns true if this is an interface type declaration (including annotation types). This is consistent with {@link Class#isInterface()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnnotation",
                    "method_signature": "public boolean isAnnotation()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnnotationTypeDeclaration annotation type declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isEnum",
                    "method_signature": "public boolean isEnum()",
                    "method_comment": "Returns true if this is an {@linkplain ASTEnumDeclaration enum class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRecord",
                    "method_signature": "public boolean isRecord()",
                    "method_comment": "Returns true if this is an {@linkplain ASTRecordDeclaration record class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getPackageName",
                    "method_signature": "public java.lang.String getPackageName()",
                    "method_comment": "Returns the name of the package in which this class is declared.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getRecordComponents",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList getRecordComponents()",
                    "method_comment": "Returns the record components declared by this class. If this is not a record declaration, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getEnumConstants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTEnumConstant> getEnumConstants()",
                    "method_comment": "Returns the enum constants declared by this enum. If this is not an enum declaration, returns an empty stream.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAbstract",
                    "method_signature": "public boolean isAbstract()",
                    "method_comment": "Returns true if this is an abstract type. Interfaces and annotations types are implicitly abstract.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody()",
                    "method_comment": "Returns the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isTopLevel",
                    "method_signature": "public boolean isTopLevel()",
                    "method_comment": "Returns true if this type is declared at the top-level of a file.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isNested",
                    "method_signature": "public boolean isNested()",
                    "method_comment": "Returns true if this type declaration is nested inside an interface, class or annotation.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isLocal",
                    "method_signature": "public boolean isLocal()",
                    "method_comment": "Returns true if the class is declared inside a block other than the body of another class, or the top level. Anonymous classes are not considered local. Only class declarations can be local. Local classes cannot be static.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularClass",
                    "method_signature": "public boolean isRegularClass()",
                    "method_comment": "Returns true if this is a regular class declaration (not an enum, not a record, not an interface or annotation). Note that eg {@link JClassSymbol#isClass()} counts records and enums in, just like {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getDeclarations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTBodyDeclaration> getDeclarations()",
                    "method_comment": "Retrieves the member declarations (fields, methods, classes, etc.) from the body of this type declaration.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getOperations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTMethodOrConstructorDeclaration> getOperations()",
                    "method_comment": "Returns the operations declared in this class (methods and constructors).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isAnonymous",
                    "method_signature": "public boolean isAnonymous()",
                    "method_comment": "Returns true if this is an {@linkplain ASTAnonymousClassDeclaration anonymous class declaration}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "isRegularInterface",
                    "method_signature": "public boolean isRegularInterface()",
                    "method_comment": "Returns true if this is a regular interface declaration (not an annotation). Note that {@link #isInterface()} counts annotations in.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration"
                },
                {
                    "method_name": "getModifiers",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTModifierList getModifiers()",
                    "method_comment": "Returns the node representing the modifier list of this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getDeclaredAnnotations",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPublic",
                    "method_signature": "public boolean isPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isProtected",
                    "method_signature": "public boolean isProtected()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isFinal",
                    "method_signature": "public boolean isFinal()",
                    "method_comment": "Returns true if this variable, method or class is final (even implicitly).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.FinalizableNode"
                },
                {
                    "method_name": "isVolatile",
                    "method_signature": "public boolean isVolatile()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPrivate",
                    "method_signature": "public boolean isPrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isNative",
                    "method_signature": "public boolean isNative()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSynchronized",
                    "method_signature": "public boolean isSynchronized()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isTransient",
                    "method_signature": "public boolean isTransient()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isStrictfp",
                    "method_signature": "public boolean isStrictfp()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasModifiers",
                    "method_signature": "public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "hasExplicitModifiers",
                    "method_signature": "public boolean hasExplicitModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "getEffectiveVisibility",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getEffectiveVisibility()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isPackagePrivate",
                    "method_signature": "public boolean isPackagePrivate()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyAbstract",
                    "method_signature": "public boolean isSyntacticallyAbstract()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyPublic",
                    "method_signature": "public boolean isSyntacticallyPublic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyStatic",
                    "method_signature": "public boolean isSyntacticallyStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isSyntacticallyFinal",
                    "method_signature": "public boolean isSyntacticallyFinal()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AccessNode"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.Class)",
                    "method_comment": "Returns true if an annotation with the given type is applied to this node.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnnotationPresent",
                    "method_signature": "public boolean isAnnotationPresent(java.lang.String)",
                    "method_comment": "Returns true if an annotation with the given qualified name is applied to this node. @param annotQualifiedName Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getAnnotation",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String)",
                    "method_comment": "Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "isAnyAnnotationPresent",
                    "method_signature": "public boolean isAnyAnnotationPresent(java.util.Collection)",
                    "method_comment": "Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.Annotatable"
                },
                {
                    "method_name": "getTypeParameters",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters()",
                    "method_comment": "Returns the type parameter declaration of this node, or null if there is none.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeParamOwnerNode"
                },
                {
                    "method_name": "getJavadocComment",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()",
                    "method_comment": "Returns the javadoc comment that applies to this declaration. If there is none, returns null.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavadocCommentOwner"
                }
            ]
        },
        {
            "class_name": "ASTNumericLiteral",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral",
            "class_extends": "[AbstractLiteral]",
            "class_implements": "[ASTLiteral]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTNumericLiteral.java",
            "class_comment": "A numeric literal of any type (double, int, long, float, etc).",
            "APIs_contained_in_class_count": 99,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isIntegral",
                    "method_signature": "public boolean isIntegral()",
                    "method_comment": "Returns true if this is an integral literal, ie either a long or an integer literal. Otherwise, this is a floating point literal.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getBase",
                    "method_signature": "public int getBase()",
                    "method_comment": "Returns the base of the literal, eg 8 for an octal literal, 10 for a decimal literal, etc. By convention this returns 10 for the literal {@code 0} (which can really be any base).",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JPrimitiveType getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getTypeMirror",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getValueAsInt",
                    "method_signature": "public int getValueAsInt()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getValueAsLong",
                    "method_signature": "public long getValueAsLong()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getValueAsDouble",
                    "method_signature": "public double getValueAsDouble()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getValueAsFloat",
                    "method_signature": "public float getValueAsFloat()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getParenthesisDepth",
                    "method_signature": "public int getParenthesisDepth()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Object getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getConstValue",
                    "method_signature": "public java.lang.Number getConstValue()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "isCompileTimeConstant",
                    "method_signature": "public boolean isCompileTimeConstant()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "isIntLiteral",
                    "method_signature": "public boolean isIntLiteral()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "isLongLiteral",
                    "method_signature": "public boolean isLongLiteral()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "isFloatLiteral",
                    "method_signature": "public boolean isFloatLiteral()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "isDoubleLiteral",
                    "method_signature": "public boolean isDoubleLiteral()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getType",
                    "method_signature": "public java.lang.Class<Class<?> getType()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.TypeNode"
                },
                {
                    "method_name": "isExpression",
                    "method_signature": "public boolean isExpression()",
                    "method_comment": "Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isParenthesized",
                    "method_signature": "public boolean isParenthesized()",
                    "method_comment": "Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "getConversionContext",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext()",
                    "method_comment": "Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTExpression"
                },
                {
                    "method_name": "isStringLiteral",
                    "method_signature": "public boolean isStringLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTStringLiteral string literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isCharLiteral",
                    "method_signature": "public boolean isCharLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTCharLiteral character literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNullLiteral",
                    "method_signature": "public boolean isNullLiteral()",
                    "method_comment": "Returns true if this is the {@linkplain ASTNullLiteral null literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isBooleanLiteral",
                    "method_signature": "public boolean isBooleanLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                },
                {
                    "method_name": "isNumericLiteral",
                    "method_signature": "public boolean isNumericLiteral()",
                    "method_comment": "Returns true if this is a {@linkplain ASTNumericLiteral numeric literal} of any kind.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTLiteral"
                }
            ]
        },
        {
            "class_name": "ASTInitializer",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTInitializer",
            "class_extends": "[AbstractJavaNode]",
            "class_implements": "[ASTBodyDeclaration]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTInitializer.java",
            "class_comment": "A class or instance initializer. Don't confuse with {@link ASTVariableInitializer}. <pre class=\"grammar\"> Initializer ::= \"static\"? {@link ASTBlock Block} </pre>",
            "APIs_contained_in_class_count": 75,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "isStatic",
                    "method_signature": "public boolean isStatic()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInitializer"
                },
                {
                    "method_name": "getBody",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()",
                    "method_comment": "Returns the body of this initializer.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInitializer"
                },
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInitializer"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInitializer"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTInitializer"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "ASTIfStatement",
            "class_package": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement",
            "class_extends": "[AbstractStatement]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/ast/ASTIfStatement.java",
            "class_comment": "Represents an {@code if} statement, possibly with an {@code else} statement. <pre class=\"grammar\"> IfStatement ::= \"if\" \"(\" {@linkplain ASTExpression Expression} \")\" {@linkplain ASTStatement Statement} ( \"else\" {@linkplain ASTStatement Statement} )? </pre>",
            "APIs_contained_in_class_count": 78,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "jjtClose",
                    "method_signature": "public void jjtClose()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "hasElse",
                    "method_signature": "public boolean hasElse()",
                    "method_comment": "Returns true if this statement has an {@code else} clause.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "getCondition",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()",
                    "method_comment": "Returns the node that represents the guard of this conditional. This may be any expression of type boolean.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "getTypeSystem",
                    "method_signature": "public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "getSymbolTable",
                    "method_signature": "public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "getElseBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getElseBranch()",
                    "method_comment": "Returns the statement of the {@code else} clause, if any.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "getThenBranch",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTStatement getThenBranch()",
                    "method_comment": "Returns the statement that will be run if the guard evaluates to true.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.ASTIfStatement"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getRoot",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.RootNode getRoot()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "acceptVisitor",
                    "method_signature": "public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "getXPathNodeName",
                    "method_signature": "public java.lang.String getXPathNodeName()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.ast.AbstractJavaNode"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getImage",
                    "method_signature": "public java.lang.String getImage()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getFirstToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getFirstToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getLastToken",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken getLastToken()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "compareLocation",
                    "method_signature": "public int compareLocation(net.sourceforge.pmd.lang.ast.Node)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getTextRegion",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextRegion getTextRegion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.AbstractJjtreeNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public N getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getChild",
                    "method_signature": "public N getChild(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getUserMap",
                    "method_signature": "public net.sourceforge.pmd.util.DataMap<DataMap$DataKey<?, ?>> getUserMap()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "firstChild",
                    "method_signature": "public R firstChild(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getNumChildren",
                    "method_signature": "public int getNumChildren()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "getIndexInParent",
                    "method_signature": "public int getIndexInParent()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.AbstractNode"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "asStream",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getFirstChild",
                    "method_signature": "public N getFirstChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getLastChild",
                    "method_signature": "public N getLastChild()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNthParent",
                    "method_signature": "public N getNthParent(int)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "descendantsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "ancestorsOrSelf",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getPreviousSibling",
                    "method_signature": "public N getPreviousSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.Node getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "getNextSibling",
                    "method_signature": "public N getNextSibling()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.GenericNode"
                },
                {
                    "method_name": "children",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> children(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndLine",
                    "method_signature": "public int getEndLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "ancestors",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<R> ancestors(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getAstInfo",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginColumn",
                    "method_signature": "public int getBeginColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getBeginLine",
                    "method_signature": "public int getBeginLine()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getEndColumn",
                    "method_signature": "public int getEndColumn()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstParentOfType",
                    "method_signature": "public T getFirstParentOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "descendants",
                    "method_signature": "public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<R> descendants(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasImageEqualTo",
                    "method_signature": "public boolean hasImageEqualTo(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getReportLocation",
                    "method_signature": "public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "isFindBoundary",
                    "method_signature": "public boolean isFindBoundary()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getParentsOfType",
                    "method_signature": "public java.util.List<List<T> getParentsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildrenOfType",
                    "method_signature": "public java.util.List<List<T> findChildrenOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findDescendantsOfType",
                    "method_signature": "public java.util.List<List<T> findDescendantsOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstChildOfType",
                    "method_signature": "public T getFirstChildOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getFirstDescendantOfType",
                    "method_signature": "public T getFirstDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "hasDescendantOfType",
                    "method_signature": "public boolean hasDescendantOfType(java.lang.Class)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "findChildNodesWithXPath",
                    "method_signature": "public java.util.List<Node> findChildNodesWithXPath(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getTextDocument",
                    "method_signature": "public net.sourceforge.pmd.lang.document.TextDocument getTextDocument()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getXPathAttributesIterator",
                    "method_signature": "public java.util.Iterator<Attribute> getXPathAttributesIterator()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "getLanguageVersion",
                    "method_signature": "public net.sourceforge.pmd.lang.LanguageVersion getLanguageVersion()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.Node"
                },
                {
                    "method_name": "tokens",
                    "method_signature": "public java.lang.Iterable<JavaccToken> tokens()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeNode"
                },
                {
                    "method_name": "getText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "getOriginalText",
                    "method_signature": "public net.sourceforge.pmd.lang.document.Chars getOriginalText()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.ast.TextAvailableNode"
                },
                {
                    "method_name": "jjtAccept",
                    "method_signature": "public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object)",
                    "method_comment": "Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                },
                {
                    "method_name": "getEnclosingType",
                    "method_signature": "public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()",
                    "method_comment": "Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.",
                    "method_class": "net.sourceforge.pmd.lang.java.ast.JavaNode"
                }
            ]
        },
        {
            "class_name": "JavadocTag",
            "class_package": "net.sourceforge.pmd.lang.java.javadoc.JavadocTag",
            "class_extends": "[]",
            "class_implements": "[]",
            "class_path": "/net/sourceforge/pmd/lang/java/javadoc/JavadocTag.java",
            "class_comment": null,
            "APIs_contained_in_class_count": 11,
            "APIs_contained_in_class_detail": [
                {
                    "method_name": "tagFor",
                    "method_signature": "static public net.sourceforge.pmd.lang.java.javadoc.JavadocTag tagFor(java.lang.String)",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.javadoc.JavadocTag"
                },
                {
                    "method_name": "allTagIds",
                    "method_signature": "static public java.util.Set<String> allTagIds()",
                    "method_comment": null,
                    "method_class": "net.sourceforge.pmd.lang.java.javadoc.JavadocTag"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long, int)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "wait",
                    "method_signature": "public void wait(long)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "equals",
                    "method_signature": "public boolean equals(java.lang.Object)",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "toString",
                    "method_signature": "public java.lang.String toString()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "hashCode",
                    "method_signature": "public int hashCode()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "getClass",
                    "method_signature": "public java.lang.Class<Class<?> getClass()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notify",
                    "method_signature": "public void notify()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                },
                {
                    "method_name": "notifyAll",
                    "method_signature": "public void notifyAll()",
                    "method_comment": null,
                    "method_class": "java.lang.Object"
                }
            ]
        }
    ]
}