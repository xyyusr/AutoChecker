开始

========================================== Rule NullAssignmentRule ===========================================
一共 19 个测试用例
正例 14 个
反例 5 个
2476
1997
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the left operand of assignment expression.
2. Check whether the left operand is a local variable.
3. Get the right operand of assignment expression.
4. Check whether the right operand is null.
5. Check whether the assignment expression is part of a local variable declaration.
6. If not part of a declaration, check whether the left operand is a final local variable.
7. If not final, conclude that the assignment of null to a variable outside its declaration is bad form.

Based on this test case:
1. The left operand of the assignment expression is `x`.
2. `x` is a local variable.
3. The right operand of the assignment expression is `null`.
4. The assignment expression `x = null;` is not part of the local variable declaration.
5. `x` is not a final local variable.

Therefore, this test case violates the rule by assigning a null to a local variable outside of its declaration.
['Get the left operand of assignment expression.', 'Check whether the left operand is a local variable.', 'Get the right operand of assignment expression.', 'Check whether the right operand is null.', 'Check whether the assignment expression is part of a local variable declaration.', 'If not part of a declaration, check whether the left operand is a final local variable.', 'If not final, conclude that the assignment of null to a variable outside its declaration is bad form.', 'The left operand of the assignment expression is `x`.', '`x` is a local variable.', 'The right operand of the assignment expression is `null`.', 'The assignment expression `x = null;` is not part of the local variable declaration.', '`x` is not a final local variable.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTMethodCall', 'ASTCompilationUnit', 'ASTConstructorCall', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTArgumentList', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.857746422290802
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is null.* 匹配到的元操作或API：
query: Check whether the right operand is null.
most similar API: Check whether the null literal equals
cosine Similarity: 0.836477518081665
*Check whether the assignment expression is part of a local variable declaration.* 匹配到的元操作或API：
query: Check whether the assignment expression is part of a local variable declaration.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8976647853851318
*If not part of a declaration, check whether the left operand is a final local variable.* 匹配到的元操作或API：
logic: If not part of a declaration, check whether the left operand is a final local variable.
most similar meta operation: Check whether the local variable is final
cosine Similarity: 0.8683192729949951
*If not final, conclude that the assignment of null to a variable outside its declaration is bad form.* 匹配到的元操作或API：
未匹配成功元操作或API
*The left operand of the assignment expression is `x`.* 匹配到的元操作或API：
logic: The left operand of the assignment expression is `x`.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8680009841918945
*`x` is a local variable.* 匹配到的元操作或API：
未匹配成功元操作或API
*The right operand of the assignment expression is `null`.* 匹配到的元操作或API：
query: The right operand of the assignment expression is `null`.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8093369603157043
*The assignment expression `x = null;` is not part of the local variable declaration.* 匹配到的元操作或API：
未匹配成功元操作或API
*`x` is not a final local variable.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
The test case corresponding to the rule:
```
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConstructorCall
              ——ASTClassOrInterfaceType (this is a class type)
              ——ASTArgumentList (size = 0)
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'bar')
            ——ASTArgumentList (size = 1)
              ——ASTVariableAccess (referenced variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'o')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
5. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.

1.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 1


======================接下来开始迭代=====================
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
114
98
107
91
95
79
99
82
77
63
=========================error_testcase_logics=========================
1. Get the right-hand side of the switch statement arrow branch.
        2. Check whether the expression is an assignment expression.
        3. Check whether the right operand of the assignment expression is null.
        4. Get the left operand of the assignment expression.
        5. Check whether the left operand is a local variable.
        6. Check whether the left operand is a field.
        7. Check whether the left operand is a formal parameter.
        If the right operand of the assignment expression is null and the left operand is a local variable, field, or formal parameter (excluding its declaration), then this test case violates the rule.

In this specific test case:
1. Get the right-hand side of the ternary expression.
        2. Check whether the expression is an assignment expression.
        3. Check whether the right operand of the assignment expression is null.
        4. Get the left operand of the assignment expression.
        5. Check whether the left operand is a local variable.
        6. Check whether the left operand is a field.
        7. Check whether the left operand is a formal parameter.
        Since the right-hand side of the ternary expression is an assignment expression and the right operand is null, and the left operand is a local variable, this test case violates the rule.
            
['Get the right-hand side of the switch statement arrow branch.', 'Check whether the expression is an assignment expression.', 'Check whether the right operand of the assignment expression is null.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is a local variable.', 'Check whether the left operand is a field.', 'Check whether the left operand is a formal parameter.', 'Get the right-hand side of the ternary expression.', 'Check whether the expression is an assignment expression.', 'Check whether the right operand of the assignment expression is null.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is a local variable.', 'Check whether the left operand is a field.', 'Check whether the left operand is a formal parameter.']
['ASTStringLiteral', 'ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTMethodCall', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTBooleanLiteral', 'ASTVariableAccess', 'ASTBlock', 'ASTArgumentList', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'ASTConditionalExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTReturnStatement', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the right-hand side of the switch statement arrow branch.* 匹配到的元操作或API：
logic: Get the right-hand side of the switch statement arrow branch.
most similar meta operation: Get the right hand side of the switch statement arrow branch
cosine Similarity: 0.9838226437568665
*Check whether the expression is an assignment expression.* 匹配到的元操作或API：
query: Check whether the expression is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9730106592178345
*Check whether the right operand of the assignment expression is null.* 匹配到的元操作或API：
logic: Check whether the right operand of the assignment expression is null.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.85781329870224
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.857746422290802
*Check whether the left operand is a field.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the left operand is a formal parameter.* 匹配到的元操作或API：
query: Check whether the left operand is a formal parameter.
most similar API: Check whether the formal parameters equals
cosine Similarity: 0.8225448131561279
*Get the right-hand side of the ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8331306576728821
*Check whether the expression is an assignment expression.* 匹配到的元操作或API：
query: Check whether the expression is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9730106592178345
*Check whether the right operand of the assignment expression is null.* 匹配到的元操作或API：
logic: Check whether the right operand of the assignment expression is null.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.85781329870224
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.857746422290802
*Check whether the left operand is a field.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the left operand is a formal parameter.* 匹配到的元操作或API：
query: Check whether the left operand is a formal parameter.
most similar API: Check whether the formal parameters equals
cosine Similarity: 0.8225448131561279
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}


This checker is failed(false negative) on this negative test case:
```
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTMethodCall (called method name = 'bar')
                ——ASTArgumentList (size = 0)
              ——ASTStringLiteral
              ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTPrimitiveType (method return type = 'boolean')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTReturnStatement
          ——ASTBooleanLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch: public net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowRHS getRightHandSide()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.

1.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
编译是否通过？
True
测试是否通过
True
[ERROR]   "bad 5" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
95
79
100
82
=========================error_testcase_logics=========================
1. Get the left operand of the assignment expression.
2. Check whether the left operand is a local variable.
3. Get the right operand of the assignment expression.
4. Check whether the right operand is a ternary expression.
5. Get the right-hand side expression of the ternary expression.
6. Check whether the right-hand side expression is a ternary expression.
7. Get the right-hand side expression of the nested ternary expression.
8. Check whether the right-hand side expression is a ternary expression.
9. Get the right-hand side expression of the deepest nested ternary expression.
10. Check whether the right-hand side expression is a null literal.
        If the right-hand side expression of the deepest nested ternary expression is a null literal, then this test case violates the rule.
        In this specific test case:
        9. Get the right-hand side expression of the deepest nested ternary expression.
        10. Check whether the right-hand side expression is a null literal.
        This will identify the null assignment in the assignment expression.
            
['Get the left operand of the assignment expression.', 'Check whether the left operand is a local variable.', 'Get the right operand of the assignment expression.', 'Check whether the right operand is a ternary expression.', 'Get the right-hand side expression of the ternary expression.', 'Check whether the right-hand side expression is a ternary expression.', 'Get the right-hand side expression of the nested ternary expression.', 'Check whether the right-hand side expression is a ternary expression.', 'Get the right-hand side expression of the deepest nested ternary expression.', 'Check whether the right-hand side expression is a null literal.', 'Get the right-hand side expression of the deepest nested ternary expression.', 'Check whether the right-hand side expression is a null literal.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'ASTConditionalExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTInfixExpression', 'ASTVariableDeclarator']
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.857746422290802
*Get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9825875759124756
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right-hand side expression of the ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side expression of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8405522108078003
*Check whether the right-hand side expression is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right-hand side expression is a ternary expression.
most similar API: Check whether the conditional expression is expression
cosine Similarity: 0.8126668930053711
*Get the right-hand side expression of the nested ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side expression of the nested ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8282884955406189
*Check whether the right-hand side expression is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right-hand side expression is a ternary expression.
most similar API: Check whether the conditional expression is expression
cosine Similarity: 0.8126668930053711
*Get the right-hand side expression of the deepest nested ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the right-hand side expression is a null literal.* 匹配到的元操作或API：
query: Check whether the right-hand side expression is a null literal.
most similar API: Check whether the null literal is expression
cosine Similarity: 0.9072860479354858
*Get the right-hand side expression of the deepest nested ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the right-hand side expression is a null literal.* 匹配到的元操作或API：
query: Check whether the right-hand side expression is a null literal.
most similar API: Check whether the null literal is expression
cosine Similarity: 0.9072860479354858
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false negative) on this negative test case:
```
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentTernary')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 3)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'c')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTInfixExpression
                ——ASTVariableAccess (referenced variable name = 'a')
                ——ASTNullLiteral
              ——ASTVariableAccess (referenced variable name = 'a')
              ——ASTConditionalExpression
                ——ASTInfixExpression
                  ——ASTVariableAccess (referenced variable name = 'b')
                  ——ASTNullLiteral
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTConditionalExpression
                  ——ASTInfixExpression
                    ——ASTVariableAccess (referenced variable name = 'c')
                    ——ASTNullLiteral
                  ——ASTVariableAccess (referenced variable name = 'c')
                  ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
4. net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
            checkNestedConditionalExpressions(conditionalExpression, variableAccess, data);
        }
        return super.visit(node, data);
    }

    private void checkNestedConditionalExpressions(ASTConditionalExpression node, ASTVariableAccess variableAccess, Object data) {
        ASTExpression thenExpr = node.getThenExpression();
        ASTExpression elseExpr = node.getElseExpression();

        if (thenExpr instanceof ASTNullLiteral && isVariableAccessLocalVariable(variableAccess)) {
            addViolation(data, node);
        } else if (thenExpr instanceof ASTConditionalExpression) {
            checkNestedConditionalExpressions((ASTConditionalExpression) thenExpr, variableAccess, data);
        }

        if (elseExpr instanceof ASTNullLiteral && isVariableAccessLocalVariable(variableAccess)) {
            addViolation(data, node);
        } else if (elseExpr instanceof ASTConditionalExpression) {
            checkNestedConditionalExpressions((ASTConditionalExpression) elseExpr, variableAccess, data);
        }
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of method.
2. Get the signature of method.
3. Get the javadoc comment of method.
4. Check whether the method is abstract.
5. Get all statements in the method body.
6. For each statement in the method body, check whether it is an assignment expression.
7. For each assignment expression, get the right-hand side operand.
8. Check whether the right-hand side operand is a ternary expression.
9. For each ternary expression, get the right-hand side operand of the false branch.
10. Check whether the right-hand side operand of the false branch is a null literal.

Based on these checks, the test case does indeed violate the rule once, as the final false branch of the nested ternary expression assigns a null value to the variable `x`.
['Get the name of method.', 'Get the signature of method.', 'Get the javadoc comment of method.', 'Check whether the method is abstract.', 'Get all statements in the method body.', 'For each statement in the method body, check whether it is an assignment expression.', 'For each assignment expression, get the right-hand side operand.', 'Check whether the right-hand side operand is a ternary expression.', 'For each ternary expression, get the right-hand side operand of the false branch.', 'Check whether the right-hand side operand of the false branch is a null literal.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'ASTConditionalExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTInfixExpression', 'ASTVariableDeclarator']
*Get the name of method.* 匹配到的元操作或API：
logic: Get the name of method.
most similar meta operation: Get the name of method
cosine Similarity: 0.9766309261322021
*Get the signature of method.* 匹配到的元操作或API：
logic: Get the signature of method.
most similar meta operation: Get the signature of method
cosine Similarity: 0.9827433228492737
*Get the javadoc comment of method.* 匹配到的元操作或API：
logic: Get the javadoc comment of method.
most similar meta operation: Get the javadoc comment of method
cosine Similarity: 0.9902206063270569
*Check whether the method is abstract.* 匹配到的元操作或API：
logic: Check whether the method is abstract.
most similar meta operation: Check whether the method is abstract
cosine Similarity: 0.9833380579948425
*Get all statements in the method body.* 匹配到的元操作或API：
query: Get all statements in the method body.
most similar API: get body of method
cosine Similarity: 0.8024846315383911
*For each statement in the method body, check whether it is an assignment expression.* 匹配到的元操作或API：
query: For each statement in the method body, check whether it is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8934361338615417
*For each assignment expression, get the right-hand side operand.* 匹配到的元操作或API：
logic: For each assignment expression, get the right-hand side operand.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8924592137336731
*Check whether the right-hand side operand is a ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each ternary expression, get the right-hand side operand of the false branch.* 匹配到的元操作或API：
query: For each ternary expression, get the right-hand side operand of the false branch.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8285580277442932
*Check whether the right-hand side operand of the false branch is a null literal.* 匹配到的元操作或API：
query: Check whether the right-hand side operand of the false branch is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8271587491035461
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false negative) on this negative test case:
```
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentTernary')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 3)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'c')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTInfixExpression
                ——ASTVariableAccess (referenced variable name = 'a')
                ——ASTNullLiteral
              ——ASTVariableAccess (referenced variable name = 'a')
              ——ASTConditionalExpression
                ——ASTInfixExpression
                  ——ASTVariableAccess (referenced variable name = 'b')
                  ——ASTNullLiteral
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTConditionalExpression
                  ——ASTInfixExpression
                    ——ASTVariableAccess (referenced variable name = 'c')
                    ——ASTNullLiteral
                  ——ASTVariableAccess (referenced variable name = 'c')
                  ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isAbstract()
5. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            if (containsNullLiteral(rightOperand)) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }

    private boolean containsNullLiteral(ASTExpression expression) {
        if (expression instanceof ASTNullLiteral) {
            return true;
        } else if (expression instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) expression;
            return containsNullLiteral(condExpr.getTrueExpression()) || containsNullLiteral(condExpr.getFalseExpression());
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the left operand of assignment expression.
2. Get the right operand of assignment expression.
3. Check whether the right operand is a ternary expression.
4. Get the right-hand side of the switch statement arrow branch. (Note: In this case, we're actually dealing with nested ternary expressions, not a switch statement. This check is more relevant for switch expressions, so we'll need to manually check each branch of the ternary expressions.)
5. Get the right operand of ternary expression.
6. Check whether the right operand is a ternary expression.
7. Get the right operand of ternary expression.
8. Check whether the right operand is a ternary expression.
9. Get the right operand of ternary expression.
10. Check whether the right operand is null.
11. If the right operand of the assignment expression or any nested ternary expressions is null, then this test case violates the rule.

Given the test case, the steps would be:

1. Get the left operand of assignment expression.
   - The left operand is `x`.

2. Get the right operand of assignment expression.
   - The right operand is `a != null ? a : b != null ? b : c != null ? c : null`.

3. Check whether the right operand is a ternary expression.
   - It is a ternary expression.

4. Get the right operand of ternary expression.
   - The right operand is `b != null ? b : c != null ? c : null`.

5. Check whether the right operand is a ternary expression.
   - It is a ternary expression.

6. Get the right operand of ternary expression.
   - The right operand is `c != null ? c : null`.

7. Check whether the right operand is a ternary expression.
   - It is a ternary expression.

8. Get the right operand of ternary expression.
   - The right operand is `null`.

9. Check whether the right operand is null.
   - It is null.

Since the right operand of the nested ternary expression is `null`, the test case violates the rule.
['Get the left operand of assignment expression.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a ternary expression.', "Get the right-hand side of the switch statement arrow branch. (Note: In this case, we're actually dealing with nested ternary expressions, not a switch statement. This check is more relevant for switch expressions, so we'll need to manually check each branch of the ternary expressions.)", 'Get the right operand of ternary expression.', 'Check whether the right operand is a ternary expression.', 'Get the right operand of ternary expression.', 'Check whether the right operand is a ternary expression.', 'Get the right operand of ternary expression.', 'Check whether the right operand is null.', 'If the right operand of the assignment expression or any nested ternary expressions is null, then this test case violates the rule.', 'Get the left operand of assignment expression.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a ternary expression.', 'Get the right operand of ternary expression.', 'Check whether the right operand is a ternary expression.', 'Get the right operand of ternary expression.', 'Check whether the right operand is a ternary expression.', 'Get the right operand of ternary expression.', 'Check whether the right operand is null.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'ASTConditionalExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTInfixExpression', 'ASTVariableDeclarator']
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right-hand side of the switch statement arrow branch. (Note: In this case, we're actually dealing with nested ternary expressions, not a switch statement. This check is more relevant for switch expressions, so we'll need to manually check each branch of the ternary expressions.)* 匹配到的元操作或API：
logic: Get the right-hand side of the switch statement arrow branch. (Note: In this case, we're actually dealing with nested ternary expressions, not a switch statement. This check is more relevant for switch expressions, so we'll need to manually check each branch of the ternary expressions.)
most similar meta operation: Get the right hand side of the switch statement arrow branch
cosine Similarity: 0.8764877319335938
*Get the right operand of ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8940643668174744
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right operand of ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8940643668174744
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right operand of ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8940643668174744
*Check whether the right operand is null.* 匹配到的元操作或API：
query: Check whether the right operand is null.
most similar API: Check whether the null literal equals
cosine Similarity: 0.836477518081665
*If the right operand of the assignment expression or any nested ternary expressions is null, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right operand of ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8940643668174744
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right operand of ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8940643668174744
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*Get the right operand of ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8940643668174744
*Check whether the right operand is null.* 匹配到的元操作或API：
query: Check whether the right operand is null.
most similar API: Check whether the null literal equals
cosine Similarity: 0.836477518081665
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false negative) on this negative test case:
```
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentTernary')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 3)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'c')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTInfixExpression
                ——ASTVariableAccess (referenced variable name = 'a')
                ——ASTNullLiteral
              ——ASTVariableAccess (referenced variable name = 'a')
              ——ASTConditionalExpression
                ——ASTInfixExpression
                  ——ASTVariableAccess (referenced variable name = 'b')
                  ——ASTNullLiteral
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTConditionalExpression
                  ——ASTInfixExpression
                    ——ASTVariableAccess (referenced variable name = 'c')
                    ——ASTNullLiteral
                  ——ASTVariableAccess (referenced variable name = 'c')
                  ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
4. net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowBranch: public net.sourceforge.pmd.lang.java.ast.ASTSwitchArrowRHS getRightHandSide()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            if (containsNullLiteral(rightOperand)) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }

    private boolean containsNullLiteral(ASTExpression node) {
        if (node instanceof ASTNullLiteral) {
            return true;
        } else if (node instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) node;
            return containsNullLiteral(conditionalExpression.getTrueExpression()) || containsNullLiteral(conditionalExpression.getFalseExpression());
        } else if (node instanceof ASTInfixExpression) {
            ASTInfixExpression infixExpression = (ASTInfixExpression) node;
            return infixExpression.children(ASTNullLiteral.class).isNotEmpty();
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the right-hand side of the assignment expression.
2. Check whether the right-hand side is a ternary expression.
3. Get the right-hand side of the ternary expression.
4. Check whether the right-hand side is a ternary expression.
5. Get the right-hand side of the ternary expression.
6. Check whether the right-hand side is a ternary expression.
7. Get the right-hand side of the ternary expression.
8. Check whether the right-hand side is null.

In this test case, the final ternary expression assigns `null` to the variable `x`. Therefore, this test case violates the rule once.
['Get the right-hand side of the assignment expression.', 'Check whether the right-hand side is a ternary expression.', 'Get the right-hand side of the ternary expression.', 'Check whether the right-hand side is a ternary expression.', 'Get the right-hand side of the ternary expression.', 'Check whether the right-hand side is a ternary expression.', 'Get the right-hand side of the ternary expression.', 'Check whether the right-hand side is null.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'ASTConditionalExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTInfixExpression', 'ASTVariableDeclarator']
*Get the right-hand side of the assignment expression.* 匹配到的元操作或API：
logic: Get the right-hand side of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8507726788520813
*Check whether the right-hand side is a ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the right-hand side of the ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8331306576728821
*Check whether the right-hand side is a ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the right-hand side of the ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8331306576728821
*Check whether the right-hand side is a ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the right-hand side of the ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8331306576728821
*Check whether the right-hand side is null.* 匹配到的元操作或API：
query: Check whether the right-hand side is null.
most similar API: Check whether is null check
cosine Similarity: 0.8073878288269043
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false negative) on this negative test case:
```
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentTernary')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 3)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'c')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTInfixExpression
                ——ASTVariableAccess (referenced variable name = 'a')
                ——ASTNullLiteral
              ——ASTVariableAccess (referenced variable name = 'a')
              ——ASTConditionalExpression
                ——ASTInfixExpression
                  ——ASTVariableAccess (referenced variable name = 'b')
                  ——ASTNullLiteral
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTConditionalExpression
                  ——ASTInfixExpression
                    ——ASTVariableAccess (referenced variable name = 'c')
                    ——ASTNullLiteral
                  ——ASTVariableAccess (referenced variable name = 'c')
                  ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
3. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.rule.internal.StablePathMatcher)



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    if (containsNullAssignment(conditionalExpression)) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }

    private boolean containsNullAssignment(ASTExpression expression) {
        if (expression instanceof ASTNullLiteral) {
            return true;
        } else if (expression instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) expression;
            return containsNullAssignment(condExpr.getFalseExpression());
        } else if (expression instanceof ASTInfixExpression) {
            ASTInfixExpression infixExpr = (ASTInfixExpression) expression;
            return containsNullAssignment(infixExpr.getLeftOperand()) || containsNullAssignment(infixExpr.getRightOperand());
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of method.
2. Get the body of method.
3. Get the assignment expression in the body of method.
4. Get the right operand of the assignment expression.
5. Check whether the right operand is a ternary expression.
6. If the right operand is a ternary, get the right-hand side of the ternary expression.
7. Check whether this right-hand side is another ternary expression.
8. If it is another ternary, get the right-hand side of this ternary expression.
9. Repeat steps 6-8 until the right-hand side is not a ternary expression.
10. Check whether the final right-hand side operand is null.

If the final right-hand side operand is null, then this test case violates the rule. In this case, step 10 will confirm that the final right-hand side operand is indeed null.
            
['Get the name of method.', 'Get the body of method.', 'Get the assignment expression in the body of method.', 'Get the right operand of the assignment expression.', 'Check whether the right operand is a ternary expression.', 'If the right operand is a ternary, get the right-hand side of the ternary expression.', 'Check whether this right-hand side is another ternary expression.', 'If it is another ternary, get the right-hand side of this ternary expression.', 'Repeat steps 6-8 until the right-hand side is not a ternary expression.', 'Check whether the final right-hand side operand is null.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'ASTConditionalExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTInfixExpression', 'ASTVariableDeclarator']
*Get the name of method.* 匹配到的元操作或API：
logic: Get the name of method.
most similar meta operation: Get the name of method
cosine Similarity: 0.9766309261322021
*Get the body of method.* 匹配到的元操作或API：
query: Get the body of method.
most similar API: get body of method
cosine Similarity: 0.9752807021141052
*Get the assignment expression in the body of method.* 匹配到的元操作或API：
query: Get the assignment expression in the body of method.
most similar API: get text of assignment expression
cosine Similarity: 0.880100429058075
*Get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9825875759124756
*Check whether the right operand is a ternary expression.* 匹配到的元操作或API：
query: Check whether the right operand is a ternary expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8015155792236328
*If the right operand is a ternary, get the right-hand side of the ternary expression.* 匹配到的元操作或API：
query: If the right operand is a ternary, get the right-hand side of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8587396740913391
*Check whether this right-hand side is another ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*If it is another ternary, get the right-hand side of this ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Repeat steps 6-8 until the right-hand side is not a ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the final right-hand side operand is null.* 匹配到的元操作或API：
query: Check whether the final right-hand side operand is null.
most similar API: compare location of null literal
cosine Similarity: 0.8057955503463745
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false negative) on this negative test case:
```
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentTernary')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 3)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'c')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTInfixExpression
                ——ASTVariableAccess (referenced variable name = 'a')
                ——ASTNullLiteral
              ——ASTVariableAccess (referenced variable name = 'a')
              ——ASTConditionalExpression
                ——ASTInfixExpression
                  ——ASTVariableAccess (referenced variable name = 'b')
                  ——ASTNullLiteral
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTConditionalExpression
                  ——ASTInfixExpression
                    ——ASTVariableAccess (referenced variable name = 'c')
                    ——ASTNullLiteral
                  ——ASTVariableAccess (referenced variable name = 'c')
                  ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            if (containsNullLiteral(rightOperand) && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }

    private boolean containsNullLiteral(ASTExpression expression) {
        if (expression instanceof ASTNullLiteral) {
            return true;
        } else if (expression instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) expression;
            return containsNullLiteral(conditionalExpression.getTrueExpression()) || containsNullLiteral(conditionalExpression.getFalseExpression());
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
==========5轮都没修复成功一个后面新加的一个测试用例，换一个测试用例进行修复
这个测试用例 5 round 没有修复成功：
bad 5
[ERROR]   "ok 12" resulted in wrong number of failures, ==> expected: <0> but was: <1>不通过
84
69
100
82
=========================error_testcase_logics=========================
1. Get the declaration of the class.
2. Get all methods declared in class.
3. Get the signature of method.
4. Check whether the method is bar.
5. Get the body of method bar.
6. Get all assignment expressions in the body of method bar.
7. For each assignment expression, get the left operand of the assignment expression.
8. Check whether the left operand is an accessed variable.
9. Check whether the accessed variable is final.
10. For each assignment expression, get the right operand of the assignment expression.
11. Check whether the right operand is a null literal.
12. If the right operand is a null literal and the left operand is not a final variable or it is the first assignment to the final variable, then check whether it violates the rule.

Given the test case:
1. Get the declaration of the class: NullAssignmentFinal.
2. Get all methods declared in class: bar.
3. Get the signature of method: public void bar(String a).
4. Check whether the method is bar: true.
5. Get the body of method bar: The body contains the assignments `b = a;` and `b = null;`.
6. Get all assignment expressions in the body of method bar: `b = a;` and `b = null;`.
7. For each assignment expression, get the left operand of the assignment expression: `b` for both.
8. Check whether the left operand is an accessed variable: true for both.
9. Check whether the accessed variable is final: true for both.
10. For each assignment expression, get the right operand of the assignment expression: `a` and `null` respectively.
11. Check whether the right operand is a null literal: false for `b = a;` and true for `b = null;`.
12. If the right operand is a null literal and the left operand is not a final variable or it is the first assignment to the final variable, then check whether it violates the rule: The first assignment `b = a;` does not violate the rule. The second assignment `b = null;` is the first and only reassignment to the final variable `b`, so it does not violate the rule either.

Therefore, the number of violations in this test case is: 0.
['Get the declaration of the class.', 'Get all methods declared in class.', 'Get the signature of method.', 'Check whether the method is bar.', 'Get the body of method bar.', 'Get all assignment expressions in the body of method bar.', 'For each assignment expression, get the left operand of the assignment expression.', 'Check whether the left operand is an accessed variable.', 'Check whether the accessed variable is final.', 'For each assignment expression, get the right operand of the assignment expression.', 'Check whether the right operand is a null literal.', 'If the right operand is a null literal and the left operand is not a final variable or it is the first assignment to the final variable, then check whether it violates the rule.', 'Get the declaration of the class: NullAssignmentFinal.', 'Get all methods declared in class: bar.', 'Get the signature of method: public void bar(String a).', 'Check whether the method is bar: true.', 'Get the body of method bar: The body contains the assignments `b = a;` and `b = null;`.', 'Get all assignment expressions in the body of method bar: `b = a;` and `b = null;`.', 'For each assignment expression, get the left operand of the assignment expression: `b` for both.', 'Check whether the left operand is an accessed variable: true for both.', 'Check whether the accessed variable is final: true for both.', 'For each assignment expression, get the right operand of the assignment expression: `a` and `null` respectively.', 'Check whether the right operand is a null literal: false for `b = a;` and true for `b = null;`.', 'If the right operand is a null literal and the left operand is not a final variable or it is the first assignment to the final variable, then check whether it violates the rule: The first assignment `b = a;` does not violate the rule. The second assignment `b = null;` is the first and only reassignment to the final variable `b`, so it does not violate the rule either.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTVariableAccess', 'ASTBlock', 'ASTIfStatement', 'ASTNullLiteral', 'ASTMethodDeclaration', 'ASTAssignmentExpression', 'AstImplUtil', 'ASTVoidType', 'TypesFromReflection', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'ASTClassOrInterfaceType', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTInfixExpression', 'ASTVariableDeclarator']
*Get the declaration of the class.* 匹配到的元操作或API：
logic: Get the declaration of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.8706545233726501
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declared annotations of method
cosine Similarity: 0.8366355895996094
*Get the signature of method.* 匹配到的元操作或API：
logic: Get the signature of method.
most similar meta operation: Get the signature of method
cosine Similarity: 0.9827433228492737
*Check whether the method is bar.* 匹配到的元操作或API：
query: Check whether the method is bar.
most similar API: Check whether is test method
cosine Similarity: 0.8329164981842041
*Get the body of method bar.* 匹配到的元操作或API：
query: Get the body of method bar.
most similar API: get body of method
cosine Similarity: 0.8829173445701599
*Get all assignment expressions in the body of method bar.* 匹配到的元操作或API：
query: Get all assignment expressions in the body of method bar.
most similar API: get text of assignment expression
cosine Similarity: 0.832378625869751
*For each assignment expression, get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: For each assignment expression, get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9634200930595398
*Check whether the left operand is an accessed variable.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed variable.
most similar meta operation: Check whether the accessed variable is double type
cosine Similarity: 0.8555497527122498
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882041811943054
*For each assignment expression, get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: For each assignment expression, get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9500235915184021
*Check whether the right operand is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.901962161064148
*If the right operand is a null literal and the left operand is not a final variable or it is the first assignment to the final variable, then check whether it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the declaration of the class: NullAssignmentFinal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all methods declared in class: bar.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the signature of method: public void bar(String a).* 匹配到的元操作或API：
logic: Get the signature of method: public void bar(String a).
most similar meta operation: Get the signature of method
cosine Similarity: 0.8617913722991943
*Check whether the method is bar: true.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of method bar: The body contains the assignments `b = a;` and `b = null;`.* 匹配到的元操作或API：
query: Get the body of method bar: The body contains the assignments `b = a;` and `b = null;`.
most similar API: get body of method: Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
cosine Similarity: 0.8084330558776855
*Get all assignment expressions in the body of method bar: `b = a;` and `b = null;`.* 匹配到的元操作或API：
query: Get all assignment expressions in the body of method bar: `b = a;` and `b = null;`.
most similar API: get symbol table of assignment expression
cosine Similarity: 0.8105959892272949
*For each assignment expression, get the left operand of the assignment expression: `b` for both.* 匹配到的元操作或API：
logic: For each assignment expression, get the left operand of the assignment expression: `b` for both.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9146611094474792
*Check whether the left operand is an accessed variable: true for both.* 匹配到的元操作或API：
query: Check whether the left operand is an accessed variable: true for both.
most similar API: Check whether the variable access equals
cosine Similarity: 0.8229868412017822
*Check whether the accessed variable is final: true for both.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final: true for both.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9394776821136475
*For each assignment expression, get the right operand of the assignment expression: `a` and `null` respectively.* 匹配到的元操作或API：
logic: For each assignment expression, get the right operand of the assignment expression: `a` and `null` respectively.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8942407965660095
*Check whether the right operand is a null literal: false for `b = a;` and true for `b = null;`.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal: false for `b = a;` and true for `b = null;`.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8466260433197021
*If the right operand is a null literal and the left operand is not a final variable or it is the first assignment to the final variable, then check whether it violates the rule: The first assignment `b = a;` does not violate the rule. The second assignment `b = null;` is the first and only reassignment to the final variable `b`, so it does not violate the rule either.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false positive) on this positive test case:
```
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentFinal')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTIfStatement
          ——ASTInfixExpression
            ——ASTVariableAccess (referenced variable name = 'a')
            ——ASTNullLiteral
          ——ASTBlock
            ——ASTExpressionStatement
              ——ASTAssignmentExpression
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTVariableAccess (referenced variable name = 'a')
          ——ASTBlock
            ——ASTExpressionStatement
              ——ASTAssignmentExpression
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isTestMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration), //Returns true if this is either a JUnit test or a TestNG test.
5. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
11. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public boolean equals(java.lang.Object)

1.  //Check whether the accessed variable is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
    return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
2.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        
        if (rightOperand instanceof ASTNullLiteral && leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessLocalVariable(variableAccess) && !isVariableAccessFinal(variableAccess)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) rightOperand;
            NodeStream<ASTNullLiteral> nullLiterals = conditionalExpression.children(ASTNullLiteral.class);
            if (!nullLiterals.isEmpty() && leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (isVariableAccessLocalVariable(variableAccess) && !isVariableAccessFinal(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JLocalVariableSymbol;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var){
        JVariableSymbol symbol = var.getReferencedSym();
        return symbol != null && symbol.isFinal();
    }
}
编译是否通过？
True
测试是否通过
True
测试用例全部通过
最终通过 18 个测试用例
正例 14 个
反例 4 个
输入token：44934
输出token：23382
结束

规则执行完毕，时间总花销： 1241.6860466003418 秒
