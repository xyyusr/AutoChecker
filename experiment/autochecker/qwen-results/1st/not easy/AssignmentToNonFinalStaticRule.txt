开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
1951
1549
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
To check for the adherence of the test case to the given rule, we need to perform the following granular checks:

1. Get the name of the class.
2. Check whether the class has declared fields.
3. Get the name of the field.
4. Check whether the field is static.
5. Check whether the field is final.
6. Get the constructors declared in the class.
7. Check whether the constructor has a body.
8. Get all statements in the constructor body.
9. Check whether the statement is an assignment expression.
10. Get the left operand of the assignment expression.
11. Check whether the left operand is an accessed field.
12. Check whether the accessed field is static.
13. Check whether the accessed field is final.

Given the test case:

```java
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```

Let's perform these checks:

1. Get the name of the class.
        - The name of the class is `Foo`.

2. Check whether the class has declared fields.
        - The class has declared fields.

3. Get the name of the field.
        - The name of the field is `x`.

4. Check whether the field is static.
        - The field `x` is static.

5. Check whether the field is final.
        - The field `x` is not final.

6. Get the constructors declared in the class.
        - The class has one constructor.

7. Check whether the constructor has a body.
        - The constructor has a body.

8. Get all statements in the constructor body.
        - The constructor body contains one statement: `x = y;`.

9. Check whether the statement is an assignment expression.
        - The statement `x = y;` is an assignment expression.

10. Get the left operand of the assignment expression.
        - The left operand of the assignment expression `x = y;` is `x`.

11. Check whether the left operand is an accessed field.
        - The left operand `x` is an accessed field.

12. Check whether the accessed field is static.
        - The accessed field `x` is static.

13. Check whether the accessed field is final.
        - The accessed field `x` is not final.

Based on these checks, the test case **violates** the rule because it assigns a value to a non-final static field `x` within a constructor.
['Get the name of the class.', 'Check whether the class has declared fields.', 'Get the name of the field.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the constructors declared in the class.', 'Check whether the constructor has a body.', 'Get all statements in the constructor body.', 'Check whether the statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the name of the class.', 'Check whether the class has declared fields.', 'Get the name of the field.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the constructors declared in the class.', 'Check whether the constructor has a body.', 'Get all statements in the constructor body.', 'Check whether the statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class has declared fields.* 匹配到的元操作或API：
logic: Check whether the class has declared fields.
most similar meta operation: Check whether field has declared annotations
cosine Similarity: 0.8758686184883118
*Get the name of the field.* 匹配到的元操作或API：
logic: Get the name of the field.
most similar meta operation: Get the name of field
cosine Similarity: 0.9705725908279419
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.985234260559082
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875955581665039
*Get the constructors declared in the class.* 匹配到的元操作或API：
query: Get the constructors declared in the class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8570958375930786
*Check whether the constructor has a body.* 匹配到的元操作或API：
query: Check whether the constructor has a body.
most similar API: get body of constructor
cosine Similarity: 0.8424292802810669
*Get all statements in the constructor body.* 匹配到的元操作或API：
query: Get all statements in the constructor body.
most similar API: get body of constructor
cosine Similarity: 0.8038374781608582
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503117799758911
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class has declared fields.* 匹配到的元操作或API：
logic: Check whether the class has declared fields.
most similar meta operation: Check whether field has declared annotations
cosine Similarity: 0.8758686184883118
*Get the name of the field.* 匹配到的元操作或API：
logic: Get the name of the field.
most similar meta operation: Get the name of field
cosine Similarity: 0.9705725908279419
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.985234260559082
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875955581665039
*Get the constructors declared in the class.* 匹配到的元操作或API：
query: Get the constructors declared in the class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8570958375930786
*Check whether the constructor has a body.* 匹配到的元操作或API：
query: Check whether the constructor has a body.
most similar API: get body of constructor
cosine Similarity: 0.8424292802810669
*Get all statements in the constructor body.* 匹配到的元操作或API：
query: Get all statements in the constructor body.
most similar API: get body of constructor
cosine Similarity: 0.8038374781608582
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503117799758911
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()

1.  //Check whether field has declared annotations
```java
import net.sourceforge.pmd.lang.ast.NodeStream;
import net.sourceforge.pmd.lang.java.ast.*;
public boolean hasAnnotation(ASTFieldDeclaration node){
    NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
    return declaredAnnotations.nonEmpty();
}
```
2.  //Get the name of field
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getFieldName(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
3.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessField(varAccess)) {
                JVariableSymbol sym = varAccess.getReferencedSym();
                JFieldSymbol fieldSym = (JFieldSymbol) sym;
                ASTFieldDeclaration fieldDecl = fieldSym.getAstNode();
                if (fieldDecl != null && fieldDecl.isStatic() && !fieldDecl.isFinal()) {
                    // Ensure the assignment is within a constructor
                    ASTConstructorDeclaration constructor = node.getNthParent(1);
                    if (constructor != null) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }

    // Check whether field has declared annotations
    public boolean hasAnnotation(ASTFieldDeclaration node) {
        NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
        return declaredAnnotations.nonEmpty();
    }

    // Get the name of field
    public String getFieldName(ASTFieldDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of class.
2. Get all fields declared in class.
3. Check whether the field is static.
4. Check whether the field is final.
5. Get all constructors declared in class.
6. Get all statements in constructor.
7. Check whether the statement is an assignment expression.
8. Get the left operand of the assignment expression.
9. Check whether the left operand is an accessed field.
10. Check whether the accessed field is static.
11. Check whether the accessed field is final.

This test case involves the following steps:

1. Get the name of class.
   - The name of class is Foo.

2. Get all fields declared in class.
   - The fields declared in class are x.

3. Check whether the field is static.
   - Field x is static.

4. Check whether the field is final.
   - Field x is not final.

5. Get all constructors declared in class.
   - The constructor declared in class is Foo(int y).

6. Get all statements in constructor.
   - The statement in constructor is x = y;

7. Check whether the statement is an assignment expression.
   - The statement x = y; is an assignment expression.

8. Get the left operand of the assignment expression.
   - The left operand of the assignment expression is x.

9. Check whether the left operand is an accessed field.
   - The left operand x is an accessed field.

10. Check whether the accessed field is static.
    - The accessed field x is static.

11. Check whether the accessed field is final.
    - The accessed field x is not final.

Since the left operand of the assignment expression is a static field and it is not final, this test case violates the rule.
['Get the name of class.', 'Get all fields declared in class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all constructors declared in class.', 'Get all statements in constructor.', 'Check whether the statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the name of class.', 'Get all fields declared in class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all constructors declared in class.', 'Get all statements in constructor.', 'Check whether the statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290460109710693
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.985234260559082
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875955581665039
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368497490882874
*Get all statements in constructor.* 匹配到的元操作或API：
query: Get all statements in constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8114531636238098
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503117799758911
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290460109710693
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.985234260559082
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875955581665039
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368497490882874
*Get all statements in constructor.* 匹配到的元操作或API：
query: Get all statements in constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8114531636238098
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503117799758911
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864993095397949
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 1


======================接下来开始迭代=====================
[ERROR]   "bad 2" failed不通过
89
74
95
78
=========================error_testcase_logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get the signature of the constructor.
4. Get the number of formal parameters of the constructor.
5. Get a formal parameter of the constructor.
6. Get the type of formal parameter.
7. Get the body of the constructor.
8. Get all assignment expressions in the constructor body.
9. Get the left operand of assignment expression.
10. Check whether the left operand is an accessed field.
11. Check whether the accessed field is static.
12. Check whether the accessed field is final.
13. Check whether the right operand of the assignment expression is a formal parameter.

In the provided test case:

8. Get all assignment expressions in the constructor body.
   - The assignment expression found is `this.x = y;`.

9. Get the left operand of assignment expression.
   - The left operand is `this.x`.

10. Check whether the left operand is an accessed field.
    - Yes, `this.x` is an accessed field.

11. Check whether the accessed field is static.
    - Yes, `x` is a static field.

12. Check whether the accessed field is final.
    - No, `x` is not a final field.

13. Check whether the right operand of the assignment expression is a formal parameter.
    - Yes, `y` is a formal parameter of the constructor.

Since the left operand is a non-final static field and the assignment expression assigns a value to it in the constructor, this test case violates the rule.
['Get the name of the class.', 'Get the name of the constructor.', 'Get the signature of the constructor.', 'Get the number of formal parameters of the constructor.', 'Get a formal parameter of the constructor.', 'Get the type of formal parameter.', 'Get the body of the constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Check whether the right operand of the assignment expression is a formal parameter.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Check whether the right operand of the assignment expression is a formal parameter.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'ASTThisExpression', 'SymbolicValueHelper', 'ASTFieldAccess', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.96956467628479
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732562899589539
*Get the number of formal parameters of the constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of the constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9820090532302856
*Get a formal parameter of the constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of the constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9727108478546143
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.985480785369873
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654064774513245
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8350675702095032
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
*Check whether the right operand of the assignment expression is a formal parameter.* 匹配到的元操作或API：
query: Check whether the right operand of the assignment expression is a formal parameter.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8492287397384644
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8350675702095032
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
*Check whether the right operand of the assignment expression is a formal parameter.* 匹配到的元操作或API：
query: Check whether the right operand of the assignment expression is a formal parameter.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8492287397384644
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
5. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
10. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
11. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            JVariableSymbol sym = fieldAccess.getReferencedSym();
            if (sym instanceof JFieldSymbol) {
                JFieldSymbol fieldSym = (JFieldSymbol) sym;
                if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                    ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                    if (constructor != null) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get the signature of the constructor.
4. Get the body of the constructor.
5. Get an assignment expression in the constructor body.
6. Get the left-hand side operand of the assignment expression.
7. Check whether the operand is an accessed field.
8. Check whether the accessed field is static.
9. Check whether the accessed field is final.

If the left-hand side operand of the assignment expression in the constructor body is an accessed static field and it is not final, then this test case violates the rule.
['Get the name of the class.', 'Get the name of the constructor.', 'Get the signature of the constructor.', 'Get the body of the constructor.', 'Get an assignment expression in the constructor body.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'ASTThisExpression', 'SymbolicValueHelper', 'ASTFieldAccess', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.96956467628479
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732562899589539
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654064774513245
*Get an assignment expression in the constructor body.* 匹配到的元操作或API：
query: Get an assignment expression in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8719539046287537
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8818296194076538
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            JFieldSymbol fieldSym = fieldAccess.getReferencedField();
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get the signature of the constructor.
4. Get the number of formal parameters of constructor.
5. Get a formal parameter of constructor.
6. Get the type of formal parameter.
7. Get the body of the constructor.
8. Get all assignment expressions in the constructor body.
9. Get the left operand of assignment expression.
10. Check whether the left operand is a static field.
11. Check whether the static field is final.
12. Get the class that method located in.
13. Check whether the method is a constructor.
14. If the left operand of assignment expression is a static field and the static field is not final and the method is a constructor, then this test case violates the rule.
            
['Get the name of the class.', 'Get the name of the constructor.', 'Get the signature of the constructor.', 'Get the number of formal parameters of constructor.', 'Get a formal parameter of constructor.', 'Get the type of formal parameter.', 'Get the body of the constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is a static field.', 'Check whether the static field is final.', 'Get the class that method located in.', 'Check whether the method is a constructor.', 'If the left operand of assignment expression is a static field and the static field is not final and the method is a constructor, then this test case violates the rule.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'ASTThisExpression', 'SymbolicValueHelper', 'ASTFieldAccess', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.96956467628479
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732562899589539
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865635633468628
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9820768237113953
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.985480785369873
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654064774513245
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8350675702095032
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Check whether the left operand is a static field.* 匹配到的元操作或API：
logic: Check whether the left operand is a static field.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.8537703156471252
*Check whether the static field is final.* 匹配到的元操作或API：
logic: Check whether the static field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9335592985153198
*Get the class that method located in.* 匹配到的元操作或API：
logic: Get the class that method located in.
most similar meta operation: Get the class that method located in
cosine Similarity: 0.9805242419242859
*Check whether the method is a constructor.* 匹配到的元操作或API：
query: Check whether the method is a constructor.
most similar API: Check whether the constructor is varargs
cosine Similarity: 0.8386968970298767
*If the left operand of assignment expression is a static field and the static field is not final and the method is a constructor, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
5. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
10. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
12. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isVarargs(), //Returns true if this node's last formal parameter is varargs.

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            JVariableSymbol sym = fieldAccess.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of the class.
2. Get the constructor of the class.
3. Get the name of the constructor.
4. Get the body of the constructor.
5. Identify all assignment expressions in the constructor body.
6. Get the left operand of each assignment expression.
7. Check whether the left operand is an accessed field.
8. Check whether the accessed field is static.
9. Check whether the accessed field is final.
10. If the left operand is an accessed static field and it is not final, then this test case violates the rule.

Given the test case:
- The constructor is named `Foo`.
- The body of the constructor contains an assignment expression `this.x = y`.
- The left operand of the assignment expression is `this.x`, which is an accessed field.
- The field `x` is static.
- The field `x` is not final.

Thus, the test case violates the rule.
['Get the name of the class.', 'Get the constructor of the class.', 'Get the name of the constructor.', 'Get the body of the constructor.', 'Identify all assignment expressions in the constructor body.', 'Get the left operand of each assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'If the left operand is an accessed static field and it is not final, then this test case violates the rule.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'ASTThisExpression', 'SymbolicValueHelper', 'ASTFieldAccess', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the constructor of the class.* 匹配到的元操作或API：
query: Get the constructor of the class.
most similar API: get class of constructor
cosine Similarity: 0.8561632633209229
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.96956467628479
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654064774513245
*Identify all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Identify all assignment expressions in the constructor body.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8193075656890869
*Get the left operand of each assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of each assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9755454063415527
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
*If the left operand is an accessed static field and it is not final, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.Class<Class<?> getClass()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            JVariableSymbol sym = fieldAccess.getReferencedSym();
            if (sym instanceof JFieldSymbol) {
                JFieldSymbol fieldSym = (JFieldSymbol) sym;
                if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                    ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                    if (constructor != null) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of class.
        2. Get the constructor declaration from class.
        3. Get the body of constructor.
        4. Get all assignment expressions in the constructor body.
        5. Get the left operand of assignment expression.
        6. Check whether the left operand is an accessed field.
        7. Check whether the accessed field is static.
        8. Check whether the accessed field is final.
        If the left operand of the assignment expression is an accessed static field and the accessed field is not final, then this test case violates the rule.
        
In this specific test case:
1. Get the constructor declaration from class `Foo`.
2. Get the body of constructor `Foo(int y)`.
3. Get all assignment expressions in the constructor body, which includes `this.x = y;`.
4. Get the left operand of assignment expression `this.x = y;`, which is `this.x`.
5. Check whether the left operand `this.x` is an accessed field.
6. Check whether the accessed field `x` is static.
7. Check whether the accessed field `x` is final. (In this case, it is not final, which violates the rule.)
8. Since the left operand is an accessed static field and it is not final, the test case violates the rule.
['Get the name of class.', 'Get the constructor declaration from class.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the constructor declaration from class `Foo`.', 'Get the body of constructor `Foo(int y)`.', 'Get all assignment expressions in the constructor body, which includes `this.x = y;`.', 'Get the left operand of assignment expression `this.x = y;`, which is `this.x`.', 'Check whether the left operand `this.x` is an accessed field.', 'Check whether the accessed field `x` is static.', 'Check whether the accessed field `x` is final. (In this case, it is not final, which violates the rule.)', 'Since the left operand is an accessed static field and it is not final, the test case violates the rule.']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'ASTThisExpression', 'SymbolicValueHelper', 'ASTFieldAccess', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'ASTFormalParameter', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the constructor declaration from class.* 匹配到的元操作或API：
logic: Get the constructor declaration from class.
most similar meta operation: Get a declared annotation of constructor
cosine Similarity: 0.8664312362670898
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8350675702095032
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9910000562667847
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513691425323486
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394946098327637
*Get the constructor declaration from class `Foo`.* 匹配到的元操作或API：
query: Get the constructor declaration from class `Foo`.
most similar API: get annotation of constructor
cosine Similarity: 0.816763699054718
*Get the body of constructor `Foo(int y)`.* 匹配到的元操作或API：
query: Get the body of constructor `Foo(int y)`.
most similar API: get body of constructor
cosine Similarity: 0.884101927280426
*Get all assignment expressions in the constructor body, which includes `this.x = y;`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the left operand of assignment expression `this.x = y;`, which is `this.x`.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression `this.x = y;`, which is `this.x`.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9213415384292603
*Check whether the left operand `this.x` is an accessed field.* 匹配到的元操作或API：
query: Check whether the left operand `this.x` is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8509969711303711
*Check whether the accessed field `x` is static.* 匹配到的元操作或API：
logic: Check whether the accessed field `x` is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.8973644971847534
*Check whether the accessed field `x` is final. (In this case, it is not final, which violates the rule.)* 匹配到的元操作或API：
logic: Check whether the accessed field `x` is final. (In this case, it is not final, which violates the rule.)
most similar meta operation: Check whether the field is final
cosine Similarity: 0.8750987648963928
*Since the left operand is an accessed static field and it is not final, the test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnnotation getAnnotation(java.lang.String), //Returns a specific annotation on this node, or null if absent. @param binaryName            Binary name of the annotation type.            Note: for now, canonical names are tolerated, this may be changed in PMD 7.
9. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            if (fieldAccess.getLhs() instanceof ASTThisExpression) {
                JVariableSymbol sym = fieldAccess.getReferencedSym();
                if (sym instanceof JFieldSymbol) {
                    JFieldSymbol fieldSym = (JFieldSymbol) sym;
                    if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                        ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                        if (constructor != null) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
==========5轮都没修复成功一个后面新加的一个测试用例，换一个测试用例进行修复
这个测试用例 5 round 没有修复成功：
bad 2
[ERROR]   "bad 4" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
94
79
=========================error_testcase_logics=========================
1. Get the name of constructor.
        2. Get a formal parameter of constructor.
        3. Get the number of formal parameters of constructor.
        4. Get an access of field.
        5. Check whether the accessed variable is static.
        6. Check whether the accessed variable is final.
        7. Get the expression in assignment expression.
        8. Check whether the left operand of assignment expression is a field access.
        9. Check whether the field is static.
        10. Check whether the field is final.
        11. If the left operand of the assignment expression is a static field and is not final, then check further.
        12. Get the method declaration from method call.
        13. Check whether the method call is inside a constructor.
        14. If the method call is inside a constructor and the left operand of the assignment expression is a static field and is not final, then check further.
        15. Get the original method of this overridden method.
        16. Check whether the method is a method call with an increment or decrement operator.
        17. If the method call is inside a constructor, the left operand of the assignment expression is a static field, and the right operand includes an increment or decrement operator, then this test case violates the rule.

In this specific test case:

1. Get the name of constructor. (Foo)
2. Get a formal parameter of constructor. (No formal parameters)
3. Get the number of formal parameters of constructor. (0)
4. Get an access of field. (counter and id2)
5. Check whether the accessed variable is static. (counter is static)
6. Check whether the accessed variable is final. (counter is not final, id2 is final)
7. Get the expression in assignment expression. (counter++)
8. Check whether the left operand of assignment expression is a field access. (a is field access)
9. Check whether the field is static. (a is not static, counter is static)
10. Check whether the field is final. (a is final, counter is not final)
11. Since the left operand of the assignment expression (counter) is a static field and is not final, we proceed.
12. Get the method declaration from method call. (Not applicable, counter++ is not a method call)
13. Check whether the method call is inside a constructor. (counter++ is inside the constructor Foo)
14. Since the operation is inside a constructor and the left operand of the assignment expression is a static field and is not final, we proceed.
15. Get the original method of this overridden method. (Not applicable, no method overriding)
16. Check whether the method is a method call with an increment or decrement operator. (Not applicable, counter++ is not a method call but an increment operation)
17. Check whether the operation is inside a constructor, the left operand of the assignment expression is a static field, and the right operand includes an increment or decrement operator. (counter++ is inside the constructor Foo, the left operand is the static field counter, and the right operand includes the increment operator)

This test case violates the rule as it reassigns a value to a non-final static field inside a constructor with an increment operation.
['Get the name of constructor.', 'Get a formal parameter of constructor.', 'Get the number of formal parameters of constructor.', 'Get an access of field.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'Get the expression in assignment expression.', 'Check whether the left operand of assignment expression is a field access.', 'Check whether the field is static.', 'Check whether the field is final.', 'If the left operand of the assignment expression is a static field and is not final, then check further.', 'Get the method declaration from method call.', 'Check whether the method call is inside a constructor.', 'If the method call is inside a constructor and the left operand of the assignment expression is a static field and is not final, then check further.', 'Get the original method of this overridden method.', 'Check whether the method is a method call with an increment or decrement operator.', 'If the method call is inside a constructor, the left operand of the assignment expression is a static field, and the right operand includes an increment or decrement operator, then this test case violates the rule.', 'Get the name of constructor. (Foo)', 'Get a formal parameter of constructor. (No formal parameters)', 'Get the number of formal parameters of constructor. (0)', 'Get an access of field. (counter and id2)', 'Check whether the accessed variable is static. (counter is static)', 'Check whether the accessed variable is final. (counter is not final, id2 is final)', 'Get the expression in assignment expression. (counter++)', 'Check whether the left operand of assignment expression is a field access. (a is field access)', 'Check whether the field is static. (a is not static, counter is static)', 'Check whether the field is final. (a is final, counter is not final)', 'Since the left operand of the assignment expression (counter) is a static field and is not final, we proceed.', 'Get the method declaration from method call. (Not applicable, counter++ is not a method call)', 'Check whether the method call is inside a constructor. (counter++ is inside the constructor Foo)', 'Since the operation is inside a constructor and the left operand of the assignment expression is a static field and is not final, we proceed.', 'Get the original method of this overridden method. (Not applicable, no method overriding)', 'Check whether the method is a method call with an increment or decrement operator. (Not applicable, counter++ is not a method call but an increment operation)', 'Check whether the operation is inside a constructor, the left operand of the assignment expression is a static field, and the right operand includes an increment or decrement operator. (counter++ is inside the constructor Foo, the left operand is the static field counter, and the right operand includes the increment operator)']
['ClassNamesUtil', 'JavaSemanticErrors', 'JavadocTag', 'ASTModifierList', 'InternalApiBridge', 'ASTCompilationUnit', 'ASTExpressionStatement', 'ASTClassOrInterfaceBody', 'TypesFromAst', 'JavaRuleUtil', 'TypeConversion', 'TestFrameworksUtil', 'ASTFormalParameters', 'ASTVariableDeclaratorId', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'ASTBlock', 'ASTAssignmentExpression', 'ASTUnaryExpression', 'AstImplUtil', 'TypesFromReflection', 'ASTFieldDeclaration', 'SymbolicValueHelper', 'SymbolResolutionPass', 'TokenUtils', 'ASTPrimitiveType', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'CommentAssignmentPass', 'JavaAstUtils', 'JavaPropertyUtil', 'ASTVariableDeclarator']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789291620254517
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9820768237113953
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865635633468628
*Get an access of field.* 匹配到的元操作或API：
logic: Get an access of field.
most similar meta operation: Get an access of field
cosine Similarity: 0.9836359620094299
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882041811943054
*Get the expression in assignment expression.* 匹配到的元操作或API：
logic: Get the expression in assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8580917119979858
*Check whether the left operand of assignment expression is a field access.* 匹配到的元操作或API：
query: Check whether the left operand of assignment expression is a field access.
most similar API: get left operand of assignment expression
cosine Similarity: 0.8519673347473145
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.985234260559082
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875955581665039
*If the left operand of the assignment expression is a static field and is not final, then check further.* 匹配到的元操作或API：
query: If the left operand of the assignment expression is a static field and is not final, then check further.
most similar API: get left operand of assignment expression
cosine Similarity: 0.8282455205917358
*Get the method declaration from method call.* 匹配到的元操作或API：
logic: Get the method declaration from method call.
most similar meta operation: Get method declaration from method call
cosine Similarity: 0.9787436127662659
*Check whether the method call is inside a constructor.* 匹配到的元操作或API：
query: Check whether the method call is inside a constructor.
most similar API: Check whether the constructor equals
cosine Similarity: 0.8320143222808838
*If the method call is inside a constructor and the left operand of the assignment expression is a static field and is not final, then check further.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the original method of this overridden method.* 匹配到的元操作或API：
logic: Get the original method of this overridden method.
most similar meta operation: Get the original method of this overridden method
cosine Similarity: 0.9831140041351318
*Check whether the method is a method call with an increment or decrement operator.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the method call is inside a constructor, the left operand of the assignment expression is a static field, and the right operand includes an increment or decrement operator, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of constructor. (Foo)* 匹配到的元操作或API：
logic: Get the name of constructor. (Foo)
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9545143246650696
*Get a formal parameter of constructor. (No formal parameters)* 匹配到的元操作或API：
logic: Get a formal parameter of constructor. (No formal parameters)
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9691134095191956
*Get the number of formal parameters of constructor. (0)* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor. (0)
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.969638466835022
*Get an access of field. (counter and id2)* 匹配到的元操作或API：
logic: Get an access of field. (counter and id2)
most similar meta operation: Get an access of field
cosine Similarity: 0.8671406507492065
*Check whether the accessed variable is static. (counter is static)* 匹配到的元操作或API：
logic: Check whether the accessed variable is static. (counter is static)
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9518009424209595
*Check whether the accessed variable is final. (counter is not final, id2 is final)* 匹配到的元操作或API：
logic: Check whether the accessed variable is final. (counter is not final, id2 is final)
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9262580275535583
*Get the expression in assignment expression. (counter++)* 匹配到的元操作或API：
logic: Get the expression in assignment expression. (counter++)
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8585889339447021
*Check whether the left operand of assignment expression is a field access. (a is field access)* 匹配到的元操作或API：
query: Check whether the left operand of assignment expression is a field access. (a is field access)
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8468029499053955
*Check whether the field is static. (a is not static, counter is static)* 匹配到的元操作或API：
logic: Check whether the field is static. (a is not static, counter is static)
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9058226346969604
*Check whether the field is final. (a is final, counter is not final)* 匹配到的元操作或API：
logic: Check whether the field is final. (a is final, counter is not final)
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9132102727890015
*Since the left operand of the assignment expression (counter) is a static field and is not final, we proceed.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method declaration from method call. (Not applicable, counter++ is not a method call)* 匹配到的元操作或API：
logic: Get the method declaration from method call. (Not applicable, counter++ is not a method call)
most similar meta operation: Get method declaration from method call
cosine Similarity: 0.9024845361709595
*Check whether the method call is inside a constructor. (counter++ is inside the constructor Foo)* 匹配到的元操作或API：
query: Check whether the method call is inside a constructor. (counter++ is inside the constructor Foo)
most similar API: Check whether the constructor equals
cosine Similarity: 0.8150297403335571
*Since the operation is inside a constructor and the left operand of the assignment expression is a static field and is not final, we proceed.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the original method of this overridden method. (Not applicable, no method overriding)* 匹配到的元操作或API：
logic: Get the original method of this overridden method. (Not applicable, no method overriding)
most similar meta operation: Get the original method of this overridden method
cosine Similarity: 0.9641820192337036
*Check whether the method is a method call with an increment or decrement operator. (Not applicable, counter++ is not a method call but an increment operation)* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the operation is inside a constructor, the left operand of the assignment expression is a static field, and the right operand includes an increment or decrement operator. (counter++ is inside the constructor Foo, the left operand is the static field counter, and the right operand includes the increment operator)* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'id1')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'id2')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'id2')
            ——ASTUnaryExpression
              ——ASTVariableAccess (referenced variable name = 'counter')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand(), //Returns the left-hand side, ie the expression being assigned to.
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
7. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean equals(java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getOverriddenMethod()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Get an access of field
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr;
import java.util.List;
public List<ASTAssignableExpr.ASTNamedReferenceExpr> getAUsage(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId var : varIds){
        if(var.getName().equals("x")){
            List<ASTAssignableExpr.ASTNamedReferenceExpr> localUsages = var.getLocalUsages();
            return localUsages;
        }
    }
    return null;
}
```
3.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
4.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```
5.  //Get method declaration from method call
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.symbols.JMethodSymbol;
public ASTMethodDeclaration getMethodFromMethodCall(ASTMethodCall method){
    JMethodSymbol symbol = (JMethodSymbol)method.getMethodType().getSymbol();
    ASTMethodDeclaration declaration = symbol.tryGetNode();
    return declaration;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JVariableSymbol sym = leftOperand.getReferencedSym();
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }

        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTUnaryExpression) {
            ASTUnaryExpression unaryExpression = (ASTUnaryExpression) rightOperand;
            if (unaryExpression.getOperand() instanceof ASTVariableAccess) {
                ASTVariableAccess varAccess = (ASTVariableAccess) unaryExpression.getOperand();
                if (isVariableAccessStatic(varAccess) && !isVariableAccessFinal(varAccess)) {
                    ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                    if (constructor != null) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var){
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }
}
编译是否通过？
True
测试是否通过
True
测试用例全部通过
最终通过 5 个测试用例
正例 2 个
反例 3 个
输入token：807464
输出token：544008
结束

规则执行完毕，时间总花销： 972.5343360900879 秒
