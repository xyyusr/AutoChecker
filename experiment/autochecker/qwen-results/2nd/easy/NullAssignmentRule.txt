开始

========================================== Rule NullAssignmentRule ===========================================
一共 19 个测试用例
正例 14 个
反例 5 个
2476
1997
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the left operand of assignment expression.
2. Check whether the operand is a local variable.
3. Get the right operand of assignment expression.
4. Check whether the right operand is a null literal.
5. Check whether the assignment expression is outside of the local variable declaration.
If the left operand of the assignment expression is a local variable, the right operand is a null literal, and the assignment expression is outside of the local variable declaration, then this test case violates the rule.
['Get the left operand of assignment expression.', 'Check whether the operand is a local variable.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a null literal.', 'Check whether the assignment expression is outside of the local variable declaration.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTConstructorCall', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.893347978591919
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9019619822502136
*Check whether the assignment expression is outside of the local variable declaration.* 匹配到的元操作或API：
query: Check whether the assignment expression is outside of the local variable declaration.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.865607500076294
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
The test case corresponding to the rule:
```
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConstructorCall
              ——ASTClassOrInterfaceType (this is a class type)
              ——ASTArgumentList (size = 0)
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'bar')
            ——ASTArgumentList (size = 1)
              ——ASTVariableAccess (referenced variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'o')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getRightOperand() instanceof ASTNullLiteral) {
            ASTVariableAccess variableAccess = node.getLeftOperand().firstChild(ASTVariableAccess.class);
            if (variableAccess != null && isVariableAccessLocalVariable(variableAccess)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
False
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the right operand of assignment expression.
2. Check whether the operand is a literal value.
3. Check whether the literal value is null.
4. Check whether the assignment expression is outside of the variable declaration.
If the right operand of the assignment expression is a null literal and the assignment expression is outside of the variable declaration, then this test case violates the rule.
            
['Get the right operand of assignment expression.', 'Check whether the operand is a literal value.', 'Check whether the literal value is null.', 'Check whether the assignment expression is outside of the variable declaration.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTConstructorCall', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the operand is a literal value.* 匹配到的元操作或API：
logic: Check whether the operand is a literal value.
most similar meta operation: Check whether the numeric literal is double literal
cosine Similarity: 0.8560927510261536
*Check whether the literal value is null.* 匹配到的元操作或API：
query: Check whether the literal value is null.
most similar API: Check whether is null literal
cosine Similarity: 0.93576979637146
*Check whether the assignment expression is outside of the variable declaration.* 匹配到的元操作或API：
query: Check whether the assignment expression is outside of the variable declaration.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8787682056427002
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
The test case corresponding to the rule:
```
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConstructorCall
              ——ASTClassOrInterfaceType (this is a class type)
              ——ASTArgumentList (size = 0)
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'bar')
            ——ASTArgumentList (size = 1)
              ——ASTVariableAccess (referenced variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'o')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isDoubleLiteral()
3. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (JavaAstUtils.isNullLiteral(node.getRightOperand())) {
            JVariableSymbol symbol = node.getLeftOperand().getVariableSymbol();
            if (symbol != null && !(node.getParent() instanceof ASTLocalVariableDeclaration)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the name of class.
3. Get the methods declared in class.
4. Get the body of method.
5. Get the statements in the method body.
6. Check whether the statement is an assignment expression.
7. Get the right-hand side operand of the assignment expression.
8. Check whether the operand is a null literal.
9. Get the left-hand side operand of the assignment expression.
10. Check whether the operand is a variable declaration.
11. Check whether the assignment expression is outside of the variable declaration.

In the provided test case:
1. Get the name of the package where the class is located.
   - The package name is not specified, so it is default package-private.
2. Get the name of class.
   - The class name is Foo.
3. Get the methods declared in class.
   - The methods declared in class are foo and bar.
4. Get the body of method.
   - The body of method foo is selected.
5. Get the statements in the method body.
   - The statements are: `Object x;`, `x = new Object();`, `bar(x);`, and `x = null;`.
6. Check whether the statement is an assignment expression.
   - The statement `x = null;` is an assignment expression.
7. Get the right-hand side operand of the assignment expression.
   - The right-hand side operand is `null`.
8. Check whether the operand is a null literal.
   - The operand is a null literal.
9. Get the left-hand side operand of the assignment expression.
   - The left-hand side operand is `x`.
10. Check whether the operand is a variable declaration.
    - The operand `x` is not a variable declaration; it is an access to the variable `x`.
11. Check whether the assignment expression is outside of the variable declaration.
    - The assignment expression `x = null;` is outside of the variable declaration `Object x;`.

Since the assignment expression `x = null;` is outside of the variable declaration and assigns a null literal to a variable, this test case violates the rule.
['Get the name of the package where the class is located.', 'Get the name of class.', 'Get the methods declared in class.', 'Get the body of method.', 'Get the statements in the method body.', 'Check whether the statement is an assignment expression.', 'Get the right-hand side operand of the assignment expression.', 'Check whether the operand is a null literal.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the operand is a variable declaration.', 'Check whether the assignment expression is outside of the variable declaration.', 'Get the name of the package where the class is located.', 'Get the name of class.', 'Get the methods declared in class.', 'Get the body of method.', 'Get the statements in the method body.', 'Check whether the statement is an assignment expression.', 'Get the right-hand side operand of the assignment expression.', 'Check whether the operand is a null literal.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the operand is a variable declaration.', 'Check whether the assignment expression is outside of the variable declaration.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTConstructorCall', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the methods declared in class.* 匹配到的元操作或API：
logic: Get the methods declared in class.
most similar meta operation: Get method declaration from method call
cosine Similarity: 0.8509418964385986
*Get the body of method.* 匹配到的元操作或API：
query: Get the body of method.
most similar API: get body of method
cosine Similarity: 0.9752806425094604
*Get the statements in the method body.* 匹配到的元操作或API：
query: Get the statements in the method body.
most similar API: get body of method
cosine Similarity: 0.8396947383880615
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503116607666016
*Get the right-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right-hand side operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9076520800590515
*Check whether the operand is a null literal.* 匹配到的元操作或API：
query: Check whether the operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9180005788803101
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the operand is a variable declaration.* 匹配到的元操作或API：
query: Check whether the operand is a variable declaration.
most similar API: Check whether the variable declarator equals
cosine Similarity: 0.8237494230270386
*Check whether the assignment expression is outside of the variable declaration.* 匹配到的元操作或API：
query: Check whether the assignment expression is outside of the variable declaration.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8787682056427002
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the methods declared in class.* 匹配到的元操作或API：
logic: Get the methods declared in class.
most similar meta operation: Get method declaration from method call
cosine Similarity: 0.8509418964385986
*Get the body of method.* 匹配到的元操作或API：
query: Get the body of method.
most similar API: get body of method
cosine Similarity: 0.9752806425094604
*Get the statements in the method body.* 匹配到的元操作或API：
query: Get the statements in the method body.
most similar API: get body of method
cosine Similarity: 0.8396947383880615
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503116607666016
*Get the right-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right-hand side operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9076520800590515
*Check whether the operand is a null literal.* 匹配到的元操作或API：
query: Check whether the operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9180005788803101
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the operand is a variable declaration.* 匹配到的元操作或API：
query: Check whether the operand is a variable declaration.
most similar API: Check whether the variable declarator equals
cosine Similarity: 0.8237494230270386
*Check whether the assignment expression is outside of the variable declaration.* 匹配到的元操作或API：
query: Check whether the assignment expression is outside of the variable declaration.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8787682056427002
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
The test case corresponding to the rule:
```
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConstructorCall
              ——ASTClassOrInterfaceType (this is a class type)
              ——ASTArgumentList (size = 0)
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'bar')
            ——ASTArgumentList (size = 1)
              ——ASTVariableAccess (referenced variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'o')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getPackageName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
8. net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator: public boolean equals(java.lang.Object)

1.  //Get method declaration from method call
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.symbols.JMethodSymbol;
public ASTMethodDeclaration getMethodFromMethodCall(ASTMethodCall method){
    JMethodSymbol symbol = (JMethodSymbol)method.getMethodType().getSymbol();
    ASTMethodDeclaration declaration = symbol.tryGetNode();
    return declaration;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTAssignableExpr leftOperand = node.getLeftOperand();
            if (leftOperand instanceof ASTVariableAccess) {
                ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
                if (!variableAccess.isReferenceToDeclaration()) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the left operand of assignment expression.
2. Get the right operand of assignment expression.
3. Check whether the right operand is a null literal.
4. Check whether the left operand is a variable declaration.
5. Check whether the assignment is outside the variable declaration.
If the right operand of the assignment expression is a null literal and the assignment is outside the variable declaration, then this test case violates the rule. 

For the provided test case:
1. Get the left operand of assignment expression: The left operand is `x`.
2. Get the right operand of assignment expression: The right operand is `null`.
3. Check whether the right operand is a null literal: True, `null` is a null literal.
4. Check whether the left operand is a variable declaration: False, `x` was declared earlier.
5. Check whether the assignment is outside the variable declaration: True, `x = null;` is outside the variable declaration.

Since steps 3 and 5 are both true, the test case violates the rule.
['Get the left operand of assignment expression.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a null literal.', 'Check whether the left operand is a variable declaration.', 'Check whether the assignment is outside the variable declaration.', 'Get the left operand of assignment expression: The left operand is `x`.', 'Get the right operand of assignment expression: The right operand is `null`.', 'Check whether the right operand is a null literal: True, `null` is a null literal.', 'Check whether the left operand is a variable declaration: False, `x` was declared earlier.', 'Check whether the assignment is outside the variable declaration: True, `x = null;` is outside the variable declaration.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTConstructorCall', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9019619822502136
*Check whether the left operand is a variable declaration.* 匹配到的元操作或API：
query: Check whether the left operand is a variable declaration.
most similar API: get left operand of assignment expression
cosine Similarity: 0.8141466379165649
*Check whether the assignment is outside the variable declaration.* 匹配到的元操作或API：
query: Check whether the assignment is outside the variable declaration.
most similar API: compare location of assignment expression
cosine Similarity: 0.8073890209197998
*Get the left operand of assignment expression: The left operand is `x`.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression: The left operand is `x`.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.936760425567627
*Get the right operand of assignment expression: The right operand is `null`.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression: The right operand is `null`.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9157728552818298
*Check whether the right operand is a null literal: True, `null` is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal: True, `null` is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8863425850868225
*Check whether the left operand is a variable declaration: False, `x` was declared earlier.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the assignment is outside the variable declaration: True, `x = null;` is outside the variable declaration.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
The test case corresponding to the rule:
```
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConstructorCall
              ——ASTClassOrInterfaceType (this is a class type)
              ——ASTArgumentList (size = 0)
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'bar')
            ——ASTArgumentList (size = 1)
              ——ASTVariableAccess (referenced variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'o')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand(), //Returns the left-hand side, ie the expression being assigned to.
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }
    
    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        ASTExpression rightOperand = node.getRightOperand();
        
        if (rightOperand instanceof ASTNullLiteral) {
            // Get the variable declarator from the left operand
            ASTVariableDeclarator declarator = leftOperand.getVariableDeclarator();
            if (declarator != null) {
                ASTVariableDeclaratorId declaratorId = declarator.getVariableDeclaratorId();
                NodeStream<ASTVariableDeclaratorId> declarators = declaratorId.getVariableDeclarations().findDescendantsOfType(ASTVariableDeclaratorId.class);
                boolean isDeclaredInSameBlock = declarators.anyMatch(decl -> decl.getParent().getParent() == node.getParent().getParent());
                
                if (!isDeclaredInSameBlock) {
                    addViolation(data, node);
                }
            }
        }
        
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the left operand of assignment expression.
        2. Check whether the left operand is a local variable.
        3. Get the right operand of assignment expression.
        4. Check whether the right operand is a null literal.
        If the left operand is a local variable and the right operand is a null literal, then this test case violates the rule. This check will identify the assignment `x = null;` as violating the rule.

To perform the full granular checks on this test case:

1. Get the left operand of assignment expression.
2. Check whether the left operand is a local variable.
3. Get the name of local variable.
4. Get the right operand of assignment expression.
5. Check whether the right operand is a null literal.
6. Check whether the null literal assignment is outside of the local variable declaration.

In this specific test case, the null assignment is outside of the declaration, so it violates the rule.
['Get the left operand of assignment expression.', 'Check whether the left operand is a local variable.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a null literal.', 'Get the left operand of assignment expression.', 'Check whether the left operand is a local variable.', 'Get the name of local variable.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a null literal.', 'Check whether the null literal assignment is outside of the local variable declaration.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTConstructorCall', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.8577459454536438
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9019619822502136
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.8577459454536438
*Get the name of local variable.* 匹配到的元操作或API：
logic: Get the name of local variable.
most similar meta operation: Get the name of local variable
cosine Similarity: 0.9835154414176941
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9019619822502136
*Check whether the null literal assignment is outside of the local variable declaration.* 匹配到的元操作或API：
query: Check whether the null literal assignment is outside of the local variable declaration.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8661614656448364
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
The test case corresponding to the rule:
```
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConstructorCall
              ——ASTClassOrInterfaceType (this is a class type)
              ——ASTArgumentList (size = 0)
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'bar')
            ——ASTArgumentList (size = 1)
              ——ASTVariableAccess (referenced variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'o')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.

1.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```
2.  //Get the name of local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getLocalVariableName(ASTLocalVariableDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a local declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is a local variable
    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    // Get the name of local variable
    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName; // Assuming we want to return the name of the first variable declared
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 1


======================接下来开始迭代=====================
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
107
91
114
98
77
63
99
82
95
79
=========================error_testcase_logics=========================
1. Get the right-hand side operand of the assignment expression.
2. Check whether the right-hand side operand is a ternary expression.
3. Get the right-hand side of the ternary expression.
4. Check whether the right-hand side operand of the ternary expression is null.
5. Get the left-hand side operand of the assignment expression.
6. Check whether the left-hand side operand is a local variable.
7. Check whether the left-hand side operand is being assigned outside of its declaration.
If the right-hand side operand of the ternary expression is null and the assignment is happening outside of the local variable's declaration, then this test case violates the rule.
['Get the right-hand side operand of the assignment expression.', 'Check whether the right-hand side operand is a ternary expression.', 'Get the right-hand side of the ternary expression.', 'Check whether the right-hand side operand of the ternary expression is null.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the left-hand side operand is a local variable.', 'Check whether the left-hand side operand is being assigned outside of its declaration.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTBooleanLiteral', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTStringLiteral', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTReturnStatement', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'ASTConditionalExpression', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the right-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right-hand side operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9076520800590515
*Check whether the right-hand side operand is a ternary expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the right-hand side of the ternary expression.* 匹配到的元操作或API：
query: Get the right-hand side of the ternary expression.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.8331301808357239
*Check whether the right-hand side operand of the ternary expression is null.* 匹配到的元操作或API：
query: Check whether the right-hand side operand of the ternary expression is null.
most similar API: Check whether the null literal is expression
cosine Similarity: 0.8289767503738403
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the left-hand side operand is a local variable.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is a local variable.
most similar API: Check whether the local variable equals
cosine Similarity: 0.8402088284492493
*Check whether the left-hand side operand is being assigned outside of its declaration.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is being assigned outside of its declaration.
most similar API: get left operand of assignment expression
cosine Similarity: 0.8248526453971863
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is a local variable
    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    // Get the name of local variable
    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName; // Assuming we want to return the name of the first variable declared
        }
        return null;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}


This checker is failed(false negative) on this negative test case:
```
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTMethodCall (called method name = 'bar')
                ——ASTArgumentList (size = 0)
              ——ASTStringLiteral
              ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTPrimitiveType (method return type = 'boolean')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTReturnStatement
          ——ASTBooleanLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand(), //Returns the left-hand side, ie the expression being assigned to.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class, ASTConditionalExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConditionalExpression node, Object data) {
        ASTExpression elseBranch = node.getElseOperand();
        if (elseBranch instanceof ASTNullLiteral) {
            ASTVariableAccess varAccess = findVariableAccessInConditional(node);
            if (varAccess != null && isVariableAccessLocalVariable(varAccess)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private ASTVariableAccess findVariableAccessInConditional(ASTConditionalExpression node) {
        ASTExpression thenBranch = node.getThenOperand();
        ASTExpression condition = node.getCondition();

        if (condition instanceof ASTVariableAccess) {
            return (ASTVariableAccess) condition;
        } else if (thenBranch instanceof ASTVariableAccess) {
            return (ASTVariableAccess) thenBranch;
        } else if (condition instanceof ASTAssignmentExpression) {
            return (ASTVariableAccess) ((ASTAssignmentExpression) condition).getLeftOperand();
        } else if (thenBranch instanceof ASTAssignmentExpression) {
            return (ASTVariableAccess) ((ASTAssignmentExpression) thenBranch).getLeftOperand();
        }
        return null;
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName; // Assuming we want to return the name of the first variable declared
        }
        return null;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the body of the method.
        2. Get the ternary expression within the method body.
        3. Get the false branch of the ternary expression.
        4. Check whether the false branch is a null literal.

If the false branch of the ternary expression is a null literal, then this test case violates the rule. This granular check identifies the specific instance of null assignment outside the variable declaration in the provided test case.
['Get the body of the method.', 'Get the ternary expression within the method body.', 'Get the false branch of the ternary expression.', 'Check whether the false branch is a null literal.']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTBooleanLiteral', 'ASTVariableDeclarator', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTStringLiteral', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTReturnStatement', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'ASTConditionalExpression', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the body of the method.* 匹配到的元操作或API：
query: Get the body of the method.
most similar API: get body of method
cosine Similarity: 0.9667365550994873
*Get the ternary expression within the method body.* 匹配到的元操作或API：
logic: Get the ternary expression within the method body.
most similar meta operation: Get the expression if the condition of ternary expression is true
cosine Similarity: 0.8656773567199707
*Get the false branch of the ternary expression.* 匹配到的元操作或API：
logic: Get the false branch of the ternary expression.
most similar meta operation: Get the expression if the condition of ternary expression is false
cosine Similarity: 0.8514334559440613
*Check whether the false branch is a null literal.* 匹配到的元操作或API：
query: Check whether the false branch is a null literal.
most similar API: Check whether the boolean literal is null literal
cosine Similarity: 0.8539275527000427
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is a local variable
    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    // Get the name of local variable
    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName; // Assuming we want to return the name of the first variable declared
        }
        return null;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}


This checker is failed(false negative) on this negative test case:
```
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTMethodCall (called method name = 'bar')
                ——ASTArgumentList (size = 0)
              ——ASTStringLiteral
              ——ASTNullLiteral
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTPrimitiveType (method return type = 'boolean')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTReturnStatement
          ——ASTBooleanLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
2. net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getThenBranch()
3. net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getElseBranch()
4. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) rightOperand;
            if (condExpr.getThenBranch() instanceof ASTNullLiteral || condExpr.getElseBranch() instanceof ASTNullLiteral) {
                ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
                if (isVariableAccessLocalVariable(leftOperand)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
        return null;
    }
}
编译是否通过？
True
测试是否通过
True
[ERROR]   "bad 5" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
100
82
95
79
=========================error_testcase_logics=========================
1. Get the right operand of the ternary expression.
2. Check whether the operand is a null literal.
3. If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration.
4. Get the left operand of the assignment expression.
5. Check whether the left operand is a local variable.
6. Check whether the local variable is already initialized.

In this specific test case, the steps would be:

1. Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.
        2. Check whether the operand is a null literal. (It is the last operand, `null`.)
        3. If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)
        4. Get the left operand of the assignment expression `x = ...`.
        5. Check whether the left operand is a local variable. (It is `x`, a local variable.)
        6. Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)

However, the rule specifically mentions avoiding reassigning null to a variable, which implies the variable has already been assigned a value. In this case, the variable `x` is being initialized with a potential null value, not reassigned. Therefore, this does not strictly violate the rule as described. If the rule intends to cover any null assignment outside of declaration, then the test case does violate it.

If the rule is strictly about reassignment, the test case does not violate it because `x` is not being reassigned; it's being initialized.

If the rule is about any null assignment outside of the declaration, then it does violate the rule. 

To clarify, here's the check with the assumption that the rule applies to any null assignment outside of the declaration:

1. Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.
        2. Check whether the operand is a null literal. (It is the last operand, `null`.)
        3. If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)
        4. Get the left operand of the assignment expression `x = ...`.
        5. Check whether the left operand is a local variable. (It is `x`, a local variable.)
        6. Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)

Given the rule as written, this test case does not violate the rule because `x` is not being reassigned. It is being initialized for the first time. If the rule is intended to cover any null assignment outside of the declaration, then the test case does violate the rule.
['Get the right operand of the ternary expression.', 'Check whether the operand is a null literal.', 'If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is a local variable.', 'Check whether the local variable is already initialized.', 'Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.', 'Check whether the operand is a null literal. (It is the last operand, `null`.)', 'If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)', 'Get the left operand of the assignment expression `x = ...`.', 'Check whether the left operand is a local variable. (It is `x`, a local variable.)', 'Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)', 'Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.', 'Check whether the operand is a null literal. (It is the last operand, `null`.)', 'If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)', 'Get the left operand of the assignment expression `x = ...`.', 'Check whether the left operand is a local variable. (It is `x`, a local variable.)', 'Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)']
['JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'ASTInfixExpression', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'ASTConditionalExpression', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the right operand of the ternary expression.* 匹配到的元操作或API：
logic: Get the right operand of the ternary expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.89510178565979
*Check whether the operand is a null literal.* 匹配到的元操作或API：
query: Check whether the operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9180005788803101
*If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration.* 匹配到的元操作或API：
query: If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.842857837677002
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.8577459454536438
*Check whether the local variable is already initialized.* 匹配到的元操作或API：
logic: Check whether the local variable is already initialized.
most similar meta operation: Check whether the local variable is initialized
cosine Similarity: 0.9638577103614807
*Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.* 匹配到的元操作或API：
query: Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.
most similar API: unary operand: If the argument is a unary expression, returns its operand, otherwise returns null.
cosine Similarity: 0.8519991040229797
*Check whether the operand is a null literal. (It is the last operand, `null`.)* 匹配到的元操作或API：
query: Check whether the operand is a null literal. (It is the last operand, `null`.)
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8829559087753296
*If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)* 匹配到的元操作或API：
query: If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)
most similar API: Check whether is null check: Returns true if the expression is a null check on the given variable.
cosine Similarity: 0.8118429780006409
*Get the left operand of the assignment expression `x = ...`.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression `x = ...`.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9431074261665344
*Check whether the left operand is a local variable. (It is `x`, a local variable.)* 匹配到的元操作或API：
query: Check whether the left operand is a local variable. (It is `x`, a local variable.)
most similar API: Check whether the local variable has modifiers
cosine Similarity: 0.8052257895469666
*Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)* 匹配到的元操作或API：
logic: Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)
most similar meta operation: Check whether the local variable is initialized
cosine Similarity: 0.8967180252075195
*Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.* 匹配到的元操作或API：
query: Get the right operand of the ternary expression `a != null ? a : b != null ? b : c != null ? c : null`.
most similar API: unary operand: If the argument is a unary expression, returns its operand, otherwise returns null.
cosine Similarity: 0.8519991040229797
*Check whether the operand is a null literal. (It is the last operand, `null`.)* 匹配到的元操作或API：
query: Check whether the operand is a null literal. (It is the last operand, `null`.)
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8829559087753296
*If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)* 匹配到的元操作或API：
query: If the right operand is a null literal, check whether it is part of a variable assignment outside of its declaration. (It is part of the assignment `x = ...`.)
most similar API: Check whether is null check: Returns true if the expression is a null check on the given variable.
cosine Similarity: 0.8118429780006409
*Get the left operand of the assignment expression `x = ...`.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression `x = ...`.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9431074261665344
*Check whether the left operand is a local variable. (It is `x`, a local variable.)* 匹配到的元操作或API：
query: Check whether the left operand is a local variable. (It is `x`, a local variable.)
most similar API: Check whether the local variable has modifiers
cosine Similarity: 0.8052257895469666
*Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)* 匹配到的元操作或API：
logic: Check whether the local variable is already initialized. (It is not, as `x` is being initialized for the first time in this assignment.)
most similar meta operation: Check whether the local variable is initialized
cosine Similarity: 0.8967180252075195
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) rightOperand;
            if (condExpr.getThenBranch() instanceof ASTNullLiteral || condExpr.getElseBranch() instanceof ASTNullLiteral) {
                ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
                if (isVariableAccessLocalVariable(leftOperand)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
        return null;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}


This checker is failed(false negative) on this negative test case:
```
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentTernary')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 3)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'c')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'x')
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTConditionalExpression
              ——ASTInfixExpression
                ——ASTVariableAccess (referenced variable name = 'a')
                ——ASTNullLiteral
              ——ASTVariableAccess (referenced variable name = 'a')
              ——ASTConditionalExpression
                ——ASTInfixExpression
                  ——ASTVariableAccess (referenced variable name = 'b')
                  ——ASTNullLiteral
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTConditionalExpression
                  ——ASTInfixExpression
                    ——ASTVariableAccess (referenced variable name = 'c')
                    ——ASTNullLiteral
                  ——ASTVariableAccess (referenced variable name = 'c')
                  ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
4. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public net.sourceforge.pmd.lang.java.ast.ASTExpression unaryOperand(net.sourceforge.pmd.lang.java.ast.ASTExpression), //If the argument is a unary expression, returns its operand, otherwise returns null.
5. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
6. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)

1.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```
2.  //Check whether the local variable is initialized
```java
import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitialized(ASTLocalVariableDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a local declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                return true;
            }
        }
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) rightOperand;
            if (containsNullLiteral(condExpr)) {
                ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
                if (isVariableAccessLocalVariable(leftOperand)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    private boolean containsNullLiteral(ASTConditionalExpression node) {
        if (node.getThenBranch() instanceof ASTNullLiteral || node.getElseBranch() instanceof ASTNullLiteral) {
            return true;
        }
        if (node.getElseBranch() instanceof ASTConditionalExpression) {
            return containsNullLiteral((ASTConditionalExpression) node.getElseBranch());
        }
        return false;
    }

    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
        return null;
    }
}
编译是否通过？
True
测试是否通过
True
[ERROR]   "ok 12" resulted in wrong number of failures, ==> expected: <0> but was: <1>不通过
84
69
100
82
=========================error_testcase_logics=========================
1. Get the variable declaration of the accessed variable.
        2. Check whether the variable is declared as final.
        3. Get the left operand of assignment expression.
        4. Check whether the left operand is a local variable.
        5. Check whether the left operand is the same as the final variable declared.
        6. Get the right operand of assignment expression.
        7. Check whether the right operand is a null literal.
        8. If the right operand is a null literal, proceed to check if this is the first assignment to the variable.
        If the right operand of the assignment expression is a null literal and the variable is final, then check whether this is the first assignment to the variable. If it's the first assignment, it's not a violation. Otherwise, it is a violation of the rule.

Given the test case:
1. The variable 'b' is declared as final.
2. The left operand of the assignment expressions is 'b', which is a local variable.
3. The right operand of the first assignment expression is 'a', which is not a null literal.
4. The right operand of the second assignment expression is 'null', which is a null literal.
5. This is the first and only assignment to 'b' in this context, so it is not a violation.

Therefore, the number of violations in this test case is indeed 0.
['Get the variable declaration of the accessed variable.', 'Check whether the variable is declared as final.', 'Get the left operand of assignment expression.', 'Check whether the left operand is a local variable.', 'Check whether the left operand is the same as the final variable declared.', 'Get the right operand of assignment expression.', 'Check whether the right operand is a null literal.', 'If the right operand is a null literal, proceed to check if this is the first assignment to the variable.', "The variable 'b' is declared as final.", "The left operand of the assignment expressions is 'b', which is a local variable.", "The right operand of the first assignment expression is 'a', which is not a null literal.", "The right operand of the second assignment expression is 'null', which is a null literal.", "This is the first and only assignment to 'b' in this context, so it is not a violation."]
['JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'ASTNullLiteral', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'ASTIfStatement', 'TestFrameworksUtil', 'TypesFromAst', 'ASTLocalVariableDeclaration', 'SymbolicValueHelper', 'ASTInfixExpression', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the variable is declared as final.* 匹配到的元操作或API：
logic: Check whether the variable is declared as final.
most similar meta operation: Check whether the local variable is final
cosine Similarity: 0.9315361976623535
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is a local variable.* 匹配到的元操作或API：
logic: Check whether the left operand is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.8577459454536438
*Check whether the left operand is the same as the final variable declared.* 匹配到的元操作或API：
query: Check whether the left operand is the same as the final variable declared.
most similar API: Check whether the variable declarator equals
cosine Similarity: 0.8138364553451538
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is a null literal.* 匹配到的元操作或API：
query: Check whether the right operand is a null literal.
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.9019619822502136
*If the right operand is a null literal, proceed to check if this is the first assignment to the variable.* 匹配到的元操作或API：
query: If the right operand is a null literal, proceed to check if this is the first assignment to the variable.
most similar API: Check whether the null literal equals
cosine Similarity: 0.8298395872116089
*The variable 'b' is declared as final.* 匹配到的元操作或API：
未匹配成功元操作或API
*The left operand of the assignment expressions is 'b', which is a local variable.* 匹配到的元操作或API：
query: The left operand of the assignment expressions is 'b', which is a local variable.
most similar API: get left operand of assignment expression
cosine Similarity: 0.8157404661178589
*The right operand of the first assignment expression is 'a', which is not a null literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*The right operand of the second assignment expression is 'null', which is a null literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*This is the first and only assignment to 'b' in this context, so it is not a violation.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) rightOperand;
            if (containsNullLiteral(condExpr)) {
                ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
                if (isVariableAccessLocalVariable(leftOperand)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    private boolean containsNullLiteral(ASTConditionalExpression node) {
        if (node.getThenBranch() instanceof ASTNullLiteral || node.getElseBranch() instanceof ASTNullLiteral) {
            return true;
        }
        if (node.getElseBranch() instanceof ASTConditionalExpression) {
            return containsNullLiteral((ASTConditionalExpression) node.getElseBranch());
        }
        return false;
    }

    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
        return null;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
This checker has passed this negative testcase:
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
This checker has passed this negative testcase:
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}


This checker is failed(false positive) on this positive test case:
```
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'NullAssignmentFinal')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'a')
      ——ASTBlock
        ——ASTLocalVariableDeclaration
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclarator
            ——ASTVariableDeclaratorId (declared variable name = 'b')
        ——ASTIfStatement
          ——ASTInfixExpression
            ——ASTVariableAccess (referenced variable name = 'a')
            ——ASTNullLiteral
          ——ASTBlock
            ——ASTExpressionStatement
              ——ASTAssignmentExpression
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTVariableAccess (referenced variable name = 'a')
          ——ASTBlock
            ——ASTExpressionStatement
              ——ASTAssignmentExpression
                ——ASTVariableAccess (referenced variable name = 'b')
                ——ASTNullLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public boolean isFinal()
2. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
3. net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand(), //Returns the left-hand side, ie the expression being assigned to.

1.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
2.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTNullLiteral) {
            ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
            if (isVariableAccessLocalVariable(leftOperand) && !isFinalVariable(leftOperand)) {
                addViolation(data, node);
            }
        } else if (rightOperand instanceof ASTConditionalExpression) {
            ASTConditionalExpression condExpr = (ASTConditionalExpression) rightOperand;
            if (containsNullLiteral(condExpr)) {
                ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
                if (isVariableAccessLocalVariable(leftOperand) && !isFinalVariable(leftOperand)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JLocalVariableSymbol) {
            return true;
        }
        return false;
    }

    private boolean containsNullLiteral(ASTConditionalExpression node) {
        if (node.getThenBranch() instanceof ASTNullLiteral || node.getElseBranch() instanceof ASTNullLiteral) {
            return true;
        }
        if (node.getElseBranch() instanceof ASTConditionalExpression) {
            return containsNullLiteral((ASTConditionalExpression) node.getElseBranch());
        }
        return false;
    }

    private boolean isFinalVariable(ASTVariableAccess node) {
        ASTVariableDeclaratorId declaratorId = getVariableDeclaration(node);
        if (declaratorId != null) {
            ASTLocalVariableDeclaration localVariableDeclaration = declaratorId.getFirstParentOfType(ASTLocalVariableDeclaration.class);
            if (localVariableDeclaration != null && localVariableDeclaration.isFinal()) {
                return true;
            }
        }
        return false;
    }

    public String getLocalVariableName(ASTLocalVariableDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
        return null;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if(symbol != null){
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }
}
编译是否通过？
True
测试是否通过
True
测试用例全部通过
最终通过 19 个测试用例
正例 14 个
反例 5 个
输入token：36073
输出token：17843
结束

规则执行完毕，时间总花销： 2271.1418039798737 秒
