开始

========================================== Rule ExcessivePublicCountRule ===========================================
一共 7 个测试用例
正例 4 个
反例 3 个
1252
960
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of class.
        2. Check whether the class is public.
        3. Get all fields declared in class.
        4. Check whether the field is public.
        5. Count the number of public fields.
        If the class is public and the number of public fields is greater than the default threshold of 2, then this test case violates the rule.
        
Let's perform the checks:

1. Get the name of class.
   - Class name is Foo.

2. Check whether the class is public.
   - The class is public.

3. Get all fields declared in class.
   - Fields are: foo, bif, baz, bof.

4. Check whether the field is public.
   - Field foo is public.
   - Field bif is public.
   - Field baz is public.
   - Field bof is public.

5. Count the number of public fields.
   - There are 4 public fields.

Since the number of public fields (4) is greater than the default threshold of 2, this test case violates the rule. The number of violations is 1, as the class itself is the node being reported.
['Get the name of class.', 'Check whether the class is public.', 'Get all fields declared in class.', 'Check whether the field is public.', 'Count the number of public fields.', 'Get the name of class.', 'Check whether the class is public.', 'Get all fields declared in class.', 'Check whether the field is public.', 'Count the number of public fields.']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Check whether the field is public.* 匹配到的元操作或API：
logic: Check whether the field is public.
most similar meta operation: Check whether the field is public
cosine Similarity: 0.9851202964782715
*Count the number of public fields.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Check whether the field is public.* 匹配到的元操作或API：
logic: Check whether the field is public.
most similar meta operation: Check whether the field is public
cosine Similarity: 0.9851202964782715
*Count the number of public fields.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;
The test case corresponding to the rule:
```
// Too many public fields
public class Foo {
    public int foo;
    public int bif;
    public int baz;
    public int bof;
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'foo')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'bif')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'baz')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'bof')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isPublic()



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isPublic()) {
            NodeStream<ASTFieldDeclaration> publicFields = node.getDeclarations(ASTFieldDeclaration.class).filter(ASTFieldDeclaration::isPublic);
            if (publicFields.count() > 2) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 1


======================接下来开始迭代=====================
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
144
127
92
78
96
79
111
94
77
63
=========================error_testcase_logics=========================
1. Check whether the class is public.
2. Get the number of public methods declared in class.
3. Get the number of public fields declared in class.
4. Calculate the sum of public methods and public fields.
5. Compare the sum with the threshold (2).

Based on these steps:
- Step 1 confirms that the class `Foo` is public.
- Step 2 counts the number of public methods in the class, which is 3 (`foo1`, `foo2`, `foo3`).
- Step 3 counts the number of public fields in the class, which is 0.
- Step 4 calculates the sum of public methods and fields, which is 3.
- Step 5 compares the sum (3) with the threshold (2). Since 3 is greater than 2, the class `Foo` violates the rule.

The number of classes violating the rule in this test case is: 1.
['Check whether the class is public.', 'Get the number of public methods declared in class.', 'Get the number of public fields declared in class.', 'Calculate the sum of public methods and public fields.', 'Compare the sum with the threshold (2).']
['JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'JavaSemanticErrors', 'ASTNumericLiteral', 'ASTModifierList', 'ASTReturnStatement', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get the number of public methods declared in class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the number of public fields declared in class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Calculate the sum of public methods and public fields.* 匹配到的元操作或API：
未匹配成功元操作或API
*Compare the sum with the threshold (2).* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isPublic()) {
            NodeStream<ASTFieldDeclaration> publicFields = node.getDeclarations(ASTFieldDeclaration.class).filter(ASTFieldDeclaration::isPublic);
            if (publicFields.count() > 2) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    public int foo;
    public int bif;
    public int baz;
    public int bof;
}


This checker is failed(false negative) on this negative test case:
```
// Some public methods
public class Foo {
    public int foo1() {return 1;}
    public int foo2() {return 1;}
    public int foo3() {return 1;}
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'foo1')
      ——ASTModifierList
      ——ASTPrimitiveType (method return type = 'int')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTReturnStatement
          ——ASTNumericLiteral
    ——ASTMethodDeclaration (method name = 'foo2')
      ——ASTModifierList
      ——ASTPrimitiveType (method return type = 'int')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTReturnStatement
          ——ASTNumericLiteral
    ——ASTMethodDeclaration (method name = 'foo3')
      ——ASTModifierList
      ——ASTPrimitiveType (method return type = 'int')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTReturnStatement
          ——ASTNumericLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isPublic()) {
            NodeStream<ASTFieldDeclaration> publicFields = node.getDeclarations(ASTFieldDeclaration.class).filter(ASTFieldDeclaration::isPublic);
            NodeStream<ASTMethodDeclaration> publicMethods = node.getDeclarations(ASTMethodDeclaration.class).filter(ASTMethodDeclaration::isPublic);
            int publicFieldCount = (int) publicFields.count();
            int publicMethodCount = (int) publicMethods.count();
            if (publicFieldCount + publicMethodCount > 2) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
编译是否通过？
True
测试是否通过
True
[ERROR]   "ok 2" resulted in wrong number of failures, ==> expected: <0> but was: <1>不通过
=========================error_testcase_logics=========================
1. Get the name of class.
        2. Check whether the class is public.
        3. Get all fields declared in class.
        4. Check whether the field is public.
        5. Count the number of public fields.
        6. Get all methods declared in class.
        7. Check whether the method is public.
        8. Count the number of public methods.
        9. Calculate the total number of public fields and methods.
        10. Check whether the total number is greater than 2.

In this test case:
1. The class name is Foo.
2. The class is public.
3. There are four fields declared in the class.
4. All fields are public.
5. The number of public fields is 4.
6. There are no methods declared in the class.
7. The number of public methods is 0.
8. The total number of public fields and methods is 4.
9. Since the total number is greater than 2, this test case violates the rule.

However, based on the provided test case information, it seems like the intention is to check if there are any public fields or methods that violate the rule. Since there are no public methods and the public fields are static final, the test case does not violate the rule under the assumption that static final fields are not counted towards the threshold.

To clarify:
- Static final fields are often considered constants and do not contribute to the complexity of the class in terms of testing efforts.
- The rule focuses on the number of public fields and methods that are not static final.

Let's recheck with the assumption that static final fields are not counted:
1. Get all fields declared in class.
2. Check whether the field is public.
3. Check whether the field is static final.
4. Count the number of public fields that are not static final.
5. Get all methods declared in class.
6. Check whether the method is public.
7. Count the number of public methods.
8. Calculate the total number of public fields (excluding static final) and methods.
9. Check whether the total number is greater than 2.

In this test case:
1. There are four fields declared in the class.
2. All fields are public.
3. All fields are static final.
4. The number of public fields that are not static final is 0.
5. There are no methods declared in the class.
6. The number of public methods is 0.
7. The total number of public fields (excluding static final) and methods is 0.
8. Since the total number is not greater than 2, this test case does not violate the rule.
['Get the name of class.', 'Check whether the class is public.', 'Get all fields declared in class.', 'Check whether the field is public.', 'Count the number of public fields.', 'Get all methods declared in class.', 'Check whether the method is public.', 'Count the number of public methods.', 'Calculate the total number of public fields and methods.', 'Check whether the total number is greater than 2.', 'The class name is Foo.', 'The class is public.', 'There are four fields declared in the class.', 'All fields are public.', 'The number of public fields is 4.', 'There are no methods declared in the class.', 'The number of public methods is 0.', 'The total number of public fields and methods is 4.', 'Since the total number is greater than 2, this test case violates the rule.', 'Get all fields declared in class.', 'Check whether the field is public.', 'Check whether the field is static final.', 'Count the number of public fields that are not static final.', 'Get all methods declared in class.', 'Check whether the method is public.', 'Count the number of public methods.', 'Calculate the total number of public fields (excluding static final) and methods.', 'Check whether the total number is greater than 2.', 'There are four fields declared in the class.', 'All fields are public.', 'All fields are static final.', 'The number of public fields that are not static final is 0.', 'There are no methods declared in the class.', 'The number of public methods is 0.', 'The total number of public fields (excluding static final) and methods is 0.', 'Since the total number is not greater than 2, this test case does not violate the rule.']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Check whether the field is public.* 匹配到的元操作或API：
logic: Check whether the field is public.
most similar meta operation: Check whether the field is public
cosine Similarity: 0.9851202964782715
*Count the number of public fields.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8142814636230469
*Check whether the method is public.* 匹配到的元操作或API：
logic: Check whether the method is public.
most similar meta operation: Check whether the method is public
cosine Similarity: 0.982057511806488
*Count the number of public methods.* 匹配到的元操作或API：
未匹配成功元操作或API
*Calculate the total number of public fields and methods.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the total number is greater than 2.* 匹配到的元操作或API：
未匹配成功元操作或API
*The class name is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The class is public.* 匹配到的元操作或API：
未匹配成功元操作或API
*There are four fields declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*All fields are public.* 匹配到的元操作或API：
未匹配成功元操作或API
*The number of public fields is 4.* 匹配到的元操作或API：
未匹配成功元操作或API
*There are no methods declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*The number of public methods is 0.* 匹配到的元操作或API：
未匹配成功元操作或API
*The total number of public fields and methods is 4.* 匹配到的元操作或API：
未匹配成功元操作或API
*Since the total number is greater than 2, this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Check whether the field is public.* 匹配到的元操作或API：
logic: Check whether the field is public.
most similar meta operation: Check whether the field is public
cosine Similarity: 0.9851202964782715
*Check whether the field is static final.* 匹配到的元操作或API：
logic: Check whether the field is static final.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9080736637115479
*Count the number of public fields that are not static final.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8142814636230469
*Check whether the method is public.* 匹配到的元操作或API：
logic: Check whether the method is public.
most similar meta operation: Check whether the method is public
cosine Similarity: 0.982057511806488
*Count the number of public methods.* 匹配到的元操作或API：
未匹配成功元操作或API
*Calculate the total number of public fields (excluding static final) and methods.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the total number is greater than 2.* 匹配到的元操作或API：
未匹配成功元操作或API
*There are four fields declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*All fields are public.* 匹配到的元操作或API：
未匹配成功元操作或API
*All fields are static final.* 匹配到的元操作或API：
未匹配成功元操作或API
*The number of public fields that are not static final is 0.* 匹配到的元操作或API：
未匹配成功元操作或API
*There are no methods declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*The number of public methods is 0.* 匹配到的元操作或API：
未匹配成功元操作或API
*The total number of public fields (excluding static final) and methods is 0.* 匹配到的元操作或API：
未匹配成功元操作或API
*Since the total number is not greater than 2, this test case does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isPublic()) {
            NodeStream<ASTFieldDeclaration> publicFields = node.getDeclarations(ASTFieldDeclaration.class).filter(ASTFieldDeclaration::isPublic);
            NodeStream<ASTMethodDeclaration> publicMethods = node.getDeclarations(ASTMethodDeclaration.class).filter(ASTMethodDeclaration::isPublic);
            int publicFieldCount = (int) publicFields.count();
            int publicMethodCount = (int) publicMethods.count();
            if (publicFieldCount + publicMethodCount > 2) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    public int foo;
    public int bif;
    public int baz;
    public int bof;
}
This checker has passed this negative testcase:
public class Foo {
    public int foo1() {return 1;}
    public int foo2() {return 1;}
    public int foo3() {return 1;}
}


This checker is failed(false positive) on this positive test case:
```
// Static final
public class Foo {
    public static final int foo;
    public static final int foo1;
    public static final int foo2;
    public static final int foo3;
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'foo')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'foo1')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'foo2')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'foo3')


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isPublic()) {
            NodeStream<ASTFieldDeclaration> publicFields = node.getDeclarations(ASTFieldDeclaration.class)
                .filter(ASTFieldDeclaration::isPublic)
                .filter(field -> !field.isStatic());
            NodeStream<ASTMethodDeclaration> publicMethods = node.getDeclarations(ASTMethodDeclaration.class).filter(ASTMethodDeclaration::isPublic);
            int publicFieldCount = (int) publicFields.count();
            int publicMethodCount = (int) publicMethods.count();
            if (publicFieldCount + publicMethodCount > 2) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
编译是否通过？
True
测试是否通过
True
测试用例全部通过
最终通过 7 个测试用例
正例 4 个
反例 3 个
输入token：387766
输出token：233216
结束

规则执行完毕，时间总花销： 1046.4486820697784 秒
