开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
1951
1549
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Check whether the class is public.
3. Get all fields declared in the class.
4. Check whether the field is static.
5. Check whether the field is final.
6. Get the name of the constructor.
7. Get the signature of the constructor.
8. Get all statements in the constructor.
9. Check whether the statement is an assignment expression.
10. Get the left-hand side operand of the assignment expression.
11. Check whether the left-hand side operand is an accessed field.
12. Check whether the accessed field is static.
13. Check whether the accessed field is final.

If the left-hand side operand of the assignment expression is an accessed static field and the accessed field is not final, then this test case violates the rule.

1. Get the name of the class. // Foo
2. Check whether the class is public. // True
3. Get all fields declared in the class. // x
4. Check whether the field is static. // True
5. Check whether the field is final. // False
6. Get the name of the constructor. // Foo
7. Get the signature of the constructor. // Foo(int y)
8. Get all statements in the constructor. // x = y;
9. Check whether the statement is an assignment expression. // True
10. Get the left-hand side operand of the assignment expression. // x
11. Check whether the left-hand side operand is an accessed field. // True
12. Check whether the accessed field is static. // True
13. Check whether the accessed field is final. // False

This test case violates the rule as it assigns a value to a non-final static field in the constructor.
['Get the name of the class.', 'Check whether the class is public.', 'Get all fields declared in the class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the name of the constructor.', 'Get the signature of the constructor.', 'Get all statements in the constructor.', 'Check whether the statement is an assignment expression.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the name of the class. // Foo', 'Check whether the class is public. // True', 'Get all fields declared in the class. // x', 'Check whether the field is static. // True', 'Check whether the field is final. // False', 'Get the name of the constructor. // Foo', 'Get the signature of the constructor. // Foo(int y)', 'Get all statements in the constructor. // x = y;', 'Check whether the statement is an assignment expression. // True', 'Get the left-hand side operand of the assignment expression. // x', 'Check whether the left-hand side operand is an accessed field. // True', 'Check whether the accessed field is static. // True', 'Check whether the accessed field is final. // False']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all fields declared in the class.* 匹配到的元操作或API：
query: Get all fields declared in the class.
most similar API: get declared annotations of field
cosine Similarity: 0.8222572803497314
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732561707496643
*Get all statements in the constructor.* 匹配到的元操作或API：
query: Get all statements in the constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8072127103805542
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503116607666016
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Get the name of the class. // Foo* 匹配到的元操作或API：
logic: Get the name of the class. // Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9102749824523926
*Check whether the class is public. // True* 匹配到的元操作或API：
logic: Check whether the class is public. // True
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9579840302467346
*Get all fields declared in the class. // x* 匹配到的元操作或API：
query: Get all fields declared in the class. // x
most similar API: get declared annotations of field
cosine Similarity: 0.8084678053855896
*Check whether the field is static. // True* 匹配到的元操作或API：
logic: Check whether the field is static. // True
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9633008241653442
*Check whether the field is final. // False* 匹配到的元操作或API：
logic: Check whether the field is final. // False
most similar meta operation: Check whether the field is final
cosine Similarity: 0.960308849811554
*Get the name of the constructor. // Foo* 匹配到的元操作或API：
logic: Get the name of the constructor. // Foo
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9387962222099304
*Get the signature of the constructor. // Foo(int y)* 匹配到的元操作或API：
logic: Get the signature of the constructor. // Foo(int y)
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9027645587921143
*Get all statements in the constructor. // x = y;* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the statement is an assignment expression. // True* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression. // True
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9350488781929016
*Get the left-hand side operand of the assignment expression. // x* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression. // x
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9516146183013916
*Check whether the left-hand side operand is an accessed field. // True* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field. // True
most similar API: Check whether is this field access
cosine Similarity: 0.8473339676856995
*Check whether the accessed field is static. // True* 匹配到的元操作或API：
logic: Check whether the accessed field is static. // True
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9270051717758179
*Check whether the accessed field is final. // False* 匹配到的元操作或API：
logic: Check whether the accessed field is final. // False
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9206383228302002
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
7. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
10. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
11. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        Map<String, ASTFieldDeclaration> staticFields = new HashMap<>();
        for (ASTFieldDeclaration field : node.getChildren(ASTFieldDeclaration.class)) {
            if (field.isStatic() && !field.isFinal()) {
                ASTVariableDeclaratorId id = field.getFirstChildOfType(ASTVariableDeclaratorId.class);
                staticFields.put(id.getName(), field);
            }
        }
        return staticFields; // Corrected: return the map instead of assigning to data
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        Map<String, ASTFieldDeclaration> staticFields = (Map<String, ASTFieldDeclaration>) data;
        ASTPrimaryExpression leftOperand = node.getLeftOperand().getFirstChildOfType(ASTPrimaryExpression.class);
        if (leftOperand != null && leftOperand.getFirstChildOfType(ASTVariableAccess.class) != null) {
            ASTVariableAccess variableAccess = leftOperand.getFirstChildOfType(ASTVariableAccess.class);
            if (JavaAstUtils.isThisFieldAccess(variableAccess) && staticFields.containsKey(variableAccess.getName())) {
                addViolation(node);
            }
        }
        return data; // Return data as it is, no modification needed
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get the signature of the constructor.
4. Get all statements in the constructor body.
5. Identify all assignment expressions in the constructor body.
6. Get the left operand of the assignment expression.
7. Check whether the left operand is an accessed variable.
8. Check whether the accessed variable is static.
9. Check whether the accessed variable is final.
10. Get the variable declaration of the accessed variable.
11. Check whether the variable declaration is a field.
12. Check whether the constructor is reassigning a value to a non-final static field.

If the left operand of an assignment expression in the constructor body is an accessed static field and that field is not final, then this test case violates the rule. In your example, the constructor `Foo(int y)` is reassigning a value to the static field `x`, which is not final, hence it violates the rule.
['Get the name of the class.', 'Get the name of the constructor.', 'Get the signature of the constructor.', 'Get all statements in the constructor body.', 'Identify all assignment expressions in the constructor body.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'Get the variable declaration of the accessed variable.', 'Check whether the variable declaration is a field.', 'Check whether the constructor is reassigning a value to a non-final static field.']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732561707496643
*Get all statements in the constructor body.* 匹配到的元操作或API：
query: Get all statements in the constructor body.
most similar API: get body of constructor
cosine Similarity: 0.8038371205329895
*Identify all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Identify all assignment expressions in the constructor body.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8193072080612183
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is an accessed variable.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed variable.
most similar meta operation: Check whether the accessed variable is double type
cosine Similarity: 0.8555494546890259
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the variable declaration is a field.* 匹配到的元操作或API：
logic: Check whether the variable declaration is a field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.9043765068054199
*Check whether the constructor is reassigning a value to a non-final static field.* 匹配到的元操作或API：
query: Check whether the constructor is reassigning a value to a non-final static field.
most similar API: Check whether the field is syntactically static
cosine Similarity: 0.8328059315681458
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isSyntacticallyStatic()

1.  //Check whether the accessed variable is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
    return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
2.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
3.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```
4.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
5.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 1


======================接下来开始迭代=====================
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
89
74
95
78
=========================error_testcase_logics=========================
1. Get the name of constructor.
2. Get the signature of constructor.
3. Get a formal parameter of constructor.
4. Get the number of formal parameters of constructor.
5. Get the body of constructor.
6. Check for assignment expression in the constructor body.
7. Get the left operand of assignment expression.
8. Get the variable declaration of the accessed variable.
9. Check whether the accessed variable is static.
10. Check whether the accessed variable is final.
11. If the accessed variable is static and not final and is a field, then this test case violates the rule.

In this specific test case:
6. Check for assignment expression in the constructor body. (The assignment `this.x = y;` is found).
7. Get the left operand of assignment expression. (The left operand is `this.x`).
8. Get the variable declaration of the accessed variable. (The variable declaration is for the field `x`).
9. Check whether the accessed variable is static. (Field `x` is declared as static).
10. Check whether the accessed variable is final. (Field `x` is not declared as final).
11. Since the accessed variable is static and not final, this test case violates the rule.
['Get the name of constructor.', 'Get the signature of constructor.', 'Get a formal parameter of constructor.', 'Get the number of formal parameters of constructor.', 'Get the body of constructor.', 'Check for assignment expression in the constructor body.', 'Get the left operand of assignment expression.', 'Get the variable declaration of the accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'If the accessed variable is static and not final and is a field, then this test case violates the rule.', 'Check for assignment expression in the constructor body. (The assignment `this.x = y;` is found).', 'Get the left operand of assignment expression. (The left operand is `this.x`).', 'Get the variable declaration of the accessed variable. (The variable declaration is for the field `x`).', 'Check whether the accessed variable is static. (Field `x` is declared as static).', 'Check whether the accessed variable is final. (Field `x` is not declared as final).', 'Since the accessed variable is static and not final, this test case violates the rule.']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTThisExpression', 'ASTFieldAccess', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.98207688331604
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865633845329285
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Check for assignment expression in the constructor body.* 匹配到的元操作或API：
query: Check for assignment expression in the constructor body.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8903851509094238
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*If the accessed variable is static and not final and is a field, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check for assignment expression in the constructor body. (The assignment `this.x = y;` is found).* 匹配到的元操作或API：
query: Check for assignment expression in the constructor body. (The assignment `this.x = y;` is found).
most similar API: Check whether the assignment expression equals
cosine Similarity: 0.846356987953186
*Get the left operand of assignment expression. (The left operand is `this.x`).* 匹配到的元操作或API：
logic: Get the left operand of assignment expression. (The left operand is `this.x`).
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9352042078971863
*Get the variable declaration of the accessed variable. (The variable declaration is for the field `x`).* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable. (The variable declaration is for the field `x`).
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9276764392852783
*Check whether the accessed variable is static. (Field `x` is declared as static).* 匹配到的元操作或API：
logic: Check whether the accessed variable is static. (Field `x` is declared as static).
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9072157144546509
*Check whether the accessed variable is final. (Field `x` is not declared as final).* 匹配到的元操作或API：
logic: Check whether the accessed variable is final. (Field `x` is not declared as final).
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9163662195205688
*Since the accessed variable is static and not final, this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean equals(java.lang.Object)

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
3.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
4.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            ASTVariableAccess varAccess = fieldAccess.getLhs();
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the class that method located in.
        2. Get the name of class.
        3. Get all fields declared in class.
        4. Check whether the field is static.
        5. Check whether the field is final.
        6. Get all constructors declared in class.
        7. Get the body of constructor.
        8. Get all assignment expressions in the constructor body.
        9. Get the left operand of assignment expression.
        10. Check whether the left operand is an accessed variable.
        11. Get the variable declaration of the accessed variable.
        12. Check whether the variable declaration is a field.
        13. Check whether the field is static.
        14. Check whether the field is final.
        If the left operand of the assignment expression in the constructor body is an accessed field that is static and not final, then this test case violates the rule.

Given the test case:
1. Get the class that method located in. -> Foo
2. Get the name of class. -> Foo
3. Get all fields declared in class. -> x
4. Check whether the field is static. -> true (for field x)
5. Check whether the field is final. -> false (for field x)
6. Get all constructors declared in class. -> Foo(int y)
7. Get the body of constructor. -> this.x = y;
8. Get all assignment expressions in the constructor body. -> this.x = y;
9. Get the left operand of assignment expression. -> this.x
10. Check whether the left operand is an accessed variable. -> true (this.x)
11. Get the variable declaration of the accessed variable. -> x (field)
12. Check whether the variable declaration is a field. -> true (for field x)
13. Check whether the field is static. -> true (for field x)
14. Check whether the field is final. -> false (for field x)

The assignment to the non-final static field `x` in the constructor `Foo(int y)` is unsafe, thus violating the rule.
['Get the class that method located in.', 'Get the name of class.', 'Get all fields declared in class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all constructors declared in class.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed variable.', 'Get the variable declaration of the accessed variable.', 'Check whether the variable declaration is a field.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the class that method located in. -> Foo', 'Get the name of class. -> Foo', 'Get all fields declared in class. -> x', 'Check whether the field is static. -> true (for field x)', 'Check whether the field is final. -> false (for field x)', 'Get all constructors declared in class. -> Foo(int y)', 'Get the body of constructor. -> this.x = y;', 'Get all assignment expressions in the constructor body. -> this.x = y;', 'Get the left operand of assignment expression. -> this.x', 'Check whether the left operand is an accessed variable. -> true (this.x)', 'Get the variable declaration of the accessed variable. -> x (field)', 'Check whether the variable declaration is a field. -> true (for field x)', 'Check whether the field is static. -> true (for field x)', 'Check whether the field is final. -> false (for field x)']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTThisExpression', 'ASTFieldAccess', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the class that method located in.* 匹配到的元操作或API：
logic: Get the class that method located in.
most similar meta operation: Get the class that method located in
cosine Similarity: 0.9805244207382202
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368493318557739
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is an accessed variable.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed variable.
most similar meta operation: Check whether the accessed variable is double type
cosine Similarity: 0.8555494546890259
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the variable declaration is a field.* 匹配到的元操作或API：
logic: Check whether the variable declaration is a field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.9043765068054199
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get the class that method located in. -> Foo* 匹配到的元操作或API：
logic: Get the class that method located in. -> Foo
most similar meta operation: Get the class that method located in
cosine Similarity: 0.9408421516418457
*Get the name of class. -> Foo* 匹配到的元操作或API：
logic: Get the name of class. -> Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9176737070083618
*Get all fields declared in class. -> x* 匹配到的元操作或API：
query: Get all fields declared in class. -> x
most similar API: get declarations of class or interface
cosine Similarity: 0.8096171021461487
*Check whether the field is static. -> true (for field x)* 匹配到的元操作或API：
logic: Check whether the field is static. -> true (for field x)
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9328004717826843
*Check whether the field is final. -> false (for field x)* 匹配到的元操作或API：
logic: Check whether the field is final. -> false (for field x)
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9395678043365479
*Get all constructors declared in class. -> Foo(int y)* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of constructor. -> this.x = y;* 匹配到的元操作或API：
query: Get the body of constructor. -> this.x = y;
most similar API: get body of constructor
cosine Similarity: 0.8926905393600464
*Get all assignment expressions in the constructor body. -> this.x = y;* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the left operand of assignment expression. -> this.x* 匹配到的元操作或API：
logic: Get the left operand of assignment expression. -> this.x
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9447339177131653
*Check whether the left operand is an accessed variable. -> true (this.x)* 匹配到的元操作或API：
query: Check whether the left operand is an accessed variable. -> true (this.x)
most similar API: Check whether the variable access is expression
cosine Similarity: 0.8194769024848938
*Get the variable declaration of the accessed variable. -> x (field)* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable. -> x (field)
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9041831493377686
*Check whether the variable declaration is a field. -> true (for field x)* 匹配到的元操作或API：
logic: Check whether the variable declaration is a field. -> true (for field x)
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8660159707069397
*Check whether the field is static. -> true (for field x)* 匹配到的元操作或API：
logic: Check whether the field is static. -> true (for field x)
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9328004717826843
*Check whether the field is final. -> false (for field x)* 匹配到的元操作或API：
logic: Check whether the field is final. -> false (for field x)
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9395678043365479
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
3. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
7. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
10. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the accessed variable is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
    return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
2.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
3.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            ASTVariableAccess varAccess = fieldAccess.getLhs();
            if (varAccess.getName().equals(fieldAccess.getName()) && isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, fieldAccess);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of class.
        2. Get the constructor declaration from the class.
        3. Get the body of the constructor.
        4. Get all assignment expressions in the constructor body.
        5. Get the left operand of each assignment expression.
        6. Check whether the left operand is an accessed field.
        7. Check whether the accessed field is static.
        8. Check whether the accessed field is final.
        If the left operand of any assignment expression in the constructor body is a non-final static field, then the test case violates the rule.
        
Based on the provided test case:
1. Get the name of class. // Foo
2. Get the constructor declaration from the class. // Foo(int y)
3. Get the body of the constructor. // { this.x = y; }
4. Get all assignment expressions in the constructor body. // this.x = y
5. Get the left operand of each assignment expression. // this.x
6. Check whether the left operand is an accessed field. // Yes, x is a field
7. Check whether the accessed field is static. // Yes, x is static
8. Check whether the accessed field is final. // No, x is not final

Since the left operand of the assignment expression in the constructor body is a non-final static field, this test case violates the rule.
['Get the name of class.', 'Get the constructor declaration from the class.', 'Get the body of the constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of each assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the name of class. // Foo', 'Get the constructor declaration from the class. // Foo(int y)', 'Get the body of the constructor. // { this.x = y; }', 'Get all assignment expressions in the constructor body. // this.x = y', 'Get the left operand of each assignment expression. // this.x', 'Check whether the left operand is an accessed field. // Yes, x is a field', 'Check whether the accessed field is static. // Yes, x is static', 'Check whether the accessed field is final. // No, x is not final']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTThisExpression', 'ASTFieldAccess', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the constructor declaration from the class.* 匹配到的元操作或API：
logic: Get the constructor declaration from the class.
most similar meta operation: Get a declared annotation of constructor
cosine Similarity: 0.8633525967597961
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654065370559692
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left operand of each assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of each assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.975545346736908
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Get the name of class. // Foo* 匹配到的元操作或API：
logic: Get the name of class. // Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9075836539268494
*Get the constructor declaration from the class. // Foo(int y)* 匹配到的元操作或API：
query: Get the constructor declaration from the class. // Foo(int y)
most similar API: get symbol of constructor
cosine Similarity: 0.8041620850563049
*Get the body of the constructor. // { this.x = y; }* 匹配到的元操作或API：
query: Get the body of the constructor. // { this.x = y; }
most similar API: get body of constructor
cosine Similarity: 0.9051604866981506
*Get all assignment expressions in the constructor body. // this.x = y* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body. // this.x = y
most similar API: get parent of assignment expression
cosine Similarity: 0.8082001805305481
*Get the left operand of each assignment expression. // this.x* 匹配到的元操作或API：
logic: Get the left operand of each assignment expression. // this.x
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9433108568191528
*Check whether the left operand is an accessed field. // Yes, x is a field* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field. // Yes, x is a field
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8529585003852844
*Check whether the accessed field is static. // Yes, x is static* 匹配到的元操作或API：
logic: Check whether the accessed field is static. // Yes, x is static
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9076834321022034
*Check whether the accessed field is final. // No, x is not final* 匹配到的元操作或API：
logic: Check whether the accessed field is final. // No, x is not final
most similar meta operation: Check whether the field is final
cosine Similarity: 0.910292387008667
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.symbols.JExecutableSymbol getSymbol()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public N getParent()

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            ASTVariableAccess varAccess = fieldAccess.getLhs();
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym != null && sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null && symbol.isFinal()) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of constructor.
        2. Get all formal parameters of constructor.
        3. Get the method body of constructor.
        4. Find all assignment expressions in the method body.
        5. Get the left operand of each assignment expression.
        6. Check whether the left operand is an accessed field.
        7. Check whether the accessed field is static.
        8. Check whether the accessed field is final.
        9. If the left operand is an accessed static field and it is not final, then this test case violates the rule.

Based on the provided test case:
1. Get the name of constructor. // Name is Foo
2. Get all formal parameters of constructor. // Formal parameter y
3. Get the method body of constructor. // Method body contains this.x = y;
4. Find all assignment expressions in the method body. // Found this.x = y;
5. Get the left operand of each assignment expression. // Left operand is this.x
6. Check whether the left operand is an accessed field. // Yes, this.x is an accessed field
7. Check whether the accessed field is static. // Yes, x is a static field
8. Check whether the accessed field is final. // No, x is not a final field
9. If the left operand is an accessed static field and it is not final, then this test case violates the rule. // This test case violates the rule

Therefore, the number of rule violations in this test case is 1.
['Get the name of constructor.', 'Get all formal parameters of constructor.', 'Get the method body of constructor.', 'Find all assignment expressions in the method body.', 'Get the left operand of each assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'If the left operand is an accessed static field and it is not final, then this test case violates the rule.', 'Get the name of constructor. // Name is Foo', 'Get all formal parameters of constructor. // Formal parameter y', 'Get the method body of constructor. // Method body contains this.x = y;', 'Find all assignment expressions in the method body. // Found this.x = y;', 'Get the left operand of each assignment expression. // Left operand is this.x', 'Check whether the left operand is an accessed field. // Yes, this.x is an accessed field', 'Check whether the accessed field is static. // Yes, x is a static field', 'Check whether the accessed field is final. // No, x is not a final field', 'If the left operand is an accessed static field and it is not final, then this test case violates the rule. // This test case violates the rule']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTThisExpression', 'ASTFieldAccess', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get all formal parameters of constructor.* 匹配到的元操作或API：
logic: Get all formal parameters of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9030400514602661
*Get the method body of constructor.* 匹配到的元操作或API：
query: Get the method body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9142557382583618
*Find all assignment expressions in the method body.* 匹配到的元操作或API：
query: Find all assignment expressions in the method body.
most similar API: get text of assignment expression
cosine Similarity: 0.8251969218254089
*Get the left operand of each assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of each assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.975545346736908
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*If the left operand is an accessed static field and it is not final, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of constructor. // Name is Foo* 匹配到的元操作或API：
logic: Get the name of constructor. // Name is Foo
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9422220587730408
*Get all formal parameters of constructor. // Formal parameter y* 匹配到的元操作或API：
logic: Get all formal parameters of constructor. // Formal parameter y
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.8655591607093811
*Get the method body of constructor. // Method body contains this.x = y;* 匹配到的元操作或API：
query: Get the method body of constructor. // Method body contains this.x = y;
most similar API: get body of constructor
cosine Similarity: 0.8693985342979431
*Find all assignment expressions in the method body. // Found this.x = y;* 匹配到的元操作或API：
query: Find all assignment expressions in the method body. // Found this.x = y;
most similar API: compare location of assignment expression
cosine Similarity: 0.8143187761306763
*Get the left operand of each assignment expression. // Left operand is this.x* 匹配到的元操作或API：
logic: Get the left operand of each assignment expression. // Left operand is this.x
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9468911290168762
*Check whether the left operand is an accessed field. // Yes, this.x is an accessed field* 匹配到的元操作或API：
query: Check whether the left operand is an accessed field. // Yes, this.x is an accessed field
most similar API: Check whether is this field access
cosine Similarity: 0.8326898813247681
*Check whether the accessed field is static. // Yes, x is a static field* 匹配到的元操作或API：
logic: Check whether the accessed field is static. // Yes, x is a static field
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9064737558364868
*Check whether the accessed field is final. // No, x is not a final field* 匹配到的元操作或API：
logic: Check whether the accessed field is final. // No, x is not a final field
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9161757230758667
*If the left operand is an accessed static field and it is not final, then this test case violates the rule. // This test case violates the rule* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
9. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            if (fieldAccess.getLhs() instanceof ASTThisExpression) {
                ASTVariableDeclaratorId varDeclId = getVariableDeclaration(fieldAccess);
                if (varDeclId != null && varDeclId.getDeclarator().isStatic() && !varDeclId.getDeclarator().isFinal()) {
                    addViolation(data, fieldAccess);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }

    private ASTVariableDeclaratorId getVariableDeclaration(ASTFieldAccess fieldAccess) {
        JVariableSymbol symbol = fieldAccess.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get all statements in the constructor.
4. For each statement, check whether it is an assignment expression.
5. If it is an assignment expression, get the left-hand side operand of the assignment expression.
6. Check whether the left-hand side operand is an accessed field.
7. If it is an accessed field, check whether the field is static.
8. If it is a static field, check whether the field is final.
9. If the static field is not final, then this assignment is unsafe and violates the rule.

In this test case:
- The constructor name is `Foo`.
- The constructor has an assignment expression `this.x = y`.
- The left-hand side operand of the assignment is `x`, which is an accessed field.
- The field `x` is static.
- The field `x` is not final.

Therefore, this test case violates the rule.
['Get the name of the class.', 'Get the name of the constructor.', 'Get all statements in the constructor.', 'For each statement, check whether it is an assignment expression.', 'If it is an assignment expression, get the left-hand side operand of the assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'If it is an accessed field, check whether the field is static.', 'If it is a static field, check whether the field is final.', 'If the static field is not final, then this assignment is unsafe and violates the rule.']
['ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTFormalParameter', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTThisExpression', 'ASTFieldAccess', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Get all statements in the constructor.* 匹配到的元操作或API：
query: Get all statements in the constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8072127103805542
*For each statement, check whether it is an assignment expression.* 匹配到的元操作或API：
query: For each statement, check whether it is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9233803749084473
*If it is an assignment expression, get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: If it is an assignment expression, get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9581023454666138
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*If it is an accessed field, check whether the field is static.* 匹配到的元操作或API：
logic: If it is an accessed field, check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9218292236328125
*If it is a static field, check whether the field is final.* 匹配到的元操作或API：
logic: If it is a static field, check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9418947696685791
*If the static field is not final, then this assignment is unsafe and violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        } else if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            if (JavaAstUtils.isThisFieldAccess(fieldAccess) && fieldAccess.getLhs() instanceof ASTThisExpression) {
                JVariableSymbol sym = fieldAccess.getReferencedSym();
                if (sym instanceof JFieldSymbol) {
                    JFieldSymbol fieldSym = (JFieldSymbol) sym;
                    if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                        addViolation(data, fieldAccess);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
==========5轮都没修复成功一个后面新加的一个测试用例，换一个测试用例进行修复
这个测试用例 5 round 没有修复成功：
bad 2
[ERROR]   "ok 2" resulted in wrong number of failures, ==> expected: <0> but was: <1>不通过
97
81
94
79
144
127
111
94
=========================error_testcase_logics=========================
To ensure the test case adheres to the given rule, we need to check for any assignments to non-final static fields within constructors. Since the provided test case does not contain a constructor and all assignments to the non-final static field are within regular methods, let's perform the necessary checks to confirm this.

1. Get the name of class.
2. Check whether class has constructors.
3. Get the number of constructors in class.
4. Get a constructor of class.
5. Get the signature of constructor.
6. Get the body of constructor.
7. Get all assignment expressions in the constructor body.
8. For each assignment expression, get the left-hand side operand.
9. Check whether the left-hand side operand is an accessed field.
10. Check whether the accessed field is static.
11. Check whether the accessed field is final.
12. Repeat steps 7-11 for all constructors in the class.

Since the test case provided does not have any constructors, steps 2 to 12 will not find any assignments in constructors, thus confirming that the test case does not violate the rule.

To further ensure there are no violations, let's check the methods as well:

13. Get all methods declared in class.
14. For each method, get the method body.
15. Get all assignment expressions in the method body.
16. For each assignment expression, get the left-hand side operand.
17. Check whether the left-hand side operand is an accessed field.
18. Check whether the accessed field is static.
19. Check whether the accessed field is final.
20. Repeat steps 15-19 for all methods in the class.

This will confirm that the assignments to the static field `counter` are within regular methods and not constructors, adhering to the rule.
['Get the name of class.', 'Check whether class has constructors.', 'Get the number of constructors in class.', 'Get a constructor of class.', 'Get the signature of constructor.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'For each assignment expression, get the left-hand side operand.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Repeat steps 7-11 for all constructors in the class.', 'Get all methods declared in class.', 'For each method, get the method body.', 'Get all assignment expressions in the method body.', 'For each assignment expression, get the left-hand side operand.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Repeat steps 15-19 for all methods in the class.']
['ASTFieldDeclaration', 'JavaAstUtils', 'ASTVoidType', 'ASTUnaryExpression', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTNumericLiteral', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether class has constructors.* 匹配到的元操作或API：
query: Check whether class has constructors.
most similar API: Check whether is declared in class
cosine Similarity: 0.8153082132339478
*Get the number of constructors in class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get a constructor of class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of class or interface
cosine Similarity: 0.8428586721420288
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*For each assignment expression, get the left-hand side operand.* 匹配到的元操作或API：
logic: For each assignment expression, get the left-hand side operand.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9440481662750244
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Repeat steps 7-11 for all constructors in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declared annotations of method
cosine Similarity: 0.8366352915763855
*For each method, get the method body.* 匹配到的元操作或API：
query: For each method, get the method body.
most similar API: get body of method
cosine Similarity: 0.9106581211090088
*Get all assignment expressions in the method body.* 匹配到的元操作或API：
query: Get all assignment expressions in the method body.
most similar API: get text of assignment expression
cosine Similarity: 0.846210241317749
*For each assignment expression, get the left-hand side operand.* 匹配到的元操作或API：
logic: For each assignment expression, get the left-hand side operand.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9440481662750244
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Repeat steps 15-19 for all methods in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false positive) on this positive test case:
```
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'increment')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTUnaryExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'clear')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
            ——ASTNumericLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.types.TypeTestUtil: static public boolean isDeclaredInClass(java.lang.Class, net.sourceforge.pmd.lang.java.types.JMethodSig), //Returns true if the signature is that of a method declared in the given class. @param klass Class @param sig   Method signature to test @throws NullPointerException If any argument is null
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody(), //Returns the body of this type declaration.
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
10. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                ASTMethodDeclaration methodDecl = node.getFirstParentOfType(ASTMethodDeclaration.class);
                if (methodDecl != null && methodDecl.getName().equals("<init>")) {
                    addViolation(data, varAccess);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 1" resulted in wrong number of failures, ==> expected: <1> but was: <0>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 1" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
=========================error_testcase_logics=========================
1. Get the name of the class.
2. Get all fields declared in the class.
3. Check whether the field is static.
4. Check whether the field is final.
5. Get all constructors declared in the class.
6. Get the body of each constructor.
7. Check whether there is an assignment expression in the constructor body.
8. Get the left operand of the assignment expression.
9. Check whether the left operand is an accessed field.
10. Check whether the accessed field is static.
11. Check whether the accessed field is final.

In this test case:
- The class name is Foo.
- The class has a static field named counter, which is not final.
- The class has two constructors (default constructor generated by the compiler).
- The constructor body does not contain any assignment expressions.
- The methods increment and clear contain assignment expressions, but they are not constructors.

Since there are no assignment expressions to static fields in the constructor, the number of violations of the rule in this test case is: 0.
['Get the name of the class.', 'Get all fields declared in the class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all constructors declared in the class.', 'Get the body of each constructor.', 'Check whether there is an assignment expression in the constructor body.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['ASTFieldDeclaration', 'JavaAstUtils', 'ASTVoidType', 'ASTUnaryExpression', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTNumericLiteral', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get all fields declared in the class.* 匹配到的元操作或API：
query: Get all fields declared in the class.
most similar API: get declared annotations of field
cosine Similarity: 0.8222572803497314
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get all constructors declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of each constructor.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether there is an assignment expression in the constructor body.* 匹配到的元操作或API：
query: Check whether there is an assignment expression in the constructor body.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9031459093093872
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false positive) on this positive test case:
```
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'increment')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTUnaryExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'clear')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
            ——ASTNumericLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "ok 2" resulted in wrong number of failures, ==> expected: <0> but was: <1>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "ok 2" resulted in wrong number of failures, ==> expected: <0> but was: <1>不通过
=========================error_testcase_logics=========================
To ensure the test case adheres to the rule, we need to perform the following granular checks:

1. Get the name of class.
2. Get a constructor declared in class.
3. Get the body of constructor.
4. Check whether there are any assignment expressions in the constructor body.
5. If there are assignment expressions, get the left-hand side operand of each assignment expression.
6. Check whether the left-hand side operand is an accessed field.
7. Check whether the accessed field is static.
8. Check whether the accessed field is final.

Let's go through these checks for the provided test case:

1. Get the name of class.
   - The class name is `Foo`.

2. Get a constructor declared in class.
   - There is no explicitly declared constructor in the class `Foo`. Java provides a default constructor in this case.

3. Get the body of constructor.
   - Since there is no explicitly declared constructor, there is no body to check.

4. Check whether there are any assignment expressions in the constructor body.
   - As there is no explicitly declared constructor, there are no assignment expressions to check.

5. If there are assignment expressions, get the left-hand side operand of each assignment expression.
   - Not applicable as there are no assignment expressions in the constructor body.

6. Check whether the left-hand side operand is an accessed field.
   - Not applicable as there are no assignment expressions in the constructor body.

7. Check whether the accessed field is static.
   - Not applicable as there are no assignment expressions in the constructor body.

8. Check whether the accessed field is final.
   - Not applicable as there are no assignment expressions in the constructor body.

Based on these checks, the test case does not violate the rule because there are no assignment expressions involving static fields in any constructor. The assignments to the `counter` field occur in regular methods (`increment` and `clear`), which is compliant with the rule. Therefore, the number of violations in this test case is indeed 0.
['Get the name of class.', 'Get a constructor declared in class.', 'Get the body of constructor.', 'Check whether there are any assignment expressions in the constructor body.', 'If there are assignment expressions, get the left-hand side operand of each assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the name of class.', 'Get a constructor declared in class.', 'Get the body of constructor.', 'Check whether there are any assignment expressions in the constructor body.', 'If there are assignment expressions, get the left-hand side operand of each assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['ASTFieldDeclaration', 'JavaAstUtils', 'ASTVoidType', 'ASTUnaryExpression', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTNumericLiteral', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get a constructor declared in class.* 匹配到的元操作或API：
logic: Get a constructor declared in class.
most similar meta operation: Get a declared annotation of constructor
cosine Similarity: 0.8568406105041504
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of class or interface
cosine Similarity: 0.8428586721420288
*Check whether there are any assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Check whether there are any assignment expressions in the constructor body.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8835486173629761
*If there are assignment expressions, get the left-hand side operand of each assignment expression.* 匹配到的元操作或API：
logic: If there are assignment expressions, get the left-hand side operand of each assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9391851425170898
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get a constructor declared in class.* 匹配到的元操作或API：
logic: Get a constructor declared in class.
most similar meta operation: Get a declared annotation of constructor
cosine Similarity: 0.8568406105041504
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of class or interface
cosine Similarity: 0.8428586721420288
*Check whether there are any assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Check whether there are any assignment expressions in the constructor body.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8835486173629761
*If there are assignment expressions, get the left-hand side operand of each assignment expression.* 匹配到的元操作或API：
logic: If there are assignment expressions, get the left-hand side operand of each assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9391851425170898
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false positive) on this positive test case:
```
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'increment')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTUnaryExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'clear')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
            ——ASTNumericLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTTypeBody getBody(), //Returns the body of this type declaration.
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (node.getParent() instanceof ASTConstructorDeclaration && isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 1" resulted in wrong number of failures, ==> expected: <1> but was: <0>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 1" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
=========================error_testcase_logics=========================
To perform the granular checks for the provided test case, we need to focus on the constructor and any assignment to static fields within it. Given the test case provided does not contain a constructor, we will still proceed with the checks to ensure clarity.

1. Get the name of class.
2. Check whether the class has declared constructors.
3. For each constructor, get the signature of constructor.
4. For each constructor, get all assignment expressions.
5. For each assignment expression, get the left-hand side operand.
6. Check whether the operand is an accessed field.
7. Check whether the accessed field is static.
8. Check whether the accessed field is final.
9. If the left-hand side operand is a static field and it is not final, then the assignment is unsafe.
10. Count the number of violating assignments.

In this specific test case:
1. Get the name of class: Foo.
2. Check whether the class has declared constructors: No constructors declared.
3. Since there are no constructors, we skip the remaining steps related to constructors.
4. The number of violating the rule in this test case is: 0.

The test case adheres to the rule because there are no constructors and no assignments to non-final static fields.
['Get the name of class.', 'Check whether the class has declared constructors.', 'For each constructor, get the signature of constructor.', 'For each constructor, get all assignment expressions.', 'For each assignment expression, get the left-hand side operand.', 'Check whether the operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'If the left-hand side operand is a static field and it is not final, then the assignment is unsafe.', 'Count the number of violating assignments.', 'Get the name of class: Foo.', 'Check whether the class has declared constructors: No constructors declared.', 'Since there are no constructors, we skip the remaining steps related to constructors.', 'The number of violating the rule in this test case is: 0.']
['ASTFieldDeclaration', 'JavaAstUtils', 'ASTVoidType', 'ASTUnaryExpression', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTNumericLiteral', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class has declared constructors.* 匹配到的元操作或API：
logic: Check whether the class has declared constructors.
most similar meta operation: Check whether constructor has declared annotations
cosine Similarity: 0.8875755667686462
*For each constructor, get the signature of constructor.* 匹配到的元操作或API：
logic: For each constructor, get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9247148633003235
*For each constructor, get all assignment expressions.* 匹配到的元操作或API：
query: For each constructor, get all assignment expressions.
most similar API: get parents of type of assignment expression
cosine Similarity: 0.8260104060173035
*For each assignment expression, get the left-hand side operand.* 匹配到的元操作或API：
logic: For each assignment expression, get the left-hand side operand.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9440481662750244
*Check whether the operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8818295001983643
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*If the left-hand side operand is a static field and it is not final, then the assignment is unsafe.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of violating assignments.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class: Foo.* 匹配到的元操作或API：
logic: Get the name of class: Foo.
most similar meta operation: Get the name of class
cosine Similarity: 0.9150534272193909
*Check whether the class has declared constructors: No constructors declared.* 匹配到的元操作或API：
logic: Check whether the class has declared constructors: No constructors declared.
most similar meta operation: Check whether constructor has declared annotations
cosine Similarity: 0.8510550260543823
*Since there are no constructors, we skip the remaining steps related to constructors.* 匹配到的元操作或API：
未匹配成功元操作或API
*The number of violating the rule in this test case is: 0.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false positive) on this positive test case:
```
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'increment')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTUnaryExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'clear')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
            ——ASTNumericLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public java.util.List<List<T> getParentsOfType(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()

1.  //Check whether constructor has declared annotations
```java
import net.sourceforge.pmd.lang.ast.NodeStream;
import net.sourceforge.pmd.lang.java.ast.*;
public boolean hasAnnotation(ASTConstructorDeclaration node){
    NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
    return declaredAnnotations.nonEmpty();
}
```
2.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                if (node.getParentsOfType(ASTConstructorDeclaration.class).nonEmpty()) {
                    addViolation(data, varAccess);
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
1. Check whether the class has a constructor.
2. Get the name of constructor.
3. Check whether the constructor has a method body.
4. Get all assignments in the constructor body.
5. Check whether the left-hand side of each assignment is a static field.
6. Check whether the static field is final.
7. Check whether the class has a regular method.
8. Get the name of the regular method.
9. Check whether the regular method has a method body.
10. Get all assignments in the regular method body.
11. Check whether the left-hand side of each assignment is a static field.
12. Check whether the static field is final.

In this test case:
- There is no constructor with a method body that assigns to a static field.
- The regular methods `increment` and `clear` do assign to the non-final static field `counter`, but this is not a violation of the rule as the assignments are in regular methods, not constructors.
- Therefore, the number of violations of the rule in this test case is indeed 0.
['Check whether the class has a constructor.', 'Get the name of constructor.', 'Check whether the constructor has a method body.', 'Get all assignments in the constructor body.', 'Check whether the left-hand side of each assignment is a static field.', 'Check whether the static field is final.', 'Check whether the class has a regular method.', 'Get the name of the regular method.', 'Check whether the regular method has a method body.', 'Get all assignments in the regular method body.', 'Check whether the left-hand side of each assignment is a static field.', 'Check whether the static field is final.']
['ASTFieldDeclaration', 'JavaAstUtils', 'ASTVoidType', 'ASTUnaryExpression', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'ASTNumericLiteral', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Check whether the class has a constructor.* 匹配到的元操作或API：
query: Check whether the class has a constructor.
most similar API: Check whether is declared in class
cosine Similarity: 0.8132311105728149
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Check whether the constructor has a method body.* 匹配到的元操作或API：
query: Check whether the constructor has a method body.
most similar API: Check whether the method has modifiers
cosine Similarity: 0.8073186874389648
*Get all assignments in the constructor body.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the left-hand side of each assignment is a static field.* 匹配到的元操作或API：
query: Check whether the left-hand side of each assignment is a static field.
most similar API: Check whether the field is syntactically static
cosine Similarity: 0.8413537740707397
*Check whether the static field is final.* 匹配到的元操作或API：
logic: Check whether the static field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9335591197013855
*Check whether the class has a regular method.* 匹配到的元操作或API：
query: Check whether the class has a regular method.
most similar API: Check whether the method has modifiers
cosine Similarity: 0.8349159359931946
*Get the name of the regular method.* 匹配到的元操作或API：
logic: Get the name of the regular method.
most similar meta operation: Get the name of method
cosine Similarity: 0.8964887261390686
*Check whether the regular method has a method body.* 匹配到的元操作或API：
query: Check whether the regular method has a method body.
most similar API: get body of method
cosine Similarity: 0.8191958069801331
*Get all assignments in the regular method body.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the left-hand side of each assignment is a static field.* 匹配到的元操作或API：
query: Check whether the left-hand side of each assignment is a static field.
most similar API: Check whether the field is syntactically static
cosine Similarity: 0.8413537740707397
*Check whether the static field is final.* 匹配到的元操作或API：
logic: Check whether the static field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9335591197013855
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```
This checker has passed these test case:
This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false positive) on this positive test case:
```
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
The number of violating the rule in this test case is: 0

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'increment')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTUnaryExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
    ——ASTMethodDeclaration (method name = 'clear')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'counter')
            ——ASTNumericLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to correctly check this positive test case.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.types.TypeTestUtil: static public boolean isDeclaredInClass(java.lang.Class, net.sourceforge.pmd.lang.java.types.JMethodSig), //Returns true if the signature is that of a method declared in the given class. @param klass Class @param sig   Method signature to test @throws NullPointerException If any argument is null
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isSyntacticallyStatic()
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
7. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                ASTAssignmentExpression parent = node;
                while (parent.getParent() != null) {
                    if (parent.getParent() instanceof ASTConstructorDeclaration) {
                        addViolation(data, varAccess);
                        break;
                    }
                    parent = parent.getParent();
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
==========5轮都没修复成功一个后面新加的一个测试用例，换一个测试用例进行修复
这个测试用例 5 round 没有修复成功：
ok 2
[ERROR]   "bad 4" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
94
79
=========================error_testcase_logics=========================
1. Get the name of constructor.
2. Get the signature of constructor.
3. Get all statements in the constructor body.
4. Check whether the statement is an assignment expression.
5. Get the left operand of assignment expression.
6. Check whether the left operand is a field.
7. Check whether the field is static.
8. Check whether the field is final.
9. Get the right operand of assignment expression.
10. Check whether the right operand is an increment expression.

In this test case:
- The constructor name is Foo.
- The constructor signature is Foo().
- The statement in the constructor body is `id2 = counter++;`.
- This statement is an assignment expression.
- The left operand of the assignment expression is `id2`.
- The left operand is a field.
- The field `id2` is not static.
- The field `counter` is static.
- The field `counter` is not final.
- The right operand of the assignment expression is an increment expression (`counter++`).

Since the left operand (`id2`) is not the static field and the static field (`counter`) is not being reassigned directly to a value but rather incremented, the test case does not strictly violate the rule as described. However, if the rule is intended to catch any kind of assignment to static fields within constructors, then the increment operation can be considered an assignment to a static field.

Given that the rule specifically mentions "Assignment to non-final static fields in constructor is unsafe," and since `counter` is a static field, the increment operation `counter++` effectively reassigns the value of the static field `counter`. Therefore, this test case does violate the rule.

To clarify the violation:
- The static field `counter` is being incremented within the constructor, which is considered an assignment to a static field and thus violates the rule.
['Get the name of constructor.', 'Get the signature of constructor.', 'Get all statements in the constructor body.', 'Check whether the statement is an assignment expression.', 'Get the left operand of assignment expression.', 'Check whether the left operand is a field.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the right operand of assignment expression.', 'Check whether the right operand is an increment expression.']
['ASTFieldDeclaration', 'JavaAstUtils', 'ASTUnaryExpression', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTConstructorDeclaration', 'ASTVariableAccess', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTPrimitiveType', 'ClassNamesUtil', 'TokenUtils', 'ASTAssignmentExpression', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get all statements in the constructor body.* 匹配到的元操作或API：
query: Get all statements in the constructor body.
most similar API: get body of constructor
cosine Similarity: 0.8038371205329895
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503116607666016
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is a field.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Check whether the right operand is an increment expression.* 匹配到的元操作或API：
query: Check whether the right operand is an increment expression.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8158750534057617
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'id1')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'id2')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'id2')
            ——ASTUnaryExpression
              ——ASTVariableAccess (referenced variable name = 'counter')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                addViolation(data, varAccess);
            }
        }

        ASTExpression rightOperand = node.getRightOperand();
        if (rightOperand instanceof ASTUnaryExpression) {
            ASTExpression unaryOperand = ((ASTUnaryExpression) rightOperand).getOperand();
            if (unaryOperand instanceof ASTVariableAccess) {
                ASTVariableAccess varAccess = (ASTVariableAccess) unaryOperand;
                if (isVariableAccessStatic(varAccess) && isVariableAccessField(varAccess) && !isVariableAccessFinal(varAccess)) {
                    addViolation(data, varAccess);
                }
            }
        }

        return super.visit(node, data);
    }

    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym != null && sym.tryGetNode().isStatic()) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null && symbol.isFinal()) {
            return true;
        }
        return false;
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JFieldSymbol;
    }
}
编译是否通过？
True
测试是否通过
True
测试用例全部通过
最终通过 4 个测试用例
正例 1 个
反例 3 个
输入token：662736
输出token：437217
结束

规则执行完毕，时间总花销： 2174.835958957672 秒
