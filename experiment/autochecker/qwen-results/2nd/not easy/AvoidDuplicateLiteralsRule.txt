开始

========================================== Rule AvoidDuplicateLiteralsRule ===========================================
一共 11 个测试用例
正例 3 个
反例 8 个
1989
1586
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
        2. Get the methods declared in the class.
        3. Get the method named bar.
        4. Get the method calls inside the method bar.
        5. Filter the method calls to get only those where the method name is buz.
        6. For each call to buz, get the arguments.
        7. Filter the arguments to get only string literals.
        8. Check whether the string literal length is greater than or equal to 3.
        9. Count the occurrences of each string literal.
        10. Check whether the count of any string literal is greater than or equal to 4.
        If there is a string literal that is passed as an argument to a method call more than or equal to 4 times and its length is greater than or equal to 3, then this test case violates the rule.
        
Based on the provided test case:
1. Get the name of the class. // Foo
2. Get the methods declared in the class. // bar, buz
3. Get the method named bar. // bar()
4. Get the method calls inside the method bar. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")
5. Filter the method calls to get only those where the method name is buz. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")
6. For each call to buz, get the arguments. // "Howdy", "Howdy", "Howdy", "Howdy"
7. Filter the arguments to get only string literals. // "Howdy", "Howdy", "Howdy", "Howdy"
8. Check whether the string literal length is greater than or equal to 3. // true for all
9. Count the occurrences of each string literal. // "Howdy" appears 4 times
10. Check whether the count of any string literal is greater than or equal to 4. // true for "Howdy"

This test case violates the rule with the string literal "Howdy" being used 4 times in method calls.
['Get the name of the class.', 'Get the methods declared in the class.', 'Get the method named bar.', 'Get the method calls inside the method bar.', 'Filter the method calls to get only those where the method name is buz.', 'For each call to buz, get the arguments.', 'Filter the arguments to get only string literals.', 'Check whether the string literal length is greater than or equal to 3.', 'Count the occurrences of each string literal.', 'Check whether the count of any string literal is greater than or equal to 4.', 'Get the name of the class. // Foo', 'Get the methods declared in the class. // bar, buz', 'Get the method named bar. // bar()', 'Get the method calls inside the method bar. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")', 'Filter the method calls to get only those where the method name is buz. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")', 'For each call to buz, get the arguments. // "Howdy", "Howdy", "Howdy", "Howdy"', 'Filter the arguments to get only string literals. // "Howdy", "Howdy", "Howdy", "Howdy"', 'Check whether the string literal length is greater than or equal to 3. // true for all', 'Count the occurrences of each string literal. // "Howdy" appears 4 times', 'Check whether the count of any string literal is greater than or equal to 4. // true for "Howdy"']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTStringLiteral', 'ASTFormalParameter', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the methods declared in the class.* 匹配到的元操作或API：
query: Get the methods declared in the class.
most similar API: get declared annotations of method
cosine Similarity: 0.8623219728469849
*Get the method named bar.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method calls inside the method bar.* 匹配到的元操作或API：
query: Get the method calls inside the method bar.
most similar API: get method name of method call
cosine Similarity: 0.8310436606407166
*Filter the method calls to get only those where the method name is buz.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each call to buz, get the arguments.* 匹配到的元操作或API：
query: For each call to buz, get the arguments.
most similar API: get arguments of method call
cosine Similarity: 0.8072302937507629
*Filter the arguments to get only string literals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the string literal length is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the string literal length is greater than or equal to 3.
most similar API: Check whether the string literal is long literal
cosine Similarity: 0.8259307146072388
*Count the occurrences of each string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the count of any string literal is greater than or equal to 4.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the class. // Foo* 匹配到的元操作或API：
logic: Get the name of the class. // Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9102749824523926
*Get the methods declared in the class. // bar, buz* 匹配到的元操作或API：
query: Get the methods declared in the class. // bar, buz
most similar API: get declared annotations of method
cosine Similarity: 0.8114228844642639
*Get the method named bar. // bar()* 匹配到的元操作或API：
query: Get the method named bar. // bar()
most similar API: get name of method
cosine Similarity: 0.8048232793807983
*Get the method calls inside the method bar. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")* 匹配到的元操作或API：
query: Get the method calls inside the method bar. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")
most similar API: get method name of method call
cosine Similarity: 0.8031801581382751
*Filter the method calls to get only those where the method name is buz. // buz("Howdy"), buz("Howdy"), buz("Howdy"), buz("Howdy")* 匹配到的元操作或API：
未匹配成功元操作或API
*For each call to buz, get the arguments. // "Howdy", "Howdy", "Howdy", "Howdy"* 匹配到的元操作或API：
未匹配成功元操作或API
*Filter the arguments to get only string literals. // "Howdy", "Howdy", "Howdy", "Howdy"* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the string literal length is greater than or equal to 3. // true for all* 匹配到的元操作或API：
query: Check whether the string literal length is greater than or equal to 3. // true for all
most similar API: length of string literal
cosine Similarity: 0.8262572288513184
*Count the occurrences of each string literal. // "Howdy" appears 4 times* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the count of any string literal is greater than or equal to 4. // true for "Howdy"* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
The test case corresponding to the rule:
```
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
    ——ASTMethodDeclaration (method name = 'buz')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'x')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isLongLiteral(), //Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.
6. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName(), //Returns the simple name of the method.
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Map<String, Integer> literalCountMap = new HashMap<>();
        node.descendants(ASTStringLiteral.class).forEach(literal -> {
            if (literal.getImage().length() >= 3) { // Corrected to use literal.getImage().length()
                String value = literal.getImage();
                literalCountMap.put(value, literalCountMap.getOrDefault(value, 0) + 1);
            }
        });

        literalCountMap.forEach((value, count) -> {
            if (count >= 4) {
                node.descendants(ASTStringLiteral.class).filter(l -> value.equals(l.getImage())).forEach(l -> addViolation(data, l));
            }
        });

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
False
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get all method calls in the class.
2. Get the name of the called method.
3. Get the arguments of the called method.
4. Get the type of the argument.
5. Check whether the argument is a string literal.
6. Check whether the length of the string literal is 3 or more.
7. Count the occurrences of each string literal that meets the length condition.
8. Check whether any string literal occurs 4 or more times.

For the provided test case:
1. Get all method calls in the class Foo.
2. Get the name of the called method buz.
3. Get the arguments of the called method buz.
4. Get the type of the argument "Howdy".
5. Check whether the argument "Howdy" is a string literal (True).
6. Check whether the length of the string literal "Howdy" is 3 or more (True, length is 5).
7. Count the occurrences of the string literal "Howdy" (4 occurrences).
8. Check whether any string literal occurs 4 or more times (True, "Howdy" occurs 4 times).

The test case violates the rule once, as the string literal "Howdy" is used four times as an argument in the method calls.
['Get all method calls in the class.', 'Get the name of the called method.', 'Get the arguments of the called method.', 'Get the type of the argument.', 'Check whether the argument is a string literal.', 'Check whether the length of the string literal is 3 or more.', 'Count the occurrences of each string literal that meets the length condition.', 'Check whether any string literal occurs 4 or more times.', 'Get all method calls in the class Foo.', 'Get the name of the called method buz.', 'Get the arguments of the called method buz.', 'Get the type of the argument "Howdy".', 'Check whether the argument "Howdy" is a string literal (True).', 'Check whether the length of the string literal "Howdy" is 3 or more (True, length is 5).', 'Count the occurrences of the string literal "Howdy" (4 occurrences).', 'Check whether any string literal occurs 4 or more times (True, "Howdy" occurs 4 times).']
['ASTMethodCall', 'JavaAstUtils', 'ASTVoidType', 'ASTCompilationUnit', 'AstImplUtil', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTArgumentList', 'ASTMethodDeclaration', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTFormalParameters', 'ASTBlock', 'ASTStringLiteral', 'ASTFormalParameter', 'JavaSemanticErrors', 'ASTExpressionStatement', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get all method calls in the class.* 匹配到的元操作或API：
query: Get all method calls in the class.
most similar API: get method name of method call
cosine Similarity: 0.8157881498336792
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Get the arguments of the called method.* 匹配到的元操作或API：
logic: Get the arguments of the called method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.9324951767921448
*Get the type of the argument.* 匹配到的元操作或API：
logic: Get the type of the argument.
most similar meta operation: Get the type of argument
cosine Similarity: 0.9691715240478516
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Check whether the length of the string literal is 3 or more.* 匹配到的元操作或API：
query: Check whether the length of the string literal is 3 or more.
most similar API: length of string literal
cosine Similarity: 0.8429111838340759
*Count the occurrences of each string literal that meets the length condition.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs 4 or more times.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all method calls in the class Foo.* 匹配到的元操作或API：
query: Get all method calls in the class Foo.
most similar API: get method name of method call
cosine Similarity: 0.8025503158569336
*Get the name of the called method buz.* 匹配到的元操作或API：
logic: Get the name of the called method buz.
most similar meta operation: Get the name of called method
cosine Similarity: 0.8817229866981506
*Get the arguments of the called method buz.* 匹配到的元操作或API：
query: Get the arguments of the called method buz.
most similar API: get arguments of method call
cosine Similarity: 0.8744506239891052
*Get the type of the argument "Howdy".* 匹配到的元操作或API：
logic: Get the type of the argument "Howdy".
most similar meta operation: Get the type of argument
cosine Similarity: 0.859615683555603
*Check whether the argument "Howdy" is a string literal (True).* 匹配到的元操作或API：
query: Check whether the argument "Howdy" is a string literal (True).
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8415151834487915
*Check whether the length of the string literal "Howdy" is 3 or more (True, length is 5).* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the occurrences of the string literal "Howdy" (4 occurrences).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs 4 or more times (True, "Howdy" occurs 4 times).* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
The test case corresponding to the rule:
```
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTMethodDeclaration (method name = 'bar')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
        ——ASTExpressionStatement
          ——ASTMethodCall (called method name = 'buz')
            ——ASTArgumentList (size = 1)
              ——ASTStringLiteral
    ——ASTMethodDeclaration (method name = 'buz')
      ——ASTModifierList
      ——ASTVoidType (method return type = 'void')
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTClassOrInterfaceType (this is a class type)
          ——ASTVariableDeclaratorId (declared variable name = 'x')
      ——ASTBlock

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
3. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.

1.  //Get the type of argument
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getMethodCallArgumentType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return expression.getTypeMirror();
}
```
2.  //Check whether the argument is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return TypeTestUtil.isA(String.class, expression.getTypeMirror());
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 1


======================接下来开始迭代=====================
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>不通过
97
81
117
102
83
69
94
78
93
78
87
72
=========================error_testcase_logics=========================
1. Get the name of class.
2. Get all fields declared in class.
3. Get the type of field.
4. Check whether the field is array type.
5. Check whether the array is string type.
6. If the field is a string array, iterate through the initializer.
7. Count occurrences of each string literal in the initializer.
8. Check whether the string literal length is greater than or equal to 3.
9. Check whether the count of any string literal is greater than or equal to 4.
10. Get the name of the field where the duplicate string literals are found.

In this test case:
1. Get the name of class -> Foo
2. Get all fields declared in class -> FOO
3. Get the type of field -> String[]
4. Check whether the field is array type -> True
5. Check whether the array is string type -> True
6. Iterate through the initializer -> {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}
7. Count occurrences of each string literal -> "foo" appears 9 times
8. Check whether the string literal length is greater than or equal to 3 -> True ("foo" has length 3)
9. Check whether the count of any string literal is greater than or equal to 4 -> True ("foo" appears more than 4 times)
10. Get the name of the field where the duplicate string literals are found -> FOO

The number of violating the rule in this test case is indeed: 1
['Get the name of class.', 'Get all fields declared in class.', 'Get the type of field.', 'Check whether the field is array type.', 'Check whether the array is string type.', 'If the field is a string array, iterate through the initializer.', 'Count occurrences of each string literal in the initializer.', 'Check whether the string literal length is greater than or equal to 3.', 'Check whether the count of any string literal is greater than or equal to 4.', 'Get the name of the field where the duplicate string literals are found.', 'Get the name of class -> Foo', 'Get all fields declared in class -> FOO', 'Get the type of field -> String[]', 'Check whether the field is array type -> True', 'Check whether the array is string type -> True', 'Iterate through the initializer -> {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}', 'Count occurrences of each string literal -> "foo" appears 9 times', 'Check whether the string literal length is greater than or equal to 3 -> True ("foo" has length 3)', 'Check whether the count of any string literal is greater than or equal to 4 -> True ("foo" appears more than 4 times)', 'Get the name of the field where the duplicate string literals are found -> FOO']
['ASTArrayType', 'ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTStringLiteral', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTArrayDimensions', 'ASTArrayInitializer', 'ASTArrayTypeDim', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is array type.* 匹配到的元操作或API：
logic: Check whether the field is array type.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9860299825668335
*Check whether the array is string type.* 匹配到的元操作或API：
logic: Check whether the array is string type.
most similar meta operation: Check whether the array is string type
cosine Similarity: 0.9868484735488892
*If the field is a string array, iterate through the initializer.* 匹配到的元操作或API：
query: If the field is a string array, iterate through the initializer.
most similar API: iterator of array initializer
cosine Similarity: 0.8393094539642334
*Count occurrences of each string literal in the initializer.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the string literal length is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the string literal length is greater than or equal to 3.
most similar API: Check whether the string literal is long literal
cosine Similarity: 0.8259307146072388
*Check whether the count of any string literal is greater than or equal to 4.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the field where the duplicate string literals are found.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class -> Foo* 匹配到的元操作或API：
logic: Get the name of class -> Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9195541739463806
*Get all fields declared in class -> FOO* 匹配到的元操作或API：
query: Get all fields declared in class -> FOO
most similar API: get declarations of class or interface
cosine Similarity: 0.8285040855407715
*Get the type of field -> String[]* 匹配到的元操作或API：
logic: Get the type of field -> String[]
most similar meta operation: Get the type of field
cosine Similarity: 0.8846392631530762
*Check whether the field is array type -> True* 匹配到的元操作或API：
logic: Check whether the field is array type -> True
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9607114195823669
*Check whether the array is string type -> True* 匹配到的元操作或API：
logic: Check whether the array is string type -> True
most similar meta operation: Check whether the array is string type
cosine Similarity: 0.9683843851089478
*Iterate through the initializer -> {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}* 匹配到的元操作或API：
query: Iterate through the initializer -> {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}
most similar API: iterator of array initializer
cosine Similarity: 0.8236178755760193
*Count occurrences of each string literal -> "foo" appears 9 times* 匹配到的元操作或API：
query: Count occurrences of each string literal -> "foo" appears 9 times
most similar API: get num children of string literal
cosine Similarity: 0.8038859367370605
*Check whether the string literal length is greater than or equal to 3 -> True ("foo" has length 3)* 匹配到的元操作或API：
query: Check whether the string literal length is greater than or equal to 3 -> True ("foo" has length 3)
most similar API: length of string literal
cosine Similarity: 0.8320037722587585
*Check whether the count of any string literal is greater than or equal to 4 -> True ("foo" appears more than 4 times)* 匹配到的元操作或API：
query: Check whether the count of any string literal is greater than or equal to 4 -> True ("foo" appears more than 4 times)
most similar API: Check whether the string literal equals
cosine Similarity: 0.8049440979957581
*Get the name of the field where the duplicate string literals are found -> FOO* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTArrayType (this is a primitive type)
        ——ASTClassOrInterfaceType (this is a class type)
        ——ASTArrayDimensions
          ——ASTArrayTypeDim
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'FOO')
        ——ASTArrayInitializer
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.util.Iterator<ASTExpression> iterator()
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isLongLiteral(), //Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.
6. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int getNumChildren()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.
8. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)

1.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```
2.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        NodeStream<ASTFieldDeclaration> fieldDeclarations = node.getDeclarations(ASTFieldDeclaration.class);
        for (ASTFieldDeclaration fieldDeclaration : fieldDeclarations) {
            checkFieldDeclaration(fieldDeclaration, data);
        }
        return super.visit(node, data);
    }

    private void checkFieldDeclaration(ASTFieldDeclaration node, Object data) {
        if (isFieldArrayType(node)) {
            ASTVariableDeclaratorId declaratorId = node.getFirstDescendantOfType(ASTVariableDeclaratorId.class);
            if (declaratorId != null && isArrayStringType(declaratorId)) {
                ASTArrayInitializer arrayInitializer = node.getFirstDescendantOfType(ASTArrayInitializer.class);
                if (arrayInitializer != null) {
                    Map<String, Integer> fieldLiteralCounts = new HashMap<>();
                    for (ASTExpression expression : arrayInitializer) {
                        if (expression instanceof ASTStringLiteral) {
                            ASTStringLiteral stringLiteral = (ASTStringLiteral) expression;
                            if (stringLiteral.length() >= 3) {
                                String value = stringLiteral.getImage();
                                fieldLiteralCounts.put(value, fieldLiteralCounts.getOrDefault(value, 0) + 1);
                                if (fieldLiteralCounts.get(value) >= 4) {
                                    addViolation(data, stringLiteral);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private boolean isFieldArrayType(ASTFieldDeclaration node) {
        ASTType type = node.getTypeNode();
        return type.getTypeMirror().isArray();
    }

    private boolean isArrayStringType(ASTVariableDeclaratorId node) {
        if (node.getType().isArray()) {
            ASTArrayType arrayType = (ASTArrayType) node.getTypeNode();
            ASTType astType = (ASTType) arrayType.getChild(0);
            if (astType instanceof ASTClassOrInterfaceType) {
                ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType) astType;
                return TypeTestUtil.isA(String.class, classOrInterfaceType);
            }
        }
        return false;
    }

    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>不通过
=========================error_testcase_logics=========================
1. Get the name of class.
2. Get all fields declared in class.
3. Get the type of field.
4. Check whether the field is array type.
5. Get the component type of the array field.
6. Check whether the component type is String.
7. Get the initializer of the field.
8. Check whether the initializer is an array initializer.
9. Get the elements of the array initializer.
10. Get the length of the array initializer.
11. Iterate over the elements of the array initializer.
12. Check whether the element is a string literal.
13. Get the length of the string literal.
14. Check whether the length of the string literal is at least 3.
15. Count the occurrences of each string literal in the array initializer.
16. Check whether the count of any string literal is 4 or more.
        
For the provided test case:
1. Get the name of class: Foo
2. Get all fields declared in class: FOO
3. Get the type of field: String[]
4. Check whether the field is array type: True
5. Get the component type of the array field: String
6. Check whether the component type is String: True
7. Get the initializer of the field: {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}
8. Check whether the initializer is an array initializer: True
9. Get the elements of the array initializer: ["foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"]
10. Get the length of the array initializer: 9
11. Iterate over the elements of the array initializer:
    - For each element:
        12. Check whether the element is a string literal: True
        13. Get the length of the string literal: 3
        14. Check whether the length of the string literal is at least 3: True
        15. Count the occurrences of each string literal in the array initializer: "foo" appears 9 times
        16. Check whether the count of any string literal is 4 or more: True ("foo" appears 9 times)

The number of violating the rule in this test case is indeed: 1
['Get the name of class.', 'Get all fields declared in class.', 'Get the type of field.', 'Check whether the field is array type.', 'Get the component type of the array field.', 'Check whether the component type is String.', 'Get the initializer of the field.', 'Check whether the initializer is an array initializer.', 'Get the elements of the array initializer.', 'Get the length of the array initializer.', 'Iterate over the elements of the array initializer.', 'Check whether the element is a string literal.', 'Get the length of the string literal.', 'Check whether the length of the string literal is at least 3.', 'Count the occurrences of each string literal in the array initializer.', 'Check whether the count of any string literal is 4 or more.', 'Get the name of class: Foo', 'Get all fields declared in class: FOO', 'Get the type of field: String[]', 'Check whether the field is array type: True', 'Get the component type of the array field: String', 'Check whether the component type is String: True', 'Get the initializer of the field: {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}', 'Check whether the initializer is an array initializer: True', 'Get the elements of the array initializer: ["foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"]', 'Get the length of the array initializer: 9', 'Iterate over the elements of the array initializer:', 'Check whether the element is a string literal: True', 'Get the length of the string literal: 3', 'Check whether the length of the string literal is at least 3: True', 'Count the occurrences of each string literal in the array initializer: "foo" appears 9 times', 'Check whether the count of any string literal is 4 or more: True ("foo" appears 9 times)']
['ASTArrayType', 'ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTStringLiteral', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTArrayDimensions', 'ASTArrayInitializer', 'ASTArrayTypeDim', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is array type.* 匹配到的元操作或API：
logic: Check whether the field is array type.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9860299825668335
*Get the component type of the array field.* 匹配到的元操作或API：
query: Get the component type of the array field.
most similar API: get type of array type
cosine Similarity: 0.8623225688934326
*Check whether the component type is String.* 匹配到的元操作或API：
query: Check whether the component type is String.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8026959896087646
*Get the initializer of the field.* 匹配到的元操作或API：
query: Get the initializer of the field.
most similar API: get initializer of variable declarator
cosine Similarity: 0.8360723257064819
*Check whether the initializer is an array initializer.* 匹配到的元操作或API：
query: Check whether the initializer is an array initializer.
most similar API: Check whether is array initializer
cosine Similarity: 0.9679869413375854
*Get the elements of the array initializer.* 匹配到的元操作或API：
query: Get the elements of the array initializer.
most similar API: get text of array initializer
cosine Similarity: 0.8674229383468628
*Get the length of the array initializer.* 匹配到的元操作或API：
query: Get the length of the array initializer.
most similar API: length of array initializer: Return the number of elements.
cosine Similarity: 0.9500548839569092
*Iterate over the elements of the array initializer.* 匹配到的元操作或API：
query: Iterate over the elements of the array initializer.
most similar API: iterator of array initializer
cosine Similarity: 0.9060245156288147
*Check whether the element is a string literal.* 匹配到的元操作或API：
query: Check whether the element is a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.9266089200973511
*Get the length of the string literal.* 匹配到的元操作或API：
logic: Get the length of the string literal.
most similar meta operation: Get the length of string literal
cosine Similarity: 0.9791365265846252
*Check whether the length of the string literal is at least 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is at least 3.
most similar API: length of string literal
cosine Similarity: 0.8327232599258423
*Count the occurrences of each string literal in the array initializer.* 匹配到的元操作或API：
query: Count the occurrences of each string literal in the array initializer.
most similar API: for each of array initializer
cosine Similarity: 0.8078380823135376
*Check whether the count of any string literal is 4 or more.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class: Foo* 匹配到的元操作或API：
logic: Get the name of class: Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9263077974319458
*Get all fields declared in class: FOO* 匹配到的元操作或API：
query: Get all fields declared in class: FOO
most similar API: get declarations of class or interface
cosine Similarity: 0.8252238035202026
*Get the type of field: String[]* 匹配到的元操作或API：
logic: Get the type of field: String[]
most similar meta operation: Get the type of field
cosine Similarity: 0.8750858306884766
*Check whether the field is array type: True* 匹配到的元操作或API：
logic: Check whether the field is array type: True
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9652701616287231
*Get the component type of the array field: String* 匹配到的元操作或API：
query: Get the component type of the array field: String
most similar API: get type of array type
cosine Similarity: 0.8310225009918213
*Check whether the component type is String: True* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the initializer of the field: {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"}* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the initializer is an array initializer: True* 匹配到的元操作或API：
query: Check whether the initializer is an array initializer: True
most similar API: Check whether is array initializer
cosine Similarity: 0.9596935510635376
*Get the elements of the array initializer: ["foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"]* 匹配到的元操作或API：
query: Get the elements of the array initializer: ["foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"]
most similar API: get num children of array initializer
cosine Similarity: 0.826648473739624
*Get the length of the array initializer: 9* 匹配到的元操作或API：
query: Get the length of the array initializer: 9
most similar API: length of array initializer
cosine Similarity: 0.9246443510055542
*Iterate over the elements of the array initializer:* 匹配到的元操作或API：
query: Iterate over the elements of the array initializer:
most similar API: iterator of array initializer
cosine Similarity: 0.9076442718505859
*Check whether the element is a string literal: True* 匹配到的元操作或API：
query: Check whether the element is a string literal: True
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.9080319404602051
*Get the length of the string literal: 3* 匹配到的元操作或API：
logic: Get the length of the string literal: 3
most similar meta operation: Get the length of string literal
cosine Similarity: 0.9278361201286316
*Check whether the length of the string literal is at least 3: True* 匹配到的元操作或API：
query: Check whether the length of the string literal is at least 3: True
most similar API: length of string literal
cosine Similarity: 0.8357941508293152
*Count the occurrences of each string literal in the array initializer: "foo" appears 9 times* 匹配到的元操作或API：
query: Count the occurrences of each string literal in the array initializer: "foo" appears 9 times
most similar API: get num children of array initializer
cosine Similarity: 0.8198409676551819
*Check whether the count of any string literal is 4 or more: True ("foo" appears 9 times)* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTArrayType (this is a primitive type)
        ——ASTClassOrInterfaceType (this is a class type)
        ——ASTArrayDimensions
          ——ASTArrayTypeDim
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'FOO')
        ——ASTArrayInitializer
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTArrayType: public java.lang.Class<Class<?> getType()
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
6. net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator: public net.sourceforge.pmd.lang.java.ast.ASTExpression getInitializer(), //Returns the initializer, of the variable, or null if it doesn't exist.
7. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)
8. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public net.sourceforge.pmd.lang.document.Chars getText()
9. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public int length(), //Return the number of elements.
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.util.Iterator<ASTExpression> iterator()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length()
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.
13. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)
14. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public int getNumChildren()

1.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class, ASTFieldDeclaration.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        ASTType type = node.getTypeNode();
        if (type.getTypeMirror().isArray()) {
            ASTVariableDeclarator declarator = node.getFirstDescendantOfType(ASTVariableDeclarator.class);
            if (declarator != null) {
                ASTExpression initializer = declarator.getInitializer();
                if (initializer instanceof ASTArrayInitializer) {
                    ASTArrayInitializer arrayInitializer = (ASTArrayInitializer) initializer;
                    Map<String, Integer> fieldLiteralCounts = new HashMap<>();
                    for (ASTExpression expression : arrayInitializer) {
                        if (expression instanceof ASTStringLiteral) {
                            ASTStringLiteral stringLiteral = (ASTStringLiteral) expression;
                            if (stringLiteral.length() >= 3) {
                                String value = stringLiteral.getImage();
                                fieldLiteralCounts.put(value, fieldLiteralCounts.getOrDefault(value, 0) + 1);
                                if (fieldLiteralCounts.get(value) >= 4) {
                                    addViolation(data, stringLiteral);
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <12>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <12>不通过
=========================error_testcase_logics=========================
1. Get the name of class.
2. Get all fields declared in class.
3. Get the type of field.
4. Check whether the field is array type.
5. Get the one dimension array length.
6. Get the literal values that the field is initialized to.
7. Get the length of each string literal.
8. Check whether the length of each string literal is greater than or equal to 3.
9. Count the occurrences of each string literal that meets the length requirement.
10. Check whether the count of any string literal is greater than or equal to 4.

If the test case contains a field that is an array of strings, and the array contains at least one string literal of length 3 or greater that appears 4 or more times, then the test case violates the rule. In this case, the string "foo" appears 9 times in the array `FOO`, so the rule is violated once.
['Get the name of class.', 'Get all fields declared in class.', 'Get the type of field.', 'Check whether the field is array type.', 'Get the one dimension array length.', 'Get the literal values that the field is initialized to.', 'Get the length of each string literal.', 'Check whether the length of each string literal is greater than or equal to 3.', 'Count the occurrences of each string literal that meets the length requirement.', 'Check whether the count of any string literal is greater than or equal to 4.']
['ASTArrayType', 'ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTStringLiteral', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTArrayDimensions', 'ASTArrayInitializer', 'ASTArrayTypeDim', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is array type.* 匹配到的元操作或API：
logic: Check whether the field is array type.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9860299825668335
*Get the one dimension array length.* 匹配到的元操作或API：
logic: Get the one dimension array length.
most similar meta operation: Get the length of one dimension array
cosine Similarity: 0.9719899296760559
*Get the literal values that the field is initialized to.* 匹配到的元操作或API：
logic: Get the literal values that the field is initialized to.
most similar meta operation: Get the literal value that the field is initialized to
cosine Similarity: 0.9494510293006897
*Get the length of each string literal.* 匹配到的元操作或API：
logic: Get the length of each string literal.
most similar meta operation: Get the length of string literal
cosine Similarity: 0.9603046178817749
*Check whether the length of each string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of each string literal is greater than or equal to 3.
most similar API: Check whether the string literal is long literal
cosine Similarity: 0.823025107383728
*Count the occurrences of each string literal that meets the length requirement.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the count of any string literal is greater than or equal to 4.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTArrayType (this is a primitive type)
        ——ASTClassOrInterfaceType (this is a class type)
        ——ASTArrayDimensions
          ——ASTArrayTypeDim
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'FOO')
        ——ASTArrayInitializer
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length()
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isLongLiteral(), //Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.

1.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```
2.  //Get the length of one dimension array
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions;
import net.sourceforge.pmd.lang.java.ast.ASTArrayDimExpr;
import net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation;
import net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer;
import net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral;
public int getLengthOfOneDimensionArray(ASTVariableDeclaratorId varId) {
    int arrayLen = 0;
    int dimension;
    if (varId.getType().isArray()) {
        ASTArrayType arrayType = (ASTArrayType) varId.getTypeNode();
        ASTArrayDimensions arrayTypeDimensions = arrayType.getDimensions();
        dimension = arrayTypeDimensions.size();
        if (dimension == 1) {
            ASTArrayAllocation arrayAllocation = varId.getParent().firstChild(ASTArrayAllocation.class);
            if (arrayAllocation != null) {
                ASTArrayInitializer arrayInitializer = arrayAllocation.firstChild(ASTArrayInitializer.class);
                if (arrayInitializer != null) {
                    arrayLen = arrayInitializer.length();
                } else {
                    ASTArrayDimensions astArrayTypeDims = arrayAllocation.descendants(ASTArrayDimensions.class).first();
                    ASTArrayDimExpr arrayDimExpr = (ASTArrayDimExpr) astArrayTypeDims.get(0);
                    if (arrayDimExpr.getLengthExpression() instanceof ASTNumericLiteral) {
                        arrayLen = ((ASTNumericLiteral) arrayDimExpr.getLengthExpression()).getValueAsInt();
                    }
                }
            }
        }
    }
    return arrayLen;
}
```
3.  //Get the literal value that the field is initialized to
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTLiteral;
import net.sourceforge.pmd.lang.ast.NodeStream;
public ASTLiteral getInitializedValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTLiteral) {
                    return (ASTLiteral)init;
                }
            }
        }
    }
    return null;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        if (isFieldArrayType(node)) {
            ASTArrayInitializer arrayInitializer = node.getFirstChildOfType(ASTArrayInitializer.class);
            if (arrayInitializer != null) {
                Map<String, Integer> arrayLiteralCounts = new HashMap<>();
                for (ASTStringLiteral literal : arrayInitializer.findDescendantsOfType(ASTStringLiteral.class)) {
                    if (literal.length() >= 3) {
                        String value = literal.getImage();
                        arrayLiteralCounts.put(value, arrayLiteralCounts.getOrDefault(value, 0) + 1);
                        if (arrayLiteralCounts.get(value) >= 4) {
                            addViolation(data, literal);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isFieldArrayType(ASTFieldDeclaration node) {
        ASTType type = node.getTypeNode();
        return type.getTypeMirror().isArray();
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>不通过
=========================error_testcase_logics=========================
1. Get the name of class.
        2. Get all fields declared in class.
        3. Get the type of field.
        4. Check whether the field is array type.
        5. Get the type of the array.
        6. Check whether the array type is String.
        7. Get the initializer of the field.
        8. Check whether the initializer is an array initializer.
        9. Get the elements of the array initializer.
        10. Get the value of string literal.
        11. Get the length of string literal.
        12. Check whether the length of string literal is less than 3.
        13. Count the occurrences of each string literal in the array initializer.
        14. Check whether any string literal occurs 4 or more times and its length is not less than 3.

If the count of any string literal with a length of 3 or more occurs 4 or more times in the array initializer, then this test case violates the rule. In this case, the string "foo" appears 9 times, which violates the rule.
['Get the name of class.', 'Get all fields declared in class.', 'Get the type of field.', 'Check whether the field is array type.', 'Get the type of the array.', 'Check whether the array type is String.', 'Get the initializer of the field.', 'Check whether the initializer is an array initializer.', 'Get the elements of the array initializer.', 'Get the value of string literal.', 'Get the length of string literal.', 'Check whether the length of string literal is less than 3.', 'Count the occurrences of each string literal in the array initializer.', 'Check whether any string literal occurs 4 or more times and its length is not less than 3.']
['ASTArrayType', 'ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTStringLiteral', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTArrayDimensions', 'ASTArrayInitializer', 'ASTArrayTypeDim', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is array type.* 匹配到的元操作或API：
logic: Check whether the field is array type.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9860299825668335
*Get the type of the array.* 匹配到的元操作或API：
query: Get the type of the array.
most similar API: get type of array type
cosine Similarity: 0.9531485438346863
*Check whether the array type is String.* 匹配到的元操作或API：
logic: Check whether the array type is String.
most similar meta operation: Check whether the array is string type
cosine Similarity: 0.974889874458313
*Get the initializer of the field.* 匹配到的元操作或API：
query: Get the initializer of the field.
most similar API: get initializer of variable declarator
cosine Similarity: 0.8360723257064819
*Check whether the initializer is an array initializer.* 匹配到的元操作或API：
query: Check whether the initializer is an array initializer.
most similar API: Check whether is array initializer
cosine Similarity: 0.9679869413375854
*Get the elements of the array initializer.* 匹配到的元操作或API：
query: Get the elements of the array initializer.
most similar API: get text of array initializer
cosine Similarity: 0.8674229383468628
*Get the value of string literal.* 匹配到的元操作或API：
logic: Get the value of string literal.
most similar meta operation: Get the value of string literal
cosine Similarity: 0.983224630355835
*Get the length of string literal.* 匹配到的元操作或API：
logic: Get the length of string literal.
most similar meta operation: Get the length of string literal
cosine Similarity: 0.9875898361206055
*Check whether the length of string literal is less than 3.* 匹配到的元操作或API：
query: Check whether the length of string literal is less than 3.
most similar API: length of string literal
cosine Similarity: 0.8233144879341125
*Count the occurrences of each string literal in the array initializer.* 匹配到的元操作或API：
query: Count the occurrences of each string literal in the array initializer.
most similar API: for each of array initializer
cosine Similarity: 0.8078380823135376
*Check whether any string literal occurs 4 or more times and its length is not less than 3.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTArrayType (this is a primitive type)
        ——ASTClassOrInterfaceType (this is a class type)
        ——ASTArrayDimensions
          ——ASTArrayTypeDim
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'FOO')
        ——ASTArrayInitializer
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTArrayType: public java.lang.Class<Class<?> getType()
5. net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator: public net.sourceforge.pmd.lang.java.ast.ASTExpression getInitializer(), //Returns the initializer, of the variable, or null if it doesn't exist.
6. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)
7. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public net.sourceforge.pmd.lang.document.Chars getText()
8. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public java.lang.String getConstValue()
9. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length()
10. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.
11. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)

1.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```
2.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class, ASTFieldDeclaration.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        ASTType type = node.getTypeNode();
        if (type.getTypeMirror().isArray()) {
            ASTArrayType arrayType = (ASTArrayType) type;
            ASTType astType = (ASTType) arrayType.getChild(0);
            if (astType instanceof ASTClassOrInterfaceType) {
                ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType) astType;
                if (TypeTestUtil.isA(String.class, classOrInterfaceType)) {
                    ASTVariableDeclarator declarator = node.getFirstDescendantOfType(ASTVariableDeclarator.class);
                    if (declarator != null) {
                        ASTExpression initializer = declarator.getInitializer();
                        if (initializer != null && JavaAstUtils.isArrayInitializer(initializer)) {
                            ASTArrayInitializer arrayInitializer = (ASTArrayInitializer) initializer;
                            Map<String, Integer> arrayLiteralCounts = new HashMap<>();
                            arrayInitializer.forEach(element -> {
                                if (element instanceof ASTStringLiteral) {
                                    ASTStringLiteral literal = (ASTStringLiteral) element;
                                    if (literal.length() >= 3) {
                                        String value = literal.getImage();
                                        arrayLiteralCounts.put(value, arrayLiteralCounts.getOrDefault(value, 0) + 1);
                                        if (arrayLiteralCounts.get(value) >= 4) {
                                            addViolation(data, literal);
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 2" resulted in wrong number of failures, ==> expected: <1> but was: <6>不通过
=========================error_testcase_logics=========================
1. Get the class declaration.
2. Get the name of class.
3. Get all fields declared in class.
4. Get the name of field.
5. Get the type of field.
6. Check whether the field is an array type.
7. Get the type of array component.
8. Check whether the component type is String.
9. Get the initializer of the field.
10. Check whether the initializer is an array initializer.
11. Get the elements of the array initializer.
12. Filter elements that are string literals.
13. Check whether the length of any string literal is less than 3.
14. Count the number of duplicate string literals.
15. Check whether the count of duplicate string literals is greater than or equal to 4.
        If the count of duplicate string literals (with length greater than or equal to 3) in an array initializer is greater than or equal to 4, then this test case violates the rule.
            
['Get the class declaration.', 'Get the name of class.', 'Get all fields declared in class.', 'Get the name of field.', 'Get the type of field.', 'Check whether the field is an array type.', 'Get the type of array component.', 'Check whether the component type is String.', 'Get the initializer of the field.', 'Check whether the initializer is an array initializer.', 'Get the elements of the array initializer.', 'Filter elements that are string literals.', 'Check whether the length of any string literal is less than 3.', 'Count the number of duplicate string literals.', 'Check whether the count of duplicate string literals is greater than or equal to 4.']
['ASTArrayType', 'ASTFieldDeclaration', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'ASTVariableDeclarator', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'JavaPropertyUtil', 'ASTStringLiteral', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ASTArrayDimensions', 'ASTArrayInitializer', 'ASTArrayTypeDim', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the class declaration.* 匹配到的元操作或API：
query: Get the class declaration.
most similar API: get declarations of class or interface
cosine Similarity: 0.8343498706817627
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the name of field.* 匹配到的元操作或API：
logic: Get the name of field.
most similar meta operation: Get the name of field
cosine Similarity: 0.978217363357544
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is an array type.* 匹配到的元操作或API：
logic: Check whether the field is an array type.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9805461168289185
*Get the type of array component.* 匹配到的元操作或API：
query: Get the type of array component.
most similar API: get type of array type
cosine Similarity: 0.9158074259757996
*Check whether the component type is String.* 匹配到的元操作或API：
query: Check whether the component type is String.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8026959896087646
*Get the initializer of the field.* 匹配到的元操作或API：
query: Get the initializer of the field.
most similar API: get initializer of variable declarator
cosine Similarity: 0.8360723257064819
*Check whether the initializer is an array initializer.* 匹配到的元操作或API：
query: Check whether the initializer is an array initializer.
most similar API: Check whether is array initializer
cosine Similarity: 0.9679869413375854
*Get the elements of the array initializer.* 匹配到的元操作或API：
query: Get the elements of the array initializer.
most similar API: get text of array initializer
cosine Similarity: 0.8674229383468628
*Filter elements that are string literals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the length of any string literal is less than 3.* 匹配到的元操作或API：
query: Check whether the length of any string literal is less than 3.
most similar API: length of string literal
cosine Similarity: 0.8209614753723145
*Count the number of duplicate string literals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the count of duplicate string literals is greater than or equal to 4.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTArrayType (this is a primitive type)
        ——ASTClassOrInterfaceType (this is a class type)
        ——ASTArrayDimensions
          ——ASTArrayTypeDim
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'FOO')
        ——ASTArrayInitializer
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral
          ——ASTStringLiteral


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTArrayType: public java.lang.Class<Class<?> getType()
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
6. net.sourceforge.pmd.lang.java.ast.ASTVariableDeclarator: public net.sourceforge.pmd.lang.java.ast.ASTExpression getInitializer(), //Returns the initializer, of the variable, or null if it doesn't exist.
7. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)
8. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public net.sourceforge.pmd.lang.document.Chars getText()
9. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.

1.  //Get the name of field
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getFieldName(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
2.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        node.getDeclarations(ASTFieldDeclaration.class).forEach(field -> {
            if (isFieldArrayType(field)) {
                ASTExpression initializer = field.getVariables().get(0).getInitializer();
                if (JavaAstUtils.isArrayInitializer(initializer)) {
                    ASTArrayInitializer arrayInitializer = (ASTArrayInitializer) initializer;
                    Map<String, Integer> arrayLiteralCounts = new HashMap<>();
                    for (ASTExpression expr : arrayInitializer.children()) {
                        if (expr instanceof ASTStringLiteral && ((ASTStringLiteral) expr).length() >= 3) {
                            String value = expr.getImage();
                            arrayLiteralCounts.put(value, arrayLiteralCounts.getOrDefault(value, 0) + 1);
                            if (arrayLiteralCounts.get(value) >= 4) {
                                addViolation(data, expr);
                            }
                        }
                    }
                }
            }
        });
        return super.visit(node, data);
    }

    private boolean isFieldArrayType(ASTFieldDeclaration node) {
        ASTType type = node.getTypeNode();
        return type.getTypeMirror().isArray();
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
==========5轮都没修复成功一个后面新加的一个测试用例，换一个测试用例进行修复
这个测试用例 5 round 没有修复成功：
bad 2
[ERROR]   "bad 3" resulted in wrong number of failures, ==> expected: <1> but was: <5>不通过
99
82
96
80
81
67
=========================error_testcase_logics=========================
1. Get the name of class.
2. Check whether class has declared annotations.
3. Get a declared annotation of class.
4. Check whether the annotation is SuppressWarnings.
5. Get the argument list of annotation.
6. Check whether the argument list has more than one argument.
7. Get an argument of annotation.
8. Check whether the argument is a string literal.
9. Get the value of string literal.
10. Check whether the string literal's length is greater than or equal to 3.
11. Count occurrences of the string literal in the annotation argument list.
12. Check whether the count of string literal occurrences is greater than or equal to 4.

In this test case, step 11 will reveal that the string literal "foo" appears 8 times in the SuppressWarnings annotations. Since step 10 confirms the string length is greater than or equal to 3, and step 12 confirms the count is greater than or equal to 4, this test case violates the rule. The number of violations is 1, as the rule is about the presence of such a pattern, not the number of times it occurs.
['Get the name of class.', 'Check whether class has declared annotations.', 'Get a declared annotation of class.', 'Check whether the annotation is SuppressWarnings.', 'Get the argument list of annotation.', 'Check whether the argument list has more than one argument.', 'Get an argument of annotation.', 'Check whether the argument is a string literal.', 'Get the value of string literal.', "Check whether the string literal's length is greater than or equal to 3.", 'Count occurrences of the string literal in the annotation argument list.', 'Check whether the count of string literal occurrences is greater than or equal to 4.']
['ASTAnnotation', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTAnnotationMemberList', 'JavaPropertyUtil', 'ASTStringLiteral', 'ASTMemberValuePair', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether class has declared annotations.* 匹配到的元操作或API：
logic: Check whether class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9901518821716309
*Get a declared annotation of class.* 匹配到的元操作或API：
logic: Get a declared annotation of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.987838864326477
*Check whether the annotation is SuppressWarnings.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the argument list of annotation.* 匹配到的元操作或API：
query: Get the argument list of annotation.
most similar API: get member list of annotation
cosine Similarity: 0.826149046421051
*Check whether the argument list has more than one argument.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get an argument of annotation.* 匹配到的元操作或API：
query: Get an argument of annotation.
most similar API: get attribute of annotation
cosine Similarity: 0.8608503937721252
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Get the value of string literal.* 匹配到的元操作或API：
logic: Get the value of string literal.
most similar meta operation: Get the value of string literal
cosine Similarity: 0.983224630355835
*Check whether the string literal's length is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the string literal's length is greater than or equal to 3.
most similar API: Check whether the string literal is long literal
cosine Similarity: 0.8383616805076599
*Count occurrences of the string literal in the annotation argument list.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the count of string literal occurrences is greater than or equal to 4.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
  ——ASTClassOrInterfaceBody


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotation: public net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList getMemberList(), //Returns the list of members, or null if there is none.
4. net.sourceforge.pmd.lang.java.ast.ASTAnnotation: public net.sourceforge.pmd.lang.java.ast.ASTMemberValue getAttribute(java.lang.String), //Returns the value of the attribute with the given name, returns null if no such attribute was mentioned. For example, for the attribute named "value": <pre>{@code - @SuppressWarnings -> returns null - @SuppressWarning("fallthrough") -> returns "fallthrough" - @SuppressWarning(value={"fallthrough"}) -> returns {"fallthrough"} - @SuppressWarning({"fallthrough", "rawtypes"}) -> returns {"fallthrough", "rawtypes"} }</pre> @param attrName Name of an attribute
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public java.lang.String getConstValue()
6. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isLongLiteral(), //Returns true if this is a {@linkplain ASTNumericLiteral long integer literal}.

1.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```
2.  //Check whether the argument is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return TypeTestUtil.isA(String.class, expression.getTypeMirror());
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public void apply(List<? extends JvmNode> nodes, RuleContext ctx) {
        for (JvmNode node : nodes) {
            if (node instanceof ASTClassOrInterfaceDeclaration) {
                ASTClassOrInterfaceDeclaration decl = (ASTClassOrInterfaceDeclaration) node;
                NodeStream<ASTAnnotation> annotations = decl.getDeclaredAnnotations();
                for (ASTAnnotation annotation : annotations) {
                    ASTAnnotationMemberList memberList = annotation.getMemberList();
                    if (memberList != null) {
                        for (ASTMemberValuePair pair : memberList) {
                            if (pair.getValue() instanceof ASTStringLiteral) {
                                ASTStringLiteral literal = (ASTStringLiteral) pair.getValue();
                                if (literal.length() >= 3) {
                                    String value = literal.getImage();
                                    literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
                                    if (literalCounts.get(value) >= 4) {
                                        addViolation(ctx, literal);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        super.apply(nodes, ctx);
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
To ascertain the adherence of the provided test case to the rule, we need to perform granular checks on the String literals used in the annotation and within the class. Here are the steps:

1. Get the name of class.
        2. Get all annotations declared on class.
        3. For each annotation, get the name of the annotation.
        4. For each annotation, check whether it has a string literal value.
        5. Get the string literal value of the annotation.
        6. Check whether the length of the string literal is less than 3.
        7. If the length of the string literal is not less than 3, track the occurrence of each string literal in annotations.
        8. Count the occurrences of each string literal.
        9. Check whether any string literal occurs more than or equal to the threshold of 4.
        10. If any string literal occurs more than or equal to the threshold, then this test case violates the rule.

For the given test case:

1. Get the name of class: Foo
        2. Get all annotations declared on class: @SuppressWarnings("foo")
        3. For each annotation, get the name of the annotation: SuppressWarnings
        4. For each annotation, check whether it has a string literal value: Yes
        5. Get the string literal value of the annotation: "foo"
        6. Check whether the length of the string literal is less than 3: No, length is 3
        7. Track the occurrence of each string literal in annotations: "foo" occurs 8 times
        8. Count the occurrences of each string literal: "foo" occurs 8 times
        9. Check whether any string literal occurs more than or equal to the threshold of 4: Yes, "foo" occurs 8 times which is greater than the threshold of 4.
        10. This test case violates the rule. The number of violating the rule in this test case is: 1

So, the test case does indeed violate the rule as the string literal "foo" is used in the `@SuppressWarnings` annotation 8 times, which is more than the threshold of 4.
['Get the name of class.', 'Get all annotations declared on class.', 'For each annotation, get the name of the annotation.', 'For each annotation, check whether it has a string literal value.', 'Get the string literal value of the annotation.', 'Check whether the length of the string literal is less than 3.', 'If the length of the string literal is not less than 3, track the occurrence of each string literal in annotations.', 'Count the occurrences of each string literal.', 'Check whether any string literal occurs more than or equal to the threshold of 4.', 'If any string literal occurs more than or equal to the threshold, then this test case violates the rule.', 'Get the name of class: Foo', 'Get all annotations declared on class: @SuppressWarnings("foo")', 'For each annotation, get the name of the annotation: SuppressWarnings', 'For each annotation, check whether it has a string literal value: Yes', 'Get the string literal value of the annotation: "foo"', 'Check whether the length of the string literal is less than 3: No, length is 3', 'Track the occurrence of each string literal in annotations: "foo" occurs 8 times', 'Count the occurrences of each string literal: "foo" occurs 8 times', 'Check whether any string literal occurs more than or equal to the threshold of 4: Yes, "foo" occurs 8 times which is greater than the threshold of 4.', 'This test case violates the rule. The number of violating the rule in this test case is: 1']
['ASTAnnotation', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTAnnotationMemberList', 'JavaPropertyUtil', 'ASTStringLiteral', 'ASTMemberValuePair', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all annotations declared on class.* 匹配到的元操作或API：
logic: Get all annotations declared on class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.8879285454750061
*For each annotation, get the name of the annotation.* 匹配到的元操作或API：
logic: For each annotation, get the name of the annotation.
most similar meta operation: Get the name of annotation declaration
cosine Similarity: 0.8681464791297913
*For each annotation, check whether it has a string literal value.* 匹配到的元操作或API：
query: For each annotation, check whether it has a string literal value.
most similar API: Check whether has any annotation
cosine Similarity: 0.8414435982704163
*Get the string literal value of the annotation.* 匹配到的元操作或API：
logic: Get the string literal value of the annotation.
most similar meta operation: Get the value of string literal
cosine Similarity: 0.8771072626113892
*Check whether the length of the string literal is less than 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is less than 3.
most similar API: length of string literal
cosine Similarity: 0.8179241418838501
*If the length of the string literal is not less than 3, track the occurrence of each string literal in annotations.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the occurrences of each string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to the threshold of 4.* 匹配到的元操作或API：
未匹配成功元操作或API
*If any string literal occurs more than or equal to the threshold, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class: Foo* 匹配到的元操作或API：
logic: Get the name of class: Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9263077974319458
*Get all annotations declared on class: @SuppressWarnings("foo")* 匹配到的元操作或API：
logic: Get all annotations declared on class: @SuppressWarnings("foo")
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.8572999238967896
*For each annotation, get the name of the annotation: SuppressWarnings* 匹配到的元操作或API：
query: For each annotation, get the name of the annotation: SuppressWarnings
most similar API: get annotation name of annotation
cosine Similarity: 0.8645035028457642
*For each annotation, check whether it has a string literal value: Yes* 匹配到的元操作或API：
query: For each annotation, check whether it has a string literal value: Yes
most similar API: Check whether has any annotation
cosine Similarity: 0.8510189056396484
*Get the string literal value of the annotation: "foo"* 匹配到的元操作或API：
query: Get the string literal value of the annotation: "foo"
most similar API: get const value of annotation
cosine Similarity: 0.8392482399940491
*Check whether the length of the string literal is less than 3: No, length is 3* 匹配到的元操作或API：
query: Check whether the length of the string literal is less than 3: No, length is 3
most similar API: length of string literal
cosine Similarity: 0.8370300531387329
*Track the occurrence of each string literal in annotations: "foo" occurs 8 times* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the occurrences of each string literal: "foo" occurs 8 times* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to the threshold of 4: Yes, "foo" occurs 8 times which is greater than the threshold of 4.* 匹配到的元操作或API：
未匹配成功元操作或API
*This test case violates the rule. The number of violating the rule in this test case is: 1* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
  ——ASTClassOrInterfaceBody


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public java.lang.String getSimpleName()
4. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean hasAnyAnnotation(net.sourceforge.pmd.lang.java.ast.Annotatable, java.util.Collection)
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public java.lang.String getConstValue()
6. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.
7. net.sourceforge.pmd.lang.java.ast.ASTAnnotation: public java.lang.String getAnnotationName(), //Returns the name of the annotation as it is used, eg {@code java.lang.Override} or {@code Override}. @deprecated Use {@link #getTypeMirror()} instead
8. net.sourceforge.pmd.lang.java.ast.ASTAnnotation: public java.lang.Object getConstValue(), //Returns the constant value of this node, if this is a constant expression. Otherwise, or if some references couldn't be resolved, returns null. Note that {@link ASTNullLiteral null} is not a constant value, so this method's returning null is not a problem. Note that annotations are not given a constant value by this implementation.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public void start(ASTCompilationUnit acu, Object data) {
        super.start(acu, data);
        literalCounts.clear();
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        visitAnnotations(node.getDeclaredAnnotations(), data);
        return super.visit(node, data);
    }

    private void visitAnnotations(NodeStream<ASTAnnotation> annotations, Object data) {
        for (ASTAnnotation annotation : annotations) {
            ASTAnnotationMemberList memberList = annotation.getFirstChildOfType(ASTAnnotationMemberList.class);
            if (memberList != null) {
                for (ASTMemberValuePair pair : memberList) {
                    ASTStringLiteral literal = pair.getFirstChildOfType(ASTStringLiteral.class);
                    if (literal != null && literal.length() >= 3) {
                        String value = literal.getImage();
                        literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
                        if (literalCounts.get(value) >= 4) {
                            addViolation(data, literal);
                        }
                    }
                }
            }
        }
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
To evaluate the adherence of the provided test case to the rule, we need to perform a series of granular checks. Here is a step-by-step breakdown of the checks needed:

1. Get the name of class.
2. Get all annotations declared on the class.
3. Get the name of each annotation.
4. For each annotation, get its arguments.
5. For each argument, check whether it is a string literal.
6. Check whether the length of the string literal is greater than or equal to 3.
7. Count occurrences of each string literal.
8. Check whether any string literal occurs more than or equal to 4 times.
9. Get each field declared in the class.
10. Get the javadoc comment of each field.
11. Get the literal value that the field is initialized to.
12. Check whether the literal value is a string literal.
13. Check whether the length of the string literal is greater than or equal to 3.
14. Count occurrences of each string literal.
15. Check whether any string literal occurs more than or equal to 4 times.
16. Get each method declared in the class.
17. Get the body of each method.
18. For each method, get all expressions.
19. For each expression, check whether it is an assignment expression.
20. Get the right operand of the assignment expression.
21. Check whether the right operand is a string literal.
22. Check whether the length of the string literal is greater than or equal to 3.
23. Count occurrences of each string literal.
24. Check whether any string literal occurs more than or equal to 4 times.
25. Get each constructor declared in the class.
26. Get the body of each constructor.
27. For each constructor, get all expressions.
28. For each expression, check whether it is an assignment expression.
29. Get the right operand of the assignment expression.
30. Check whether the right operand is a string literal.
31. Check whether the length of the string literal is greater than or equal to 3.
32. Count occurrences of each string literal.
33. Check whether any string literal occurs more than or equal to 4 times.

Now, let's apply these checks to the provided test case:

1. Get the name of class: Foo
2. Get all annotations declared on the class: SuppressWarnings
3. Get the name of each annotation: SuppressWarnings
4. For each annotation, get its arguments: "foo"
5. For each argument, check whether it is a string literal: "foo" is a string literal
6. Check whether the length of the string literal is greater than or equal to 3: Length of "foo" is 3, which is not less than 3
7. Count occurrences of each string literal: "foo" occurs 8 times
8. Check whether any string literal occurs more than or equal to 4 times: "foo" occurs 8 times, which meets the threshold
9. Get each field declared in the class: No fields declared
10. Get the javadoc comment of each field: No fields to get comments for
11. Get the literal value that the field is initialized to: No fields to get literal values for
12. Check whether the literal value is a string literal: No fields to check
13. Check whether the length of the string literal is greater than or equal to 3: No fields to check
14. Count occurrences of each string literal: No literals to count in fields
15. Check whether any string literal occurs more than or equal to 4 times: No literals to check in fields
16. Get each method declared in the class: No methods declared
17. Get the body of each method: No methods to get bodies for
18. For each method, get all expressions: No methods to get expressions for
19. For each expression, check whether it is an assignment expression: No expressions to check
20. Get the right operand of the assignment expression: No assignment expressions to get right operands for
21. Check whether the right operand is a string literal: No right operands to check
22. Check whether the length of the string literal is greater than or equal to 3: No right operands to check
23. Count occurrences of each string literal: No literals to count in methods
24. Check whether any string literal occurs more than or equal to 4 times: No literals to check in methods
25. Get each constructor declared in the class: No constructors declared
26. Get the body of each constructor: No constructors to get bodies for
27. For each constructor, get all expressions: No constructors to get expressions for
28. For each expression, check whether it is an assignment expression: No expressions to check
29. Get the right operand of the assignment expression: No assignment expressions to get right operands for
30. Check whether the right operand is a string literal: No right operands to check
31. Check whether the length of the string literal is greater than or equal to 3: No right operands to check
32. Count occurrences of each string literal: No literals to count in constructors
33. Check whether any string literal occurs more than or equal to 4 times: No literals to check in constructors

Based on the checks, the string literal "foo" is used in annotations 8 times, which exceeds the threshold of 4. Therefore, this test case violates the rule. The number of violations in this test case is 1, as there is only one string literal that meets the criteria of being duplicated more than or equal to 4 times.
['Get the name of class.', 'Get all annotations declared on the class.', 'Get the name of each annotation.', 'For each annotation, get its arguments.', 'For each argument, check whether it is a string literal.', 'Check whether the length of the string literal is greater than or equal to 3.', 'Count occurrences of each string literal.', 'Check whether any string literal occurs more than or equal to 4 times.', 'Get each field declared in the class.', 'Get the javadoc comment of each field.', 'Get the literal value that the field is initialized to.', 'Check whether the literal value is a string literal.', 'Check whether the length of the string literal is greater than or equal to 3.', 'Count occurrences of each string literal.', 'Check whether any string literal occurs more than or equal to 4 times.', 'Get each method declared in the class.', 'Get the body of each method.', 'For each method, get all expressions.', 'For each expression, check whether it is an assignment expression.', 'Get the right operand of the assignment expression.', 'Check whether the right operand is a string literal.', 'Check whether the length of the string literal is greater than or equal to 3.', 'Count occurrences of each string literal.', 'Check whether any string literal occurs more than or equal to 4 times.', 'Get each constructor declared in the class.', 'Get the body of each constructor.', 'For each constructor, get all expressions.', 'For each expression, check whether it is an assignment expression.', 'Get the right operand of the assignment expression.', 'Check whether the right operand is a string literal.', 'Check whether the length of the string literal is greater than or equal to 3.', 'Count occurrences of each string literal.', 'Check whether any string literal occurs more than or equal to 4 times.', 'Get the name of class: Foo', 'Get all annotations declared on the class: SuppressWarnings', 'Get the name of each annotation: SuppressWarnings', 'For each annotation, get its arguments: "foo"', 'For each argument, check whether it is a string literal: "foo" is a string literal', 'Check whether the length of the string literal is greater than or equal to 3: Length of "foo" is 3, which is not less than 3', 'Count occurrences of each string literal: "foo" occurs 8 times', 'Check whether any string literal occurs more than or equal to 4 times: "foo" occurs 8 times, which meets the threshold', 'Get each field declared in the class: No fields declared', 'Get the javadoc comment of each field: No fields to get comments for', 'Get the literal value that the field is initialized to: No fields to get literal values for', 'Check whether the literal value is a string literal: No fields to check', 'Check whether the length of the string literal is greater than or equal to 3: No fields to check', 'Count occurrences of each string literal: No literals to count in fields', 'Check whether any string literal occurs more than or equal to 4 times: No literals to check in fields', 'Get each method declared in the class: No methods declared', 'Get the body of each method: No methods to get bodies for', 'For each method, get all expressions: No methods to get expressions for', 'For each expression, check whether it is an assignment expression: No expressions to check', 'Get the right operand of the assignment expression: No assignment expressions to get right operands for', 'Check whether the right operand is a string literal: No right operands to check', 'Check whether the length of the string literal is greater than or equal to 3: No right operands to check', 'Count occurrences of each string literal: No literals to count in methods', 'Check whether any string literal occurs more than or equal to 4 times: No literals to check in methods', 'Get each constructor declared in the class: No constructors declared', 'Get the body of each constructor: No constructors to get bodies for', 'For each constructor, get all expressions: No constructors to get expressions for', 'For each expression, check whether it is an assignment expression: No expressions to check', 'Get the right operand of the assignment expression: No assignment expressions to get right operands for', 'Check whether the right operand is a string literal: No right operands to check', 'Check whether the length of the string literal is greater than or equal to 3: No right operands to check', 'Count occurrences of each string literal: No literals to count in constructors', 'Check whether any string literal occurs more than or equal to 4 times: No literals to check in constructors']
['ASTAnnotation', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTAnnotationMemberList', 'JavaPropertyUtil', 'ASTStringLiteral', 'ASTMemberValuePair', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all annotations declared on the class.* 匹配到的元操作或API：
logic: Get all annotations declared on the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.8815022706985474
*Get the name of each annotation.* 匹配到的元操作或API：
logic: Get the name of each annotation.
most similar meta operation: Get the name of annotation declaration
cosine Similarity: 0.8857332468032837
*For each annotation, get its arguments.* 匹配到的元操作或API：
query: For each annotation, get its arguments.
most similar API: for each of annotation
cosine Similarity: 0.8551548719406128
*For each argument, check whether it is a string literal.* 匹配到的元操作或API：
logic: For each argument, check whether it is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.8704662322998047
*Check whether the length of the string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3.
most similar API: length of string literal
cosine Similarity: 0.8233399987220764
*Count occurrences of each string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get each field declared in the class.* 匹配到的元操作或API：
query: Get each field declared in the class.
most similar API: get declarations of class or interface
cosine Similarity: 0.81544429063797
*Get the javadoc comment of each field.* 匹配到的元操作或API：
logic: Get the javadoc comment of each field.
most similar meta operation: Get the javadoc comment of field
cosine Similarity: 0.9571313858032227
*Get the literal value that the field is initialized to.* 匹配到的元操作或API：
logic: Get the literal value that the field is initialized to.
most similar meta operation: Get the literal value that the field is initialized to
cosine Similarity: 0.9854511022567749
*Check whether the literal value is a string literal.* 匹配到的元操作或API：
query: Check whether the literal value is a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.9563462734222412
*Check whether the length of the string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3.
most similar API: length of string literal
cosine Similarity: 0.8233399987220764
*Count occurrences of each string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get each method declared in the class.* 匹配到的元操作或API：
query: Get each method declared in the class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8112685680389404
*Get the body of each method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method, get all expressions.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each expression, check whether it is an assignment expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9825876355171204
*Check whether the right operand is a string literal.* 匹配到的元操作或API：
query: Check whether the right operand is a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8969110250473022
*Check whether the length of the string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3.
most similar API: length of string literal
cosine Similarity: 0.8233399987220764
*Count occurrences of each string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get each constructor declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of each constructor.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each constructor, get all expressions.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each expression, check whether it is an assignment expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9825876355171204
*Check whether the right operand is a string literal.* 匹配到的元操作或API：
query: Check whether the right operand is a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8969110250473022
*Check whether the length of the string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3.
most similar API: length of string literal
cosine Similarity: 0.8233399987220764
*Count occurrences of each string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class: Foo* 匹配到的元操作或API：
logic: Get the name of class: Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9263077974319458
*Get all annotations declared on the class: SuppressWarnings* 匹配到的元操作或API：
query: Get all annotations declared on the class: SuppressWarnings
most similar API: get declared annotations of class or interface
cosine Similarity: 0.8516947031021118
*Get the name of each annotation: SuppressWarnings* 匹配到的元操作或API：
logic: Get the name of each annotation: SuppressWarnings
most similar meta operation: Get the name of annotation declaration
cosine Similarity: 0.858708381652832
*For each annotation, get its arguments: "foo"* 匹配到的元操作或API：
query: For each annotation, get its arguments: "foo"
most similar API: for each of annotation
cosine Similarity: 0.8299433588981628
*For each argument, check whether it is a string literal: "foo" is a string literal* 匹配到的元操作或API：
logic: For each argument, check whether it is a string literal: "foo" is a string literal
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.8697619438171387
*Check whether the length of the string literal is greater than or equal to 3: Length of "foo" is 3, which is not less than 3* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3: Length of "foo" is 3, which is not less than 3
most similar API: length of string literal
cosine Similarity: 0.8503302335739136
*Count occurrences of each string literal: "foo" occurs 8 times* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times: "foo" occurs 8 times, which meets the threshold* 匹配到的元操作或API：
未匹配成功元操作或API
*Get each field declared in the class: No fields declared* 匹配到的元操作或API：
query: Get each field declared in the class: No fields declared
most similar API: get declarations of class or interface
cosine Similarity: 0.8086763620376587
*Get the javadoc comment of each field: No fields to get comments for* 匹配到的元操作或API：
logic: Get the javadoc comment of each field: No fields to get comments for
most similar meta operation: Get the javadoc comment of field
cosine Similarity: 0.9353328943252563
*Get the literal value that the field is initialized to: No fields to get literal values for* 匹配到的元操作或API：
logic: Get the literal value that the field is initialized to: No fields to get literal values for
most similar meta operation: Get the literal value that the field is initialized to
cosine Similarity: 0.9679157733917236
*Check whether the literal value is a string literal: No fields to check* 匹配到的元操作或API：
query: Check whether the literal value is a string literal: No fields to check
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.9235049486160278
*Check whether the length of the string literal is greater than or equal to 3: No fields to check* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3: No fields to check
most similar API: length of string literal
cosine Similarity: 0.8388488292694092
*Count occurrences of each string literal: No literals to count in fields* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times: No literals to check in fields* 匹配到的元操作或API：
query: Check whether any string literal occurs more than or equal to 4 times: No literals to check in fields
most similar API: Check whether the string literal is double literal
cosine Similarity: 0.8024814128875732
*Get each method declared in the class: No methods declared* 匹配到的元操作或API：
query: Get each method declared in the class: No methods declared
most similar API: get declarations of class or interface
cosine Similarity: 0.8108749389648438
*Get the body of each method: No methods to get bodies for* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method, get all expressions: No methods to get expressions for* 匹配到的元操作或API：
未匹配成功元操作或API
*For each expression, check whether it is an assignment expression: No expressions to check* 匹配到的元操作或API：
query: For each expression, check whether it is an assignment expression: No expressions to check
most similar API: Check whether the string literal is expression
cosine Similarity: 0.8058696389198303
*Get the right operand of the assignment expression: No assignment expressions to get right operands for* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression: No assignment expressions to get right operands for
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9543603658676147
*Check whether the right operand is a string literal: No right operands to check* 匹配到的元操作或API：
query: Check whether the right operand is a string literal: No right operands to check
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8692173957824707
*Check whether the length of the string literal is greater than or equal to 3: No right operands to check* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3: No right operands to check
most similar API: length of string literal
cosine Similarity: 0.8358937501907349
*Count occurrences of each string literal: No literals to count in methods* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times: No literals to check in methods* 匹配到的元操作或API：
query: Check whether any string literal occurs more than or equal to 4 times: No literals to check in methods
most similar API: Check whether the string literal is double literal
cosine Similarity: 0.8088634014129639
*Get each constructor declared in the class: No constructors declared* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of each constructor: No constructors to get bodies for* 匹配到的元操作或API：
未匹配成功元操作或API
*For each constructor, get all expressions: No constructors to get expressions for* 匹配到的元操作或API：
未匹配成功元操作或API
*For each expression, check whether it is an assignment expression: No expressions to check* 匹配到的元操作或API：
query: For each expression, check whether it is an assignment expression: No expressions to check
most similar API: Check whether the string literal is expression
cosine Similarity: 0.8058696389198303
*Get the right operand of the assignment expression: No assignment expressions to get right operands for* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression: No assignment expressions to get right operands for
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9543603658676147
*Check whether the right operand is a string literal: No right operands to check* 匹配到的元操作或API：
query: Check whether the right operand is a string literal: No right operands to check
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8692173957824707
*Check whether the length of the string literal is greater than or equal to 3: No right operands to check* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3: No right operands to check
most similar API: length of string literal
cosine Similarity: 0.8358937501907349
*Count occurrences of each string literal: No literals to count in constructors* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs more than or equal to 4 times: No literals to check in constructors* 匹配到的元操作或API：
query: Check whether any string literal occurs more than or equal to 4 times: No literals to check in constructors
most similar API: Check whether the string literal is double literal
cosine Similarity: 0.8167485594749451
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
  ——ASTClassOrInterfaceBody


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public java.lang.String getSimpleName()
4. net.sourceforge.pmd.lang.java.ast.ASTAnnotation: public void forEach(java.util.function.Consumer)
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.
6. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
8. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
10. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isDoubleLiteral(), //Returns true if this is a {@linkplain ASTNumericLiteral double literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the argument is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return TypeTestUtil.isA(String.class, expression.getTypeMirror());
}
```
2.  //Get the literal value that the field is initialized to
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTLiteral;
import net.sourceforge.pmd.lang.ast.NodeStream;
public ASTLiteral getInitializedValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTLiteral) {
                    return (ASTLiteral)init;
                }
            }
        }
    }
    return null;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        node.getDeclaredAnnotations().forEach(annotation -> {
            annotation.forEach(memberValuePair -> {
                ASTExpression expression = memberValuePair.getExpression();
                if (expression instanceof ASTStringLiteral) {
                    ASTStringLiteral stringLiteral = (ASTStringLiteral) expression;
                    if (stringLiteral.length() >= 3) {
                        String value = stringLiteral.getImage();
                        literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
                        if (literalCounts.get(value) >= 4) {
                            addViolation(data, stringLiteral);
                        }
                    }
                }
            });
        });
        return super.visit(node, data);
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
To analyze the test case for the given rule, we need to focus on the string literals used in the annotations and check whether they meet the criteria for being considered a violation.

1. Get the number of declared annotations of class.
2. Get a declared annotation of class.
3. Check whether the annotation is a SuppressWarnings annotation.
4. Get the value of the SuppressWarnings annotation.
5. Check whether the value of the SuppressWarnings annotation is a string literal.
6. Check whether the length of the string literal is greater than or equal to 3.
7. Count the occurrences of each string literal in SuppressWarnings annotations.
8. Check whether any string literal occurs 4 or more times.

In this test case, the SuppressWarnings annotation is used multiple times with the same string literal "foo". We will perform the following checks:

1. Get the number of declared annotations of class.
    - The number of declared annotations is 8.
2. Get a declared annotation of class.
    - The first annotation is SuppressWarnings("foo").
3. Check whether the annotation is a SuppressWarnings annotation.
    - It is a SuppressWarnings annotation.
4. Get the value of the SuppressWarnings annotation.
    - The value is "foo".
5. Check whether the value of the SuppressWarnings annotation is a string literal.
    - The value is indeed a string literal.
6. Check whether the length of the string literal is greater than or equal to 3.
    - The length of "foo" is 3, which meets the threshold.
7. Count the occurrences of each string literal in SuppressWarnings annotations.
    - The string literal "foo" occurs 8 times.
8. Check whether any string literal occurs 4 or more times.
    - The string literal "foo" occurs 8 times, which is more than 4.

Since the string literal "foo" occurs more than 4 times in the SuppressWarnings annotations, this test case violates the rule.
The number of violating the rule in this test case is: 1
['Get the number of declared annotations of class.', 'Get a declared annotation of class.', 'Check whether the annotation is a SuppressWarnings annotation.', 'Get the value of the SuppressWarnings annotation.', 'Check whether the value of the SuppressWarnings annotation is a string literal.', 'Check whether the length of the string literal is greater than or equal to 3.', 'Count the occurrences of each string literal in SuppressWarnings annotations.', 'Check whether any string literal occurs 4 or more times.', 'Get the number of declared annotations of class.', 'Get a declared annotation of class.', 'Check whether the annotation is a SuppressWarnings annotation.', 'Get the value of the SuppressWarnings annotation.', 'Check whether the value of the SuppressWarnings annotation is a string literal.', 'Check whether the length of the string literal is greater than or equal to 3.', 'Count the occurrences of each string literal in SuppressWarnings annotations.', 'Check whether any string literal occurs 4 or more times.']
['ASTAnnotation', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTAnnotationMemberList', 'JavaPropertyUtil', 'ASTStringLiteral', 'ASTMemberValuePair', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the number of declared annotations of class.* 匹配到的元操作或API：
logic: Get the number of declared annotations of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.8682510852813721
*Get a declared annotation of class.* 匹配到的元操作或API：
logic: Get a declared annotation of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.987838864326477
*Check whether the annotation is a SuppressWarnings annotation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the value of the SuppressWarnings annotation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the value of the SuppressWarnings annotation is a string literal.* 匹配到的元操作或API：
query: Check whether the value of the SuppressWarnings annotation is a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8197779655456543
*Check whether the length of the string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3.
most similar API: length of string literal
cosine Similarity: 0.8233399987220764
*Count the occurrences of each string literal in SuppressWarnings annotations.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs 4 or more times.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the number of declared annotations of class.* 匹配到的元操作或API：
logic: Get the number of declared annotations of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.8682510852813721
*Get a declared annotation of class.* 匹配到的元操作或API：
logic: Get a declared annotation of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.987838864326477
*Check whether the annotation is a SuppressWarnings annotation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the value of the SuppressWarnings annotation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the value of the SuppressWarnings annotation is a string literal.* 匹配到的元操作或API：
query: Check whether the value of the SuppressWarnings annotation is a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8197779655456543
*Check whether the length of the string literal is greater than or equal to 3.* 匹配到的元操作或API：
query: Check whether the length of the string literal is greater than or equal to 3.
most similar API: length of string literal
cosine Similarity: 0.8233399987220764
*Count the occurrences of each string literal in SuppressWarnings annotations.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs 4 or more times.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
  ——ASTClassOrInterfaceBody


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.



================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        node.getDeclaredAnnotations().forEach(annotation -> {
            annotation.getAnnotationMemberList().ifPresent(memberList -> {
                memberList.forEach(pair -> {
                    if (pair.isValuePresent() && pair.getValue() instanceof ASTStringLiteral) {
                        ASTStringLiteral literal = (ASTStringLiteral) pair.getValue();
                        if (literal.length() >= 3) {
                            String value = literal.getImage();
                            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
                            if (literalCounts.get(value) >= 4) {
                                addViolation(data, literal);
                            }
                        }
                    }
                });
            });
        });
        return super.visit(node, data);
    }

    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
编译是否通过？
False
编译错误不在预期范围内，重新生成
迭代测试用例时， 2轮内编译不通过，pass，重新来一轮编译修复生成修复测试用例后的checker
=========================error_testcase_logics=========================
To analyze the adherence of the given test case to the rule, we need to focus on the String literals used in annotations and see if they exceed the threshold of 4.

1. Get the name of class.
2. Get the declared annotations of class.
3. Check whether the class has `@SuppressWarnings` annotation.
4. Get the number of `@SuppressWarnings` annotations.
5. For each `@SuppressWarnings` annotation:
   - Get the argument of `@SuppressWarnings` annotation.
6. Check whether the argument is a string literal.
7. Get the length of string literal.
8. Check whether the length of string literal is 3 or more.
9. Count the occurrences of each string literal used in `@SuppressWarnings` annotations.
10. Check whether any string literal occurs 4 or more times and has a length of 3 or more.

In this specific test case:
- The class `Foo` has multiple `@SuppressWarnings` annotations.
- Each `@SuppressWarnings` annotation uses the string literal `"foo"`.
- The length of the string literal `"foo"` is 3 or more.
- The string literal `"foo"` occurs 8 times, which exceeds the threshold of 4.

Thus, the test case violates the rule because the string literal `"foo"` is used as an argument in `@SuppressWarnings` annotations more than 4 times.
['Get the name of class.', 'Get the declared annotations of class.', 'Check whether the class has `@SuppressWarnings` annotation.', 'Get the number of `@SuppressWarnings` annotations.', 'For each `@SuppressWarnings` annotation:', 'Check whether the argument is a string literal.', 'Get the length of string literal.', 'Check whether the length of string literal is 3 or more.', 'Count the occurrences of each string literal used in `@SuppressWarnings` annotations.', 'Check whether any string literal occurs 4 or more times and has a length of 3 or more.']
['ASTAnnotation', 'JavaAstUtils', 'AstImplUtil', 'ASTCompilationUnit', 'JavaRuleUtil', 'SymbolResolutionPass', 'TypesFromReflection', 'TestFrameworksUtil', 'TypesFromAst', 'SymbolicValueHelper', 'CommentAssignmentPass', 'ASTAnnotationMemberList', 'JavaPropertyUtil', 'ASTStringLiteral', 'ASTMemberValuePair', 'JavaSemanticErrors', 'ASTModifierList', 'InternalApiBridge', 'TypeConversion', 'ASTClassOrInterfaceDeclaration', 'JavadocTag', 'ClassNamesUtil', 'TokenUtils', 'ASTClassOrInterfaceType', 'ASTClassOrInterfaceBody', 'TypeTestUtil']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the declared annotations of class.* 匹配到的元操作或API：
logic: Get the declared annotations of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9313310384750366
*Check whether the class has `@SuppressWarnings` annotation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the number of `@SuppressWarnings` annotations.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each `@SuppressWarnings` annotation:* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Get the length of string literal.* 匹配到的元操作或API：
logic: Get the length of string literal.
most similar meta operation: Get the length of string literal
cosine Similarity: 0.9875898361206055
*Check whether the length of string literal is 3 or more.* 匹配到的元操作或API：
query: Check whether the length of string literal is 3 or more.
most similar API: length of string literal
cosine Similarity: 0.8466029167175293
*Count the occurrences of each string literal used in `@SuppressWarnings` annotations.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any string literal occurs 4 or more times and has a length of 3 or more.* 匹配到的元操作或API：
未匹配成功元操作或API
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Method to check whether the argument is string type
    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        // Select which argument to judge (for example, the first argument)
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}


This checker is failed(false negative) on this negative test case:
```
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
    ——ASTAnnotation
      ——ASTClassOrInterfaceType (this is a class type)
      ——ASTAnnotationMemberList
        ——ASTMemberValuePair
          ——ASTStringLiteral
  ——ASTClassOrInterfaceBody


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
3. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length()
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length(), //Length of the constant value in characters.

1.  //Check whether the argument is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return TypeTestUtil.isA(String.class, expression.getTypeMirror());
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTStringLiteral.class);
    }

    private Map<String, Integer> literalCounts = new HashMap<>();

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.length() >= 3) {
            String value = node.getImage();
            literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
            if (literalCounts.get(value) >= 4) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
        annotations.forEach(annotation -> {
            NodeStream<ASTMemberValuePair> pairs = annotation.children(ASTMemberValuePair.class);
            pairs.forEach(pair -> {
                ASTStringLiteral literal = pair.getFirstChildOfType(ASTStringLiteral.class);
                if (literal != null && literal.length() >= 3) {
                    String value = literal.getImage();
                    literalCounts.put(value, literalCounts.getOrDefault(value, 0) + 1);
                    if (literalCounts.get(value) >= 4) {
                        addViolation(data, literal);
                    }
                }
            });
        });
        return super.visit(node, data);
    }

    public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
        ASTArgumentList astArgumentList = node.getArguments();
        ASTExpression expression = astArgumentList.get(0);
        return TypeTestUtil.isA(String.class, expression.getTypeMirror());
    }
}
编译是否通过？
True
测试是否通过
False
[{'error_rules_info': '[ERROR]   "bad 3" resulted in wrong number of failures, ==> expected: <1> but was: <5>'}]
修复后有没通过的测试用例，不通过的是：
[ERROR]   "bad 3" resulted in wrong number of failures, ==> expected: <1> but was: <5>不通过
==========5轮都没修复成功一个后面新加的一个测试用例，换一个测试用例进行修复
这个测试用例 5 round 没有修复成功：
bad 3
测试用例全部通过
最终通过 9 个测试用例
正例 3 个
反例 6 个
输入token：681957
输出token：448097
结束

规则执行完毕，时间总花销： 2165.6401438713074 秒
