开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
1951
1549
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of constructor.
2. Get the signature of constructor.
3. Get the body of constructor.
4. Get all assignment expressions in the body of constructor.
5. For each assignment expression, get the left operand.
6. Check whether the left operand is an accessed field.
7. Check whether the accessed field is static.
8. Check whether the accessed field is final.
9. If the left operand is a static field and the field is not final, then this test case violates the rule.

Let's apply these checks to the provided test case:

1. Get the name of constructor.
   - The name of constructor is `Foo`.

2. Get the signature of constructor.
   - The signature of constructor is `Foo(int y)`.

3. Get the body of constructor.
   - The body of constructor is `{ x = y; }`.

4. Get all assignment expressions in the body of constructor.
   - There is one assignment expression: `x = y`.

5. For each assignment expression, get the left operand.
   - The left operand of the assignment expression `x = y` is `x`.

6. Check whether the left operand is an accessed field.
   - Yes, `x` is an accessed field.

7. Check whether the accessed field is static.
   - Yes, `x` is a static field.

8. Check whether the accessed field is final.
   - No, `x` is not a final field.

9. If the left operand is a static field and the field is not final, then this test case violates the rule.
   - The left operand `x` is a static field and it is not final, so this test case violates the rule.

The number of violations in this test case is 1, as described.
['Get the name of constructor.', 'Get the signature of constructor.', 'Get the body of constructor.', 'Get all assignment expressions in the body of constructor.', 'For each assignment expression, get the left operand.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'If the left operand is a static field and the field is not final, then this test case violates the rule.', 'Get the name of constructor.', 'Get the signature of constructor.', 'Get the body of constructor.', 'Get all assignment expressions in the body of constructor.', 'For each assignment expression, get the left operand.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'If the left operand is a static field and the field is not final, then this test case violates the rule.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the body of constructor.* 匹配到的元操作或API：
query: Get all assignment expressions in the body of constructor.
most similar API: get text of assignment expression
cosine Similarity: 0.8435423970222473
*For each assignment expression, get the left operand.* 匹配到的元操作或API：
logic: For each assignment expression, get the left operand.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9615442752838135
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*If the left operand is a static field and the field is not final, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the body of constructor.* 匹配到的元操作或API：
query: Get all assignment expressions in the body of constructor.
most similar API: get text of assignment expression
cosine Similarity: 0.8435423970222473
*For each assignment expression, get the left operand.* 匹配到的元操作或API：
logic: For each assignment expression, get the left operand.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9615442752838135
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*If the left operand is a static field and the field is not final, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JFieldSymbol fieldSym = (JFieldSymbol) leftOperand.getReferencedSym();
            if (fieldSym.isStatic() && !fieldSym.isFinal() && node.getNthParent(1) instanceof ASTConstructorDeclaration) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            JFieldSymbol fieldSym = (JFieldSymbol) sym;
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
False
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of constructor.
        2. Get the signature of constructor.
        3. Get the number of formal parameters of constructor.
        4. Get a formal parameter of constructor.
        5. Get the type of formal parameter.
        6. Get the name of formal parameter.
        7. Get all statements in constructor.
        8. Check whether a statement is an assignment expression.
        9. Get the left operand of the assignment expression.
        10. Check whether the left operand is a field.
        11. Check whether the field is static.
        12. Check whether the field is final.
        If the left operand of the assignment expression is a static field and the field is not final, then this test case violates the rule.
            
['Get the name of constructor.', 'Get the signature of constructor.', 'Get the number of formal parameters of constructor.', 'Get a formal parameter of constructor.', 'Get the type of formal parameter.', 'Get the name of formal parameter.', 'Get all statements in constructor.', 'Check whether a statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is a field.', 'Check whether the field is static.', 'Check whether the field is final.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865633845329285
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.98207688331604
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9854808449745178
*Get the name of formal parameter.* 匹配到的元操作或API：
logic: Get the name of formal parameter.
most similar meta operation: Get the name of formal parameter
cosine Similarity: 0.9837440252304077
*Get all statements in constructor.* 匹配到的元操作或API：
query: Get all statements in constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8114529252052307
*Check whether a statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether a statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9499269723892212
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is a field.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
4. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Get the name of formal parameter
```java
import net.sourceforge.pmd.lang.java.ast.*;
public String getFormalParameterName(ASTFormalParameter node) {
    return node.getVarId().getName();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTAssignmentExpression.class, ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        NodeStream<ASTFieldDeclaration> staticFields = node.children(ASTFieldDeclaration.class)
                .filter(ASTFieldDeclaration::isStatic)
                .filter(field -> !field.isFinal());
        staticFields.forEach(field -> {
            node.descendants(ASTAssignmentExpression.class)
                    .filter(assign -> assign.getLeftOperand() instanceof ASTVariableAccess)
                    .filter(assign -> ((ASTVariableAccess) assign.getLeftOperand()).getName().equals(field.getVarId().getName()))
                    .forEach(assign -> addViolation(data, assign));
        });
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        return super.visit(node, data);
    }

    // Get the number of formal parameters of constructor
    public int getFormalParametersNumber(ASTConstructorDeclaration node) {
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }

    // Get the name of formal parameter
    public String getFormalParameterName(ASTFormalParameter node) {
        return node.getVarId().getName();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get the formal parameters of the constructor.
4. Get the number of formal parameters of the constructor.
5. Get the body of the constructor.
6. Get all assignment expressions in the constructor body.
7. Get the left-hand side operand of assignment expression.
8. Check whether the left-hand side operand is an accessed field.
9. Check whether the accessed field is static.
10. Check whether the accessed field is final.
11. Check whether the right-hand side operand of assignment expression is a variable.
12. Get the name of right-hand side variable operand.

If the left-hand side operand of an assignment expression in the constructor body is a static field and it is not final, then this test case violates the rule. In this specific test case:

7. Get all assignment expressions in the constructor body.
    - The assignment expression is `x = y;`.
8. Get the left-hand side operand of assignment expression.
    - The left-hand side operand is `x`.
9. Check whether the left-hand side operand is an accessed field.
    - `x` is an accessed field.
10. Check whether the accessed field is static.
    - `x` is a static field.
11. Check whether the accessed field is final.
    - `x` is not a final field.
Thus, this test case violates the rule once.
['Get the name of the class.', 'Get the name of the constructor.', 'Get the formal parameters of the constructor.', 'Get the number of formal parameters of the constructor.', 'Get the body of the constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left-hand side operand of assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Check whether the right-hand side operand of assignment expression is a variable.', 'Get the name of right-hand side variable operand.', 'Get all assignment expressions in the constructor body.', 'Get the left-hand side operand of assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Get the formal parameters of the constructor.* 匹配到的元操作或API：
logic: Get the formal parameters of the constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9252001643180847
*Get the number of formal parameters of the constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of the constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9820090532302856
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654065370559692
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left-hand side operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9676914215087891
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Check whether the right-hand side operand of assignment expression is a variable.* 匹配到的元操作或API：
query: Check whether the right-hand side operand of assignment expression is a variable.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8576458692550659
*Get the name of right-hand side variable operand.* 匹配到的元操作或API：
query: Get the name of right-hand side variable operand.
most similar API: get right operand of assignment expression: Returns the right-hand side operand.
cosine Similarity: 0.85752934217453
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left-hand side operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9676914215087891
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
10. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
11. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTExpression leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess varAccess = (ASTVariableAccess) leftOperand;
            JavaFieldSymbol symbol = varAccess.getSymbol();
            if (symbol != null && symbol.isStatic() && !symbol.isFinal()) {
                ASTConstructorDeclaration constructor = node.getNthParent(ASTConstructorDeclaration.class, 0);
                if (constructor != null) {
                    // Example usage of the getFormalParametersNumber method
                    int parameterCount = getFormalParametersNumber(constructor);
                    // You can add logic here based on the parameter count if needed
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    // Get the number of formal parameters of constructor
    public int getFormalParametersNumber(ASTConstructorDeclaration node) {
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Check whether the constructor has an assignment expression.
4. Get the left operand of the assignment expression.
5. Check whether the left operand is an accessed variable.
6. Check whether the accessed variable is static.
7. Check whether the accessed variable is final.
8. If the left operand of the assignment expression is a static non-final field, then this test case violates the rule.

Applying these checks to your test case:

1. Get the name of the class.
   - The name of the class is `Foo`.

2. Get the name of the constructor.
   - The name of the constructor is `Foo`.

3. Check whether the constructor has an assignment expression.
   - The constructor has an assignment expression `x = y;`.

4. Get the left operand of the assignment expression.
   - The left operand of the assignment expression is `x`.

5. Check whether the left operand is an accessed variable.
   - `x` is an accessed variable.

6. Check whether the accessed variable is static.
   - The field `x` is static.

7. Check whether the accessed variable is final.
   - The field `x` is not final.

8. If the left operand of the assignment expression is a static non-final field, then this test case violates the rule.
   - Since `x` is a static non-final field, the test case violates the rule.

The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

This confirms the rule violation as described.
['Get the name of the class.', 'Get the name of the constructor.', 'Check whether the constructor has an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'If the left operand of the assignment expression is a static non-final field, then this test case violates the rule.', 'Get the name of the class.', 'Get the name of the constructor.', 'Check whether the constructor has an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'If the left operand of the assignment expression is a static non-final field, then this test case violates the rule.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Check whether the constructor has an assignment expression.* 匹配到的元操作或API：
query: Check whether the constructor has an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9229412078857422
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is an accessed variable.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed variable.
most similar meta operation: Check whether the accessed variable is double type
cosine Similarity: 0.8555494546890259
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*If the left operand of the assignment expression is a static non-final field, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Check whether the constructor has an assignment expression.* 匹配到的元操作或API：
query: Check whether the constructor has an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9229412078857422
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is an accessed variable.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed variable.
most similar meta operation: Check whether the accessed variable is double type
cosine Similarity: 0.8555494546890259
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*If the left operand of the assignment expression is a static non-final field, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()

1.  //Check whether the accessed variable is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
    return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
2.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
3.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess varAccess = node.getLeftOperand();
        if (varAccess != null && isVariableAccessStatic(varAccess) && !isVariableAccessFinal(varAccess)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym != null && sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        return symbol.isFinal();
    }

    // Check whether the accessed variable is double type
    public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of class.
2. Get the name of constructor.
3. Get the signature of constructor.
4. Get all statements in the constructor body.
5. Check whether the statement is an assignment expression.
6. Get the left operand of the assignment expression.
7. Check whether the left operand is a field.
8. Check whether the field is static.
9. Check whether the field is final.

In this test case:
1. The name of the class is Foo.
2. The name of the constructor is Foo.
3. The signature of the constructor is Foo(int y).
4. Get all statements in the constructor body: x = y;
5. Check whether the statement is an assignment expression: true.
6. Get the left operand of the assignment expression: x.
7. Check whether the left operand is a field: true.
8. Check whether the field is static: true.
9. Check whether the field is final: false.

Since the left operand of the assignment expression is a static field (x) and it is not final, this test case violates the rule.
['Get the name of class.', 'Get the name of constructor.', 'Get the signature of constructor.', 'Get all statements in the constructor body.', 'Check whether the statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is a field.', 'Check whether the field is static.', 'Check whether the field is final.', 'The name of the class is Foo.', 'The name of the constructor is Foo.', 'The signature of the constructor is Foo(int y).', 'Get all statements in the constructor body: x = y;', 'Check whether the statement is an assignment expression: true.', 'Get the left operand of the assignment expression: x.', 'Check whether the left operand is a field: true.', 'Check whether the field is static: true.', 'Check whether the field is final: false.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get all statements in the constructor body.* 匹配到的元操作或API：
query: Get all statements in the constructor body.
most similar API: get body of constructor
cosine Similarity: 0.8038371205329895
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503116607666016
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is a field.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*The name of the class is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The name of the constructor is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The signature of the constructor is Foo(int y).* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all statements in the constructor body: x = y;* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the statement is an assignment expression: true.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression: true.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9191214442253113
*Get the left operand of the assignment expression: x.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression: x.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9426003694534302
*Check whether the left operand is a field: true.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is static: true.* 匹配到的元操作或API：
logic: Check whether the field is static: true.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9537637829780579
*Check whether the field is final: false.* 匹配到的元操作或API：
logic: Check whether the field is final: false.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9333531856536865
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 1
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTVariableAccess) {
            ASTVariableAccess variableAccess = (ASTVariableAccess) leftOperand;
            JavaNode parentNode = variableAccess.getParent();
            if (parentNode instanceof ASTFieldDeclaration) {
                ASTFieldDeclaration fieldDeclaration = (ASTFieldDeclaration) parentNode;
                if (fieldDeclaration.isStatic() && !fieldDeclaration.isFinal()) {
                    // Check if the assignment is in a constructor
                    JavaNode constructorNode = node.getNthParent(2);
                    if (constructorNode instanceof ASTConstructorDeclaration) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
False
5轮生成的都没通过第一个测试用例，删除此测试用例，换一个生成first checker
删除此测试用例: bad 1
2135
1701
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of class.
        2. Check whether the class is public.
        3. Get a field declared in class.
        4. Check whether the field is static.
        5. Check whether the field is final.
        6. Get the constructor of class.
        7. Get the body of constructor.
        8. Get an assignment expression in the constructor body.
        9. Get the left-hand side operand of the assignment expression.
        10. Check whether the left-hand side operand is an accessed field.
        11. Get the variable declaration of the accessed variable.
        12. Check whether the accessed variable is static.
        13. Check whether the accessed variable is final.
        If the assignment expression in the constructor body assigns a value to a static field and that field is not final, then this test case violates the rule.
        
In the provided test case:
1. Get the name of class.
        - Class name is Foo.
2. Check whether the class is public.
        - The class is public.
3. Get a field declared in class.
        - Field is x.
4. Check whether the field is static.
        - Field x is static.
5. Check whether the field is final.
        - Field x is not final.
6. Get the constructor of class.
        - Constructor is Foo(int y).
7. Get the body of constructor.
        - Constructor body contains the statement: this.x = y;
8. Get an assignment expression in the constructor body.
        - Assignment expression is: this.x = y;
9. Get the left-hand side operand of the assignment expression.
        - Left-hand side operand is: this.x.
10. Check whether the left-hand side operand is an accessed field.
        - The left-hand side operand is an accessed field.
11. Get the variable declaration of the accessed variable.
        - Variable declaration is: static int x;
12. Check whether the accessed variable is static.
        - The accessed variable is static.
13. Check whether the accessed variable is final.
        - The accessed variable is not final.

Since the constructor body contains an assignment to a non-final static field, the test case violates the rule.
['Get the name of class.', 'Check whether the class is public.', 'Get a field declared in class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the constructor of class.', 'Get the body of constructor.', 'Get an assignment expression in the constructor body.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Get the variable declaration of the accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'Get the name of class.', 'Check whether the class is public.', 'Get a field declared in class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get the constructor of class.', 'Get the body of constructor.', 'Get an assignment expression in the constructor body.', 'Get the left-hand side operand of the assignment expression.', 'Check whether the left-hand side operand is an accessed field.', 'Get the variable declaration of the accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTFieldAccess', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'ASTThisExpression', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get a field declared in class.* 匹配到的元操作或API：
logic: Get a field declared in class.
most similar meta operation: Get a declared annotation of field
cosine Similarity: 0.8693640828132629
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get the constructor of class.* 匹配到的元操作或API：
query: Get the constructor of class.
most similar API: get class of constructor
cosine Similarity: 0.8697570562362671
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get an assignment expression in the constructor body.* 匹配到的元操作或API：
query: Get an assignment expression in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8719537258148193
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get a field declared in class.* 匹配到的元操作或API：
logic: Get a field declared in class.
most similar meta operation: Get a declared annotation of field
cosine Similarity: 0.8693640828132629
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get the constructor of class.* 匹配到的元操作或API：
query: Get the constructor of class.
most similar API: get class of constructor
cosine Similarity: 0.8697570562362671
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get an assignment expression in the constructor body.* 匹配到的元操作或API：
query: Get an assignment expression in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8719537258148193
*Get the left-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9638152122497559
*Check whether the left-hand side operand is an accessed field.* 匹配到的元操作或API：
query: Check whether the left-hand side operand is an accessed field.
most similar API: Check whether is this field access
cosine Similarity: 0.8519314527511597
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The description of this test case is: bad 2
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.Class<Class<?> getClass()
7. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
10. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).

1.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
2.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
3.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            if (JavaAstUtils.isThisFieldAccess(fieldAccess)) {
                ASTVariableAccess variableAccess = fieldAccess.getFieldName();
                if (isVariableAccessStatic(variableAccess) && !isVariableAccessFinal(variableAccess)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    // Get the variable declaration of the accessed variable
    public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null) {
            ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
            return declaratorId;
        }
        return null;
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym != null && sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol != null && symbol.isFinal()) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the constructor of the class.
3. Get the signature of the constructor.
4. Get the body of the constructor.
5. Check whether the constructor has an assignment expression.
6. Get the left operand of the assignment expression.
7. Check whether the left operand is an accessed variable.
8. Check whether the accessed variable is static.
9. Check whether the accessed variable is final.
10. Get the type of the accessed variable.
11. Get the right operand of the assignment expression.

1. Get the name of the class.
2. Get the constructor of the class.
3. Get the signature of the constructor.
4. Get the body of the constructor.
5. Check whether the constructor has an assignment expression. // This will be true for the provided test case.
6. Get the left operand of the assignment expression. // Here, the left operand is 'x'.
7. Check whether the left operand is an accessed variable. // This will be true for 'x'.
8. Check whether the accessed variable is static. // This will be true for 'x'.
9. Check whether the accessed variable is final. // This will be false for 'x'.
10. Get the type of the accessed variable. // This will be 'int'.
11. Get the right operand of the assignment expression. // Here, the right operand is 'y'.

In this test case, the left operand of the assignment expression in the constructor is a static field 'x', which is not final, and it is being assigned a value from the constructor parameter 'y'. Since the rule specifically mentions "non-final static fields," this test case adheres to the rule because the static field 'x' is not final. Therefore, there is no violation in the provided test case based on the given rule.
['Get the name of the class.', 'Get the constructor of the class.', 'Get the signature of the constructor.', 'Get the body of the constructor.', 'Check whether the constructor has an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed variable.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'Get the type of the accessed variable.', 'Get the right operand of the assignment expression.', 'Get the name of the class.', 'Get the constructor of the class.', 'Get the signature of the constructor.', 'Get the body of the constructor.', 'Check whether the constructor has an assignment expression. // This will be true for the provided test case.', "Get the left operand of the assignment expression. // Here, the left operand is 'x'.", "Check whether the left operand is an accessed variable. // This will be true for 'x'.", "Check whether the accessed variable is static. // This will be true for 'x'.", "Check whether the accessed variable is final. // This will be false for 'x'.", "Get the type of the accessed variable. // This will be 'int'.", "Get the right operand of the assignment expression. // Here, the right operand is 'y'."]
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTFieldAccess', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'ASTThisExpression', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the constructor of the class.* 匹配到的元操作或API：
query: Get the constructor of the class.
most similar API: get class of constructor
cosine Similarity: 0.8561633825302124
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732561707496643
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654065370559692
*Check whether the constructor has an assignment expression.* 匹配到的元操作或API：
query: Check whether the constructor has an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9229412078857422
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is an accessed variable.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed variable.
most similar meta operation: Check whether the accessed variable is double type
cosine Similarity: 0.8555494546890259
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*Get the type of the accessed variable.* 匹配到的元操作或API：
logic: Get the type of the accessed variable.
most similar meta operation: Get the type of accessed variable
cosine Similarity: 0.9793800115585327
*Get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9825876355171204
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the constructor of the class.* 匹配到的元操作或API：
query: Get the constructor of the class.
most similar API: get class of constructor
cosine Similarity: 0.8561633825302124
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732561707496643
*Get the body of the constructor.* 匹配到的元操作或API：
query: Get the body of the constructor.
most similar API: get body of constructor
cosine Similarity: 0.9654065370559692
*Check whether the constructor has an assignment expression. // This will be true for the provided test case.* 匹配到的元操作或API：
query: Check whether the constructor has an assignment expression. // This will be true for the provided test case.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8836339712142944
*Get the left operand of the assignment expression. // Here, the left operand is 'x'.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression. // Here, the left operand is 'x'.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.944035530090332
*Check whether the left operand is an accessed variable. // This will be true for 'x'.* 匹配到的元操作或API：
query: Check whether the left operand is an accessed variable. // This will be true for 'x'.
most similar API: Check whether the variable access is expression
cosine Similarity: 0.8119191527366638
*Check whether the accessed variable is static. // This will be true for 'x'.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static. // This will be true for 'x'.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9376163482666016
*Check whether the accessed variable is final. // This will be false for 'x'.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final. // This will be false for 'x'.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.946256160736084
*Get the type of the accessed variable. // This will be 'int'.* 匹配到的元操作或API：
logic: Get the type of the accessed variable. // This will be 'int'.
most similar meta operation: Get the type of accessed variable
cosine Similarity: 0.9090827703475952
*Get the right operand of the assignment expression. // Here, the right operand is 'y'.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression. // Here, the right operand is 'y'.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.92998868227005
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The description of this test case is: bad 2
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.Class<Class<?> getClass()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
9. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the accessed variable is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isVariableAccessDoubleType(ASTVariableAccess var) {
    return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
2.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
3.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            ASTVariableDeclaratorId variableDeclaratorId = fieldAccess.getFieldName();
            if (variableDeclaratorId != null) {
                JVariableSymbol variableSymbol = variableDeclaratorId.getReferencedSym();
                if (variableSymbol != null && isVariableAccessStatic(variableDeclaratorId) && !isVariableAccessFinal(variableDeclaratorId)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is double type
    private boolean isVariableAccessDoubleType(ASTVariableAccess var) {
        return var.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
    }

    // Check whether the accessed variable is static
    private boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym != null && sym.hasModifiers(JModifier.STATIC);
    }

    // Check whether the accessed variable is final
    private boolean isVariableAccessFinal(ASTVariableAccess var) {
        JVariableSymbol symbol = var.getReferencedSym();
        return symbol != null && symbol.isFinal();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Get the formal parameter of the constructor.
4. Get the number of formal parameters of the constructor.
5. Get the signature of the constructor.
6. Get all statements in the constructor body.
7. Get the left operand of the assignment expression.
8. Check whether the left operand is an accessed field.
9. Check whether the accessed variable is static.
10. Check whether the accessed variable is final.
11. If the accessed variable is static and not final, then this is a potential rule violation.

For the given test case:
1. The name of the class is Foo.
2. The name of the constructor is Foo.
3. The formal parameter of the constructor is y.
4. The number of formal parameters of the constructor is 1.
5. The signature of the constructor is Foo(int y).
6. The constructor body contains one statement: this.x = y;
7. The left operand of the assignment expression is this.x.
8. The left operand is an accessed field.
9. The accessed variable x is static.
10. The accessed variable x is not final.
11. Since the accessed variable x is static and not final, this test case violates the rule.

The description of this test case: bad 2
The number of violating the rule in this test case is: 1
['Get the name of the class.', 'Get the name of the constructor.', 'Get the formal parameter of the constructor.', 'Get the number of formal parameters of the constructor.', 'Get the signature of the constructor.', 'Get all statements in the constructor body.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed variable is static.', 'Check whether the accessed variable is final.', 'If the accessed variable is static and not final, then this is a potential rule violation.', 'The name of the class is Foo.', 'The name of the constructor is Foo.', 'The formal parameter of the constructor is y.', 'The number of formal parameters of the constructor is 1.', 'The signature of the constructor is Foo(int y).', 'The constructor body contains one statement: this.x = y;', 'The left operand of the assignment expression is this.x.', 'The left operand is an accessed field.', 'The accessed variable x is static.', 'The accessed variable x is not final.', 'Since the accessed variable x is static and not final, this test case violates the rule.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTFieldAccess', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'ASTThisExpression', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Get the formal parameter of the constructor.* 匹配到的元操作或API：
logic: Get the formal parameter of the constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9663770198822021
*Get the number of formal parameters of the constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of the constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9820090532302856
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732561707496643
*Get all statements in the constructor body.* 匹配到的元操作或API：
query: Get all statements in the constructor body.
most similar API: get body of constructor
cosine Similarity: 0.8038371205329895
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed variable is static.* 匹配到的元操作或API：
logic: Check whether the accessed variable is static.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.9874663352966309
*Check whether the accessed variable is final.* 匹配到的元操作或API：
logic: Check whether the accessed variable is final.
most similar meta operation: Check whether the accessed variable is final
cosine Similarity: 0.9882043600082397
*If the accessed variable is static and not final, then this is a potential rule violation.* 匹配到的元操作或API：
logic: If the accessed variable is static and not final, then this is a potential rule violation.
most similar meta operation: Check whether the accessed variable is static
cosine Similarity: 0.8509150743484497
*The name of the class is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The name of the constructor is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The formal parameter of the constructor is y.* 匹配到的元操作或API：
未匹配成功元操作或API
*The number of formal parameters of the constructor is 1.* 匹配到的元操作或API：
未匹配成功元操作或API
*The signature of the constructor is Foo(int y).* 匹配到的元操作或API：
未匹配成功元操作或API
*The constructor body contains one statement: this.x = y;* 匹配到的元操作或API：
未匹配成功元操作或API
*The left operand of the assignment expression is this.x.* 匹配到的元操作或API：
logic: The left operand of the assignment expression is this.x.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8794630169868469
*The left operand is an accessed field.* 匹配到的元操作或API：
query: The left operand is an accessed field.
most similar API: get left operand of assignment expression
cosine Similarity: 0.8288025856018066
*The accessed variable x is static.* 匹配到的元操作或API：
未匹配成功元操作或API
*The accessed variable x is not final.* 匹配到的元操作或API：
未匹配成功元操作或API
*Since the accessed variable x is static and not final, this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The description of this test case is: bad 2
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand(), //Returns the left-hand side, ie the expression being assigned to.

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```
3.  //Check whether the accessed variable is static
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.JModifier;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessStatic(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
        return true;
    }
    return false;
}
```
4.  //Check whether the accessed variable is final
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public boolean isVariableAccessFinal(ASTVariableAccess var){
    JVariableSymbol symbol = var.getReferencedSym();
    if (symbol == null) {
        return false;
    }
    if (var.getReferencedSym().isFinal()) {
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            ASTVariableAccess variableAccess = fieldAccess.getFieldName();
            if (isVariableAccessField(variableAccess) && isVariableAccessStatic(variableAccess) && !isVariableAccessFinal(variableAccess)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Check whether the accessed variable is a field
    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is static
    public boolean isVariableAccessStatic(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym.tryGetNode().hasModifiers(JModifier.STATIC)) {
            return true;
        }
        return false;
    }

    // Check whether the accessed variable is final
    public boolean isVariableAccessFinal(ASTVariableAccess var){
        JVariableSymbol symbol = var.getReferencedSym();
        if (symbol == null) {
            return false;
        }
        if (var.getReferencedSym().isFinal()) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the constructor of the class.
3. Get the name of the constructor.
4. Get the signature of the constructor.
5. Get all statements in the constructor.
6. Check whether any statement is an assignment expression.
7. Get the left operand of the assignment expression.
8. Check whether the left operand is a static field.
9. Check whether the left operand is a final field.
10. Get the class that method located in.

In this test case:
1. The name of the class is Foo.
2. The constructor of the class is Foo.
3. The name of the constructor is Foo.
4. The signature of the constructor is Foo(int y).
5. The statements in the constructor are this.x = y.
6. There is an assignment expression in the constructor.
7. The left operand of the assignment expression is this.x.
8. The left operand this.x is a static field.
9. The left operand this.x is not a final field.
10. The constructor is located in the class Foo.

Since there is an assignment to a non-final static field within the constructor, this test case violates the rule.
['Get the name of the class.', 'Get the constructor of the class.', 'Get the name of the constructor.', 'Get the signature of the constructor.', 'Get all statements in the constructor.', 'Check whether any statement is an assignment expression.', 'Get the left operand of the assignment expression.', 'Check whether the left operand is a static field.', 'Check whether the left operand is a final field.', 'Get the class that method located in.', 'The name of the class is Foo.', 'The constructor of the class is Foo.', 'The name of the constructor is Foo.', 'The signature of the constructor is Foo(int y).', 'The statements in the constructor are this.x = y.', 'There is an assignment expression in the constructor.', 'The left operand of the assignment expression is this.x.', 'The left operand this.x is a static field.', 'The left operand this.x is not a final field.', 'The constructor is located in the class Foo.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTFieldAccess', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'ASTThisExpression', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the constructor of the class.* 匹配到的元操作或API：
query: Get the constructor of the class.
most similar API: get class of constructor
cosine Similarity: 0.8561633825302124
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Get the signature of the constructor.* 匹配到的元操作或API：
logic: Get the signature of the constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9732561707496643
*Get all statements in the constructor.* 匹配到的元操作或API：
query: Get all statements in the constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8072127103805542
*Check whether any statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether any statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9311095476150513
*Get the left operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of the assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9864992499351501
*Check whether the left operand is a static field.* 匹配到的元操作或API：
logic: Check whether the left operand is a static field.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.8537701964378357
*Check whether the left operand is a final field.* 匹配到的元操作或API：
logic: Check whether the left operand is a final field.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.8778671622276306
*Get the class that method located in.* 匹配到的元操作或API：
logic: Get the class that method located in.
most similar meta operation: Get the class that method located in
cosine Similarity: 0.9805244207382202
*The name of the class is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The constructor of the class is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The name of the constructor is Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
*The signature of the constructor is Foo(int y).* 匹配到的元操作或API：
未匹配成功元操作或API
*The statements in the constructor are this.x = y.* 匹配到的元操作或API：
未匹配成功元操作或API
*There is an assignment expression in the constructor.* 匹配到的元操作或API：
query: There is an assignment expression in the constructor.
most similar API: children of assignment expression
cosine Similarity: 0.8305755853652954
*The left operand of the assignment expression is this.x.* 匹配到的元操作或API：
logic: The left operand of the assignment expression is this.x.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8794630169868469
*The left operand this.x is a static field.* 匹配到的元操作或API：
未匹配成功元操作或API
*The left operand this.x is not a final field.* 匹配到的元操作或API：
未匹配成功元操作或API
*The constructor is located in the class Foo.* 匹配到的元操作或API：
未匹配成功元操作或API
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The description of this test case is: bad 2
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.Class<Class<?> getClass()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
10. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
11. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTAssignableExpr leftOperand = node.getLeftOperand();
        if (leftOperand instanceof ASTFieldAccess) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) leftOperand;
            if (fieldAccess.getFirstChild() instanceof ASTThisExpression) {
                ASTFieldDeclaration fieldDeclaration = fieldAccess.getFieldDeclaration();
                if (fieldDeclaration.isStatic() && !fieldDeclaration.isFinal()) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of constructor.
        2. Get a formal parameter of constructor.
        3. Get the number of formal parameters of constructor.
        4. Get the name of formal parameter.
        5. Get the type of formal parameter.
        6. Get all fields declared in class.
        7. Check whether the field is static.
        8. Get the type of field.
        9. Check whether the field is final.
        10. Get all statements in constructor.
        11. Check whether statement is an assignment.
        12. Get the left operand of assignment expression.
        13. Check whether the left operand is accessed field.
        14. Check whether the accessed field is static.
        15. Check whether the accessed field is final.
        If the left operand of the assignment expression in the constructor is a static field and it is not final, then this test case violates the rule.
['Get the name of constructor.', 'Get a formal parameter of constructor.', 'Get the number of formal parameters of constructor.', 'Get the name of formal parameter.', 'Get the type of formal parameter.', 'Get all fields declared in class.', 'Check whether the field is static.', 'Get the type of field.', 'Check whether the field is final.', 'Get all statements in constructor.', 'Check whether statement is an assignment.', 'Get the left operand of assignment expression.', 'Check whether the left operand is accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTFieldAccess', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'ASTThisExpression', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.98207688331604
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865633845329285
*Get the name of formal parameter.* 匹配到的元操作或API：
logic: Get the name of formal parameter.
most similar meta operation: Get the name of formal parameter
cosine Similarity: 0.9837440252304077
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9854808449745178
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get all statements in constructor.* 匹配到的元操作或API：
query: Get all statements in constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8114529252052307
*Check whether statement is an assignment.* 匹配到的元操作或API：
query: Check whether statement is an assignment.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8660700917243958
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is accessed field.* 匹配到的元操作或API：
query: Check whether the left operand is accessed field.
most similar API: Check whether the field access equals
cosine Similarity: 0.8313767910003662
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
The description of this test case is: bad 2
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTFieldAccess
              ——ASTThisExpression
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
3. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
10. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
11. net.sourceforge.pmd.lang.java.ast.ASTFieldAccess: public boolean equals(java.lang.Object)

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Get the name of formal parameter
```java
import net.sourceforge.pmd.lang.java.ast.*;
public String getFormalParameterName(ASTFormalParameter node) {
    return node.getVarId().getName();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        Map<String, ASTFieldDeclaration> staticFields = new HashMap<>();
        node.getDeclarations(ASTFieldDeclaration.class)
            .filter(ASTFieldDeclaration::isStatic)
            .forEach(field -> field.getVariableDeclarators().forEach(var -> staticFields.put(var.getName(), field)));
        visit(node.getConstructors(), staticFields);
        return super.visit(node, data);
    }

    private void visit(NodeStream<ASTConstructorDeclaration> constructors, Map<String, ASTFieldDeclaration> staticFields) {
        constructors.forEach(constructor -> {
            int formalParametersNumber = getFormalParametersNumber(constructor);
            System.out.println("Number of formal parameters: " + formalParametersNumber); // Just for demonstration

            constructor.getBlock().getDescendants(ASTAssignmentExpression.class)
                .filter(assignment -> {
                    ASTAssignableExpr leftOperand = assignment.getLeftOperand();
                    return leftOperand instanceof ASTFieldAccess && staticFields.containsKey(((ASTFieldAccess) leftOperand).getVarId().getName());
                })
                .filter(assignment -> {
                    String varName = ((ASTFieldAccess) assignment.getLeftOperand()).getVarId().getName();
                    return !staticFields.get(varName).isFinal();
                })
                .forEach(assignment -> addViolation(data, assignment));
        });
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        return super.visit(node, data);
    }

    // Get the number of formal parameters of constructor
    public int getFormalParametersNumber(ASTConstructorDeclaration node) {
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }

    // Get the name of formal parameter
    public String getFormalParameterName(ASTFormalParameter node) {
        return node.getVarId().getName();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成的都没通过第一个测试用例，删除此测试用例，换一个生成first checker
删除此测试用例: bad 2
1951
1549
==========================第1轮为第一个测试用例生成checker========================
=========================logics=========================
It appears there is a discrepancy between the rule description and the provided test case description. Let's clarify and perform the granular checks to ensure we accurately identify whether the test case adheres to the rule.

Rule Description: Assignment to non-final static fields in constructor is unsafe. Prevent it.

Test Case:
```java
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```

1. Get the name of class.
2. Check whether the class is public.
3. Get all fields declared in class.
4. Get the name of field.
5. Check whether the field is static.
6. Check whether the field is final.
7. Get all constructors declared in class.
8. Get the signature of constructor.
9. Get the body of constructor.
10. Get all assignment expressions in the constructor body.
11. Get the left operand of assignment expression.
12. Check whether the left operand is an accessed field.
13. Check whether the accessed field is static.
14. Check whether the accessed field is final.
15. Check whether the left operand is a non-final static field.

Since the provided test case description states that the rule is violated twice, but the given example only shows one assignment to a non-final static field, let's assume that there might be another assignment to a non-final static field elsewhere in the code, which is not provided. We will focus on the given assignment.

Following the granular checks:

1. Get the name of class.
        - The name of the class is `Foo`.

2. Check whether the class is public.
        - The class `Foo` is public.

3. Get all fields declared in class.
        - There is one field declared in the class: `static int x`.

4. Get the name of field.
        - The name of the field is `x`.

5. Check whether the field is static.
        - The field `x` is static.

6. Check whether the field is final.
        - The field `x` is not final.

7. Get all constructors declared in class.
        - There is one constructor declared in the class: `Foo(int y)`.

8. Get the signature of constructor.
        - The signature of the constructor is `Foo(int y)`.

9. Get the body of constructor.
        - The body of the constructor is `{ x = y; }`.

10. Get all assignment expressions in the constructor body.
        - There is one assignment expression in the constructor body: `x = y`.

11. Get the left operand of assignment expression.
        - The left operand of the assignment expression is `x`.

12. Check whether the left operand is an accessed field.
        - The left operand `x` is an accessed field.

13. Check whether the accessed field is static.
        - The accessed field `x` is static.

14. Check whether the accessed field is final.
        - The accessed field `x` is not final.

15. Check whether the left operand is a non-final static field.
        - The left operand `x` is a non-final static field.

Based on these checks, the test case does violate the rule once as it assigns a value to a non-final static field `x` within the constructor. If there were another assignment to a non-final static field within the constructor, it would be counted as a second violation. However, with the provided code, there is only one violation.
['Get the name of class.', 'Check whether the class is public.', 'Get all fields declared in class.', 'Get the name of field.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all constructors declared in class.', 'Get the signature of constructor.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Check whether the left operand is a non-final static field.', 'Get the name of class.', 'Check whether the class is public.', 'Get all fields declared in class.', 'Get the name of field.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all constructors declared in class.', 'Get the signature of constructor.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Check whether the left operand is a non-final static field.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the name of field.* 匹配到的元操作或API：
logic: Get the name of field.
most similar meta operation: Get the name of field
cosine Similarity: 0.978217363357544
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368493318557739
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Check whether the left operand is a non-final static field.* 匹配到的元操作或API：
query: Check whether the left operand is a non-final static field.
most similar API: Check whether the field is syntactically static
cosine Similarity: 0.8167304992675781
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all fields declared in class.* 匹配到的元操作或API：
query: Get all fields declared in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8290456533432007
*Get the name of field.* 匹配到的元操作或API：
logic: Get the name of field.
most similar meta operation: Get the name of field
cosine Similarity: 0.978217363357544
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368493318557739
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Check whether the left operand is a non-final static field.* 匹配到的元操作或API：
query: Check whether the left operand is a non-final static field.
most similar API: Check whether the field is syntactically static
cosine Similarity: 0.8167304992675781
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 3
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
5. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
7. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
10. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
11. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isSyntacticallyStatic()

1.  //Get the name of field
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getFieldName(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
2.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = node.getLeftOperand();
        if (leftOperand != null && isVariableAccessField(leftOperand)) {
            JFieldSymbol fieldSym = (JFieldSymbol) leftOperand.getReferencedSym();
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    public boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        if (sym instanceof JFieldSymbol) {
            return true;
        }
        return false;
    }

    public String getFieldName(ASTFieldDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId variableDeclaratorId : varIds) {
            // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
            if (variableDeclaratorId.getName().equals("x")) {
                String variableName = variableDeclaratorId.getName();
                return variableName;
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮为第一个测试用例生成checker========================
=========================logics=========================
1. Get the name of the class.
2. Get the name of the constructor.
3. Check whether the constructor has formal parameters.
4. Get the number of formal parameters of constructor.
5. Get a formal parameter of constructor.
6. Get the name of formal parameter.
7. Get the type of formal parameter.
8. Get all field declarations in class.
9. Check whether the field is static.
10. Check whether the field is final.
11. Get all statements in constructor.
12. Check whether the statement is an assignment expression.
13. Get the left operand of assignment expression.
14. Check whether the operand is an accessed field.
15. Check whether the accessed field is static.
16. Check whether the accessed field is final.
17. Get the right operand of assignment expression.
18. Get the type of right operand.

Given the test case:
1. Get the name of the class: Foo
2. Get the name of the constructor: Foo
3. Check whether the constructor has formal parameters: True
4. Get the number of formal parameters of constructor: 1
5. Get a formal parameter of constructor: y
6. Get the name of formal parameter: y
7. Get the type of formal parameter: int
8. Get all field declarations in class: x
9. Check whether the field is static: True (for field x)
10. Check whether the field is final: False (for field x)
11. Get all statements in constructor: x = y
12. Check whether the statement is an assignment expression: True
13. Get the left operand of assignment expression: x
14. Check whether the operand is an accessed field: True
15. Check whether the accessed field is static: True (for field x)
16. Check whether the accessed field is final: False (for field x)

The test case violates the rule once, as the static non-final field `x` is being assigned a value in the constructor. The rule description and number of violations in your original description seem to have a mismatch. Here, the number of violations is correctly identified as 1.
['Get the name of the class.', 'Get the name of the constructor.', 'Check whether the constructor has formal parameters.', 'Get the number of formal parameters of constructor.', 'Get a formal parameter of constructor.', 'Get the name of formal parameter.', 'Get the type of formal parameter.', 'Get all field declarations in class.', 'Check whether the field is static.', 'Check whether the field is final.', 'Get all statements in constructor.', 'Check whether the statement is an assignment expression.', 'Get the left operand of assignment expression.', 'Check whether the operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the right operand of assignment expression.', 'Get the type of right operand.', 'Get the name of the class: Foo', 'Get the name of the constructor: Foo', 'Check whether the constructor has formal parameters: True', 'Get the number of formal parameters of constructor: 1', 'Get a formal parameter of constructor: y', 'Get the name of formal parameter: y', 'Get the type of formal parameter: int', 'Get all field declarations in class: x', 'Check whether the field is static: True (for field x)', 'Check whether the field is final: False (for field x)', 'Get all statements in constructor: x = y', 'Check whether the statement is an assignment expression: True', 'Get the left operand of assignment expression: x', 'Check whether the operand is an accessed field: True', 'Check whether the accessed field is static: True (for field x)', 'Check whether the accessed field is final: False (for field x)']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the constructor.* 匹配到的元操作或API：
logic: Get the name of the constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9695647358894348
*Check whether the constructor has formal parameters.* 匹配到的元操作或API：
query: Check whether the constructor has formal parameters.
most similar API: Check whether the formal parameters equals
cosine Similarity: 0.8788011074066162
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865633845329285
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.98207688331604
*Get the name of formal parameter.* 匹配到的元操作或API：
logic: Get the name of formal parameter.
most similar meta operation: Get the name of formal parameter
cosine Similarity: 0.9837440252304077
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9854808449745178
*Get all field declarations in class.* 匹配到的元操作或API：
query: Get all field declarations in class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8478878736495972
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get all statements in constructor.* 匹配到的元操作或API：
query: Get all statements in constructor.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8114529252052307
*Check whether the statement is an assignment expression.* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.9503116607666016
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8818295001983643
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Get the right operand of assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9884069561958313
*Get the type of right operand.* 匹配到的元操作或API：
query: Get the type of right operand.
most similar API: get right operand of assignment expression
cosine Similarity: 0.8339086771011353
*Get the name of the class: Foo* 匹配到的元操作或API：
logic: Get the name of the class: Foo
most similar meta operation: Get the name of class
cosine Similarity: 0.9328444600105286
*Get the name of the constructor: Foo* 匹配到的元操作或API：
logic: Get the name of the constructor: Foo
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9494014978408813
*Check whether the constructor has formal parameters: True* 匹配到的元操作或API：
logic: Check whether the constructor has formal parameters: True
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.850215494632721
*Get the number of formal parameters of constructor: 1* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor: 1
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9782682657241821
*Get a formal parameter of constructor: y* 匹配到的元操作或API：
logic: Get a formal parameter of constructor: y
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.9103478789329529
*Get the name of formal parameter: y* 匹配到的元操作或API：
logic: Get the name of formal parameter: y
most similar meta operation: Get the name of formal parameter
cosine Similarity: 0.8878722190856934
*Get the type of formal parameter: int* 匹配到的元操作或API：
logic: Get the type of formal parameter: int
most similar meta operation: Check whether the formal parameter is int type
cosine Similarity: 0.93187016248703
*Get all field declarations in class: x* 匹配到的元操作或API：
query: Get all field declarations in class: x
most similar API: get declared annotations of field
cosine Similarity: 0.8334609270095825
*Check whether the field is static: True (for field x)* 匹配到的元操作或API：
logic: Check whether the field is static: True (for field x)
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9390795230865479
*Check whether the field is final: False (for field x)* 匹配到的元操作或API：
logic: Check whether the field is final: False (for field x)
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9416945576667786
*Get all statements in constructor: x = y* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the statement is an assignment expression: True* 匹配到的元操作或API：
query: Check whether the statement is an assignment expression: True
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.945663571357727
*Get the left operand of assignment expression: x* 匹配到的元操作或API：
logic: Get the left operand of assignment expression: x
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9527434706687927
*Check whether the operand is an accessed field: True* 匹配到的元操作或API：
logic: Check whether the operand is an accessed field: True
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8878206610679626
*Check whether the accessed field is static: True (for field x)* 匹配到的元操作或API：
logic: Check whether the accessed field is static: True (for field x)
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9147279262542725
*Check whether the accessed field is final: False (for field x)* 匹配到的元操作或API：
logic: Check whether the accessed field is final: False (for field x)
most similar meta operation: Check whether the field is final
cosine Similarity: 0.8694618940353394
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 3
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
5. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
6. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
9. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
10. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
11. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
12. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
13. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand(), //Returns the right-hand side operand.
14. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Get the name of formal parameter
```java
import net.sourceforge.pmd.lang.java.ast.*;
public String getFormalParameterName(ASTFormalParameter node) {
    return node.getVarId().getName();
}
```
3.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```
4.  //Check whether the formal parameter is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFormalParameterIntType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        node.descendants(ASTAssignmentExpression.class).forEach(assignment -> {
            ASTVariableAccess leftOperand = (ASTVariableAccess) assignment.getLeftOperand();
            if (isVariableAccessField(leftOperand)) {
                JFieldSymbol fieldSym = (JFieldSymbol) leftOperand.getReferencedSym();
                ASTFieldDeclaration fieldDeclaration = (ASTFieldDeclaration) fieldSym.getAccess().get();
                if (fieldDeclaration.isStatic() && !fieldDeclaration.isFinal()) {
                    addViolation(data, assignment);
                }
            }
        });
        return super.visit(node, data);
    }

    private boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JFieldSymbol;
    }

    // Get the number of formal parameters of constructor
    public int getFormalParametersNumber(ASTConstructorDeclaration node) {
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }

    // Get the name of formal parameter
    public String getFormalParameterName(ASTFormalParameter node) {
        return node.getVarId().getName();
    }

    // Check whether the formal parameter is int type
    public boolean isFormalParameterIntType(ASTFormalParameter node) {
        ASTType type = node.getTypeNode();
        JTypeMirror t = type.getTypeMirror();
        return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮为第一个测试用例生成checker========================
=========================logics=========================
Let's break down the test case to check for adherence to the rule:

1. Get the name of class.
2. Get the name of constructor.
3. Get the signature of constructor.
4. Get the number of formal parameters of constructor.
5. Get a formal parameter of constructor.
6. Get the type of formal parameter.
7. Get the body of constructor.
8. Get all assignment expressions in the constructor body.
9. Get the left operand of assignment expression.
10. Check whether the left operand is an accessed field.
11. Check whether the accessed field is static.
12. Check whether the accessed field is final.

Based on the provided test case:

1. Get the name of class.  
   The name of the class is `Foo`.

2. Get the name of constructor.  
   The name of the constructor is `Foo`.

3. Get the signature of constructor.  
   The signature is `Foo(int y)`.

4. Get the number of formal parameters of constructor.  
   The number of formal parameters is 1.

5. Get a formal parameter of constructor.  
   The formal parameter is `y`.

6. Get the type of formal parameter.  
   The type of `y` is `int`.

7. Get the body of constructor.  
   The body contains `x = y;`.

8. Get all assignment expressions in the constructor body.  
   The assignment expression in the constructor body is `x = y;`.

9. Get the left operand of assignment expression.  
   The left operand of `x = y;` is `x`.

10. Check whether the left operand is an accessed field.  
    `x` is an accessed field.

11. Check whether the accessed field is static.  
    `x` is a static field.

12. Check whether the accessed field is final.  
    `x` is not a final field.

Since `x` is a non-final static field and it is being assigned a value in the constructor, this test case violates the rule. 

The description of this test case should be corrected to reflect the actual number of violations:

The description of this test case is: bad 3  
The number of violating the rule in this test case is: 1

However, based on the provided description, it seems there might be a confusion. The rule is violated only once in the provided test case. Therefore, the correct description should be:

The description of this test case is: bad 3  
The number of violating the rule in this test case is: 1
['Get the name of class.', 'Get the name of constructor.', 'Get the signature of constructor.', 'Get the number of formal parameters of constructor.', 'Get a formal parameter of constructor.', 'Get the type of formal parameter.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the name of class.', 'Get the name of constructor.', 'Get the signature of constructor.', 'Get the number of formal parameters of constructor.', 'Get a formal parameter of constructor.', 'Get the type of formal parameter.', 'Get the body of constructor.', 'Get all assignment expressions in the constructor body.', 'Get the left operand of assignment expression.', 'Check whether the left operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTFormalParameter', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865633845329285
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.98207688331604
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9854808449745178
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get the name of constructor.* 匹配到的元操作或API：
logic: Get the name of constructor.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.9789292812347412
*Get the signature of constructor.* 匹配到的元操作或API：
logic: Get the signature of constructor.
most similar meta operation: Get the signature of constructor
cosine Similarity: 0.9828827381134033
*Get the number of formal parameters of constructor.* 匹配到的元操作或API：
logic: Get the number of formal parameters of constructor.
most similar meta operation: Get the number of formal parameters of constructor
cosine Similarity: 0.9865633845329285
*Get a formal parameter of constructor.* 匹配到的元操作或API：
logic: Get a formal parameter of constructor.
most similar meta operation: Get a formal parameter of constructor
cosine Similarity: 0.98207688331604
*Get the type of formal parameter.* 匹配到的元操作或API：
logic: Get the type of formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9854808449745178
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in the constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in the constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.835067093372345
*Get the left operand of assignment expression.* 匹配到的元操作或API：
logic: Get the left operand of assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.991000235080719
*Check whether the left operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the left operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8513689041137695
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description, which may contain multiple violations. You just need to generate a checker that can check the violations of the given test case.

The following is a description of the rule and the corresponding counterexample test case and the AST of the counterexample test case:

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
The test case corresponding to the rule:
```
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
The description of this test case is: bad 3
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case(nodes in checker code are better selected from this ast):
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'x')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 1)
        ——ASTFormalParameter
          ——ASTModifierList
          ——ASTPrimitiveType (this is a primitive type)
          ——ASTVariableDeclaratorId (declared variable name = 'y')
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'x')
            ——ASTVariableAccess (referenced variable name = 'y')

Note, when there are consecutive method calls, the last call is at the upper level of the syntax tree.

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

The rule checker could only visit nodes in test case's ast, and it would be better to select a most efficient and direct node to visit rather than visit the entry to the program if possible.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
5. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
8. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
9. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
10. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()

1.  //Get the number of formal parameters of constructor
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTConstructorDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:

1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JFieldSymbol fieldSym = (JFieldSymbol) leftOperand.getReferencedSym();
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JFieldSymbol;
    }

    // Get the number of formal parameters of constructor
    public int getFormalParametersNumber(ASTConstructorDeclaration node){
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
测试用例是否通过：
True
此测试用例生成了first checker: bad 3


======================接下来开始迭代=====================
[ERROR]   "bad 4" resulted in wrong number of failures, ==> expected: <1> but was: <0>不通过
94
79
=========================error_testcase_logics=========================
1. Get the class that method located in.
        2. Check whether the class is public.
        3. Get the constructor in class.
        4. Get the body of constructor.
        5. Get all assignment expressions in constructor body.
        6. Get the left-hand side operand of each assignment expression.
        7. Check whether the operand is an accessed field.
        8. Check whether the accessed field is static.
        9. Check whether the accessed field is final.
        If the left-hand operand of an assignment expression is a non-final static field, then this test case violates the rule.

Given the test case:
1. Get the class that method located in: Foo
2. Check whether the class is public: True
3. Get the constructor in class: Foo()
4. Get the body of constructor: { id2 = counter++; }
5. Get all assignment expressions in constructor body: id2 = counter++;
6. Get the left-hand side operand of each assignment expression: id2
7. Check whether the operand is an accessed field: False (it's not id2, we need to check the right-hand side)
8. Get the right-hand side operand of the assignment expression: counter++
9. Check whether the operand is an accessed field: True (it's counter)
10. Check whether the accessed field is static: True
11. Check whether the accessed field is final: False

Since counter is a non-final static field being assigned in the constructor, this test case violates the rule.
['Get the class that method located in.', 'Check whether the class is public.', 'Get the constructor in class.', 'Get the body of constructor.', 'Get all assignment expressions in constructor body.', 'Get the left-hand side operand of each assignment expression.', 'Check whether the operand is an accessed field.', 'Check whether the accessed field is static.', 'Check whether the accessed field is final.', 'Get the class that method located in: Foo', 'Check whether the class is public: True', 'Get the constructor in class: Foo()', 'Get the body of constructor: { id2 = counter++; }', 'Get all assignment expressions in constructor body: id2 = counter++;', 'Get the left-hand side operand of each assignment expression: id2', "Check whether the operand is an accessed field: False (it's not id2, we need to check the right-hand side)", 'Get the right-hand side operand of the assignment expression: counter++', "Check whether the operand is an accessed field: True (it's counter)", 'Check whether the accessed field is static: True', 'Check whether the accessed field is final: False']
['SymbolicValueHelper', 'CommentAssignmentPass', 'ASTVariableDeclaratorId', 'ASTVariableDeclarator', 'ASTBlock', 'SymbolResolutionPass', 'ASTConstructorDeclaration', 'TypeConversion', 'ClassNamesUtil', 'TestFrameworksUtil', 'JavaAstUtils', 'ASTVariableAccess', 'JavaRuleUtil', 'InternalApiBridge', 'ASTUnaryExpression', 'JavadocTag', 'AstImplUtil', 'ASTFieldDeclaration', 'ASTClassOrInterfaceBody', 'TypesFromReflection', 'ASTAssignmentExpression', 'ASTPrimitiveType', 'ASTFormalParameters', 'ASTExpressionStatement', 'TokenUtils', 'ASTClassOrInterfaceDeclaration', 'TypeTestUtil', 'ASTModifierList', 'ASTCompilationUnit', 'TypesFromAst', 'JavaPropertyUtil', 'JavaSemanticErrors']
*Get the class that method located in.* 匹配到的元操作或API：
logic: Get the class that method located in.
most similar meta operation: Get the class that method located in
cosine Similarity: 0.9805244207382202
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get the constructor in class.* 匹配到的元操作或API：
logic: Get the constructor in class.
most similar meta operation: Get the name of constructor
cosine Similarity: 0.8578287363052368
*Get the body of constructor.* 匹配到的元操作或API：
query: Get the body of constructor.
most similar API: get body of constructor
cosine Similarity: 0.9775583148002625
*Get all assignment expressions in constructor body.* 匹配到的元操作或API：
query: Get all assignment expressions in constructor body.
most similar API: get text of assignment expression
cosine Similarity: 0.8368808627128601
*Get the left-hand side operand of each assignment expression.* 匹配到的元操作或API：
logic: Get the left-hand side operand of each assignment expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9541751146316528
*Check whether the operand is an accessed field.* 匹配到的元操作或API：
logic: Check whether the operand is an accessed field.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8818295001983643
*Check whether the accessed field is static.* 匹配到的元操作或API：
logic: Check whether the accessed field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9319617748260498
*Check whether the accessed field is final.* 匹配到的元操作或API：
logic: Check whether the accessed field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9394943118095398
*Get the class that method located in: Foo* 匹配到的元操作或API：
logic: Get the class that method located in: Foo
most similar meta operation: Get the class that method located in
cosine Similarity: 0.949478268623352
*Check whether the class is public: True* 匹配到的元操作或API：
logic: Check whether the class is public: True
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9707064628601074
*Get the constructor in class: Foo()* 匹配到的元操作或API：
query: Get the constructor in class: Foo()
most similar API: get name of constructor
cosine Similarity: 0.8404802083969116
*Get the body of constructor: { id2 = counter++; }* 匹配到的元操作或API：
query: Get the body of constructor: { id2 = counter++; }
most similar API: get body of constructor
cosine Similarity: 0.8669092059135437
*Get all assignment expressions in constructor body: id2 = counter++;* 匹配到的元操作或API：
query: Get all assignment expressions in constructor body: id2 = counter++;
most similar API: get num children of assignment expression
cosine Similarity: 0.8118217587471008
*Get the left-hand side operand of each assignment expression: id2* 匹配到的元操作或API：
logic: Get the left-hand side operand of each assignment expression: id2
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.9233246445655823
*Check whether the operand is an accessed field: False (it's not id2, we need to check the right-hand side)* 匹配到的元操作或API：
query: Check whether the operand is an accessed field: False (it's not id2, we need to check the right-hand side)
most similar API: Check whether is this field access
cosine Similarity: 0.8310079574584961
*Get the right-hand side operand of the assignment expression: counter++* 匹配到的元操作或API：
logic: Get the right-hand side operand of the assignment expression: counter++
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8634289503097534
*Check whether the operand is an accessed field: True (it's counter)* 匹配到的元操作或API：
logic: Check whether the operand is an accessed field: True (it's counter)
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8581968545913696
*Check whether the accessed field is static: True* 匹配到的元操作或API：
logic: Check whether the accessed field is static: True
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9280786514282227
*Check whether the accessed field is final: False* 匹配到的元操作或API：
logic: Check whether the accessed field is final: False
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.8784234523773193
===============================新加一个测试用例生成的checker repair_test_error_query_when_testing==========================
You are an expert in writing java rule checkers in PMD tool version 7.0.0. 
You have helped me write a checker for this rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;
And the source code of the checker is as follows:
```
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JFieldSymbol fieldSym = (JFieldSymbol) leftOperand.getReferencedSym();
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JFieldSymbol;
    }

    // Get the number of formal parameters of constructor
    public int getFormalParametersNumber(ASTConstructorDeclaration node){
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }
}
```

This checker has passed this negative testcase:
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}


This checker is failed(false negative) on this negative test case:
```
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
The number of violating the rule in this test case is: 1

```
The AST corresponding to this test case:
ASTCompilationUnit
——ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ——ASTModifierList
  ——ASTClassOrInterfaceBody
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'counter')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'id1')
    ——ASTFieldDeclaration
      ——ASTModifierList
      ——ASTPrimitiveType (this is a primitive type)
      ——ASTVariableDeclarator
        ——ASTVariableDeclaratorId (declared variable name = 'id2')
    ——ASTConstructorDeclaration
      ——ASTModifierList
      ——ASTFormalParameters (size = 0)
      ——ASTBlock
        ——ASTExpressionStatement
          ——ASTAssignmentExpression
            ——ASTVariableAccess (referenced variable name = 'id2')
            ——ASTUnaryExpression
              ——ASTVariableAccess (referenced variable name = 'counter')


Please help me repair this checker according to rule description by adding or modifying some code logic to check this negative test case as well as those passed test cases.
Note that the initial code function should not be changed, to prevent previous test cases from failing.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some code snippets that maybe useful to you to repair this checker consisting of off-the-shelf APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:

1. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String getName()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody()
5. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
6. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
7. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
8. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
9. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public int getNumChildren()
10. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Whether the expression is an access to a field of this instance, not inherited, qualified or not ({@code this.field} or just {@code field}).

1.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```


================修复新加测试用例后生成的checker===================
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTVariableAccess leftOperand = (ASTVariableAccess) node.getLeftOperand();
        if (isVariableAccessField(leftOperand)) {
            JFieldSymbol fieldSym = (JFieldSymbol) leftOperand.getReferencedSym();
            if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                if (constructor != null) {
                    addViolation(data, node);
                }
            }
        }

        // Check for unary expressions that modify static fields
        if (node.getLeftOperand() instanceof ASTVariableAccess && node.getRightOperand() instanceof ASTUnaryExpression) {
            ASTVariableAccess leftVarAccess = (ASTVariableAccess) node.getLeftOperand();
            ASTUnaryExpression unaryExpr = (ASTUnaryExpression) node.getRightOperand();
            ASTVariableAccess rightVarAccess = (ASTVariableAccess) unaryExpr.getFirstDescendantOfType(ASTVariableAccess.class);

            if (rightVarAccess != null && isVariableAccessField(rightVarAccess)) {
                JFieldSymbol fieldSym = (JFieldSymbol) rightVarAccess.getReferencedSym();
                if (fieldSym.isStatic() && !fieldSym.isFinal()) {
                    ASTConstructorDeclaration constructor = node.getFirstParentOfType(ASTConstructorDeclaration.class);
                    if (constructor != null) {
                        addViolation(data, node);
                    }
                }
            }
        }

        return super.visit(node, data);
    }

    private boolean isVariableAccessField(ASTVariableAccess node) {
        JVariableSymbol sym = node.getReferencedSym();
        return sym instanceof JFieldSymbol;
    }

    public int getFormalParametersNumber(ASTConstructorDeclaration node) {
        ASTFormalParameters formalParameters = node.getFormalParameters();
        return formalParameters.size();
    }
}
编译是否通过？
True
测试是否通过
True
测试用例全部通过
最终通过 4 个测试用例
正例 2 个
反例 2 个
输入token：762046
输出token：538456
结束

规则执行完毕，时间总花销： 2812.088975906372 秒
