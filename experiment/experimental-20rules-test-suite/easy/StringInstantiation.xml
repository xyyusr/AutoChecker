<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>2</expected-problems>
        <code>
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// new String array
public class Foo {
    private String[] bar = new String[5];
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>2</expected-problems>
        <code>
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}</code>
    </test-code>
</test-data>