<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// failure case
public class Foo {
    void bar() {
        try {
            try {
            } catch (Exception e) {
                throw new WrapperException(e);
                // this is essentially a GOTO to the WrapperException catch block
            }
        } catch (WrapperException e) {
            // do some more stuff
        }
    }
}
class WrapperException extends Exception {}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// normal throw catch
public class Foo {
    void bar() {
        try {} catch (Exception e) {}
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// BUG 996007
import java.io.IOException;
public class Foo {
    void bar(Foo foo) {
        try {
        } catch (IOException e) {
            if (foo!=null)
                throw new IOException(foo.toString());
            else
                throw e;
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// NPE
public class Foo {
    void bar() {
        switch(foo) {
        default:
            throw new IllegalArgumentException();
        }
    }
}</code>
    </test-code>
    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// Catch block for subtype
public class Foo {{

    try {
        throw new TopE();
    } catch (SubE e) { // no violation

    }

    try {
        throw new SubE();
    } catch (TopE e) { // warn

    }
}}
class TopE extends Exception { }
class SubE extends TopE { }</code>
    </test-code>
    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// #4434 simple propagation
import java.util.*;
            public class Foo {

                public Map&lt;K, V&gt; getAll(Iterable&lt;? extends K&gt; keys) throws ExecutionException {
                    try {
                        Map&lt;K, V&gt; result = cache.getAll(keys);
                        if (something()) {
                            throw new InvalidCacheLoadException("null key or value");
                        }
                        return result;
                    } catch (NullPointerException | InvalidCacheLoadException e) {
                        throw e;
                    } catch (CacheLoaderException e) {
                        throw new ExecutionException(e.getCause());
                    } catch (Exception e) {
                        throw new UncheckedExecutionException(e);
                    }
                }
            }

            class ExecutionException extends Exception {
                public ExecutionException(Throwable o) { super(o);}
            }
            class UncheckedExecutionException extends RuntimeException {
                public UncheckedExecutionException(Throwable o) { super(o);}
            }
            class InvalidCacheLoadException extends RuntimeException {
                public InvalidCacheLoadException(String msg) { super(msg);}
            }</code>
    </test-code>
    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// #4434 simple propagation, 2nd case
import java.util.*;
            public class Foo {

                public Map&lt;K, V&gt; getAll(Iterable&lt;? extends K&gt; keys) {
                    try {
                        Map&lt;K, V&gt; result = cache.getAll(keys);
                        if (something()) {
                            throw new InvalidCacheLoadException("null key or value");
                        }
                        return result;

                    } catch (NullPointerException | InvalidCacheLoadException e) {
                        // Note that technically this is still an code smell as
                        // the exception is rethrown directly, but this should be
                        // the purpose of another rule.
                        throw e;
                    }
                }
            }

            class InvalidCacheLoadException extends RuntimeException {
                public InvalidCacheLoadException(String msg) { super(msg);}
            }</code>
    </test-code>
</test-data>