<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// ok
public class Foo {
    void foo() {}
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code>
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 9</description>
        <expected-problems>0</expected-problems>
        <code>
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 10</description>
        <expected-problems>0</expected-problems>
        <code>
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>ok 11</description>
        <expected-problems>0</expected-problems>
        <code>
// Generics
public class Foo {
    public &lt;T&gt; Bar&lt;T&gt; foo() { /* blah */}
}
class Bar&lt;X&gt; {}</code>
    </test-code>

    <test-code>
        <description>ok 12</description>
        <expected-problems>0</expected-problems>
        <code>
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}</code>
    </test-code>

    <test-code>
        <description>ok 13</description>
        <expected-problems>0</expected-problems>
        <code>
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; {}
@interface Readonly {}</code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // &lt;-- this is reported
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 14</description>
        <expected-problems>0</expected-problems>
        <code>
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}</code>
    </test-code>

    <test-code>
        <description>ok 15</description>
        <expected-problems>0</expected-problems>
        <code>
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}</code>
    </test-code>
</test-data>