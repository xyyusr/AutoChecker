<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// test is ok, ok
public class Foo {
    void bar() {
        String foo = "foo";
        if (foo.length() == 0) {
            // this is bad
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// String.trim.length is called, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        if (foo.trim().length() == 0) {
            // this is bad
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// String.trim.length not is called, ok
public class Foo {
    void bar() {
        String foo = "foo";
        if (foo.trim().equals("")) {
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// String.trim.length is called, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        while (foo.trim().length() == 0) {
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// String.trim.length is called, assigned to int, ok
public class Foo {
    void bar() {
        String foo = "foo";
        int i = foo.trim().length();
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// String.trim.length is called, assigned to boolean, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo.trim().length() == 0;
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// Using trim.length to find the length and compare to 1, OK
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo.trim().length() == 1;
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// Passes trim().length() and 0 to another method
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo(foo.trim().length(), 0);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// Compares the length against a mathematical function
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo(foo.trim().length() == (2 - 1));
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
// String.trim().isEmpty() is called, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo.trim().isEmpty();
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>2</expected-problems>
        <code>
// String.trim().isEmpty() is called after a chain call, should have failed
import java.util.Arrays;
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b =  Arrays.toString(foo.toCharArray()).trim().isEmpty();
        int i = 2;
        b =  String.valueOf(i).trim().isEmpty();
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>2</expected-problems>
        <code>
// String.trim().isEmpty() is called after a chain call, should have failed twice
import java.util.Arrays;
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b =  Arrays.toString(foo.toCharArray()).trim().isEmpty();
        b =  String.valueOf(2).trim().isEmpty();
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// Verify no NPE is thrown
public class Foo extends SomeUnresolvedClass {
    void bar(String[] logLevels, String[] guardMethods) {
        if (super.guardStmtByLogLevel.isEmpty() &amp;&amp; logLevels.length &gt; 0 &amp;&amp; guardMethods.length &gt; 0) {
            configureGuards(logLevels, guardMethods);
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code>
// Avoid NPE for pattern matching instanceof
public class PatternMatchingInstanceof {
    private String s = "other string";

    public void test() {
        Object obj = "abc";
        if (obj instanceof String s) {
            System.out.println("a) obj == s: " + (obj == s)); // true
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// [java] InefficientEmptyStringCheck false negative in anonymous class #1224
import javax.swing.*;
            import java.awt.event.KeyEvent;
            import java.awt.event.KeyListener;

            public class Main {
                public static void main(String[] args) {
                    final JPanel jPanel = new JPanel();
                    jPanel.addKeyListener(new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent e) {
                            final String val = "";
                            if (val.trim().length() &gt; 0) {
                                System.out.println("Non-empty string.");
                            }
                        }

                        @Override
                        public void keyPressed(KeyEvent e) {
                        }

                        @Override
                        public void keyReleased(KeyEvent e) {
                        }
                    });
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 8</description>
        <expected-problems>4</expected-problems>
        <code>
// String.trim.isEmpty is called on method result, should have failed
package net.sourceforge.pmd.lang.java.rule.performance.inefficientemptystringcheck;
public class StringTrimIsEmpty {
    String get() {
        return "foo";
    }
    void bar() {
        if (get().trim().isEmpty()) {
            // violation
        }
        if (this.get().trim().isEmpty()) {
            // violation
        }

        String bar = get();
        if (bar.trim().isEmpty()) {
            // violation
        }
        if (bar.toString().trim().isEmpty()) {
            // violation
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 9</description>
        <expected-problems>4</expected-problems>
        <code>
// String.trim.length is called on method result, should have failed
package net.sourceforge.pmd.lang.java.rule.performance.inefficientemptystringcheck;
public class StringTrimLength {
    String get() {
        return "foo";
    }
    void bar() {
        if (get().trim().length() == 0) {
            // violation missing
        }
        if (this.get().trim().length() == 0) {
            // violation missing
        }

        String bar = get();
        if (bar.trim().length() == 0) {
            // violation already detected
        }
        if (bar.toString().trim().length() == 0) {
            // violation missing
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 10</description>
        <expected-problems>6</expected-problems>
        <code>
// String.trim.isEmpty and length called in method argument
package net.sourceforge.pmd.lang.java.rule.performance.inefficientemptystringcheck;
public class StringTrimMethodArgument {
    public String get() {
        return "foo";
    }
    public void bar() {
        String bar = "foo";
        System.out.println(bar.trim().isEmpty()); // violation missing
        System.out.println(bar.trim().length() == 0);
        System.out.println(get().trim().isEmpty()); // violation missing
        System.out.println(get().trim().length() == 0); // violation missing
        System.out.println(this.get().trim().isEmpty()); // violation missing
        System.out.println(this.get().trim().length() == 0); // violating missing
    }
}</code>
    </test-code>
</test-data>