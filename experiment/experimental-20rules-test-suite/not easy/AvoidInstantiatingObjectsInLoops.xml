<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList&lt;String&gt;()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i &lt; arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i &lt; cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection&lt;Car&gt; cars = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List&lt;Function&lt;Message, Boolean&gt;&gt; filters;

    public Message(Message message) {}

    private SortedSet&lt;Message&gt; getFilteredMessages(List&lt;Message&gt; messages) {
        final SortedSet&lt;Message&gt; result = new TreeSet&lt;&gt;(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function&lt;Message, Boolean&gt; filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() &gt; 0) {
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>2</expected-problems>
        <code>
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}</code>
    </test-code>
    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection&lt;Car&gt; checkCollection() {
        Collection&lt;Car&gt; thisIsACar = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}</code>
    </test-code>
    <test-code>
        <description>bad 8</description>
        <expected-problems>1</expected-problems>
        <code>
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection&lt;Car&gt; checkCollection() {
        Collection&lt;Car&gt; thisIsACar = new ArrayList&lt;&gt;();
        for(int i = 0; i &lt; 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 9</description>
        <expected-problems>1</expected-problems>
        <code>
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 9</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List&lt;String&gt; field = new ArrayList&lt;&gt;();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i &lt; args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 10</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List&lt;ByteBuffer&gt; buffers = new ArrayList&lt;&gt;();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 11</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i &lt; data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 12</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i &lt; 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 13</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i &lt; 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i &lt; 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 14</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List&lt;String&gt; data = new ArrayList&lt;&gt;();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}</code>
    </test-code>
</test-data>