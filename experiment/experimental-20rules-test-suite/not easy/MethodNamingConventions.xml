<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// all is well
public class Foo {
    void foo() {}
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}</code>
    </test-code>

    
    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}</code>
    </test-code>

</test-data>