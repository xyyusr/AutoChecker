<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty try block
public class EmptyTryBlock1 {
                public void foo() {
                    try {
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty try block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                    } finally {
                        int x = 5;
                    }
                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty finally block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                        int x = 0;
                    } finally { // warn
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// pos, empty finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                        int f =2;
                    } finally {
                        int x = 5;
                    }
                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 4</description>
        <expected-problems>2</expected-problems>
        <code>
// pos, empty try and finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                    } finally {
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
class X {
                void method() {
                    try (ClientResponse response = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                        // was false positive
                        // EmptyTryBlock was fixed to ignore empty try-with-resources.
                        // This new rule will by default report also empty try-with-resource blocks,
                        // if the resource name is not "ignored", see next test case.
                    }
                }
            }
        </code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// empty concise try-with-resource - not ok
import java.io.InputStream;
            class X {
                void method(InputStream in) {
                    try (in) {
                    }
                }
            }
        </code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// #432 empty try-with-resource - ok with unused var name
class X {
                void method() {
                    try (ClientResponse ignored = execute(() -&gt; target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {}
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// neg, nonempty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {int x = 2;}
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 8</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty switch stmt
public class EmptySwitchStmt1 {
                public void bar() {
                    int x = 2;
                    switch (x) {}
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 9</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty block
public class Foo {
                public void bar() {
                    {}
                }
            }
        </code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// neg, nonempty switch stmt
public class EmptySwitchStmt2 {
                public void bar() {
                    int x = 2;
                    switch (x) {
                    case 2: int y=4;
                    }
                }
            }</code>
    </test-code>


    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// statement block not empty
public class Foo {
                public void bar() {
                    { return; }
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 10</description>
        <expected-problems>1</expected-problems>
        <code>
// empty initializer failure case (non static)
public class Foo {
                {}
            }</code>
    </test-code>

    <test-code>
        <description>bad 11</description>
        <expected-problems>1</expected-problems>
        <code>
// empty initializer failure case (static)
public class Foo {
                static {}
            }</code>
    </test-code>

    <test-code>
        <description>bad 12</description>
        <expected-problems>1</expected-problems>
        <code>
// not an initializer - empty statement block
public class Foo {
                public void bar() {
                    { }
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// initializer not empty
public class Foo {
                {
                    System.out.print("something interesting");
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// static initializer not empty
public class Foo {
                static {
                    x++;
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
// neg, empty foreach with unused var name
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int ignored : list) {
                    }
                    for (int ignored2 : list) ;
                    for (int i : list) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
        ]]></code>
    </test-code>
    <test-code>
        <description>bad 13</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty for
public class Foo {
                public void bar() {
                    for (int i = 0; i &lt; 2; i++) {
                    }
                    for (int i = 0; i &lt; 2; i++) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 14</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty do..while
public class Foo {
                public void bar() {
                    int i = 0;
                    do {
                    } while (i &lt; 3);
                    do { // neg, nonempty
                        System.out.println(i);
                    } while (i &lt; 3);
                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 15</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty foreach
import java.util.List;

            public class Foo {

                public void bar(List&lt;Integer&gt; list) {
                    for (int i : list) {
                    }
                    for (int i : list)  { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 16</description>
        <expected-problems>1</expected-problems>
        <code>
// pos, empty while
public class Foo {
                public void bar() {
                    while (true == true) {
                    }
                    while (true == true) {
                        String x = "";
                    }
                }
            }
        </code>
    </test-code>
    <test-code>
        <description>bad 17</description>
        <expected-problems>1</expected-problems>
        <code>
// while(true);
public class Foo {
                public void bar() {
                    while (true);
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 18</description>
        <expected-problems>1</expected-problems>
        <code>
// one empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 19</description>
        <expected-problems>2</expected-problems>
        <code>
// empty if with else statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else {
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 20</description>
        <expected-problems>3</expected-problems>
        <code>
// empty if with else and else if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else if (x > 3) {
        } else {
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 21</description>
        <expected-problems>1</expected-problems>
        <code>
// empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 22</description>
        <expected-problems>1</expected-problems>
        <code>
// empty if statement with comment
public class Foo {
    void bar(int x) {
        if (x == 0) {
            // empty!
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 9</description>
        <expected-problems>0</expected-problems>
        <code>
// one not empty if statement
public class Foo {
    void bar(int x) {
        if (x &gt; 2) {
            x = 1;
        }
    }
}</code>
    </test-code>

    </test-data>