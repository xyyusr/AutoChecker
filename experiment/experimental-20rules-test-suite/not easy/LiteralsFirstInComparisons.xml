<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>4</expected-problems>
        <code>
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) &amp;&amp; (str.equals(""))) {
            str = "snafu";
        }
        if (str != null &amp;&amp; str.equals("")) {
            str = "snafu";
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code>
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 9</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) &lt; 0;
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") &gt; 0;
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 10</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 11</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) &lt; 0;
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") &gt; 0;
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 12</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 13</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 14</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 15</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 8</description>
        <expected-problems>1</expected-problems>
        <code>
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 9</description>
        <expected-problems>2</expected-problems>
        <code>
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 10</description>
        <expected-problems>1</expected-problems>
        <code>
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 16</description>
        <expected-problems>0</expected-problems>
        <code>
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 17</description>
        <expected-problems>0</expected-problems>
        <code>
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 18</description>
        <expected-problems>0</expected-problems>
        <code>
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}</code>
    </test-code>
    <test-code>
        <description>bad 11</description>
        <expected-problems>2</expected-problems>
        <code>
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 19</description>
        <expected-problems>0</expected-problems>
        <code>
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }</code>
    </test-code>

    <test-code>
        <description>ok 20</description>
        <expected-problems>0</expected-problems>
        <code>
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 21</description>
        <expected-problems>0</expected-problems>
        <code>
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 22</description>
        <expected-problems>0</expected-problems>
        <code>
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}</code>
    </test-code>
</test-data>