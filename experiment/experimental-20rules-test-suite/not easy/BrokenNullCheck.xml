<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// should be &amp;&amp;
public class Foo {
    Object buz;
    Object bar(Object list) {
        if (list != null || !list.equals(buz)) {
            return list;
        }
    }
}</code>
     </test-code>

     <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// Ok, is &amp;&amp;
public class Foo {
    Object buz;
    Object bar(Object list) {
        if (list != null &amp;&amp; !list.equals(buz)) {
            return list;
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// should be &amp;&amp;, but now with a longer expression
class Books {
    String getJane() { return null; }
    void bar(Books books) {
        if (books.getJane()!= null || !books.getJane().equals("")) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// should be ||
public class Foo {
    Object buz;
    Object bar(Object list) {
        if (list == null &amp;&amp; list.equals(buz)) {
            return list;
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// Ok, is ||
public class Foo {
    Object buz;
    Object bar(Object list) {
        if (list == null || list.equals(buz)) {
            return list;
        }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// Arrays are Ok
public class Foo {
    String[] books;
    void bar(int index) {
        if (index &gt;= 0 &amp;&amp; books[index] == null) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// Different method is Ok
public class Book {
    Book[] books;
    String getJane() { return null; }
    String getEyre() { return null; }
    void bar(int i) {
        if (books[i].getJane() == null &amp;&amp;
            books[i].getEyre() == null) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// Using a shorter expression with the same variable in the second check should not crash the test
public class Book {
    Book[] books;
    String getJane() { return null; }
    void bar(String eyre) {
        if (books.getJane() == null &amp;&amp;
            books == eyre) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
// 1633683, should be ||, but now with another compare
public class Foo {
    void bar(String str) {
        if (str == null &amp;&amp; str.length() == 0) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// 1633683, Arrays are Ok II
public class Foo {
    void bar(String[] p) {
        if (p.length &gt; 1 &amp;&amp; p[0] == null) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// Different literals in variables should not match
public class Foo {
    String getJane() { return null; }
    void bar(Foo[] p) {
        if (p[0] == null &amp;&amp; p[1].getJane()) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code>
// Assignments in checks are OK
public class Book {
    Book[] books;
    Book[] getBook(int i) {return books;}
    void bar(int janeEyre) {
        if (books == null &amp;&amp;
            (books = getBook(janeEyre)) == null) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 9</description>
        <expected-problems>0</expected-problems>
        <code>
// Useless code, but it will not throw a NullPointerException
public class Family {
    String plain, bold;
    void bar(Family family) {
        if (family.plain == null &amp;&amp; family.bold == null &amp;&amp;
           family.plain == null &amp;&amp; family.bold == null) { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 10</description>
        <expected-problems>0</expected-problems>
        <code>
// Similar method calls with different arguments are OK
import my.Jane;
import my.Eyre;
public class Library {
    String[] getBook(Class&lt;?&gt; i) {return null;}
    void bar(Library library) {
        if (library.getBooks(Jane.class) != null ||
            library.getBooks(Eyre.class) != null) { }
    }
}</code>
    </test-code>
    <test-code>
        <description>ok 11</description>
        <expected-problems>0</expected-problems>
        <code>
// #3071 BrokenNullCheck FP
class Test{
                Object obj = new Object(), objectWithDifferentName = obj;

                public void testPMD(){
                    Object obj = new Object();
                    String str = "str";

                    //Case 1. : An Alarm is generated
                    if(obj == null &amp;&amp; !(obj instanceof String));

                    //Case 3.
                    if(obj == null &amp;&amp; this.obj == null); //An Alarm is generated
                    if(obj == null &amp;&amp; this.objectWithDifferentName); //An Alarm isn't generated
                    if(obj == null &amp;&amp; objectWithDifferentName); //An Alarm isn't generated
                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 5</description>
        <expected-problems>4</expected-problems>
        <code>
// BrokenNullCheck with Boolean variable
class Test{
                public void testPMD(){
                    Boolean boo = null;

                    boolean result;
                    result = boo == null &amp;&amp; boo != true;  // boo != true would throw NPE because of unboxing
                    result = boo == null &amp;&amp; boo != false; // same
                    result = boo == null &amp;&amp; boo == true;  // same
                    result = boo == null &amp;&amp; boo == false; // same
                }
            }</code>
    </test-code>
    <test-code>
        <description>ok 12</description>
        <expected-problems>0</expected-problems>
        <code>
// BrokenNullCheck with Boolean variable
class Test{
                public void testPMD(){
                    Boolean boo = null;

                    boolean result;

                    result = boo != null &amp;&amp; boo != true;  // ok
                    result = boo != null &amp;&amp; boo != false; // ok
                    result = boo != null &amp;&amp; boo == true;  // ok
                    result = boo != null &amp;&amp; boo == false; // ok

                }
            }</code>
    </test-code>
    <test-code>
        <description>ok 13</description>
        <expected-problems>0</expected-problems>
        <code>
// BrokenNullCheck with Boolean variable
class Test{
                public void testPMD(){
                    Boolean boo = null;

                    boolean result;

                    result = boo == null || boo != true;  // ok
                    result = boo == null || boo != false; // ok
                    result = boo == null || boo == true;  // ok
                    result = boo == null || boo == false; // ok

                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 6</description>
        <expected-problems>4</expected-problems>
        <code>
// BrokenNullCheck with Boolean variable
class Test{
                public void testPMD(){
                    Boolean boo = null;

                    boolean result;

                    result = boo != null || boo != true;  // second expression will throw
                    result = boo != null || boo != false; // second expression will throw
                    result = boo != null || boo == true;  // second expression will throw
                    result = boo != null || boo == false; // second expression will throw

                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// BrokenNullCheck with Boolean variable
class Test{
                public void testPMD(){
                    Boolean boo = null;

                    boolean result;

                    result = boo == null &amp;&amp; boo;          // same
                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 8</description>
        <expected-problems>4</expected-problems>
        <code>
// BrokenNullCheck with other kinds of NPEs (see QualifiableExpression)
class Test {
                interface FunctionalItf { String describe(); }
                boolean handle(FunctionalItf obj) {}
                Test field;
                class Inner {boolean isEmpty();}
                public void testPMD(){
                    Test boo = null;

                    boolean result;
                    result = boo == null &amp;&amp; handle(boo::toString);           // method reference
                    result = boo == null &amp;&amp; boo.toString();                  // method call
                    result = boo == null &amp;&amp; boo.field.field.hashCode() == 0; // field access
                    result = boo == null &amp;&amp; boo.new Inner().isEmpty();       // qualified ctor call

                }
            }</code>
    </test-code>

    <test-code>
        <description>bad 9</description>
        <expected-problems>1</expected-problems>
        <code>
// BrokenNullCheck with other kinds of NPEs (see QualifiableExpression)
class Test {
                interface FunctionalItf { String describe(); }
                boolean handle(FunctionalItf obj) {}
                Test field;
                class Inner {boolean isEmpty();}
                public void testPMD(){

                    boolean result;

                    int[] arr = null;

                    result = arr == null &amp;&amp; arr[i] == 0;                     // array access
                }
            }</code>
    </test-code>
    <test-code>
        <description>ok 14</description>
        <expected-problems>0</expected-problems>
        <code>
// #3071 BrokenNullCheck FPs (2)
import java.util.*;

            class Test {

                Test foo = new Test(), another = new Test();
                Map&lt;String, String&gt; map;
                String field;
                int idx;
                String[] arr, anotherArr;

                Object foo(Object o) {}

                public void testPMD() {
                    //Case 1.
                    if ((foo == null) != (another == null) || foo != null &amp;&amp; !foo.equals(another)) {
                        ;
                    }

                    //Case 2.
                    if (map.remove(null) != null || map.remove("") != null) {
                        ;
                    }
                    if (foo(foo) != null || foo(foo.field) != null) {
                        ;
                    }

                    //Case 3.
                    if (foo != null || foo == null &amp;&amp; another != null &amp;&amp; another.hashCode() == 0) {
                        ;
                    }

                    //Case 4.
                    if (null != arr[idx] || null == arr[idx] &amp;&amp; !anotherArr[idx].isEmpty()) {
                        ;
                    }
                }
            }</code>
    </test-code>
    <test-code>
        <description>bad 10</description>
        <expected-problems>4</expected-problems>
        <code>
// BrokenNullCheck with unboxing, unboxing this operand will throw a NullPointerException
class Test {
                public void testPMD(Integer i){
                    boolean result;
                    result = i == null &amp;&amp; i == 0;
                    result = i == null &amp;&amp; i &lt;&lt; 1;
                    result = i == null &amp;&amp; i + 0;
                    result = i == null &amp;&amp; i == 0.d;
                }
            }</code>
    </test-code>
    <test-code>
        <description>ok 15</description>
        <expected-problems>0</expected-problems>
        <code>
// Comparing two boxed things does not unbox
class Test {
                public void testPMD(Integer i, Integer d){
                    boolean result;
                    result = i == null &amp;&amp; i == d;
                    result = i == null &amp;&amp; i != d;
                }
            }</code>
    </test-code>
</test-data>