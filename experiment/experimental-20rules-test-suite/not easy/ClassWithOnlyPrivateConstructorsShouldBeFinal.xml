<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// Simple violation
public class Foo {
    private Foo() { }
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// violation for abstract class
public class Foo {
    private Foo() { }
}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// ok, class is final
public final class Foo {
    private Foo() { }
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
// One public constructor, not required to be final
public class Foo {
    private Foo() { }
    public Foo(String param) { }
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// abstract class, one public constructor, not required to be final
public abstract class Foo {
    private Foo() { }
    public Foo(String param) { }
}</code>
    </test-code>

    <test-code>
        <description>ok 4</description>
        <expected-problems>0</expected-problems>
        <code>
// Ok, subclass using the private constructor
public class Foo {
    private Foo() { }

    public static class Bar extends Foo {
        public Bar() { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 5</description>
        <expected-problems>0</expected-problems>
        <code>
// Ok, subclass using the private constructor of another subclass
public class Foo {
    public Foo() { }

    public static class Bar {
        private Bar() { }
    }

    public static class Barbie extends Bar {
        public Barbie() { }
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 6</description>
        <expected-problems>0</expected-problems>
        <code>
// Ok, two classes
public class Foo {
    private Foo() { }
}
class Bar extends Foo {
    public Bar() { }
}</code>
    </test-code>

    <test-code>
        <description>ok 7</description>
        <expected-problems>0</expected-problems>
        <code>
// One protected constructor, not required to be final
class ClassWithOnlyPrivateConstructorsShouldBeFinal {
    private String string;

    protected ClassWithOnlyPrivateConstructorsShouldBeFinal(final Object object) {
        this(object.toString());
    }

    private ClassWithOnlyPrivateConstructorsShouldBeFinal(final String string) {
        super();

        setString(string);
    }

    public final void setString(final String string) {
        this.string = string;
    }

    public String getString() {
        return string;
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 8</description>
        <expected-problems>0</expected-problems>
        <code>
// One package private constructor, not required to be final
class ClassWithOnlyPrivateConstructorsShouldBeFinal {
    private String string;

    ClassWithOnlyPrivateConstructorsShouldBeFinal(final Object object) {
        this(object.toString());
    }

    private ClassWithOnlyPrivateConstructorsShouldBeFinal(final String string) {
        super();

        setString(string);
    }

    public final void setString(final String string) {
        this.string = string;
    }

    public String getString() {
        return string;
    }
}</code>
    </test-code>
    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// #2536 [java] ClassWithOnlyPrivateConstructorsShouldBeFinal can't detect inner class with only private constructor
public class Main209 {
    private static class InputBits {
        private InputBits(int number) { }
    }
}</code>
    </test-code>
    <test-code>
        <description>ok 9</description>
        <expected-problems>0</expected-problems>
        <code>
// Inner class with only private constructor extended within compilation unit (#2536)
public class Main209 {
    private static class InputBits {
        private InputBits(int number) { }
    }
    public static final class Sub extends InputBits {
        private Sub() {
            super(1);
        }
    }
}</code>
    </test-code>
    <test-code>
        <description>bad 4</description>
        <expected-problems>1</expected-problems>
        <code>
// Private inner class with no ctor and no usage
public class Main209 {
    private static class InputBits {
        // default ctor is implicitly private
    }
}</code>
    </test-code>
    <test-code>
        <description>ok 10</description>
        <expected-problems>0</expected-problems>
        <code>
// Private inner class with no ctor and usage
public class Main209 {
    private static class InputBits {
        // default ctor is implicitly private
    }
    public static final class Sub extends InputBits {}
}</code>
    </test-code>

    <test-code>
        <description>ok 11</description>
        <expected-problems>0</expected-problems>
        <code>
// Private abstract classes with abstract methods should be ignored #3668
public class Outer {
    private abstract class Base {
        abstract void run();
    }
    public void someMethod() {
        Base b = new Base() {
            void run() {}
        };
        b.run();
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 12</description>
        <expected-problems>0</expected-problems>
        <code>
// Private abstract generic classes with abstract methods should be ignored #3668
import java.util.Comparator;
public class Outer {
    private abstract class Base&lt;E&gt; {
        abstract void run();
        abstract void sort(Comparator&lt;E&gt; comparator);
    }
    public void someMethod() {
        Base b = new Base&lt;Object&gt;() {
            void run() {}
            void sort(Comparator&lt;Object&gt; comparator) {}
        };
    }
}</code>
    </test-code>

    <test-code>
        <description>ok 13</description>
        <expected-problems>0</expected-problems>
        <code>
// Private abstract classes without abstract methods but with subclasses should be ignored #3668
public class Outer {
    private abstract class Base {
        private void run() {}
    }
    private final class Sub extends Base {}
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
// Private abstract classes without abstract methods and subclasses #3668
public class Outer {
    private abstract class Base {
        private void run() {}
    }
}</code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// Abstract outer classes should be flagged #3668
public abstract class FooUtils {
    private FooUtils() {
        // private constructor can't be called from sub classes,
        // so this class can't be extended
    }
    // note: this "abstract" class does not contain abstract methods
    // it was only declared as abstract to prevent instantiation
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal - false negative when a compilation unit contains two class declarations #3851
public class Example { // false-negative here
    private Example() {
    }
}

class Another {
}</code>
    </test-code>
    <test-code>
        <description>ok 14</description>
        <expected-problems>0</expected-problems>
        <code>
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal should consider lombok's @Value #4200
import lombok.Value;

@Value
public class Test {
    private Test(int a, int b) {}
}</code>
    </test-code>

    <test-code>
        <description>bad 8</description>
        <expected-problems>0</expected-problems>
        <code>
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal false positive with Lombok's @NoArgsConstructor #4188
import lombok.NoArgsConstructor;
@NoArgsConstructor
class NoArgs1 { private NoArgs1(String a) {} } // no violation
</code>
    </test-code>
</test-data>