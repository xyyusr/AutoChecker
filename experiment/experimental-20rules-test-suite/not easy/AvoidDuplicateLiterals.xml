<?xml version='1.0' encoding='utf-8'?>
<test-data>

    <test-code>
        <description>bad 1</description>
        <expected-problems>1</expected-problems>
        <code>
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}</code>
    </test-code>

    <test-code>
        <description>ok 1</description>
        <expected-problems>0</expected-problems>
        <code>
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}</code>
    </test-code>

    <test-code>
        <description>bad 2</description>
        <expected-problems>1</expected-problems>
        <code>
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}</code>
    </test-code>

    <test-code>
        <description>bad 3</description>
        <expected-problems>1</expected-problems>
        <code>
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}</code>
    </test-code>

    <test-code>
        <description>ok 2</description>
        <expected-problems>0</expected-problems>
        <code>
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}</code>
    </test-code>

    <test-code>
        <description>bad 4</description>
        <expected-problems>2</expected-problems>
        <code>
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}</code>
    </test-code>

    <test-code>
        <description>ok 3</description>
        <expected-problems>0</expected-problems>
        <code>
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}</code>
    </test-code>

    <test-code>
        <description>bad 5</description>
        <expected-problems>1</expected-problems>
        <code>
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}</code>
    </test-code>

    <test-code>
        <description>bad 6</description>
        <expected-problems>1</expected-problems>
        <code>
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}</code>
    </test-code>

    <test-code>
        <description>bad 7</description>
        <expected-problems>1</expected-problems>
        <code>
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}</code>
    </test-code>

    <test-code>
        <description>bad 8</description>
        <expected-problems>1</expected-problems>
        <code>
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}</code>
    </test-code>
</test-data>