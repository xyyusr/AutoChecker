开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============

第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 80.41933345794678 秒
