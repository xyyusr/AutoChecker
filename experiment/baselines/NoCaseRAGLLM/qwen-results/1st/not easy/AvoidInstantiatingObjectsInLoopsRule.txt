开始

========================================== Rule AvoidInstantiatingObjectsInLoopsRule ===========================================
一共 23 个测试用例
正例 14 个
反例 9 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: New objects can not be created within loops;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTArrayAccess: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public void forEach(java.util.function.Consumer)
5. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
7. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
8. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void wait(long, int)
11. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void forEach(java.util.function.Consumer)
12. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public int getNumChildren()
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTNonEmptyList: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTForInit: public int getNumChildren()
19. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class, ASTForeachStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        for (ASTBlockStatement blockStatement : node.getBlock().getStatements()) {
            if (blockStatement.containsDescendantOfType(ASTAllocationExpression.class)) {
                addViolation(data, blockStatement);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        for (ASTBlockStatement blockStatement : node.getBlock().getStatements()) {
            if (blockStatement.containsDescendantOfType(ASTAllocationExpression.class)) {
                addViolation(data, blockStatement);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        for (ASTBlockStatement blockStatement : node.getBlock().getStatements()) {
            if (blockStatement.containsDescendantOfType(ASTAllocationExpression.class)) {
                addViolation(data, blockStatement);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForeachStatement node, Object data) {
        for (ASTBlockStatement blockStatement : node.getBlock().getStatements()) {
            if (blockStatement.containsDescendantOfType(ASTAllocationExpression.class)) {
                addViolation(data, blockStatement);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: New objects can not be created within loops;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTArrayAccess: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public void forEach(java.util.function.Consumer)
5. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
7. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
8. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void wait(long, int)
11. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void forEach(java.util.function.Consumer)
12. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public int getNumChildren()
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTNonEmptyList: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTForInit: public int getNumChildren()
19. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class);
    }
    
    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (containsObjectInstantiation(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    
    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (containsObjectInstantiation(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    
    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (containsObjectInstantiation(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    
    private boolean containsObjectInstantiation(JavaNode loopNode) {
        return loopNode.descendants(ASTAllocationExpression.class).anyMatch(ASTAllocationExpression::isObjectCreation);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: New objects can not be created within loops;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTArrayAccess: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public void forEach(java.util.function.Consumer)
5. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
7. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
8. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void wait(long, int)
11. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void forEach(java.util.function.Consumer)
12. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public int getNumChildren()
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTNonEmptyList: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTForInit: public int getNumChildren()
19. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTForeachStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        node.children(ASTAllocationExpression.class).forEach(expr -> addViolation(data, expr));
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        node.children(ASTAllocationExpression.class).forEach(expr -> addViolation(data, expr));
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForeachStatement node, Object data) {
        node.children(ASTAllocationExpression.class).forEach(expr -> addViolation(data, expr));
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: New objects can not be created within loops;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTArrayAccess: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public void forEach(java.util.function.Consumer)
5. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
7. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
8. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void wait(long, int)
11. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void forEach(java.util.function.Consumer)
12. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public int getNumChildren()
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTNonEmptyList: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTForInit: public int getNumChildren()
19. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTConstructorCall.class);
    }

    @Override
    public Object visit(ASTConstructorCall node, Object data) {
        if (node.getNthParent(1) instanceof ASTBlockStatement) {
            ASTBlockStatement blockStatement = (ASTBlockStatement) node.getNthParent(1);
            if (blockStatement.getParent() instanceof ASTForStatement ||
                blockStatement.getParent() instanceof ASTWhileStatement ||
                blockStatement.getParent() instanceof ASTDoStatement ||
                blockStatement.getParent() instanceof ASTForeachStatement) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: New objects can not be created within loops;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTArrayAccess: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public void forEach(java.util.function.Consumer)
5. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
7. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
8. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void forEach(java.util.function.Consumer)
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void wait(long, int)
11. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void forEach(java.util.function.Consumer)
12. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public int getNumChildren()
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTNonEmptyList: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTImplementsList: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTForInit: public int getNumChildren()
19. net.sourceforge.pmd.lang.java.ast.ASTForInit: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTForeachStatement.class, ASTWhileStatement.class, ASTDoStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        for (JavaNode child : node.children(ASTAllocationExpression.class)) {
            if (isInsideLoop(child)) {
                addViolation(data, child);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForeachStatement node, Object data) {
        for (JavaNode child : node.children(ASTAllocationExpression.class)) {
            if (isInsideLoop(child)) {
                addViolation(data, child);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        for (JavaNode child : node.children(ASTAllocationExpression.class)) {
            if (isInsideLoop(child)) {
                addViolation(data, child);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        for (JavaNode child : node.children(ASTAllocationExpression.class)) {
            if (isInsideLoop(child)) {
                addViolation(data, child);
            }
        }
        return super.visit(node, data);
    }

    private boolean isInsideLoop(JavaNode node) {
        JavaNode parent = node.getParent();
        while (parent != null) {
            if (parent instanceof ASTForStatement || parent instanceof ASTForeachStatement || parent instanceof ASTWhileStatement || parent instanceof ASTDoStatement) {
                return true;
            }
            parent = parent.getParent();
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 120.96082401275635 秒
