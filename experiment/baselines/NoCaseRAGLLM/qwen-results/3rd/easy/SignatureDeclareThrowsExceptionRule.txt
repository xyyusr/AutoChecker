开始

========================================== Rule SignatureDeclareThrowsExceptionRule ===========================================
一共 22 个测试用例
正例 15 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
2. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isAbstract()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyAbstract()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean equals(java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object), //Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isThis(), //Returns true if this statement calls a constructor of the same class. The JLS calls that an <i>alternate constructor invocation</i>.
11. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType(), //Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.
12. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
13. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public void jjtClose()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList(), //Returns the {@code throws} clause of this declaration, or null if there is none.
15. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyStatic()
16. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isQualified(), //Returns true if this is a qualified superclass constructor invocation. They allow a subclass constructor to explicitly specify the newly created object's immediately enclosing instance with respect to the direct superclass (§8.1.3). This may be necessary when the superclass is an inner class.
17. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int hashCode()
18. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)
19. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Class<Class<?> getType()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public SignatureDeclareThrowsExceptionRule() {
        super(ASTMethodDeclaration.class, ASTConstructorDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        ASTThrowsList throwsList = node.getThrowsList();
        if (throwsList != null) {
            NodeStream<JTypeMirror> types = throwsList.children(JTypeMirror.class);
            types.filter(type -> type.getErasure().equals(TypeSystem.THROWABLE))
                 .forEach(type -> addViolation(data, node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        ASTThrowsList throwsList = node.getThrowsList();
        if (throwsList != null) {
            NodeStream<JTypeMirror> types = throwsList.children(JTypeMirror.class);
            types.filter(type -> type.getErasure().equals(TypeSystem.THROWABLE))
                 .forEach(type -> addViolation(data, node));
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
2. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isAbstract()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyAbstract()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean equals(java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object), //Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isThis(), //Returns true if this statement calls a constructor of the same class. The JLS calls that an <i>alternate constructor invocation</i>.
11. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType(), //Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.
12. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
13. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public void jjtClose()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList(), //Returns the {@code throws} clause of this declaration, or null if there is none.
15. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyStatic()
16. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isQualified(), //Returns true if this is a qualified superclass constructor invocation. They allow a subclass constructor to explicitly specify the newly created object's immediately enclosing instance with respect to the direct superclass (§8.1.3). This may be necessary when the superclass is an inner class.
17. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int hashCode()
18. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)
19. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Class<Class<?> getType()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public SignatureDeclareThrowsExceptionRule() {
        super(ASTMethodDeclaration.class, ASTConstructorDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        ASTThrowsList throwsList = node.getThrowsList();
        if (throwsList != null) {
            for (ASTName exceptionName : throwsList.children(ASTName.class)) {
                JClassType exceptionType = (JClassType) exceptionName.getType();
                if (exceptionType != null && exceptionType.getQualifiedName().equals("java.lang.Exception")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        ASTThrowsList throwsList = node.getThrowsList();
        if (throwsList != null) {
            for (ASTName exceptionName : throwsList.children(ASTName.class)) {
                JClassType exceptionType = (JClassType) exceptionName.getType();
                if (exceptionType != null && exceptionType.getQualifiedName().equals("java.lang.Exception")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
2. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isAbstract()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyAbstract()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean equals(java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object), //Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isThis(), //Returns true if this statement calls a constructor of the same class. The JLS calls that an <i>alternate constructor invocation</i>.
11. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType(), //Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.
12. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
13. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public void jjtClose()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList(), //Returns the {@code throws} clause of this declaration, or null if there is none.
15. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyStatic()
16. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isQualified(), //Returns true if this is a qualified superclass constructor invocation. They allow a subclass constructor to explicitly specify the newly created object's immediately enclosing instance with respect to the direct superclass (§8.1.3). This may be necessary when the superclass is an inner class.
17. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int hashCode()
18. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)
19. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Class<Class<?> getType()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public SignatureDeclareThrowsExceptionRule() {
        super(ASTConstructorDeclaration.class, ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        ASTThrowsClause throwsClause = node.getFirstChildOfType(ASTThrowsClause.class);
        if (throwsClause != null) {
            for (ASTName name : throwsClause.descendants(ASTName.class)) {
                JClassType exceptionType = (JClassType) name.getType();
                if (exceptionType != null && exceptionType.getFqName().equals("java.lang.Exception")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        ASTThrowsClause throwsClause = node.getFirstChildOfType(ASTThrowsClause.class);
        if (throwsClause != null) {
            for (ASTName name : throwsClause.descendants(ASTName.class)) {
                JClassType exceptionType = (JClassType) name.getType();
                if (exceptionType != null && exceptionType.getFqName().equals("java.lang.Exception")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
2. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isAbstract()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyAbstract()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean equals(java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object), //Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isThis(), //Returns true if this statement calls a constructor of the same class. The JLS calls that an <i>alternate constructor invocation</i>.
11. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType(), //Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.
12. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
13. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public void jjtClose()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList(), //Returns the {@code throws} clause of this declaration, or null if there is none.
15. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyStatic()
16. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isQualified(), //Returns true if this is a qualified superclass constructor invocation. They allow a subclass constructor to explicitly specify the newly created object's immediately enclosing instance with respect to the direct superclass (§8.1.3). This may be necessary when the superclass is an inner class.
17. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int hashCode()
18. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)
19. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Class<Class<?> getType()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public SignatureDeclareThrowsExceptionRule() {
        super(ASTMethodDeclaration.class, ASTConstructorDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        ASTThrowsClause throwsClause = node.getThrowsClause();
        if (throwsClause != null) {
            checkThrowsList(throwsClause);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        ASTThrowsClause throwsClause = node.getThrowsClause();
        if (throwsClause != null) {
            checkThrowsList(throwsClause);
        }
        return super.visit(node, data);
    }

    private void checkThrowsList(ASTThrowsClause throwsClause) {
        List<ASTClassOrInterfaceType> throwTypes = throwsClause.findDescendantsOfType(ASTClassOrInterfaceType.class);
        TypeSystem typeSystem = throwsClause.getTypeSystem();
        JTypeMirror exceptionType = typeSystem.forName("java.lang.Exception");

        for (ASTClassOrInterfaceType throwType : throwTypes) {
            JTypeMirror currentType = throwType.getTypeMirror();
            if (currentType != null && currentType.equals(exceptionType)) {
                addViolation(data, throwType);
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
2. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isAbstract()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyAbstract()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
5. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean equals(java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Object jjtAccept(net.sourceforge.pmd.lang.java.ast.JavaParserVisitor, java.lang.Object), //Calls back the visitor's visit method corresponding to the runtime type of this Node. @param visitor Visitor to dispatch @param data    Visit data @deprecated Use {@link #acceptVisitor(AstVisitor, Object)}
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isThis(), //Returns true if this statement calls a constructor of the same class. The JLS calls that an <i>alternate constructor invocation</i>.
11. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JMethodSig getMethodType(), //Gets the type of the method or constructor that is called by this node. See {@link OverloadSelectionResult#getMethodType()}.
12. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
13. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public void jjtClose()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList(), //Returns the {@code throws} clause of this declaration, or null if there is none.
15. net.sourceforge.pmd.lang.java.ast.ASTCatchParameter: public boolean isSyntacticallyStatic()
16. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public boolean isQualified(), //Returns true if this is a qualified superclass constructor invocation. They allow a subclass constructor to explicitly specify the newly created object's immediately enclosing instance with respect to the direct superclass (§8.1.3). This may be necessary when the superclass is an inner class.
17. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int hashCode()
18. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror(net.sourceforge.pmd.lang.java.types.TypingContext)
19. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.Class<Class<?> getType()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public SignatureDeclareThrowsExceptionRule() {
        super(ASTMethodDeclaration.class, ASTConstructorDeclaration.class);
    }
    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        ASTThrowsList throwsList = node.getThrowsList();
        if (throwsList != null) {
            for (ASTType type : throwsList.getTypes()) {
                JTypeMirror exceptionType = type.getTypeMirror();
                if (exceptionType != null && exceptionType.getErasure().getSimpleName().equals("Exception")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        ASTThrowsList throwsList = node.getThrowsList();
        if (throwsList != null) {
            for (ASTType type : throwsList.getTypes()) {
                JTypeMirror exceptionType = type.getTypeMirror();
                if (exceptionType != null && exceptionType.getErasure().getSimpleName().equals("Exception")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 150.2314097881317 秒
