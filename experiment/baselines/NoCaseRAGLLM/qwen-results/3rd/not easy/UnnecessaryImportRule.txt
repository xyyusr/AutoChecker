开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        String currentPackage = getCurrentPackage(node);
        NodeStream<ASTImportDeclaration> imports = node.descendants(ASTImportDeclaration.class);

        for (ASTImportDeclaration importDecl : imports) {
            if (importDecl.isStatic()) {
                continue;
            }

            if (isImplicitImport(importDecl) || isCurrentPackageImport(importDecl, currentPackage)) {
                addViolation(data, importDecl);
                continue;
            }

            String simpleName = importDecl.getImportedSimpleName();
            NodeStream<ASTName> names = node.descendants(ASTName.class);

            for (ASTName name : names) {
                if (name.getImage().equals(simpleName) && isUnambiguous(name, importDecl)) {
                    usedImports.add(importDecl.getOriginalText().toString());
                    break;
                }
            }

            if (name.equals(ASTConstructorCall.class)) {
                NodeStream<ASTClassOrInterfaceType> types = node.descendants(ASTClassOrInterfaceType.class);
                for (ASTClassOrInterfaceType type : types) {
                    if (type.getImage().equals(simpleName) && isUnambiguous(type, importDecl)) {
                        usedImports.add(importDecl.getOriginalText().toString());
                        break;
                    }
                }
            }
        }

        for (ASTImportDeclaration importDecl : imports) {
            if (!importDecl.isStatic() && !usedImports.contains(importDecl.getOriginalText().toString())) {
                addViolation(data, importDecl);
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        return super.visit(node, data);
    }

    private String getCurrentPackage(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDecl = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDecl != null ? packageDecl.getImage() : "";
    }

    private boolean isImplicitImport(ASTImportDeclaration importDecl) {
        String fullName = importDecl.getImportedName();
        return fullName.startsWith("java.lang.");
    }

    private boolean isCurrentPackageImport(ASTImportDeclaration importDecl, String currentPackage) {
        String fullName = importDecl.getImportedName();
        return currentPackage != null && fullName.startsWith(currentPackage + ".");
    }

    private boolean isUnambiguous(ASTName name, ASTImportDeclaration importDecl) {
        JType type = name.getType();
        return type != null && type.getSymbol() != null && type.getSymbol().getQualifiedName().equals(importDecl.getImportedName());
    }

    private boolean isUnambiguous(ASTConstructorCall call, ASTImportDeclaration importDecl) {
        ASTClassOrInterfaceType type = call.getFirstChildOfType(ASTClassOrInterfaceType.class);
        JType classType = type.getType();
        return classType != null && classType.getSymbol() != null && classType.getSymbol().getQualifiedName().equals(importDecl.getImportedName());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        Set<String> implicitImports = new HashSet<>(Arrays.asList(
            "Object", "String", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double", "Void",
            "Math", "Integer", "Character", "Boolean", "Double", "Float", "Long", "Short", "Byte", "System", "Thread"
        ));

        node.getPackageDeclaration().ifPresent(pkgDecl -> implicitImports.add(pkgDecl.getPackageName()));
        node.getTypeDeclarations().forEach(typeDecl -> collectTypeSymbols(typeDecl, usedImports));

        node.getImportDeclarations().forEach(importDecl -> {
            String importName = importDecl.getImportedSimpleName();
            boolean isDuplicated = importDecl.descendants().anyMatch(desc -> desc instanceof ASTImportDeclaration && desc.equals(importDecl));
            boolean isUnused = importName != null && !usedImports.contains(importName);
            boolean isImplicit = importName != null && implicitImports.contains(importName);

            if (isDuplicated || isUnused || isImplicit) {
                addViolation(data, importDecl);
            }
        });

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        return super.visit(node, data);
    }

    private void collectTypeSymbols(ASTTypeDeclaration typeDecl, Set<String> usedImports) {
        String typeName = typeDecl.getImage();
        usedImports.add(typeName);

        typeDecl.descendantsOrSelf(ASTPrimaryExpression.class).forEach(primaryExpr -> {
            primaryExpr.getFirstChildOfType(ASTPrimaryPrefix.class).ifPresent(prefix -> {
                prefix.getFirstChildOfType(ASTName.class).ifPresent(name -> {
                    String nameImage = name.getImage();
                    if (nameImage.contains(".")) {
                        String[] parts = nameImage.split("\\.");
                        usedImports.add(parts[parts.length - 1]);
                    }
                });
            });
        });

        typeDecl.descendantsOrSelf(ASTLiteral.class).forEach(literal -> {
            if (literal.getLiteralType() == ASTLiteral.LiteralType.String) {
                usedImports.add("String");
            }
        });

        typeDecl.descendantsOrSelf(ASTCastExpression.class).forEach(castExpr -> {
            castExpr.getFirstChildOfType(ASTClassOrInterfaceType.class).ifPresent(type -> {
                String typeImage = type.getImage();
                if (typeImage.contains(".")) {
                    String[] parts = typeImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTAllocationExpression.class).forEach(allocExpr -> {
            allocExpr.getFirstChildOfType(ASTClassOrInterfaceType.class).ifPresent(type -> {
                String typeImage = type.getImage();
                if (typeImage.contains(".")) {
                    String[] parts = typeImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTMethodDeclaration.class).forEach(methodDecl -> {
            methodDecl.descendantsOrSelf(ASTMethodReference.class).forEach(methodRef -> {
                methodRef.getFirstChildOfType(ASTName.class).ifPresent(name -> {
                    String nameImage = name.getImage();
                    if (nameImage.contains(".")) {
                        String[] parts = nameImage.split("\\.");
                        usedImports.add(parts[parts.length - 1]);
                    }
                });
            });
        });

        typeDecl.descendantsOrSelf(ASTFieldDeclaration.class).forEach(fieldDecl -> {
            fieldDecl.getFirstChildOfType(ASTType.class).ifPresent(type -> {
                String typeImage = type.getImage();
                if (typeImage.contains(".")) {
                    String[] parts = typeImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTLambdaExpression.class).forEach(lambdaExpr -> {
            lambdaExpr.getFirstChildOfType(ASTType.class).ifPresent(type -> {
                String typeImage = type.getImage();
                if (typeImage.contains(".")) {
                    String[] parts = typeImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTClassOrInterfaceBody.class).forEach(body -> {
            body.descendantsOrSelf(ASTClassOrInterfaceDeclaration.class).forEach(classDecl -> {
                String className = classDecl.getImage();
                usedImports.add(className);
            });
        });

        typeDecl.descendantsOrSelf(ASTClassOrInterfaceReference.class).forEach(classRef -> {
            String classRefImage = classRef.getImage();
            if (classRefImage.contains(".")) {
                String[] parts = classRefImage.split("\\.");
                usedImports.add(parts[parts.length - 1]);
            }
        });

        typeDecl.descendantsOrSelf(ASTMethodCall.class).forEach(methodCall -> {
            methodCall.getFirstChildOfType(ASTName.class).ifPresent(name -> {
                String nameImage = name.getImage();
                if (nameImage.contains(".")) {
                    String[] parts = nameImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTFieldAccess.class).forEach(fieldAccess -> {
            fieldAccess.getFirstChildOfType(ASTName.class).ifPresent(name -> {
                String nameImage = name.getImage();
                if (nameImage.contains(".")) {
                    String[] parts = nameImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTConstructorCall.class).forEach(constructorCall -> {
            constructorCall.getFirstChildOfType(ASTClassOrInterfaceType.class).ifPresent(type -> {
                String typeImage = type.getImage();
                if (typeImage.contains(".")) {
                    String[] parts = typeImage.split("\\.");
                    usedImports.add(parts[parts.length - 1]);
                }
            });
        });

        typeDecl.descendantsOrSelf(ASTEnumConstant.class).forEach(enumConstant -> {
            enumConstant.getFirstChildOfType(ASTClassOrInterfaceBody.class).ifPresent(body -> {
                body.descendantsOrSelf(ASTClassOrInterfaceDeclaration.class).forEach(classDecl -> {
                    String className = classDecl.getImage();
                    usedImports.add(className);
                });
            });
        });
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.util.stream.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedImports;
    private Set<String> implicitImports;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
        implicitImports = Stream.of("Object", "Cloneable", "Runnable", "Throwable", "Exception", "Error", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double", "Void", "String", "Class", "ClassLoader", "Enum", "InheritableThreadLocal", "ThreadLocal", "Thread", "Math", "StrictMath", "Runtime", "Compiler")
                              .collect(Collectors.toSet());
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports = new HashSet<>();
        implicitImports.add(node.getPackageName());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        if (!node.isStatic() && node.getImportedSimpleName() == null) {
            implicitImports.add(node.getImportedName().replaceAll("\\*.*", ""));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        node.findDescendantsOfType(ASTName.class, true).stream()
            .map(ASTName::getImage)
            .filter(name -> name.contains("."))
            .map(name -> name.substring(0, name.lastIndexOf('.')))
            .forEach(usedImports::add);
        return super.visit(node, data);
    }

    @Override
    public void end(ASTCompilationUnit node, Object data) {
        SymbolTable symbolTable = node.getSymbolTable();
        Scope currentScope = symbolTable.getCurrentScope();
        node.findDescendantsOfType(ASTImportDeclaration.class, true).stream()
            .filter(importDecl -> !importDecl.isStatic() && importDecl.getImportedSimpleName() != null)
            .filter(importDecl -> {
                String importedName = importDecl.getImportedName();
                return !usedImports.contains(importedName) || implicitImports.stream().anyMatch(importedName::startsWith);
            })
            .forEach(importDecl -> addViolation(data, importDecl));
        super.end(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        Set<String> implicitImports = new HashSet<>(Arrays.asList("Object", "String", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double", "Void", "Thread", "Runnable", "Exception", "Throwable", "Error", "Cloneable", "Comparable", "Iterable", "Serializable"));
        Map<String, Integer> importCount = new HashMap<>();

        String packageName = node.getFirstDescendantOfType(ASTPackageDeclaration.class).getPackageNameImage();
        implicitImports.addAll(node.getFirstDescendantOfType(ASTClassOrInterfaceDeclaration.class).getClassOrInterfaceDeclarations().stream()
                .map(ASTClassOrInterfaceDeclaration::getName)
                .collect(java.util.stream.Collectors.toList()));

        node.descendants(ASTImportDeclaration.class).forEach(importDeclaration -> {
            String importedName = importDeclaration.getImportedName();
            if (importDeclaration.isStatic() || importDeclaration.isFindBoundary()) {
                return;
            }
            importCount.put(importedName, importCount.getOrDefault(importedName, 0) + 1);
        });

        node.descendants(ASTName.class).forEach(name -> {
            JType type = name.getType();
            if (type != null && type.getTypeSymbol() instanceof JClassSymbol) {
                JClassSymbol classSymbol = (JClassSymbol) type.getTypeSymbol();
                String className = classSymbol.getName();
                if (importCount.containsKey(className) && !className.startsWith(packageName)) {
                    usedImports.add(className);
                }
            }
        });

        Set<String> allImports = new HashSet<>(importCount.keySet());
        allImports.removeAll(usedImports);
        allImports.removeAll(implicitImports);

        allImports.forEach(importedName -> {
            node.descendants(ASTImportDeclaration.class).stream()
                    .filter(importDeclaration -> importedName.equals(importDeclaration.getImportedName()))
                    .findFirst()
                    .ifPresent(importDeclaration -> addViolationWithMessage(data, importDeclaration, "Unnecessary import: " + importedName));
        });

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        String currentPackageName = getCurrentPackageName(node);

        node.descendants(ASTImportDeclaration.class).forEach(importDecl -> {
            if (importDecl.isStatic()) {
                if (!isUsedStaticImport(importDecl, node)) {
                    addViolation(data, importDecl);
                }
            } else {
                if (!isUsedNonStaticImport(importDecl, node, currentPackageName)) {
                    addViolation(data, importDecl);
                }
            }
        });

        return super.visit(node, data);
    }

    private String getCurrentPackageName(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDecl = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDecl != null ? packageDecl.getPackageName() : null;
    }

    private boolean isUsedNonStaticImport(ASTImportDeclaration importDecl, ASTCompilationUnit node, String currentPackageName) {
        String importedName = importDecl.getImportedSimpleName();
        String importName = importDecl.getImportedName();

        if (importName.startsWith("java.lang.") || importName.equals(currentPackageName)) {
            return true;
        }

        return node.descendants(ASTName.class).anyMatch(name -> {
            JType type = name.getTypeInference().getType();
            if (type instanceof JClassSymbol) {
                JClassSymbol classSymbol = (JClassSymbol) type;
                String classFullName = classSymbol.getQualifiedName();
                return classFullName.equals(importName) || classFullName.startsWith(importName + ".");
            }
            return false;
        });
    }

    private boolean isUsedStaticImport(ASTImportDeclaration importDecl, ASTCompilationUnit node) {
        String importedName = importDecl.getImportedSimpleName();
        String importName = importDecl.getImportedName();

        return node.descendants(ASTPrimaryExpression.class).anyMatch(expr -> {
            ASTPrimaryPrefix prefix = expr.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (prefix != null) {
                ASTName name = prefix.getFirstChildOfType(ASTName.class);
                if (name != null) {
                    String fullName = name.getImage();
                    return fullName.equals(importedName) || fullName.startsWith(importedName + ".");
                }
            }
            return false;
        });
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 213.772700548172 秒
