开始

========================================== Rule ExcessivePublicCountRule ===========================================
一共 7 个测试用例
正例 4 个
反例 3 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)
4. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isSyntacticallyPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isSyntacticallyPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public boolean isSyntacticallyPublic()
7. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public int getNumChildren()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isSyntacticallyPublic()
9. net.sourceforge.pmd.lang.java.ast.InternalApiBridge: static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit), //Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the
10. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set), //Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSyntacticallyPublic()
12. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isPublic()
13. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyPublic()
14. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyFinal()
15. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int getNumChildren()
16. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
17. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    private static final int EXCESSIVE_PUBLIC_COUNT = 2;

    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        int publicCount = 0;
        for (ASTMethodDeclaration methodDeclaration : node.findDescendantsOfType(ASTMethodDeclaration.class)) {
            if (methodDeclaration.isSyntacticallyPublic()) {
                publicCount++;
            }
        }
        for (ASTFieldDeclaration fieldDeclaration : node.findDescendantsOfType(ASTFieldDeclaration.class)) {
            if (fieldDeclaration.isSyntacticallyPublic()) {
                publicCount++;
            }
        }
        if (publicCount > EXCESSIVE_PUBLIC_COUNT) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 47.100255727767944 秒
