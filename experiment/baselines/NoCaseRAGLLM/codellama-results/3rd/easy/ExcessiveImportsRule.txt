开始

========================================== Rule ExcessiveImportsRule ===========================================
一共 2 个测试用例
正例 1 个
反例 1 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isImportOnDemand()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<Node> findChildNodesWithXPath(java.lang.String)
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getXPathNodeName()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean hasDescendantOfType(java.lang.Class)
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTPermitsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()
19. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public ExcessiveImportsRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        int importCount = 0;
        NodeStream<ImportDeclaration> importDeclarations = node.descendants(ImportDeclaration.class);
        for (ImportDeclaration declaration : importDeclarations) {
            importCount++;
            if (importCount > 3) {
                addViolation(data, node);
                break;
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isImportOnDemand()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<Node> findChildNodesWithXPath(java.lang.String)
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getXPathNodeName()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean hasDescendantOfType(java.lang.Class)
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTPermitsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()
19. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTCompilationUnit unit, Object data) {
        int threshold = 3;
        int importCount = countImports(unit);
        if (importCount > threshold) {
            addViolation(data, unit);
        }
        return unit;
    }

    private int countImports(ASTCompilationUnit unit) {
        int count = 0;
        for (ASTImportDeclaration importDecl : unit.findDescendantsOfType(ASTImportDeclaration.class)) {
            if (importDecl.isFindBoundary()) {
                count++;
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isImportOnDemand()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<Node> findChildNodesWithXPath(java.lang.String)
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getXPathNodeName()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean hasDescendantOfType(java.lang.Class)
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTPermitsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()
19. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    private static final int DEFAULT_THRESHOLD = 3;

    public ExcessiveImportsRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        int importCount = getImportCount(node);
        if (importCount > DEFAULT_THRESHOLD) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private int getImportCount(ImportDeclaration node) {
        int count = 0;
        for (ImportDeclaration importDecl : node.findChildNodesWithXPath("//*")) {
            if (!importDecl.isFindBoundary()) {
                count++;
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isImportOnDemand()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<Node> findChildNodesWithXPath(java.lang.String)
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getXPathNodeName()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean hasDescendantOfType(java.lang.Class)
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTPermitsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()
19. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    public ExcessiveImportsRule() {
        super(JavaNode.class);
    }

    @Override
    public Object visit(ASTCompilationUnit unit, Object data) {
        int excessiveImportsCount = 0;
        for (ASTImportDeclaration importDecl : unit.findChildNodesWithXPath("//ImportDeclaration")) {
            if (importDecl.getNumChildren() > 0 && importDecl.isImportOnDemand()) {
                excessiveImportsCount++;
            } else {
                excessiveImportsCount += importDecl.getNumChildren();
            }
        }
        if (excessiveImportsCount > 3) {
            addViolation(data, unit);
        }
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestors()
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isImportOnDemand()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNthParent(int)
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<Node> findChildNodesWithXPath(java.lang.String)
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getXPathNodeName()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean hasDescendantOfType(java.lang.Class)
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.Node getPreviousSibling()
17. net.sourceforge.pmd.lang.java.ast.ASTPermitsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()
19. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    public ExcessiveImportsRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        int excessiveImportsCount = 0;
        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            if (importDeclaration.isImportOnDemand()) {
                excessiveImportsCount++;
            } else {
                excessiveImportsCount += importDeclaration.getNumChildren();
            }
        }

        if (excessiveImportsCount > 3) {
            addViolation(this, data, node);
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 133.42224311828613 秒
