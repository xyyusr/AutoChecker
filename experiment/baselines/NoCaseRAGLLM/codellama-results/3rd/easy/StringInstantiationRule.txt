开始

========================================== Rule StringInstantiationRule ===========================================
一共 10 个测试用例
正例 5 个
反例 5 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Avoid instantiating String objects.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.Collection;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        addRuleMessage("Avoid instantiating String objects.");
        addRuleChainVisitor(ClassOrInterfaceType.class, ConstructorDeclaration.class);
    }

    @Override
    public Object visit(ClassOrInterfaceType node, Object data) {
        Collection<String> stringInstantiations = new ArrayList<>();
        DescendantNodeStream<JavaNode> descendants = node.descendantsOrSelf();
        for (JavaNode descendant : descendants) {
            if (descendant instanceof StringLiteral) {
                if (descendant.toString().equals("new String()")) {
                    stringInstantiations.add(node.toString());
                }
            } else if (descendant instanceof ClassOrInterfaceDeclaration) {
                String className = descendant.toString();
                if (className.contains("String")) {
                    stringInstantiations.add(node.toString());
                }
            } else if (descendant instanceof ConstructorCall) {
                String constructorCall = descendant.toString();
                if (constructorCall.contains("new String(") && !constructorCall.contains("String.valueOf(") && !JavaRuleUtil.isStringBuilderCtorOrAppend((ASTExpression) descendant.getFirstChild())) {
                    stringInstantiations.add(node.toString());
                }
            }
        }
        if (!stringInstantiations.isEmpty()) {
            addRuleViolation(node, stringInstantiations);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Avoid instantiating String objects.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        super(MethodDeclaration.class, ConstructorDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isStatic() && node.isConstructor()) {
            if (node.getBody().getFirstChild() instanceof ASTNewArray) {
                ASTNewArray newArray = (ASTNewArray) node.getBody().getFirstChild();
                if (newArray.getType() instanceof ASTClassOrInterfaceType) {
                    ASTClassOrInterfaceType classType = (ASTClassOrInterfaceType) newArray.getType();
                    if (classType.toString().equals("java.lang.String")) {
                        addRuleViolation(node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorDeclaration node, Object data) {
        if (node.isStatic()) {
            for (Expression argument : node.getParameters().getChildren()) {
                if (argument instanceof ASTStringLiteral) {
                    addRuleViolation(node);
                    break;
                }
            }
        }
        return super.visit(node, data);
    }

    private void addRuleViolation(JavaNode node) {
        //Add your logic here to add rule violation
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Avoid instantiating String objects.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        super(MethodDeclaration.class, ConstructorDeclaration.class, NewClassExpression.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getBody() != null && node.getBody().getStatements().size() == 1 && node.getBody().getStatements().get(0) instanceof ExpressionStatement) {
            Expression expression = ((ExpressionStatement) node.getBody().getStatements().get(0)).getExpression();
            if (expression instanceof NewClassExpression) {
                NewClassExpression newClassExpression = (NewClassExpression) expression;
                if (newClassExpression.getType() instanceof PrimitiveType || newClassExpression.getType() instanceof ClassOrInterfaceType && ((ClassOrInterfaceType) newClassExpression.getType()).getName().equals("java.lang.String")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorDeclaration node, Object data) {
        if (node.getBody() != null && node.getBody().getStatements().size() == 1 && node.getBody().getStatements().get(0) instanceof ExpressionStatement) {
            Expression expression = ((ExpressionStatement) node.getBody().getStatements().get(0)).getExpression();
            if (expression instanceof NewClassExpression) {
                NewClassExpression newClassExpression = (NewClassExpression) expression;
                if (newClassExpression.getType() instanceof PrimitiveType || newClassExpression.getType() instanceof ClassOrInterfaceType && ((ClassOrInterfaceType) newClassExpression.getType()).getName().equals("java.lang.String")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpression node, Object data) {
        if (node.getType() instanceof PrimitiveType || node.getType() instanceof ClassOrInterfaceType && ((ClassOrInterfaceType) node.getType()).getName().equals("java.lang.String")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Avoid instantiating String objects.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public StringInstantiationRule() {
        super(ForInit.class, ConstructorCall.class, NewClass.class);
    }

    @Override
    public Object visit(ForInit node, Object data) {
        if (node.getParent() instanceof ClassOrInterfaceDeclaration && node.getFirstChild().isStringLiteral()) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorCall node, Object data) {
        if (node.toString().contains("String")) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClass node, Object data) {
        if (node.toString().contains("String")) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Avoid instantiating String objects.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public StringInstantiationRule() {
        super(ElementNode.class, ExpressionStatement.class, 
              Assignment.class, MethodCall.class, 
              NewClass.class, NewArray.class);
    }

    @Override
    public Object visit(ElementNode node, Object data) {
        if (!node.toString().startsWith("new ")) {
            return super.visit(node, data);
        }
        String varName = node.getImage();
        if (node.jjtGetChild(0) instanceof PrimitiveType) {
            return super.visit(node, data);
        }
        if (node.jjtGetChild(0) instanceof ASTIdentifier ||
            node.jjtGetChild(0) instanceof ASTMemberAccess ||
            node.jjtGetChild(0) instanceof ASTArrayAccess) {
            StringInstantiationFinder visitor = new StringInstantiationFinder();
            visitor.init(data);
            node.jjtAccept(visitor, data);
            if (visitor.isStringInstantiated()) {
                addRuleViolation(node, "Avoid instantiating String objects.");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCall node, Object data) {
        if (node.toString().startsWith("StringBuffer.") ||
            node.toString().startsWith("StringBuilder.")) {
            return super.visit(node, data);
        }
        StringInstantiationFinder visitor = new StringInstantiationFinder();
        visitor.init(data);
        node.jjtAccept(visitor, data);
        if (visitor.isStringInstantiated()) {
            addRuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClass node, Object data) {
        if (node.toString().startsWith("StringBuffer.") ||
            node.toString().startsWith("StringBuilder.")) {
            return super.visit(node, data);
        }
        StringInstantiationFinder visitor = new StringInstantiationFinder();
        visitor.init(data);
        node.jjtAccept(visitor, data);
        if (visitor.isStringInstantiated()) {
            addRuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignment node, Object data) {
        StringInstantiationFinder visitor = new StringInstantiationFinder();
        visitor.init(data);
        node.jjtAccept(visitor, data);
        if (visitor.isStringInstantiated()) {
            addRuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewArray node, Object data) {
        StringInstantiationFinder visitor = new StringInstantiationFinder();
        visitor.init(data);
        node.jjtAccept(visitor, data);
        if (visitor.isStringInstantiated()) {
            addRuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }
}

class StringInstantiationFinder extends AbstractASTVisitor {
    private boolean stringInstantiated = false;

    public void init(Object data) {
        this.data = data;
    }

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (((StringInstantiationRule)data).isStringInstantiated(node)) {
            stringInstantiated = true;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIdentifier node, Object data) {
        if (((StringInstantiationRule)data).isStringInstantiated(node)) {
            stringInstantiated = true;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMemberAccess node, Object data) {
        if (((StringInstantiationRule)data).isStringInstantiated(node)) {
            stringInstantiated = true;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTArrayAccess node, Object data) {
        if (((StringInstantiationRule)data).isStringInstantiated(node)) {
            stringInstantiated = true;
        }
        return super.visit(node, data);
    }

    public boolean isStringInstantiated() {
        return stringInstantiated;
    }

    public boolean isStringInstantiated(Node node) {
        if (node instanceof ASTStringLiteral) {
            return true;
        }
        if (node instanceof ASTIdentifier) {
            String name = ((ASTIdentifier)node).getImage();
            if (name.equals("String") || name.equals("string")) {
                return true;
            }
        }
        if (node instanceof ASTMemberAccess) {
            String name = ((ASTMemberAccess)node).getImage();
            if (name.equals("String") || name.equals("string")) {
                return true;
            }
        }
        if (node instanceof ASTArrayAccess) {
            String name = ((ASTArrayAccess)node).getImage();
            if (name.equals("String") || name.equals("string")) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 149.1151180267334 秒
