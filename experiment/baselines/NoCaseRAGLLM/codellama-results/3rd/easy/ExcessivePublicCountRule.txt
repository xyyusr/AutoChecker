开始

========================================== Rule ExcessivePublicCountRule ===========================================
一共 7 个测试用例
正例 4 个
反例 3 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)
4. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isSyntacticallyPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isSyntacticallyPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public boolean isSyntacticallyPublic()
7. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public int getNumChildren()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isSyntacticallyPublic()
9. net.sourceforge.pmd.lang.java.ast.InternalApiBridge: static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit), //Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the
10. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set), //Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSyntacticallyPublic()
12. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isPublic()
13. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyPublic()
14. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyFinal()
15. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int getNumChildren()
16. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
17. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    private int publicMethodsThreshold = 2;

    public ExcessivePublicCountRule() {
        super("Excessive Public Count Rule", "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        if (node instanceof ASTClassOrInterfaceDeclaration) {
            ASTClassOrInterfaceDeclaration classDeclaration = (ASTClassOrInterfaceDeclaration) node;
            if (classDeclaration.isSyntacticallyPublic()) {
                visitClassOrInterface(classDeclaration, data);
            }
        } else if (node instanceof ASTAnnotationTypeDeclaration) {
            ASTAnnotationTypeDeclaration annotationTypeDeclaration = (ASTAnnotationTypeDeclaration) node;
            if (annotationTypeDeclaration.isSyntacticallyPublic()) {
                visitClassOrInterface(annotationTypeDeclaration, data);
            }
        } else if (node instanceof ASTLocalClassStatement) {
            ASTLocalClassStatement localClassStatement = (ASTLocalClassStatement) node;
            visitLocalClass(localClassStatement, data);
        } else if (node instanceof ASTAnonymousClassDeclaration) {
            visitAnonymousClass((ASTAnonymousClassDeclaration) node, data);
        } else if (node instanceof ASTMethodDeclaration) {
            ASTMethodDeclaration methodDeclaration = (ASTMethodDeclaration) node;
            if (methodDeclaration.isSyntacticallyPublic()) {
                visitMethod(methodDeclaration, data);
            }
        }
        return super.visit(node, data);
    }

    private void visitClassOrInterface(ASTClassOrInterfaceDeclaration node, Object data) {
        int numMethods = ASTMethodDeclaration.class.sizeOrZero(node.getMethods());
        int numFields = ASTFieldDeclaration.class.sizeOrZero(node.getFields());

        if (numMethods > publicMethodsThreshold || numFields > publicMethodsThreshold) {
            addViolation(this, data, node);
        }
    }

    private void visitLocalClass(ASTLocalClassStatement node, Object data) {
        int numMethods = ASTMethodDeclaration.class.sizeOrZero(node.getMethods());
        int numFields = ASTFieldDeclaration.class.sizeOrZero(node.getFields());

        if (numMethods > publicMethodsThreshold || numFields > publicMethodsThreshold) {
            addViolation(this, data, node);
        }
    }

    private void visitAnonymousClass(ASTAnonymousClassDeclaration node, Object data) {
        int numMethods = ASTMethodDeclaration.class.sizeOrZero(node.getMethods());
        int numFields = ASTFieldDeclaration.class.sizeOrZero(node.getFields());

        if (numMethods > publicMethodsThreshold || numFields > publicMethodsThreshold) {
            addViolation(this, data, node);
        }
    }

    private void visitMethod(ASTMethodDeclaration node, Object data) {
        // This method is not doing anything for now
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)
4. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isSyntacticallyPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isSyntacticallyPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public boolean isSyntacticallyPublic()
7. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public int getNumChildren()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isSyntacticallyPublic()
9. net.sourceforge.pmd.lang.java.ast.InternalApiBridge: static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit), //Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the
10. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set), //Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSyntacticallyPublic()
12. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isPublic()
13. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyPublic()
14. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyFinal()
15. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int getNumChildren()
16. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
17. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    public ExcessivePublicCountRule() {
        super(
                ASTClassOrInterfaceDeclaration.class,
                ASTAnnotationTypeDeclaration.class,
                ASTLocalClassStatement.class,
                ASTAnonymousClassDeclaration.class,
                ASTCompilationUnit.class
        );
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        if (node == null || !node.isSyntacticallyPublic()) {
            return super.visit(node, data);
        }
        int publicMethods = 0;
        if (node instanceof ASTClassOrInterfaceDeclaration) {
            publicMethods += countPublicMethods((ASTClassOrInterfaceDeclaration) node);
        }
        else if (node instanceof ASTAnnotationTypeDeclaration) {
            publicMethods += countPublicMethods((ASTAnnotationTypeDeclaration) node);
        }
        else if (node instanceof ASTLocalClassStatement) {
            publicMethods += countPublicMethods((ASTLocalClassStatement) node);
        }
        else if (node instanceof ASTAnonymousClassDeclaration) {
            publicMethods += countPublicMethods((ASTAnonymousClassDeclaration) node);
        }
        if (publicMethods > 2) {
            addRuleViolation(node, "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node == null || !node.isSyntacticallyPublic()) {
            return super.visit(node, data);
        }
        int publicMethods = countPublicMethods(node);
        if (publicMethods > 2) {
            addRuleViolation(node, "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnnotationTypeDeclaration node, Object data) {
        if (node == null || !node.isSyntacticallyPublic()) {
            return super.visit(node, data);
        }
        int publicMethods = countPublicMethods(node);
        if (publicMethods > 2) {
            addRuleViolation(node, "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalClassStatement node, Object data) {
        if (node == null || !node.isSyntacticallyPublic()) {
            return super.visit(node, data);
        }
        int publicMethods = countPublicMethods(node);
        if (publicMethods > 2) {
            addRuleViolation(node, "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnonymousClassDeclaration node, Object data) {
        if (node == null || !node.isSyntacticallyPublic()) {
            return super.visit(node, data);
        }
        int publicMethods = countPublicMethods(node);
        if (publicMethods > 2) {
            addRuleViolation(node, "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
        }
        return super.visit(node, data);
    }

    private int countPublicMethods(ASTClassOrInterfaceDeclaration node) {
        int publicMethods = 0;
        for (ASTMethodDeclaration method : node.getDeclaredMethods()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTMethodDeclaration method : node.getDeclaredConstructors()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTLocalClassStatement localClass : node.getDeclaredLocalClasses()) {
            publicMethods += countPublicMethods(localClass);
        }
        for (ASTAnonymousClassDeclaration anonymousClass : node.getDeclaredAnonymousClasses()) {
            publicMethods += countPublicMethods(anonymousClass);
        }
        return publicMethods;
    }

    private int countPublicMethods(ASTAnnotationTypeDeclaration node) {
        int publicMethods = 0;
        for (ASTMethodDeclaration method : node.getDeclaredMethods()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTMethodDeclaration method : node.getDeclaredConstructors()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTLocalClassStatement localClass : node.getDeclaredLocalClasses()) {
            publicMethods += countPublicMethods(localClass);
        }
        for (ASTAnonymousClassDeclaration anonymousClass : node.getDeclaredAnonymousClasses()) {
            publicMethods += countPublicMethods(anonymousClass);
        }
        return publicMethods;
    }

    private int countPublicMethods(ASTLocalClassStatement node) {
        int publicMethods = 0;
        for (ASTMethodDeclaration method : node.getDeclaredMethods()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTMethodDeclaration method : node.getDeclaredConstructors()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTLocalClassStatement localClass : node.getDeclaredLocalClasses()) {
            publicMethods += countPublicMethods(localClass);
        }
        for (ASTAnonymousClassDeclaration anonymousClass : node.getDeclaredAnonymousClasses()) {
            publicMethods += countPublicMethods(anonymousClass);
        }
        return publicMethods;
    }

    private int countPublicMethods(ASTAnonymousClassDeclaration node) {
        int publicMethods = 0;
        for (ASTMethodDeclaration method : node.getDeclaredMethods()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        for (ASTMethodDeclaration method : node.getDeclaredConstructors()) {
            if (method.isSyntacticallyPublic()) {
                publicMethods++;
            }
        }
        return publicMethods;
    }

    private void addRuleViolation(JavaNode node, String message) {
        addRuleViolation(node.getBeginLine(), node.getBeginColumn(), node.getEndLine(), node.getEndColumn(), message);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)
4. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isSyntacticallyPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isSyntacticallyPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public boolean isSyntacticallyPublic()
7. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public int getNumChildren()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isSyntacticallyPublic()
9. net.sourceforge.pmd.lang.java.ast.InternalApiBridge: static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit), //Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the
10. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set), //Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSyntacticallyPublic()
12. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isPublic()
13. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyPublic()
14. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyFinal()
15. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int getNumChildren()
16. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
17. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;
import org.apache.commons.lang3.StringUtils;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTClassOrInterfaceBody.class, ASTAnnotationTypeDeclaration.class, ASTAnnotationTypeBody.class, ASTAnonymousClassDeclaration.class, ASTLocalClassStatement.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        int methods = sizeOrZero(node.getMethods());
        int fields = sizeOrZero(node.getFields());
        int annotations = sizeOrZero(node.getAnnotations());
        if (methods + fields + annotations > 2) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceBody node, Object data) {
        int methods = sizeOrZero(node.getMethods());
        int fields = sizeOrZero(node.getFields());
        int annotations = sizeOrZero(node.getAnnotations());
        if (methods + fields + annotations > 2) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnnotationTypeDeclaration node, Object data) {
        int methods = sizeOrZero(node.getMethods());
        int fields = sizeOrZero(node.getFields());
        int annotations = sizeOrZero(node.getAnnotations());
        if (methods + fields + annotations > 2) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnnotationTypeBody node, Object data) {
        int methods = sizeOrZero(node.getMethods());
        int fields = sizeOrZero(node.getFields());
        int annotations = sizeOrZero(node.getAnnotations());
        if (methods + fields + annotations > 2) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnonymousClassDeclaration node, Object data) {
        int methods = sizeOrZero(node.getMethods());
        int fields = sizeOrZero(node.getFields());
        int annotations = sizeOrZero(node.getAnnotations());
        if (methods + fields + annotations > 2) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalClassStatement node, Object data) {
        int methods = sizeOrZero(node.getMethods());
        int fields = sizeOrZero(node.getFields());
        int annotations = sizeOrZero(node.getAnnotations());
        if (methods + fields + annotations > 2) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)
4. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isSyntacticallyPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isSyntacticallyPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public boolean isSyntacticallyPublic()
7. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public int getNumChildren()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isSyntacticallyPublic()
9. net.sourceforge.pmd.lang.java.ast.InternalApiBridge: static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit), //Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the
10. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set), //Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSyntacticallyPublic()
12. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isPublic()
13. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyPublic()
14. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyFinal()
15. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int getNumChildren()
16. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
17. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        int numMethods = 0;
        int numFields = 0;
        int numMethodsAndFields = 0;
        for (ASTClassOrInterfaceDeclaration classDecl : node.getChildNodesByType(ASTClassOrInterfaceDeclaration.class)) {
            numMethods += countMethods(classDecl);
            numFields += countFields(classDecl);
            numMethodsAndFields += countMethodsAndFields(classDecl);
        }

        if (numMethods > 2 || numFields > 2 || numMethodsAndFields > 2) {
            addViolation(this, data, node);
        }

        return super.visit(node, data);
    }

    private int countMethods(ASTClassOrInterfaceDeclaration classDecl) {
        int count = ASTNodeUtils.sizeOrZero(classDecl.getMemberDeclaration());
        for (ASTLocalClassStatement localClass : classDecl.getLocalClassStatements()) {
            count += ASTNodeUtils.sizeOrZero(localClass.getMemberDeclaration());
        }
        return count;
    }

    private int countFields(ASTClassOrInterfaceDeclaration classDecl) {
        int count = ASTNodeUtils.sizeOrZero(classDecl.getFieldDeclaration());
        for (ASTLocalClassStatement localClass : classDecl.getLocalClassStatements()) {
            count += ASTNodeUtils.sizeOrZero(localClass.getFieldDeclaration());
        }
        return count;
    }

    private int countMethodsAndFields(ASTClassOrInterfaceDeclaration classDecl) {
        int countMethods = ASTNodeUtils.sizeOrZero(classDecl.getMemberDeclaration());
        int countFields = ASTNodeUtils.sizeOrZero(classDecl.getFieldDeclaration());
        for (ASTLocalClassStatement localClass : classDecl.getLocalClassStatements()) {
            countMethods += ASTNodeUtils.sizeOrZero(localClass.getMemberDeclaration());
            countFields += ASTNodeUtils.sizeOrZero(localClass.getFieldDeclaration());
        }
        return countMethods + countFields;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
3. net.sourceforge.pmd.lang.java.ast.ASTAnnotationMemberList: static public int sizeOrZero(net.sourceforge.pmd.lang.java.ast.ASTList)
4. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isSyntacticallyPublic()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isSyntacticallyPublic()
6. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public boolean isSyntacticallyPublic()
7. net.sourceforge.pmd.lang.java.ast.ASTLocalClassStatement: public int getNumChildren()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isSyntacticallyPublic()
9. net.sourceforge.pmd.lang.java.ast.InternalApiBridge: static public void forceTypeResolutionPhase(net.sourceforge.pmd.lang.java.internal.JavaAstProcessor, net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit), //Forcing type resolution allows us to report errors more cleanly than if it was done completely lazy. All errors are reported, if the
10. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean hasSideEffect(net.sourceforge.pmd.lang.java.ast.JavaNode, java.util.Set), //Whether the node or one of its descendants is an expression with side effects. Conservatively, any method call is a potential side-effect, as well as assignments to fields or array elements. We could relax this assumption with (much) more data-flow logic, including a memory model. <p>By default assignments to locals are not counted as side-effects, unless the lhs is in the given set of symbols. @param node             A node @param localVarsToTrack Local variables to track
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSyntacticallyPublic()
12. net.sourceforge.pmd.lang.java.ast.ASTTypePattern: public boolean isPublic()
13. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyPublic()
14. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public boolean isSyntacticallyFinal()
15. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public int getNumChildren()
16. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
17. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
18. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeBody: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    public ExcessivePublicCountRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTAnnotationTypeDeclaration.class, ASTClassOrInterfaceBody.class, ASTConstructorDeclaration.class, ASTMethodDeclaration.class, ASTMemberDeclaration.class, ASTLocalClassStatement.class, ASTAnonymousClassDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        int publicMethods = 0;
        int publicFields = 0;
        int totalMethods = 0;
        int totalFields = 0;
        for (ASTMemberDeclaration member : node.getMemberDeclaration()) {
            if (member instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) member).isSyntacticallyPublic()) {
                publicMethods++;
                totalMethods++;
            }
            if (member instanceof ASTFieldDeclaration) {
                if (((ASTFieldDeclaration) member).getModifiers().size() == 0 || ((ASTFieldDeclaration) member).getModifiers().size() == 1 && !((ASTFieldDeclaration) member).getModifiers().get(0).isStatic()) {
                    publicFields++;
                    totalFields++;
                }
            }
        }
        for (ASTLocalClassStatement localClass : node.getLocalClassStatement()) {
            int localPublicMethods = 0;
            int localTotalMethods = 0;
            for (ASTMemberDeclaration localMember : localClass.getMemberDeclaration()) {
                if (localMember instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) localMember).isSyntacticallyPublic()) {
                    localPublicMethods++;
                    localTotalMethods++;
                }
            }
            publicMethods += localPublicMethods;
            totalMethods += localTotalMethods;
        }
        for (ASTAnonymousClassDeclaration anonymousClass : node.getAnonymousClassDeclaration()) {
            int anonymousPublicMethods = 0;
            int anonymousTotalMethods = 0;
            for (ASTMemberDeclaration anonymousMember : anonymousClass.getMemberDeclaration()) {
                if (anonymousMember instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) anonymousMember).isSyntacticallyPublic()) {
                    anonymousPublicMethods++;
                    anonymousTotalMethods++;
                }
            }
            publicMethods += anonymousPublicMethods;
            totalMethods += anonymousTotalMethods;
        }
        if (totalMethods > 2 || totalFields > 2) {
            if (totalMethods > 2) {
                addRuleViolation(node, "Class has too many public methods (" + totalMethods + ")");
            }
            if (totalFields > 2) {
                addRuleViolation(node, "Class has too many public fields (" + totalFields + ")");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnnotationTypeDeclaration node, Object data) {
        int publicMethods = 0;
        int publicFields = 0;
        int totalMethods = 0;
        int totalFields = 0;
        for (ASTMemberDeclaration member : node.getMemberDeclaration()) {
            if (member instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) member).isSyntacticallyPublic()) {
                publicMethods++;
                totalMethods++;
            }
            if (member instanceof ASTFieldDeclaration) {
                if (((ASTFieldDeclaration) member).getModifiers().size() == 0 || ((ASTFieldDeclaration) member).getModifiers().size() == 1 && !((ASTFieldDeclaration) member).getModifiers().get(0).isStatic()) {
                    publicFields++;
                    totalFields++;
                }
            }
        }
        if (totalMethods > 2 || totalFields > 2) {
            if (totalMethods > 2) {
                addRuleViolation(node, "Annotation type has too many public methods (" + totalMethods + ")");
            }
            if (totalFields > 2) {
                addRuleViolation(node, "Annotation type has too many public fields (" + totalFields + ")");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceBody node, Object data) {
        int publicMethods = 0;
        int publicFields = 0;
        int totalMethods = 0;
        int totalFields = 0;
        for (ASTMemberDeclaration member : node.getMemberDeclaration()) {
            if (member instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) member).isSyntacticallyPublic()) {
                publicMethods++;
                totalMethods++;
            }
            if (member instanceof ASTFieldDeclaration) {
                if (((ASTFieldDeclaration) member).getModifiers().size() == 0 || ((ASTFieldDeclaration) member).getModifiers().size() == 1 && !((ASTFieldDeclaration) member).getModifiers().get(0).isStatic()) {
                    publicFields++;
                    totalFields++;
                }
            }
        }
        if (totalMethods > 2 || totalFields > 2) {
            if (totalMethods > 2) {
                addRuleViolation(node, "Class or interface body has too many public methods (" + totalMethods + ")");
            }
            if (totalFields > 2) {
                addRuleViolation(node, "Class or interface body has too many public fields (" + totalFields + ")");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        if (node.isSyntacticallyPublic()) {
            addRuleViolation(node, "Class has too many public constructors");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isSyntacticallyPublic()) {
            addRuleViolation(node, "Class has too many public methods");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMemberDeclaration node, Object data) {
        if (node instanceof ASTFieldDeclaration) {
            if (((ASTFieldDeclaration) node).getModifiers().size() == 0 || ((ASTFieldDeclaration) node).getModifiers().size() == 1 && !((ASTFieldDeclaration) node).getModifiers().get(0).isStatic()) {
                addRuleViolation(node, "Class has too many public fields");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalClassStatement node, Object data) {
        int publicMethods = 0;
        int totalMethods = 0;
        for (ASTMemberDeclaration localMember : node.getMemberDeclaration()) {
            if (localMember instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) localMember).isSyntacticallyPublic()) {
                publicMethods++;
                totalMethods++;
            }
        }
        if (totalMethods > 2) {
            addRuleViolation(node, "Local class has too many public methods (" + totalMethods + ")");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnonymousClassDeclaration node, Object data) {
        int publicMethods = 0;
        int totalMethods = 0;
        for (ASTMemberDeclaration anonymousMember : node.getMemberDeclaration()) {
            if (anonymousMember instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) anonymousMember).isSyntacticallyPublic()) {
                publicMethods++;
                totalMethods++;
            }
        }
        if (totalMethods > 2) {
            addRuleViolation(node, "Anonymous class has too many public methods (" + totalMethods + ")");
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 183.20383596420288 秒
