开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        if (isUnusedImport(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isUnusedImport(ASTImportDeclaration node) {
        if (isAlreadyImplicitlyImported(node)) {
            return true;
        }
        if (isDuplicatedImport(node)) {
            return true;
        }
        if (hasDirectlyUsedImportedMember(node)) {
            return false;
        }
        return isUnusedImportFromJavaLang(node);
    }

    private boolean isAlreadyImplicitlyImported(ASTImportDeclaration node) {
        net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration staticImport = (net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration) node;
        String importedSimpleName = staticImport.getImportedSimpleName();
        if (importedSimpleName == null) {
            return false;
        }
        return isImportedSimpleNameImplicitlyImported(importedSimpleName);
    }

    private boolean isImportedSimpleNameImplicitlyImported(String importedSimpleName) {
        return isImportedSimpleNameImplicitlyImportedFromJavaLang(importedSimpleName) || isImportedSimpleNameImplicitlyImportedFromCurrentPackage(importedSimpleName);
    }

    private boolean isImportedSimpleNameImplicitlyImportedFromJavaLang(String importedSimpleName) {
        return importedSimpleName.startsWith("java.") && !importedSimpleName.startsWith("java.lang.");
    }

    private boolean isImportedSimpleNameImplicitlyImportedFromCurrentPackage(String importedSimpleName) {
        // This is a very simplified version, it does not check the actual class existence, for simplicity.
        return importedSimpleName.startsWith(getCurrentPackageName()) && !importedSimpleName.startsWith("java.");
    }

    private boolean isDuplicatedImport(ASTImportDeclaration node) {
        return node.findChildrenOfType(ASTImportDeclaration.class).stream().anyMatch(imported -> {
            return imported != node && imported.getImportedSimpleName().equals(node.getImportedSimpleName());
        });
    }

    private boolean hasDirectlyUsedImportedMember(ASTImportDeclaration node) {
        return hasDirectlyUsedImportedMember(node.getImportedSimpleName());
    }

    private boolean hasDirectlyUsedImportedMember(String importedSimpleName) {
        return getDirectlyUsedImportedMembers().stream().anyMatch(usedMember -> usedMember.equals(importedSimpleName));
    }

    private List<String> getDirectlyUsedImportedMembers() {
        Set<String> usedMembers = new HashSet<>();
        ASTCompilationUnit compilationUnit = (ASTCompilationUnit) this.getClass().getClassLoader().getResourceAsStream("astCompilationUnit.txt").getAST();
        compilationUnit.accept(new ASTVisitor() {
            @Override
            public Object visit(ASTFieldAccess node, Object data) {
                usedMembers.add(node.getIdentifier());
                return super.visit(node, data);
            }

            @Override
            public Object visit(ASTMethodInvocation node, Object data) {
                usedMembers.add(node.getMethodName());
                return super.visit(node, data);
            }
        });
        return new ArrayList<>(usedMembers);
    }

    private boolean isUnusedImportFromJavaLang(ASTImportDeclaration node) {
        // This is a very simplified version, it does not check the actual class existence, for simplicity.
        return node.getImportedSimpleName().startsWith("java.lang.");
    }

    private String getCurrentPackageName() {
        // This is a very simplified version, it does not check the actual class existence, for simplicity.
        return "your.package.name";
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        if (isUnused(node)) {
            addViolation(data, node);
        } else if (isDuplicated(node)) {
            addViolation(data, node);
        } else if (isImplicitlyInScope(node)) {
            // ignore
        } else {
            super.visit(node, data);
        }
        return data;
    }

    private boolean isUnused(ASTImportDeclaration node) {
        // Get all unused imports from the current class
        NodeStream<ASTImportDeclaration> unusedImports = node.findDescendantsOfType(ASTImportDeclaration.class, false);
        // Check if the current import is in the list of unused imports
        return unusedImports.contains(node);
    }

    private boolean isDuplicated(ASTImportDeclaration node) {
        // Get all duplicate imports from the current class
        NodeStream<ASTImportDeclaration> duplicateImports = node.findDescendantsOfType(ASTImportDeclaration.class, false);
        // Check if the current import is in the list of duplicate imports
        return duplicateImports.contains(node);
    }

    private boolean isImplicitlyInScope(ASTImportDeclaration node) {
        // Check if the imported member is in java.lang or the current package
        String importedName = node.getImportedSimpleName();
        if (importedName == null) {
            return false;
        }
        // Get the current package
        ASTPackageDeclaration currentPackage = (ASTPackageDeclaration) node.getEnclosingPackage();
        // Check if the imported member is in java.lang
        if (importedName.startsWith("java.lang.")) {
            return true;
        }
        // Check if the imported member is in the current package
        if (currentPackage.getQualifiedName().equals(currentPackage.getQualifiedName()) && currentPackage.getDeclaredAnnotations().contains(node)) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        if (isImportStatic(node) || isImportUnused(node)) {
            addViolation(data, node);
        }
        for (ImportDeclaration sibling : getSiblings(node)) {
            if (sibling.equals(node)) {
                addViolation(data, node);
                break;
            }
        }
        return super.visit(node, data);
    }

    private boolean isImportStatic(ImportDeclaration node) {
        return node.isStatic();
    }

    private boolean isImportUnused(ImportDeclaration node) {
        return !isImportUsed(node);
    }

    private boolean isImportUsed(ImportDeclaration node) {
        return isMemberInScope(node.getImportedSimpleName()) || isMemberInCurrentPackage(node.getImportedSimpleName());
    }

    private boolean isMemberInScope(String simpleName) {
        if (simpleName == null) {
            return false;
        }
        for (ASTClassOrInterfaceDeclaration classOrInterface : getChildren(ASTClassOrInterfaceDeclaration.class)) {
            if (classOrInterface.getQualifiedName().equals(simpleName)) {
                return true;
            }
        }
        return false;
    }

    private boolean isMemberInCurrentPackage(String simpleName) {
        return simpleName.startsWith("java.lang.") || simpleName.startsWith(getCurrentPackageName());
    }

    private String getCurrentPackageName() {
        ASTCompilationUnit compilationUnit = (ASTCompilationUnit) getParent().getParent();
        return compilationUnit.getPackageName();
    }

    private void addViolation(Object data, ImportDeclaration node) {
        addRuleViolation(data, node.getReportLocation());
    }

    private ImportDeclaration[] getSiblings(ImportDeclaration node) {
        return node.getParent().getChildren(ImportDeclaration.class).toArray(new ImportDeclaration[0]);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class, PackageDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        if (isStaticImport(node) || isUnusedImport(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(PackageDeclaration node, Object data) {
        for (ImportDeclaration importDeclaration : (List<ImportDeclaration>) node.findChildrenOfType(ImportDeclaration.class)) {
            visit(importDeclaration, data);
        }
        return super.visit(node, data);
    }

    private boolean isUnusedImport(ImportDeclaration node) {
        return !node.getSymbolTable().getSymbolTable().hasSymbol(node.getImportedSimpleName());
    }

    private boolean isStaticImport(ImportDeclaration node) {
        return node.isStatic() && getImplicitlyImportedMembers().contains(node.getImportedSimpleName());
    }

    private Set<String> getImplicitlyImportedMembers() {
        Set<String> implicitlyImportedMembers = new HashSet<>();
        implicitlyImportedMembers.add("java.lang");
        implicitlyImportedMembers.add("java.util");
        return implicitlyImportedMembers;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        if (node.isStatic()) {
            List<String> importedMembers = new ArrayList<>();
            if (node.getImportedSimpleName() != null) {
                importedMembers.add(node.getImportedSimpleName());
            } else {
                for (JavaccToken token : node.tokens()) {
                    if (token.is(IDENTIFIER)) {
                        importedMembers.add(token.getImage());
                    }
                }
            }
            for (String member : importedMembers) {
                if (isMemberImplicitlyImported(node, member)) {
                    addViolation(data, node.getReportLocation());
                    break;
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isMemberImplicitlyImported(ImportDeclaration node, String memberName) {
        ASTImportDeclaration selfImport = getSelfImport(node);
        if (selfImport != null) {
            return selfImport.getImportedSimpleName().equals(memberName);
        }
        ASTPackageDeclaration packageDecl = getPackageDeclaration(node);
        if (packageDecl != null) {
            for (ASTFieldDeclaration field : packageDecl.getDeclaredAnnotations()) {
                if (field.getImage().equals(memberName)) {
                    return true;
                }
            }
        }
        if (memberName.equals("java.lang")) {
            return true;
        }
        if (memberName.equals("java.lang." + memberName)) {
            return true;
        }
        return packageDecl != null && packageDecl.getImage().equals(node.getPackage().getImage());
    }

    private ASTImportDeclaration getSelfImport(ImportDeclaration node) {
        ASTImportDeclaration selfImport = node.getSymbolTable().lookupImport(node.getPackage().getImage());
        if (selfImport != null && selfImport.isStatic()) {
            return selfImport;
        }
        return null;
    }

    private ASTPackageDeclaration getPackageDeclaration(ImportDeclaration node) {
        ASTPackageDeclaration packageDecl = node.getSymbolTable().lookupPackage(node.getPackage().getImage());
        if (packageDecl != null) {
            return packageDecl;
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 138.47285914421082 秒
