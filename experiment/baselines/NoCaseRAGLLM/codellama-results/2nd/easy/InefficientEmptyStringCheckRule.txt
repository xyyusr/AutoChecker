开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class, ASTMethodCall.class, ASTMethodCall.class, ASTMethodCall.class, ASTMethodCall.class, ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (node.getImage().contains("trim") && (node.getImage().contains("length") || node.getImage().contains("isEmpty"))) {
            ASTExpressionList params = (ASTExpressionList) node.getFirstChild(ASTExpressionList.class);
            if (params != null && params.getNumChildren() == 1) {
                ASTStringLiteral stringLiteral = (ASTStringLiteral) params.getFirstChild(ASTStringLiteral.class);
                if (stringLiteral != null && (stringLiteral.isEmpty() || stringLiteral.isNullLiteral())) {
                    return report(node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        super(ASTCallExpr.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (node.getImage().equals("trim") && node.getParent() instanceof ASTExpressionList) {
            ASTExpressionList list = (ASTExpressionList) node.getParent();
            if (list.getExpressions().size() == 2) {
                ASTMethodCall call = (ASTMethodCall) list.getExpressions().get(1);
                if (call.getImage().equals("length") || call.getImage().equals("isEmpty")) {
                    addRuleViolation(node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCallExpr node, Object data) {
        if (node.getImage().equals("isEmpty") && node.getParent() instanceof ASTMethodCall) {
            ASTMethodCall call = (ASTMethodCall) node.getParent();
            if (call.getImage().equals("trim")) {
                addRuleViolation(node);
            }
        }
        return super.visit(node, data);
    }

    private void addRuleViolation(Node node) {
        addRuleViolation(node, "String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.");
    }

    private void addRuleViolation(Node node, String description) {
        RuleViolation violation = new RuleViolation(node, description);
        addViolation(violation);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        super(JavaNode.class);
    }

    @Override
    public Object visit(ASTArrayCreation node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTExpression node, Object data) {
        if (node instanceof ASTMethodInvocation) {
            ASTMethodInvocation methodInvocation = (ASTMethodInvocation) node;
            if (methodInvocation.getTarget() instanceof ASTFieldAccess) {
                ASTFieldAccess fieldAccess = (ASTFieldAccess) methodInvocation.getTarget();
                if (fieldAccess.getName().getImage().equals("trim")) {
                    ASTMethodInvocation lengthInvocation = (ASTMethodInvocation) methodInvocation.getArguments().get(0);
                    if (lengthInvocation.getTarget() instanceof ASTFieldAccess) {
                        ASTFieldAccess lengthFieldAccess = (ASTFieldAccess) lengthInvocation.getTarget();
                        if (lengthFieldAccess.getName().getImage().equals("length")) {
                            addViolation(this, data, node);
                        }
                    } else if (lengthInvocation.getTarget() instanceof ASTMethodInvocation) {
                        ASTMethodInvocation isEmptyInvocation = (ASTMethodInvocation) lengthInvocation.getTarget();
                        if (isEmptyInvocation.getTarget() instanceof ASTFieldAccess) {
                            ASTFieldAccess isEmptyFieldAccess = (ASTFieldAccess) isEmptyInvocation.getTarget();
                            if (isEmptyFieldAccess.getName().getImage().equals("isEmpty")) {
                                addViolation(this, data, node);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTNewArray node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        if (node.isEmpty() || node.isNullLiteral()) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableDeclarator node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        for (ASTExpressionStatement statement : node.getBody().getStatements()) {
            if (statement instanceof ASTMethodCallExpression) {
                ASTMethodCallExpression call = (ASTMethodCallExpression) statement;
                if (call.getMethodName().matches("trim") && call.getArguments().size() == 1) {
                    ASTExpression arg = call.getArguments().get(0);
                    if (arg instanceof ASTMethodCallExpression) {
                        ASTMethodCallExpression isEmptyCall = (ASTMethodCallExpression) arg;
                        if (isEmptyCall.getMethodName().matches("isEmpty") && isEmptyCall.getArguments().size() == 1) {
                            reportError(node, "String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank.");
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTExpressionStatement node, Object data) {
        if (node.getExpression() instanceof ASTMethodCallExpression) {
            ASTMethodCallExpression call = (ASTMethodCallExpression) node.getExpression();
            if (call.getMethodName().matches("trim") && call.getArguments().size() == 1) {
                ASTExpression arg = call.getArguments().get(0);
                if (arg instanceof ASTMethodCallExpression) {
                    ASTMethodCallExpression isEmptyCall = (ASTMethodCallExpression) arg;
                    if (isEmptyCall.getMethodName().matches("isEmpty") && isEmptyCall.getArguments().size() == 1) {
                        reportError(node.getExpression(), "String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank.");
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        super(ASTCallExpression.class);
    }

    @Override
    public Object visit(ASTCallExpression node, Object data) {
        Object result = super.visit(node, data);
        if (result != null) {
            return result;
        }
        if (node.getImage().contains("trim().length() == 0")) {
            addViolation(data, node);
        } else if (node.getImage().contains("trim().isEmpty()")) {
            addViolation(data, node);
        }
        return result;
    }

    @Override
    public Object visit(ASTMethodCallExpression node, Object data) {
        Object result = super.visit(node, data);
        if (result != null) {
            return result;
        }
        if (node.getImage().contains("trim().length() == 0")) {
            addViolation(data, node);
        } else if (node.getImage().contains("trim().isEmpty()")) {
            addViolation(data, node);
        }
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 130.62170124053955 秒
