开始

========================================== Rule NullAssignmentRule ===========================================
一共 19 个测试用例
正例 14 个
反例 5 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.String toString()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Object getConstValue()
4. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public void notify()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
8. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Iterable<JavaccToken> tokens()
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isParenthesized(), //Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.
13. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTTypeParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext(), //Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
19. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTMethodDeclaration.class, ASTVariableInitializer.class, ASTVariableDeclarator.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableInitializer node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableDeclarator node, Object data) {
        ASTPrimaryExpression init = node.getInitializer();
        if (init instanceof ASTExpression) {
            ASTExpression expr = (ASTExpression) init;
            if (expr.getConstValue() == null) {
                if (!JavaRuleUtil.isNullCheck(expr, node.getVariable().getSymbol())) {
                    addViolation(data, expr);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.String toString()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Object getConstValue()
4. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public void notify()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
8. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Iterable<JavaccToken> tokens()
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isParenthesized(), //Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.
13. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTTypeParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext(), //Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
19. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getKind() == ASTKind.ASSIGNMENT_EXPRESSION && node.getRHS() instanceof ASTNullLiteral) {
            if (node.getLHS() instanceof ASTName) {
                ASTName lhs = (ASTName) node.getLHS();
                if (lhs.getSymbol() instanceof JVariableSymbol) {
                    JVariableSymbol symbol = (JVariableSymbol) lhs.getSymbol();
                    if (!isNullCheck((ASTExpression) node.getRHS(), symbol)) {
                        addViolation(data, this, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableDeclarator node, Object data) {
        if (node.getInitializer() instanceof ASTNullLiteral) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    private boolean isNullCheck(ASTExpression expression, JVariableSymbol symbol) {
        if (expression == null || expression.getKind() != ASTKind.NULL_LITERAL) {
            return false;
        }
        ASTNullLiteral nullLiteral = (ASTNullLiteral) expression;
        return nullLiteral.toString().equals("null") && nullLiteral.compareLocation(expression) == 1;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.String toString()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Object getConstValue()
4. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public void notify()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
8. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Iterable<JavaccToken> tokens()
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isParenthesized(), //Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.
13. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTTypeParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext(), //Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
19. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignment.class, ASTFieldDeclaration.class);
    }

    @Override
    public Object visit(ASTAssignment node, Object data) {
        if (node.getOperator() != AssignmentOperator.ASSIGN) {
            return data;
        }
        ASTExpression right = node.getRightOp();
        if (right instanceof ASTNullLiteral) {
            return data;
        }
        if (right instanceof ASTBinaryOpExpr) {
            ASTExpression left = ((ASTBinaryOpExpr) right).getLeftOp();
            if (left instanceof ASTFieldAccess || left instanceof ASTMethodCallExpr) {
                ASTIdentifier identifier = ((ASTFieldAccess) left).getIdentifier() != null ? (ASTIdentifier) ((ASTFieldAccess) left).getIdentifier() : ((ASTMethodCallExpr) left).getIdentifier();
                if (identifier != null && JavaRuleUtil.isNullCheck((ASTExpression) right, identifier.resolveSymbol())) {
                    return data;
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        if (node.getInitializedVariables().size() == 1) {
            ASTExpression initializer = node.getInitializedVariables().singleOrNull(ASTInitializedVariable.class).getInitializer();
            if (initializer instanceof ASTNullLiteral) {
                return data;
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.String toString()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Object getConstValue()
4. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public void notify()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
8. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Iterable<JavaccToken> tokens()
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isParenthesized(), //Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.
13. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTTypeParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext(), //Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
19. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTAssignmentStmt node, Object data) {
        if (node.getRHS() instanceof ASTNullLiteral) {
            ASTVariableDeclaratorId var = node.getVar();
            if (var != null && var.getInitializer() == null) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldAccess node, Object data) {
        if (node.isStatic() && node.getOperator() == ASTNullLiteral.NULL_LIT) {
            ASTFieldAccess other = (ASTFieldAccess) node.getOperator();
            if (other.getOperator() == ASTNullLiteral.NULL_LIT) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        if (node.getOperator() != null && node.getOperator() instanceof ASTNullLiteral) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCallExpr node, Object data) {
        if (node.getOperator() != null && node.getOperator() instanceof ASTNullLiteral) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstantExpression node, Object data) {
        if (node.getOperator() != null && node.getOperator() instanceof ASTNullLiteral) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTUnaryExpression node, Object data) {
        if (node.getOperator() != null && node.getOperator() instanceof ASTNullLiteral) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrefixExpression node, Object data) {
        if (node.getOperator() != null && node.getOperator() instanceof ASTNullLiteral) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.String toString()
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Object getConstValue()
4. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public void notify()
5. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.java.ast.JavaVisitor, java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTFormalParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
8. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public java.lang.Iterable<JavaccToken> tokens()
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isParenthesized(), //Returns true if this expression has at least one level of parentheses. The specific depth can be fetched with {@link #getParenthesisDepth()}.
13. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTTypeParameters: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public net.sourceforge.pmd.lang.java.types.ast.ExprContext getConversionContext(), //Returns the type expected by the context. This type may determine an implicit conversion of this value to that type (eg a boxing conversion, widening numeric conversion, or widening reference conversion). <p>There are many different cases. For example, in {@code arr['c']}, {@link #getTypeMirror()} would return {@code char} for the char literal, but the context type is {@code int} since it's used as an array index. Hence, a widening conversion occurs. Similarly, the context type of an expression in a return statement is the return type of the method, etc. <p>If the context is undefined, then the returned object will answer true to {@link ExprContext#isMissing()}. This is completely normal and needs to be accounted for by rules. For instance, it occurs if this expression is used as a statement. <p>Note that conversions are a language-level construct only. Converting from a type to another may not actually require any concrete operation at runtime. For instance, converting a {@code char} to an {@code int} is a noop at runtime, because chars are anyway treated as ints by the JVM (within stack frames). A boxing conversion will however in general translate to a call to e.g. {@link Integer#valueOf(int)}. <p>Not all contexts allow all kinds of conversions. See {@link ExprContext}.
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
19. net.sourceforge.pmd.lang.java.ast.ASTTypeArguments: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTAssignment node, Object data) {
        if (node.getKind() != ASTKind.ASSIGNMENT) {
            return super.visit(node, data);
        }

        if (!node.getLeftHandSide().getKind().isLeftHandSide()) {
            return super.visit(node, data);
        }

        JVariableSymbol rhsSymbol = node.getRightHandSide().getSymbolTable().lookup(node.getRightHandSide().getImage());
        if (rhsSymbol == null) {
            return super.visit(node, data);
        }

        NodeStream<JavaNode> rhsChildren = node.getRightHandSide().children();
        for (JavaNode child : rhsChildren) {
            if (child instanceof ASTNullLiteral) {
                return super.visit(node, data);
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 132.36521458625793 秒
