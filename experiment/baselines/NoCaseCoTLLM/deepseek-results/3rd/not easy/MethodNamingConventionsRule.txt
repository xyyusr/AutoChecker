开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final Pattern INSTANCE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern STATIC_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern NATIVE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT3_TEST_METHOD_PATTERN = Pattern.compile("test[A-Z0-9][a-zA-Z0-9]*");
    private static final Pattern JUNIT4_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT5_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");

    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        boolean isStatic = node.hasModifiers(JModifier.STATIC);
        boolean isNative = node.hasModifiers(JModifier.NATIVE);
        boolean isJUnit3Test = isJUnit3TestMethod(node);
        boolean isJUnit4Test = isJUnit4TestMethod(node);
        boolean isJUnit5Test = isJUnit5TestMethod(node);

        if (isJUnit3Test) {
            if (!JUNIT3_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node, "JUnit 3 test method names should start with 'test' and follow camel case.");
            }
        } else if (isJUnit4Test) {
            if (!JUNIT4_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node, "JUnit 4 test method names should follow camel case.");
            }
        } else if (isJUnit5Test) {
            if (!JUNIT5_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node, "JUnit 5 test method names should follow camel case.");
            }
        } else if (isNative) {
            if (!NATIVE_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node, "Native method names should follow camel case.");
            }
        } else if (isStatic) {
            if (!STATIC_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node, "Static method names should follow camel case.");
            }
        } else {
            if (!INSTANCE_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node, "Instance method names should follow camel case.");
            }
        }

        return super.visit(node, data);
    }

    private boolean isJUnit3TestMethod(ASTMethodDeclaration node) {
        return node.getEnclosingType().isAnnotationPresent("junit.framework.TestCase") && node.getName().startsWith("test");
    }

    private boolean isJUnit4TestMethod(ASTMethodDeclaration node) {
        return node.getEnclosingType().isAnnotationPresent("org.junit.Test") || node.isAnnotationPresent("org.junit.Test");
    }

    private boolean isJUnit5TestMethod(ASTMethodDeclaration node) {
        return node.getEnclosingType().isAnnotationPresent("org.junit.jupiter.api.Test") || node.isAnnotationPresent("org.junit.jupiter.api.Test");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.549 s - in net.sourceforge.pmd.lang.java.rule.codestyle.MethodNamingConventionsTest
结束

规则执行完毕，时间总花销： 141.47037887573242 秒
