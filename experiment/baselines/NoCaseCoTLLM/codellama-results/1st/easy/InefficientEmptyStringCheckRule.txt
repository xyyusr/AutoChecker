开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        super(MethodCallExpression.class, Assign.class);
    }

    @Override
    public Object visit(MethodCallExpression node, Object data) {
        if (node.getImage().contains("trim") && node.getImage().contains("length") || node.getImage().contains("isEmpty")) {
            JavaNode previousNode = node.findPrevious(node.getAST(), MethodCallExpression.class);
            if (previousNode != null && previousNode.getImage().equals("trim")) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    @Override
    public void apply(Map<String, Object> data, Node node, RuleContext context) {
        if (node instanceof ASTMethodCallExpr) {
            ASTMethodCallExpr methodCallExpr = (ASTMethodCallExpr) node;
            if (methodCallExpr.getType() instanceof ASTType) {
                ASTType type = (ASTType) methodCallExpr.getType();
                if (type.getImage().equals("String")) {
                    if (methodCallExpr.getImage().equals("trim") && methodCallExpr.getMethodInvocation() instanceof ASTMethodInvocation) {
                        ASTMethodInvocation methodInvocation = (ASTMethodInvocation) methodCallExpr.getMethodInvocation();
                        if (methodInvocation.getMethodName().getImage().equals("isEmpty") || methodInvocation.getMethodName().getImage().equals("length")) {
                            if (methodInvocation.getImage().equals("String.trim().isEmpty()") || methodInvocation.getImage().equals("String.trim().length()")) {
                                addViolation(data, context, node);
                            }
                        }
                    }
                }
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        addRuleMatch(CheckingRule.javaCode("MethodInvocation"));
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            result = visitMethodInvocation(node, data);
        }
        return result;
    }

    private Object visitMethodInvocation(MethodInvocation node, Object data) {
        if (node.getImage().equals("trim")) {
            Expression stringExpression = (Expression) node.getFirstChildByType(Identifier.class);
            if (stringExpression != null && stringExpression.getImage().equals("this")) {
                MethodInvocation trimInvocation = (MethodInvocation) node.getNextSiblingByType(MethodInvocation.class);
                if (trimInvocation != null && trimInvocation.getImage().equals("length")) {
                    return reportIssue(node);
                }
                MethodInvocation isEmptyInvocation = (MethodInvocation) node.getNextSiblingByType(MethodInvocation.class);
                if (isEmptyInvocation != null && isEmptyInvocation.getImage().equals("isEmpty")) {
                    return reportIssue(node);
                }
            }
        }
        return null;
    }

    private Object reportIssue(MethodInvocation node) {
        return new RuleViolation(node, "String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Avoid it.");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodOrConstructorInvocation node, Object data) {
        if (node.getImage().equals("trim")) {
            Object target = node.getTarget();
            if (target instanceof ASTMethodInvocation) {
                ASTMethodInvocation trimInvocation = (ASTMethodInvocation) target;
                Object argument = trimInvocation.getArgumentList().getFirstChild();
                if (argument instanceof ASTMethodOrConstructorInvocation) {
                    ASTMethodOrConstructorInvocation lengthOrIsEmptyInvocation = (ASTMethodOrConstructorInvocation) argument;
                    if (lengthOrIsEmptyInvocation.getImage().equals("length") || lengthOrIsEmptyInvocation.getImage().equals("isEmpty")) {
                        reportRuleViolation(node);
                    }
                } else if (argument instanceof ASTStringLiteralExpression) {
                    ASTStringLiteralExpression literal = (ASTStringLiteralExpression) argument;
                    if (literal.getImage().equals("length") || literal.getImage().equals("isEmpty")) {
                        reportRuleViolation(node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private void reportRuleViolation(Object node) {
        addRuleViolation(node);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        addRuleChainVisitorClass(InefficientEmptyStringCheckVisitor.class);
    }

    public static class InefficientEmptyStringCheckVisitor extends AbstractJavaRuleChainVisitor {
        @Override
        public Object visit(ASTMethodInvocation node, Object data) {
            if (node.getImage().equals("length") && node.getParent() instanceof ASTMethodCallExpression
                && ((ASTMethodCallExpression) node.getParent()).getImage().equals("trim")
                && ((ASTMethodCallExpression) node.getParent()).getParent() instanceof ASTExpression) {
                ASTExpression expression = (ASTExpression) ((ASTMethodCallExpression) node.getParent()).getParent();
                if (expression.getImage().endsWith(" == 0")) {
                    addViolation(data, node);
                }
            } else if (node.getImage().equals("isEmpty") && node.getParent() instanceof ASTMethodCallExpression
                && ((ASTMethodCallExpression) node.getParent()).getImage().equals("trim")
                && ((ASTMethodCallExpression) node.getParent()).getParent() instanceof ASTExpression) {
                ASTExpression expression = (ASTExpression) ((ASTMethodCallExpression) node.getParent()).getParent();
                if (expression.getImage().endsWith("()")) {
                    addViolation(data, node);
                }
            }
            return super.visit(node, data);
        }

        @Override
        public Object visit(ASTExpression node, Object data) {
            if (node instanceof ASTMethodCallExpression
                && ((ASTMethodCallExpression) node).getImage().equals("trim")
                && ((ASTMethodCallExpression) node).getParent() instanceof ASTBinaryOperator
                && ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getImage().equals("==")
                && ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getRightOperand() instanceof ASTNumberConstant
                && ((ASTNumberConstant) ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getRightOperand()).getImage().equals("0")
                && ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getLeftOperand() instanceof ASTMethodCallExpression
                && ((ASTMethodCallExpression) ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getLeftOperand()).getImage().equals("isEmpty")
                && ((ASTMethodCallExpression) ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getLeftOperand()).getParent() instanceof ASTMethodCallExpression
                && ((ASTMethodCallExpression) ((ASTMethodCallExpression) ((ASTBinaryOperator) ((ASTMethodCallExpression) node).getParent()).getLeftOperand()).getParent()).getImage().equals("trim")) {
                addViolation(data, node);
            } else if (node instanceof ASTMethodCallExpression
                && ((ASTMethodCallExpression) node).getImage().equals("isEmpty")
                && ((ASTMethodCallExpression) node).getParent() instanceof ASTExpression
                && ((ASTExpression) ((ASTMethodCallExpression) node).getParent()).getImage().endsWith("()")) {
                addViolation(data, node);
            }
            return super.visit(node, data);
        }

        @Override
        public Object visit(ASTIfStatement node, Object data) {
            return super.visit(node, data);
        }

        @Override
        public Object visit(ASTWhileStatement node, Object data) {
            return super.visit(node, data);
        }

        @Override
        public Object visit(ASTForStatement node, Object data) {
            return super.visit(node, data);
        }

        @Override
        public Object visit(ASTReturnStatement node, Object data) {
            return super.visit(node, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 127.24197959899902 秒
