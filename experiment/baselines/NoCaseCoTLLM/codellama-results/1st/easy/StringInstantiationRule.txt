开始

========================================== Rule StringInstantiationRule ===========================================
一共 10 个测试用例
正例 5 个
反例 5 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTLiteral literal, Object data) {
        if (literal.getImage().matches("\".*\"") || literal.getImage().matches("'.*'")) {
            return super.visit(literal, data);
        }
        return null;
    }

    @Override
    public Object visit(ASTNewExpression node, Object data) {
        Object literal = node.jjtGetChild(0);
        if (literal instanceof ASTLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(NewExpression node, Object data) {
        // Check if the new expression is for String class
        if (node.getType() instanceof ReferenceType) {
            ReferenceType referenceType = (ReferenceType) node.getType();
            if (referenceType.getName().getIdentifier().equals("String")) {
                // Report the issue
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    // Visit other node types to prevent visiting their children
    @Override
    public Object visit(MethodInvocation node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassDeclaration node, Object data) {
        return super.visit(node, data);
    }

    // Add more visit methods if needed to prevent visiting other node types
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (isStringReturningMethod(node)) {
            return reportViolations(node, data);
        }
        return super.visit(node, data);
    }

    private boolean isStringReturningMethod(MethodDeclaration node) {
        if (node.getReturnType() != null && node.getReturnType().isSubtypeOf(String.class)) {
            return true;
        }
        return false;
    }

    private Object reportViolations(MethodDeclaration node, Object data) {
        Object result = super.visit(node, data);
        NodeStream<Statement> statements = node.getBody().getStatements();
        for (Statement statement : statements) {
            if (statement instanceof ExpressionStatement) {
                ExpressionStatement expressionStatement = (ExpressionStatement) statement;
                if (expressionStatement.getExpression() instanceof NewClassExpression) {
                    NewClassExpression newClassExpression = (NewClassExpression) expressionStatement.getExpression();
                    if (newClassExpression.getExpression() instanceof TypeName) {
                        TypeName typeName = (TypeName) newClassExpression.getExpression();
                        if (typeName.getImage().equals("String")) {
                            reportViolation(node, expressionStatement, data);
                        }
                    }
                }
            }
        }
        return result;
    }

    private void reportViolation(MethodDeclaration node, ExpressionStatement expressionStatement, Object data) {
        RuleViolation violation = new RuleViolation(node.getBeginLine(), node.getBeginColumn(), "Avoid instantiating String objects");
        addViolation(data, violation);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(Assign node, Object data) {
        if (node.isKindOf(AssignKind.ASSIGN)) {
            JavaNode lhs = node.jjtGetChild(0);
            JavaNode rhs = node.jjtGetChild(1);

            if (lhs.isKindOf(NewClass.class) && rhs.isKindOf(Literal.class)) {
                StringInstantiationRuleData data = new StringInstantiationRuleData();
                data.setLeftHandSide(lhs);
                data.setRightHandSide(rhs);
                addViolation(this, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Literal node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClass node, Object data) {
        return super.visit(node, data);
    }
}

class StringInstantiationRuleData extends RuleChainReportData {
    private JavaNode leftHandSide;
    private JavaNode rightHandSide;

    public JavaNode getLeftHandSide() {
        return leftHandSide;
    }

    public void setLeftHandSide(JavaNode leftHandSide) {
        this.leftHandSide = leftHandSide;
    }

    public JavaNode getRightHandSide() {
        return rightHandSide;
    }

    public void setRightHandSide(JavaNode rightHandSide) {
        this.rightHandSide = rightHandSide;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public StringInstantiationRule() {
        addRuleChainElement(new MethodCallExpressionRule()); // visit MethodCallExpression
    }

    @Override
    public Object visit(MethodCallExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignment node, Object data) {
        JavaNode target = node.getTarget();
        if (target instanceof FieldAccess) {
            FieldAccess fieldAccess = (FieldAccess) target;
            if (fieldAccess.getScope() instanceof VariableDeclarationExpr) {
                VariableDeclarationExpr variableDeclaration = (VariableDeclarationExpr) fieldAccess.getScope();
                if (!isFinal(variableDeclaration)) {
                    reportViolation(node.getImage());
                }
            }
        } else if (target instanceof AssignmentTarget) {
            AssignmentTarget assignmentTarget = (AssignmentTarget) target;
            if (assignmentTarget.getTarget() instanceof FieldAccess) {
                FieldAccess fieldAccess = (FieldAccess) assignmentTarget.getTarget();
                if (fieldAccess.getScope() instanceof VariableDeclarationExpr) {
                    VariableDeclarationExpr variableDeclaration = (VariableDeclarationExpr) fieldAccess.getScope();
                    if (!isFinal(variableDeclaration)) {
                        reportViolation(node.getImage());
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FieldAccess node, Object data) {
        if (node.getScope() instanceof VariableDeclarationExpr) {
            VariableDeclarationExpr variableDeclaration = (VariableDeclarationExpr) node.getScope();
            if (!isFinal(variableDeclaration)) {
                reportViolation(node.getImage());
            }
        }
        return super.visit(node, data);
    }

    private boolean isFinal(VariableDeclarationExpr variableDeclaration) {
        for (VariableDeclarator declarator : variableDeclaration.getVariables()) {
            if (declarator.getModifiers().contains(Modifier.FINAL)) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 122.20361542701721 秒
