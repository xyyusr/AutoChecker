开始

========================================== Rule AvoidDuplicateLiteralsRule ===========================================
一共 11 个测试用例
正例 3 个
反例 8 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    public AvoidDuplicateLiteralsRule() {
        super();
        // We're only interested in Java files
        addIncludeFilter("*.java");
        setLanguage("java");
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Literal node, Object data) {
        if (node.isStringLiteralNode()) {
            String literal = node.getImage();
            if (literal != null && literal.length() >= 3) {
                String hashKey = literal.intern();
                if (get.literalOccurrenceCount(hashKey) >= 4) {
                    reportViolation(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    private int getLiteralOccurrenceCount(String hashKey) {
        Map<String, Integer> countMap = (Map<String, Integer>) getData();
        if (countMap == null) {
            countMap = new HashMap<>();
            setData(countMap);
        }
        Integer count = countMap.get(hashKey);
        if (count == null) {
            count = 0;
        }
        countMap.put(hashKey, count + 1);
        return count;
    }

    private void reportViolation(Literal node, Object data) {
        ViolationBuilder vb = new ViolationBuilder();
        vb.violates(this);
        vb.addMessage("Code containing duplicate String literals can usually be improved by declaring the String as a constant field.");
        vb.addCodeRange(node);
        addViolation(vb.getDescription());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    private Map<String, Integer> duplicateCountMap = new HashMap<>();
    private Map<String, String> constantFieldMap = new HashMap<>();

    public AvoidDuplicateLiteralsRule() {
        super(TextElement.class);
    }

    @Override
    public Object visit(TextElement node, Object data) {
        String text = node.getImage();
        if (text.length() < 3) {
            return super.visit(node, data);
        }
        String trimmedText = text.trim();
        if (duplicateCountMap.containsKey(trimmedText)) {
            int count = duplicateCountMap.get(trimmedText);
            duplicateCountMap.put(trimmedText, count + 1);
            if (count + 1 >= 4) {
                addViolation(data, node);
            }
        } else {
            duplicateCountMap.put(trimmedText, 1);
            if (!constantFieldMap.containsKey(trimmedText)) {
                constantFieldMap.put(trimmedText, "CONSTANT_" + trimmedText.toUpperCase());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Identifier node, Object data) {
        String name = node.getImage();
        if (constantFieldMap.containsKey(name)) {
            String constantName = constantFieldMap.get(name);
            String value = node.getParent().getImage();
            if (value.trim().equals(name)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTLiteral node, Object data) {
        String literalValue = node.getImage();
        if (Pattern.matches("^\\'[^\\']*\\'$|^\"[^\"]*\"$", literalValue)) {
            String trimmedLiteral = literalValue.replaceAll("^\\'|-|\\'|^\"|-|\"$", "");
            if (trimmedLiteral.length() >= 3) {
                countLiteral(trimmedLiteral, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> uniqueLiterals = new HashSet<>();
        for (JavaNode child : node.jjtGetChildren()) {
            if (child instanceof ASTLiteral) {
                String literalValue = ((ASTLiteral) child).getImage();
                if (Pattern.matches("^\\'[^\\']*\\'$|^\"[^\"]*\"$", literalValue)) {
                    String trimmedLiteral = literalValue.replaceAll("^\\'|-|\\'|^\"|-|\"$", "");
                    if (trimmedLiteral.length() < 3) {
                        continue;
                    }
                    uniqueLiterals.add(trimmedLiteral);
                }
            }
        }
        List<String> duplicateLiterals = uniqueLiterals.stream()
                .filter(literal -> getCount(literal, data) >= 4)
                .collect(Collectors.toList());
        for (String literal : duplicateLiterals) {
            reportIssue(node, "String literal '" + literal + "' appears more than 3 times and can be improved by declaring it as a constant field.");
        }
        return super.visit(node, data);
    }

    private int getCount(String literal, Object data) {
        Map<String, Integer> literalCounts = (Map<String, Integer>) data;
        if (!literalCounts.containsKey(literal)) {
            literalCounts.put(literal, 0);
        }
        return literalCounts.get(literal);
    }

    private void countLiteral(String literal, Object data) {
        Map<String, Integer> literalCounts = (Map<String, Integer>) data;
        if (literalCounts.containsKey(literal)) {
            literalCounts.put(literal, literalCounts.get(literal) + 1);
        } else {
            literalCounts.put(literal, 1);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

出现语法错误，这一轮舍弃，直接重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    private Map<String, Integer> literalFrequency = new HashMap<>();
    private Set<String> constantFields = new HashSet<>();

    public AvoidDuplicateLiteralsRule() {
        super(StringLiteral.class);
    }

    @Override
    public Object visit(StringLiteral node, Object data) {
        String literal = node.Image();
        if (literal.length() >= 3) {
            literalFrequency.put(literal, literalFrequency.getOrDefault(literal, 0) + 1);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FieldDeclaration node, Object data) {
        if (node.getType() instanceof TypeName) {
            TypeName typeName = (TypeName) node.getType();
            if (typeName.getType().equals(String.class)) {
                String fieldName = node.getIdentifier().Image();
                if (fieldName.matches("[A-Z][a-zA-Z0-9]*")) {
                    constantFields.add(fieldName);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignment node, Object data) {
        if (node.getLeft() instanceof FieldAccess) {
            FieldAccess fieldAccess = (FieldAccess) node.getLeft();
            if (constantFields.contains(fieldAccess.getIdentifier().Image())) {
                if (node.getRight() instanceof StringLiteral) {
                    StringLiteral stringLiteral = (StringLiteral) node.getRight();
                    if (stringLiteral.Image().equals(fieldAccess.getIdentifier().Image())) {
                        // Ignore the detection of duplicate literals for strings with length less than 3
                        if (stringLiteral.Image().length() >= 3) {
                            if (literalFrequency.getOrDefault(stringLiteral.Image(), 0) >= 4) {
                                reportViolation(stringLiteral, "String literal '" + stringLiteral.Image() + "' is used more than 4 times.");
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object end() {
        for (Map.Entry<String, Integer> entry : literalFrequency.entrySet()) {
            if (entry.getValue() >= 4) {
                reportViolation(null, "String literal '" + entry.getKey() + "' is used more than 4 times.");
            }
        }
        return super.end();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 108.49201679229736 秒
