开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final String JUNIT_3_TEST_REGEX = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT_4_TEST_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT_5_TEST_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String INSTANCE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";

    private static boolean isJUnit3Test(MethodDeclaration method) {
        return method.getImage().startsWith("test") && method.getImage().matches(JUNIT_3_TEST_REGEX);
    }

    private static boolean isJUnit4Test(MethodDeclaration method) {
        return method.getImage().matches(JUNIT_4_TEST_REGEX);
    }

    private static boolean isJUnit5Test(MethodDeclaration method) {
        return method.getImage().matches(JUNIT_5_TEST_REGEX);
    }

    private static boolean isNativeMethod(MethodDeclaration method) {
        return method.getName().getImage().startsWith("native");
    }

    private static boolean isInstanceMethod(MethodDeclaration method) {
        return !isStaticMethod(method);
    }

    private static boolean isStaticMethod(MethodDeclaration method) {
        return method.getImage().contains("static");
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getName().getImage();
        if (isJUnit3Test(node)) {
            if (!methodName.matches(JUNIT_3_TEST_REGEX)) {
                addRuleViolation(this, node, "JUnit 3 test method name must match the regex '" + JUNIT_3_TEST_REGEX + "'");
            }
        } else if (isJUnit4Test(node)) {
            if (!methodName.matches(JUNIT_4_TEST_REGEX)) {
                addRuleViolation(this, node, "JUnit 4 test method name must match the regex '" + JUNIT_4_TEST_REGEX + "'");
            }
        } else if (isJUnit5Test(node)) {
            if (!methodName.matches(JUNIT_5_TEST_REGEX)) {
                addRuleViolation(this, node, "JUnit 5 test method name must match the regex '" + JUNIT_5_TEST_REGEX + "'");
            }
        } else if (isNativeMethod(node)) {
            if (!methodName.matches(NATIVE_METHOD_REGEX)) {
                addRuleViolation(this, node, "Native method name must match the regex '" + NATIVE_METHOD_REGEX + "'");
            }
        } else if (isInstanceMethod(node)) {
            if (!methodName.matches(INSTANCE_METHOD_REGEX)) {
                addRuleViolation(this, node, "Instance method name must match the regex '" + INSTANCE_METHOD_REGEX + "'");
            }
        } else if (isStaticMethod(node)) {
            if (!methodName.matches(STATIC_METHOD_REGEX)) {
                addRuleViolation(this, node, "Static method name must match the regex '" + STATIC_METHOD_REGEX + "'");
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(CallableDeclaration node, Object data) {
        if (node instanceof MethodDeclaration) {
            return visit((MethodDeclaration) node, data);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        super(JavaNode.METHOD_DECLARATION, JavaNode.METHOD_DECLARATOR, JavaNode.METHOD_HEADER);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        reportViolation(data, node.getImage());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclarator node, Object data) {
        Type type = node.getType();
        if (type == null) {
            return super.visit(node, data);
        }

        String methodName = node.getImage();
        if (isJUnit3Test(node)) {
            if (!Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*", methodName)) {
                reportViolation(data, node.getImage());
            }
        } else if (isJUnit4Test(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolation(data, node.getImage());
            }
        } else if (isJUnit5Test(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolation(data, node.getImage());
            }
        } else if (isNativeMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolation(data, node.getImage());
            }
        } else if (isStaticMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolation(data, node.getImage());
            }
        } else {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolation(data, node.getImage());
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodHeader node, Object data) {
        return super.visit(node, data);
    }

    private boolean isJUnit3Test(ASTMethodDeclarator node) {
        JavaNode methodHeader = node.getMethodHeader();
        ASTClassOrInterfaceBodyDeclaration body = methodHeader.getBody();
        ASTClassOrInterfaceType outerType = body.getOuterType();
        if (outerType != null) {
            String className = outerType.getImage();
            return className.contains("TestCase") && className.contains("extends");
        }
        return false;
    }

    private boolean isJUnit4Test(ASTMethodDeclarator node) {
        JavaNode methodHeader = node.getMethodHeader();
        ASTClassOrInterfaceBodyDeclaration body = methodHeader.getBody();
        ASTClassOrInterfaceType outerType = body.getOuterType();
        if (outerType != null) {
            String className = outerType.getImage();
            return className.contains("Test") && className.contains("extends") && className.contains("Assert");
        }
        return false;
    }

    private boolean isJUnit5Test(ASTMethodDeclarator node) {
        JavaNode methodHeader = node.getMethodHeader();
        ASTClassOrInterfaceBodyDeclaration body = methodHeader.getBody();
        ASTClassOrInterfaceType outerType = body.getOuterType();
        if (outerType != null) {
            String className = outerType.getImage();
            return className.contains("Test") && className.contains("extends") && className.contains("Jupiter");
        }
        return false;
    }

    private boolean isNativeMethod(ASTMethodDeclarator node) {
        JavaNode methodHeader = node.getMethodHeader();
        return methodHeader.isNative();
    }

    private boolean isStaticMethod(ASTMethodDeclarator node) {
        JavaNode methodHeader = node.getMethodHeader();
        return methodHeader.isStatic();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    
    private static final String INSTANCE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT_3_TEST_METHOD_REGEX = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT_4_TEST_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT_5_TEST_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";

    public CustomNamingConventionsRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getName().getImage();
        String methodNameRegex = "";
        
        // Determine the method kind based on modifiers
        if (node.getModifiers() instanceof MethodModifiers && ((MethodModifiers) node.getModifiers()).isStatic()) {
            // Static method
            methodNameRegex = STATIC_METHOD_REGEX;
        } else if (node.getModifiers() instanceof MethodModifiers && ((MethodModifiers) node.getModifiers()).isNative()) {
            // Native method
            methodNameRegex = NATIVE_METHOD_REGEX;
        } else if (hasJUnit3Annotation(node) || hasJUnit3Annotation(node.getParent())) {
            // JUnit 3 test method
            methodNameRegex = JUNIT_3_TEST_METHOD_REGEX;
        } else if (hasJUnit4Annotation(node) || hasJUnit4Annotation(node.getParent())) {
            // JUnit 4 test method
            methodNameRegex = JUNIT_4_TEST_METHOD_REGEX;
        } else if (hasJUnit5Annotation(node) || hasJUnit5Annotation(node.getParent())) {
            // JUnit 5 test method
            methodNameRegex = JUNIT_5_TEST_METHOD_REGEX;
        } else {
            // Instance method
            methodNameRegex = INSTANCE_METHOD_REGEX;
        }
        
        // Check if the method name matches the regex
        if (!Pattern.matches(methodNameRegex, methodName)) {
            addViolation(this, data, node);
        }
        
        // Recursively visit child nodes
        for (Object child : node.jjtGetChildren()) {
            visit((JavaNode) child, data);
        }
        
        return data;
    }
    
    private boolean hasJUnit3Annotation(JavaNode node) {
        if (node instanceof ClassOrInterfaceDeclaration) {
            for (MethodDeclaration method : ((ClassOrInterfaceDeclaration) node).getMethodDeclarations()) {
                if (hasJUnit3Annotation(method)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean hasJUnit3Annotation(MethodDeclaration node) {
        if (node.getAnnotations() instanceof MethodAnnotations) {
            for (Annotation annotation : ((MethodAnnotations) node.getAnnotations()).getAnnotations()) {
                if (annotation.getImage().equals("org.junit.Test")) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean hasJUnit4Annotation(JavaNode node) {
        if (node instanceof ClassOrInterfaceDeclaration) {
            for (MethodDeclaration method : ((ClassOrInterfaceDeclaration) node).getMethodDeclarations()) {
                if (hasJUnit4Annotation(method)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean hasJUnit4Annotation(MethodDeclaration node) {
        if (node.getAnnotations() instanceof MethodAnnotations) {
            for (Annotation annotation : ((MethodAnnotations) node.getAnnotations()).getAnnotations()) {
                if (annotation.getImage().equals("org.junit.Test")) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean hasJUnit5Annotation(JavaNode node) {
        if (node instanceof ClassOrInterfaceDeclaration) {
            for (MethodDeclaration method : ((ClassOrInterfaceDeclaration) node).getMethodDeclarations()) {
                if (hasJUnit5Annotation(method)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean hasJUnit5Annotation(MethodDeclaration node) {
        if (node.getAnnotations() instanceof MethodAnnotations) {
            for (Annotation annotation : ((MethodAnnotations) node.getAnnotations()).getAnnotations()) {
                if (annotation.getImage().equals("org.junit.jupiter.api.Test")) {
                    return true;
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final String INSTANCE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT3_TEST_METHOD_REGEX = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT4_TEST_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT5_TEST_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";

    private Map<String, String> methodNamingConventions = new HashMap<>();

    public MethodNamingConventionsRule() {
        methodNamingConventions.put("instanceMethod", INSTANCE_METHOD_REGEX);
        methodNamingConventions.put("staticMethod", STATIC_METHOD_REGEX);
        methodNamingConventions.put("nativeMethod", NATIVE_METHOD_REGEX);
        methodNamingConventions.put("junit3TestMethod", JUNIT3_TEST_METHOD_REGEX);
        methodNamingConventions.put("junit4TestMethod", JUNIT4_TEST_METHOD_REGEX);
        methodNamingConventions.put("junit5TestMethod", JUNIT5_TEST_METHOD_REGEX);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getImage();
        String methodKind = determineMethodKind(node);

        if (methodKind != null && !methodName.matches(methodNamingConventions.get(methodKind))) {
            addViolation(data, node, "Method name '" + methodName + "' does not match the naming convention for " + methodKind + " methods.");
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStaticInitializer node, Object data) {
        String methodName = node.getImage();
        String methodKind = "staticMethod";

        if (!methodName.matches(methodNamingConventions.get(methodKind))) {
            addViolation(data, node, "Method name '" + methodName + "' does not match the naming convention for static methods.");
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceBody node, Object data) {
        for (JavaNode child : node.jjtGetChildren()) {
            if (child instanceof ASTMethodDeclaration) {
                visit((ASTMethodDeclaration) child, data);
            } else if (child instanceof ASTStaticInitializer) {
                visit((ASTStaticInitializer) child, data);
            }
        }

        return super.visit(node, data);
    }

    private String determineMethodKind(ASTMethodDeclaration node) {
        if (isJUnit3TestMethod(node)) {
            return "junit3TestMethod";
        } else if (isJUnit4TestMethod(node)) {
            return "junit4TestMethod";
        } else if (isJUnit5TestMethod(node)) {
            return "junit5TestMethod";
        } else if (isNativeMethod(node)) {
            return "nativeMethod";
        } else if (isStaticMethod(node)) {
            return "staticMethod";
        } else {
            return "instanceMethod";
        }
    }

    private boolean isJUnit3TestMethod(ASTMethodDeclaration node) {
        ASTClassOrInterfaceType classOrInterfaceType = node.getParent().getParent();
        ASTName name = classOrInterfaceType.getName();
        return name.getImage().equals("junit.framework.TestCase");
    }

    private boolean isJUnit4TestMethod(ASTMethodDeclaration node) {
        ASTClassOrInterfaceType classOrInterfaceType = node.getParent().getParent();
        ASTName name = classOrInterfaceType.getName();
        return name.getImage().equals("org.junit.Test");
    }

    private boolean isJUnit5TestMethod(ASTMethodDeclaration node) {
        ASTClassOrInterfaceType classOrInterfaceType = node.getParent().getParent();
        ASTName name = classOrInterfaceType.getName();
        return name.getImage().equals("org.junit.jupiter.api.Test");
    }

    private boolean isNativeMethod(ASTMethodDeclaration node) {
        ASTName name = node.getName();
        return name.getImage().startsWith("native");
    }

    private boolean isStaticMethod(ASTMethodDeclaration node) {
        ASTMethodDeclaration parent = node.getParent();
        return parent != null && parent.getImage().equals("static");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        addRuleChainElement(new MethodDeclarationAST());
        addRuleChainElement(new CompilationUnitDeclarationAST());
    }

    @Override
    public Object visit(CompilationUnitDeclaration n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(MethodDeclaration n, Object data) {
        String methodName = n.getName();
        JavaClass containingClass = n.getParent().getParent();

        if (isJUnit3TestClass(containingClass)) {
            if (!matchesRegex(methodName, "test[A-Z0-9][a-zA-Z0-9]*")) {
                addViolation(data, n);
            }
        } else if (isJUnit4Or5TestClass(containingClass)) {
            if (!matchesRegex(methodName, "[a-z][a-zA-Z0-9]*")) {
                addViolation(data, n);
            }
        } else {
            if (!matchesRegex(methodName, "[a-z][a-zA-Z0-9]*")) {
                addViolation(data, n);
            }
        }

        return super.visit(n, data);
    }

    private boolean isJUnit3TestClass(JavaClass containingClass) {
        return containingClass.getName().startsWith("Test");
    }

    private boolean isJUnit4Or5TestClass(JavaClass containingClass) {
        return containsAnnotation(containingClass, "RunWith");
    }

    private boolean containsAnnotation(JavaClass containingClass, String annotationName) {
        for (AnnotationInstance annotation : containingClass.getAnnotations()) {
            if (annotation.getName().equals(annotationName)) {
                return true;
            }
        }
        return false;
    }

    private boolean matchesRegex(String input, String regex) {
        return input.matches(regex);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 143.87961339950562 秒
