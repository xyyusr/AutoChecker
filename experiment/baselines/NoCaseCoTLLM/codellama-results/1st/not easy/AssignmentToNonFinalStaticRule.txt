开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        // Check if the node is a constructor
        if (node.getName().image().equals("this")) {
            // Get all non-final static fields
            List<JavaField> nonFinalStaticFields = getNonFinalStaticFields(node);
            // Check assignments to non-final static fields in the constructor
            checkAssignments(node, nonFinalStaticFields);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FieldDeclaration node, Object data) {
        // Check if the field is static and not final
        if (nodeModifiers(node).contains(Modifier.STATIC) && !nodeModifiers(node).contains(Modifier.FINAL)) {
            getNonFinalStaticFields().add((JavaField) node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignment node, Object data) {
        return super.visit(node, data);
    }

    private List<JavaField> getNonFinalStaticFields(MethodDeclaration constructor) {
        List<JavaField> nonFinalStaticFields = new ArrayList<>();
        // Get all fields that are not final and static
        for (FieldDeclaration field : (List<FieldDeclaration>) constructor.findDescendants(FieldDeclaration.class)) {
            if (!nodeModifiers(field).contains(Modifier.FINAL) && nodeModifiers(field).contains(Modifier.STATIC)) {
                nonFinalStaticFields.add((JavaField) field);
            }
        }
        return nonFinalStaticFields;
    }

    private void checkAssignments(MethodDeclaration constructor, List<JavaField> nonFinalStaticFields) {
        // Check assignments to non-final static fields in the constructor
        for (Assignment assignment : (List<Assignment>) constructor.findDescendants(Assignment.class)) {
            JavaVariable target = assignment.getTarget();
            if (nonFinalStaticFields.contains(target)) {
                addViolation(this, assignment, "Assignment to non-final static field");
            }
        }
    }

    private List<Modifier> nodeModifiers(Node node) {
        List<Modifier> modifiers = new ArrayList<>();
        for (JavaModifier modifier : (List<JavaModifier>) node.findDescendants(JavaModifier.class)) {
            modifiers.add(modifier.getModifier());
        }
        return modifiers;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

出现语法错误，这一轮舍弃，直接重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    private Set<String> staticFields = new HashSet<>();

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (node.isClass() && node instanceof ASTClassDeclaration) {
            staticFields.clear();
            for (ASTFieldDeclaration field : node.getDeclaredFields()) {
                if (field instanceof ASTFieldDeclaration && ((ASTFieldDeclaration) field).isStatic()) {
                    staticFields.add(((ASTFieldDeclaration) field).getFieldName());
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node instanceof ASTAssignment && ((ASTAssignment) node).getOperator() == AssignmentOperator.ASSIGN) {
            ASTFieldAccess fieldAccess = (ASTFieldAccess) node.getLeftHandSide();
            if (fieldAccess.getFieldName().equals("this") && fieldAccess instanceof ASTFieldAccess) {
                ASTFieldAccess staticFieldAccess = (ASTFieldAccess) fieldAccess.getQualifier();
                if (staticFieldAccess instanceof ASTFieldAccess && staticFields.contains(staticFieldAccess.getFieldName())) {
                    ASTFieldDeclaration fieldDeclaration = findFieldDeclaration(staticFieldAccess.getFieldName());
                    if (fieldDeclaration != null && !(fieldDeclaration instanceof ASTFinalFieldDeclaration)) {
                        addViolation(this, data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldAccess node, Object data) {
        if (node instanceof ASTFieldAccess && node.getQualifier() instanceof ASTClassType) {
            ASTFieldAccess staticFieldAccess = (ASTFieldAccess) node;
            if (staticFields.contains(staticFieldAccess.getFieldName()) && !(staticFieldAccess instanceof ASTFinalFieldAccess)) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    private ASTFieldDeclaration findFieldDeclaration(String fieldName) {
        // This method is not implemented, you can implement it by yourself.
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleMatch(AssignmentToNonFinalStaticRule.class, ClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        if (node.isClassOrInterfaceDeclaration()) {
            for (MethodDeclaration method : node.getMethods()) {
                if (method.getName().getImage().equals("<init>")) {
                    for (Statement statement : method.getBody().getStatements()) {
                        visitAssignStatement(statement, data);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private void visitAssignStatement(Statement statement, Object data) {
        if (statement instanceof Assign) {
            Assign assign = (Assign) statement;
            if (assign.getRightHandSide() instanceof Name) {
                Name name = (Name) assign.getRightHandSide();
                if (name.getImage().contains(".")) {
                    String[] parts = name.getImage().split("\\.");
                    if (parts.length == 2 && parts[0].equals("this")) {
                        if (!node.isFinal()) {
                            addViolation(data, statement);
                        }
                    }
                }
            }
        }
        for (Statement subStatement : statement.getStatements()) {
            visitAssignStatement(subStatement, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        Set<String> staticFields = new HashSet<>();
        for (ASTFieldDeclaration field : (List<ASTFieldDeclaration>) node.getJavaDocComment()) {
            if (field.getType().isStatic()) {
                staticFields.add(field.getIdentifier());
            }
        }
        for (ASTMethodDeclaration method : (List<ASTMethodDeclaration>) node.getJavaDocComment()) {
            if (method.isConstructor()) {
                for (ASTFieldAccessExpr expr : (List<ASTFieldAccessExpr>) method.getBody().getJavaDocComment()) {
                    if (staticFields.contains(expr.getFieldName())) {
                        addViolation(data, this, expr, "Assignment to non-final static field " + expr.getFieldName() + " in constructor is unsafe.");
                    }
                }
                for (ASTAssignmentExpr expr : (List<ASTAssignmentExpr>) method.getBody().getJavaDocComment()) {
                    if (staticFields.contains(expr.getTarget().getFieldName())) {
                        addViolation(data, this, expr, "Assignment to non-final static field " + expr.getTarget().getFieldName() + " in constructor is unsafe.");
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 110.1759614944458 秒
