开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainElement(new ASTMatchRule(this, JavaCompilationUnit.class,
                new RuleChainElementFilter() {
                    public boolean accept(ASTNode node) {
                        return true;
                    }
                },
                new MethodRuleChain() {
                    public Object execute() {
                        // Traverse the compilation unit to find all import statements
                        CompilationUnit compilationUnit = (CompilationUnit) getASTNode();
                        ImportDeclaration[] importDeclarations = compilationUnit.findDescendantsOfType(ImportDeclaration.class);

                        for (ImportDeclaration importDeclaration : importDeclarations) {
                            if (isUnused(importDeclaration)) {
                                addViolation(this, importDeclaration);
                            }
                        }

                        return null;
                    }
                }));
    }

    private boolean isUnused(ImportDeclaration importDeclaration) {
        // Collect all imported types
        Set<String> importedTypes = new HashSet<>();
        for (ImportDeclaration importDeclaration2 : importDeclaration.findDescendantsOfType(ImportDeclaration.class)) {
            importedTypes.add(importDeclaration2.getImportedReference().getImage());
        }

        // Check if import is unused
        for (ImportDeclaration importDeclaration2 : importDeclaration.findDescendantsOfType(ImportDeclaration.class)) {
            if (!importedTypes.contains(importDeclaration2.getImportedReference().getImage())) {
                return true;
            }
        }

        // Check for duplicated imports
        for (ImportDeclaration importDeclaration2 : importDeclaration.findDescendantsOfType(ImportDeclaration.class)) {
            if (importedTypes.contains(importDeclaration2.getImportedReference().getImage())) {
                return true;
            }
        }

        // Check if imported type is already implicitly in scope
        if (isImplicitlyImported(importDeclaration.getImportedReference().getImage())) {
            return true;
        }

        return false;
    }

    private boolean isImplicitlyImported(String importedType) {
        // Java provides a set of implicitly imported types, including those from java.lang
        Set<String> implicitlyImportedTypes = new HashSet<>();
        implicitlyImportedTypes.add("java.lang");
        implicitlyImportedTypes.add("java.lang.Boolean");
        implicitlyImportedTypes.add("java.lang.Byte");
        implicitlyImportedTypes.add("java.lang.Character");
        implicitlyImportedTypes.add("java.lang.Class");
        implicitlyImportedTypes.add("java.lang.Double");
        implicitlyImportedTypes.add("java.lang.Float");
        implicitlyImportedTypes.add("java.lang.Integer");
        implicitlyImportedTypes.add("java.lang.Long");
        implicitlyImportedTypes.add("java.lang.Math");
        implicitlyImportedTypes.add("java.lang.Number");
        implicitlyImportedTypes.add("java.lang.Package");
        implicitlyImportedTypes.add("java.lang.Runtime");
        implicitlyImportedTypes.add("java.lang.Shutdown");
        implicitlyImportedTypes.add("java.lang.String");
        implicitlyImportedTypes.add("java.lang.System");
        implicitlyImportedTypes.add("java.lang.Thread");

        // Check if imported type is already implicitly in scope
        if (implicitlyImportedTypes.contains(importedType)) {
            return true;
        }

        // Check if imported type is in the current package
        if (importedType.startsWith(getPackageName())) {
            return true;
        }

        return false;
    }

    private String getPackageName() {
        // Get the package name of the current compilation unit
        CompilationUnit compilationUnit = (CompilationUnit) getASTNode();
        String packageName = compilationUnit.getPackageName();

        // If the package name is not specified, use the default package name
        if (packageName == null) {
            packageName = "";
        }

        return packageName;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        // Check if import is unused
        if (!isUsed(node, data)) {
            addViolation(this, data, node);
        }
        
        // Check for duplicate imports
        if (isDuplicateImport(node, data)) {
            addViolation(this, data, node);
        }
        
        // Check if members are already in scope
        if (isImplicitlyInScope(node, data)) {
            addViolation(this, data, node);
        }

        return super.visit(node, data);
    }

    private boolean isUsed(ASTImportDeclaration node, Object data) {
        // Get the imported class name
        String importedClassName = node.getImage();

        // Get all nodes that use the imported class
        NodeStream stream = new NodeStream(data);
        List<ASTNode> usingNodes = stream.findNodes(new ASTJavaClassAccess(nameMatches(importedClassName)));

        // If no nodes use the imported class, return true
        return usingNodes.isEmpty();
    }

    private boolean isDuplicateImport(ASTImportDeclaration node, Object data) {
        // Get the imported class name
        String importedClassName = node.getImage();

        // Get all import declarations
        ASTImportDeclaration[] importDeclarations = (ASTImportDeclaration[]) data;

        // Check if the same class is imported elsewhere
        for (ASTImportDeclaration importDeclaration : importDeclarations) {
            if (importDeclaration.getImage().equals(importedClassName) && importDeclaration != node) {
                return true;
            }
        }

        return false;
    }

    private boolean isImplicitlyInScope(ASTImportDeclaration node, Object data) {
        // Get the imported class name
        String importedClassName = node.getImage();

        // Check if the class is in java.lang or the current package
        if (importedClassName.startsWith("java.lang.") || importedClassName.startsWith(getCurrentPackageName())) {
            return true;
        }

        return false;
    }

    private String getCurrentPackageName() {
        // Get the current package name
        JavaNode currentNode = (JavaNode) getRootNode();
        return currentNode.getPackage().getName();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainElement(new JavaNodes());
        addRuleChainElement(new Imports());
    }

    @Override
    public Object visit(Imports node, Object data) {
        Set<String> implicitClasses = new HashSet<>();
        implicitClasses.add("java.lang");
        implicitClasses.add("java.lang." + getCurrentPackageName());
        Set<String> usedClasses = new HashSet<>();

        node.jjtGetChild(0).accept(this, data);

        Stack<JavaNode> stack = new Stack<>();
        stack.push(node);
        while (!stack.isEmpty()) {
            JavaNode currentNode = stack.pop();
            if (currentNode instanceof JavaImport) {
                JavaImport importNode = (JavaImport) currentNode;
                String className = importNode.getImage();
                if (implicitClasses.contains(className) || usedClasses.contains(className)) {
                    continue;
                }
                if (node.jjtGetNumChildren() > 1) {
                    for (int i = 0; i < node.jjtGetNumChildren() - 1; i++) {
                        JavaNode childNode = node.jjtGetChild(i + 1);
                        if (childNode instanceof JavaImport && ((JavaImport) childNode).getImage().equals(className)) {
                            continue;
                        }
                    }
                }
                addViolation(data, this, importNode);
            } else if (currentNode instanceof JavaMethodCallExpression || currentNode instanceof JavaFieldAccess) {
                JavaMethodCallExpression methodCallNode = null;
                JavaFieldAccess fieldAccessNode = null;
                if (currentNode instanceof JavaMethodCallExpression) {
                    methodCallNode = (JavaMethodCallExpression) currentNode;
                } else if (currentNode instanceof JavaFieldAccess) {
                    fieldAccessNode = (JavaFieldAccess) currentNode;
                }
                if (methodCallNode != null || fieldAccessNode != null) {
                    String className = methodCallNode != null ? methodCallNode.getImage() : fieldAccessNode.getImage();
                    usedClasses.add(className);
                }
            }
            if (currentNode instanceof JavaClassOrInterfaceType) {
                usedClasses.add(((JavaClassOrInterfaceType) currentNode).getImage());
            }
            if (currentNode.getJavaParentNode() != null) {
                stack.push(currentNode.getJavaParentNode());
            }
        }

        return data;
    }

    @Override
    public Object visit(JavaImport node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaMethodCallExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaFieldAccess node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaClassOrInterfaceType node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        Set<String> usedClasses = getUsedClasses(node);
        Set<String> importClasses = getImportClasses(node);
        Set<String> javaLangClasses = getJavaLangClasses();
        Set<String> currentPackageClasses = getCurrentPackageClasses();
        Set<String> unnecessaryImports = new HashSet<>();

        unnecessaryImports.addAll(importClasses);
        unnecessaryImports.removeAll(usedClasses);
        unnecessaryImports.removeAll(javaLangClasses);
        unnecessaryImports.removeAll(currentPackageClasses);

        if (unnecessaryImports.size() > 0) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }

    private Set<String> getUsedClasses(ImportDeclaration node) {
        Set<String> usedClasses = new HashSet<>();

        // Traverse the AST to find all used classes and interfaces
        NodeStream stream = new NodeStream();
        stream.traverse(node.getJavaParser().getAST().getRootNode());
        for (JavaNode javaNode : stream.getNodes(Identifier.class)) {
            String className = javaNode.getImage();
            usedClasses.add(className);
        }

        return usedClasses;
    }

    private Set<String> getImportClasses(ImportDeclaration node) {
        Set<String> importClasses = new HashSet<>();

        // Get the import name from the import declaration
        String importName = node.getImportName();

        // Add the import name to the set
        importClasses.add(importName);

        return importClasses;
    }

    private Set<String> getJavaLangClasses() {
        Set<String> javaLangClasses = new HashSet<>();

        // Get classes and interfaces in java.lang package
        // (This is a simplified version, actual implementation may vary)
        javaLangClasses.add("Boolean");
        javaLangClasses.add("Byte");
        javaLangClasses.add("Character");
        javaLangClasses.add("Class");
        javaLangClasses.add("Cloneable");
        javaLangClasses.add("Compiler");
        javaLangClasses.add("Double");
        javaLangClasses.add("Enum");
        javaLangClasses.add("Exception");
        javaLangClasses.add("Float");
        javaLangClasses.add("Future");
        javaLangClasses.add("Integer");
        javaLangClasses.add("Iterable");
        javaLangClasses.add("Long");
        javaLangClasses.add("Math");
        javaLangClasses.add("NullPointerException");
        javaLangClasses.add("Number");
        javaLangClasses.add("Object");
        javaLangClasses.add("Package");
        javaLangClasses.add("Runnable");
        javaLangClasses.add("SecurityManager");
        javaLangClasses.add("Short");
        javaLangClasses.add("StackTraceElement");
        javaLangClasses.add("String");
        javaLangClasses.add("Thread");
        javaLangClasses.add("Throwable");
        javaLangClasses.add("Void");

        return javaLangClasses;
    }

    private Set<String> getCurrentPackageClasses() {
        Set<String> currentPackageClasses = new HashSet<>();

        // Get classes and interfaces in the current package
        // (This is a simplified version, actual implementation may vary)
        currentPackageClasses.add("ClassName");

        return currentPackageClasses;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        addRuleMatch("node", "ImportDeclaration");
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        // Get the imported class name
        String importedClassName = node.getName();

        // Check if the import statement is duplicated
        if (isImportDuplicated(node)) {
            addViolation(this, data, node);
            return data;
        }

        // Check if the imported class is used in the Java file
        if (!isClassUsed(importedClassName, data)) {
            addViolation(this, data, node);
            return data;
        }

        // Check if the imported class is in java.lang package or the current package
        if (isClassInImplicitScope(importedClassName)) {
            addViolation(this, data, node);
        }

        return super.visit(node, data);
    }

    private boolean isImportDuplicated(ImportDeclaration node) {
        // Check if there's another import statement with the same class
        ImportDeclaration[] importDeclarations = getAST().getNodesByType(ImportDeclaration.class);
        for (ImportDeclaration impDecl : importDeclarations) {
            if (impDecl != node && impDecl.getName().equals(node.getName())) {
                return true;
            }
        }
        return false;
    }

    private boolean isClassUsed(String className, Object data) {
        // Check if the imported class is used in the Java file
        for (Object node : data) {
            if (node instanceof ASTNode) {
                ASTNode astNode = (ASTNode) node;
                if (astNode.matches(ClassName.class) && astNode.getName().equals(className)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isClassInImplicitScope(String className) {
        // Check if the imported class is in java.lang package or the current package
        if (className.startsWith("java.lang.")) {
            return true;
        }
        if (getAST().getPackage().equals(className)) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 134.9111442565918 秒
