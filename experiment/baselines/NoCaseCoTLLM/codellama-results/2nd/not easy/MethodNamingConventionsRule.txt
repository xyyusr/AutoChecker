开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    
    public MethodNamingConventionsRule() {
        super(MethodDeclaration.class);
    }
    
    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getNameAsString();
        
        // Check if the method is a JUnit 3 test method
        if (isJUnit3TestMethod(node)) {
            if (!Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*", methodName)) {
                reportViolations(node);
            }
        }
        // Check if the method is a JUnit 4 test method
        else if (isJUnit4TestMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolations(node);
            }
        }
        // Check if the method is a JUnit 5 test method
        else if (isJUnit5TestMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolations(node);
            }
        }
        // Check if the method is a native method
        else if (isNativeMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolations(node);
            }
        }
        // Check if the method is an instance method
        else if (isInstanceMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolations(node);
            }
        }
        // Check if the method is a static method
        else if (isStaticMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                reportViolations(node);
            }
        }
        
        return super.visit(node, data);
    }
    
    private boolean isJUnit3TestMethod(MethodDeclaration node) {
        return node.getModifiers().contains(JMod.STATIC) && node.getReturnType().isVoid() && Pattern.matches(".*test.*", node.getNameAsString());
    }
    
    private boolean isJUnit4TestMethod(MethodDeclaration node) {
        return node.getModifiers().contains(JMod.PUBLIC) && node.getReturnType().isVoid() && Pattern.matches("@org.junit.Test.*", node.getBody().getFirstStatement().toString());
    }
    
    private boolean isJUnit5TestMethod(MethodDeclaration node) {
        return node.getModifiers().contains(JMod.PUBLIC) && node.getReturnType().isVoid() && Pattern.matches("@org.junit.jupiter.api.Test.*", node.getBody().getFirstStatement().toString());
    }
    
    private boolean isNativeMethod(MethodDeclaration node) {
        return node.getModifiers().contains(JMod.NATIVE);
    }
    
    private boolean isInstanceMethod(MethodDeclaration node) {
        return !node.getModifiers().contains(JMod.STATIC);
    }
    
    private boolean isStaticMethod(MethodDeclaration node) {
        return node.getModifiers().contains(JMod.STATIC);
    }
    
    private void reportViolations(MethodDeclaration node) {
        // Report a violation for the method name
        addRuleViolation(node);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        addRuleChainElement(new MethodDeclaration(this));
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isStatic()) {
            if (!node.getName().matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, new MethodNameInvalid(node));
            }
        } else if (node.isNative()) {
            if (!node.getName().matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, new MethodNameInvalid(node));
            }
        } else if (node.getType() instanceof ClassOrInterfaceDeclaration) {
            ClassOrInterfaceDeclaration enclosingClass = (ClassOrInterfaceDeclaration) node.getType();
            if (enclosingClass.getAnnotation("Test").isPresent()) {
                String testFramework = getTestFramework(enclosingClass);
                if (testFramework.equals("JUnit 3") && !node.getName().matches("test[A-Z0-9][a-zA-Z0-9]*")) {
                    addViolation(data, new MethodNameInvalid(node));
                } else if (testFramework.equals("JUnit 4") || testFramework.equals("JUnit 5") && !node.getName().matches("[a-z][a-zA-Z0-9]*")) {
                    addViolation(data, new MethodNameInvalid(node));
                }
            } else {
                if (!node.getName().matches("[a-z][a-zA-Z0-9]*")) {
                    addViolation(data, new MethodNameInvalid(node));
                }
            }
        } else {
            if (!node.getName().matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, new MethodNameInvalid(node));
            }
        }
        return super.visit(node, data);
    }

    private String getTestFramework(ClassOrInterfaceDeclaration classDecl) {
        if (classDecl.getAnnotation("org.junit.Test").isPresent()) {
            return "JUnit 4";
        } else if (classDecl.getAnnotation("org.junit.jupiter.api.Test").isPresent()) {
            return "JUnit 5";
        } else if (classDecl.getAnnotation("junit.framework.TestCase").isPresent()) {
            return "JUnit 3";
        }
        return "";
    }
}

class MethodNameInvalid extends RuleViolation {
    public MethodNameInvalid(MethodDeclaration node) {
        super(node);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        addRuleChainElement(new MethodDeclarationClassFilter());
        addRuleChainElement(new MethodNameFilter());
    }

    private class MethodDeclarationClassFilter extends AbstractMethodDeclarationClassFilter {

        @Override
        public Class<?>[] getNodeType() {
            return new Class<?>[] { MethodDeclaration.class };
        }
    }

    private class MethodNameFilter extends AbstractJavaAnnotatableMethodDeclarationVisitor {

        @Override
        public Object visit(MethodDeclaration n, Object data) {
            String methodName = n.getImage();
            String methodType = getMethodType(n);

            if (Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*", methodName)) {
                if (!n.isStatic() && methodType != "JUnit 3 test") {
                    addViolation(data, n);
                    return data;
                }
            } else if (!Pattern.matches("^[a-z][a-zA-Z0-9]*$", methodName)) {
                if (methodType.equals("JUnit 3 test")) {
                    addViolation(data, n);
                    return data;
                }
            } else if (methodType.equals("JUnit 4 test") || methodType.equals("JUnit 5 test")) {
                if (!Pattern.matches("^[a-z][a-zA-Z0-9]*$", methodName)) {
                    addViolation(data, n);
                    return data;
                }
            }

            return super.visit(n, data);
        }

        private String getMethodType(MethodDeclaration n) {
            if (n.isStatic()) {
                return "static";
            } else if (n.isNative()) {
                return "native";
            } else if (n.isConstructor()) {
                return "constructor";
            } else {
                if (n.getAnnotation("org.junit.Test") != null) {
                    if (n.getAnnotation("org.junit3.TestCase") != null) {
                        return "JUnit 3 test";
                    } else if (n.getAnnotation("org.junit4.Test") != null) {
                        return "JUnit 4 test";
                    } else if (n.getAnnotation("org.junit.jupiter.api.Test") != null) {
                        return "JUnit 5 test";
                    }
                }
                return "";
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final Pattern INSTANCE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern STATIC_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern NATIVE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT3_TEST_METHOD_PATTERN = Pattern.compile("test[A-Z0-9][a-zA-Z0-9]*");
    private static final Pattern JUNIT4_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT5_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");

    public MethodNamingConventionsRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isStatic()) {
            if (!STATIC_METHOD_PATTERN.matcher(node.getName()).matches()) {
                reportViolation(data, node);
            }
        } else if (node.isNative()) {
            if (!NATIVE_METHOD_PATTERN.matcher(node.getName()).matches()) {
                reportViolation(data, node);
            }
        } else if (node.getModifiers().contains(Modifier.STATIC)) {
            // do nothing, we've already checked for static methods
        } else if (node.getModifiers().contains(Modifier.NATIVE)) {
            // do nothing, we've already checked for native methods
        } else if (node.getModifiers().contains(Modifier.ABSTRACT)) {
            // do nothing, we don't care about abstract methods
        } else {
            if (!INSTANCE_METHOD_PATTERN.matcher(node.getName()).matches()) {
                reportViolation(data, node);
            }
        }

        return super.visit(node, data);
    }

    private void reportViolation(Object data, Node node) {
        Violation violation = new Violation(getRuleName(), node.getFilename(), node.getImage(), "Method name '" + node.getName() + "' does not match the naming convention for its type.");
        addViolation(data, violation);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private Pattern instanceMethodPattern = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private Pattern staticMethodPattern = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private Pattern nativeMethodPattern = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private Pattern junit3TestMethodPattern = Pattern.compile("test[A-Z0-9][a-zA-Z0-9]*");
    private Pattern junit4TestMethodPattern = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private Pattern junit5TestMethodPattern = Pattern.compile("[a-z][a-zA-Z0-9]*");

    public MethodNamingConventionsRule() {
        super(MethodDeclaration.class, StaticMethodDeclaration.class, NativeMethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getImage();
        if (isJUnit3TestMethod(node)) {
            Matcher matcher = junit3TestMethodPattern.matcher(methodName);
            if (!matcher.matches()) {
                addViolation(this, data, node);
            }
        } else if (isJUnit4TestMethod(node)) {
            Matcher matcher = junit4TestMethodPattern.matcher(methodName);
            if (!matcher.matches()) {
                addViolation(this, data, node);
            }
        } else if (isJUnit5TestMethod(node)) {
            Matcher matcher = junit5TestMethodPattern.matcher(methodName);
            if (!matcher.matches()) {
                addViolation(this, data, node);
            }
        } else {
            Matcher matcher = instanceMethodPattern.matcher(methodName);
            if (!matcher.matches()) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(StaticMethodDeclaration node, Object data) {
        String methodName = node.getImage();
        Matcher matcher = staticMethodPattern.matcher(methodName);
        if (!matcher.matches()) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NativeMethodDeclaration node, Object data) {
        String methodName = node.getImage();
        Matcher matcher = nativeMethodPattern.matcher(methodName);
        if (!matcher.matches()) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    private boolean isJUnit3TestMethod(MethodDeclaration node) {
        // Check if the method is a public void method with a name starting with "test"
        // and follows the regex [A-Z0-9][a-zA-Z0-9]*
        return node.getModifiers().contains(Modifier.PUBLIC) && node.getReturnType().getImage().equals("void")
                && node.getImage().startsWith("test") && junit3TestMethodPattern.matcher(node.getImage()).matches();
    }

    private boolean isJUnit4TestMethod(MethodDeclaration node) {
        // Check if the method is annotated with @Test
        // This is a simplified implementation and may not cover all cases
        return node.getAnnotations().stream().anyMatch(annotation -> annotation.getImage().equals("@Test"));
    }

    private boolean isJUnit5TestMethod(MethodDeclaration node) {
        // Check if the method is annotated with @Test
        // This is a simplified implementation and may not cover all cases
        return node.getAnnotations().stream().anyMatch(annotation -> annotation.getImage().equals("@Test"));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 264.0773847103119 秒
