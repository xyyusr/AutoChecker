开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (hasEmptyBody(node) || hasEmptyFinallyClause(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASwitchStatement node, Object data) {
        if (hasEmptyBody(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASynchronizedStatement node, Object data) {
        if (hasEmptyBody(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (hasEmptyBody(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (hasEmptyBody(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (hasEmptyBody(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DowhileStatement node, Object data) {
        if (hasEmptyBody(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean hasEmptyBody(ASTControlStatement node) {
        if (node.getBody() != null && node.getBody().size() == 1 && node.getBody().get(0).getImage().trim().isEmpty()) {
            return true;
        }
        return false;
    }

    private boolean hasEmptyFinallyClause(ASTTryStatement node) {
        if (node.getFinallyClause() != null && node.getFinallyClause().size() == 1 && node.getFinallyClause().get(0).getImage().trim().isEmpty()) {
            return true;
        }
        return false;
    }

    private boolean hasEmptyInitializerOrBlock(JavaNode node) {
        if (node.getImage().trim().isEmpty()) {
            return true;
        }
        return false;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        if (node instanceof ASTInitializer) {
            if (hasEmptyInitializerOrBlock(node)) {
                addViolation(data, node);
            }
        } else if (node instanceof ASTBlock) {
            if (hasEmptyBlock(node)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean hasEmptyBlock(JavaNode node) {
        if (node instanceof ASTBlock) {
            return hasEmptyBody((ASTBlock) node);
        }
        return false;
    }

    private List<JavaNode> violations = new ArrayList<JavaNode>();

    @Override
    public Object visit(ASTNode node, Object data) {
        super.visit(node, data);
        return violations;
    }

    private void addViolation(Object data, JavaNode node) {
        violations.add(node);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMessage("Empty control statement body");
        addRulePriority(PMDRulePriority.MAX);
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren() == 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FinallyBlock node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren() > 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (node.getStatements().isEmpty()) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren() == 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getThenStatement() != null && node.getThenStatement().getChildren() == 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren() == 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren() == 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren() == 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        if (node.getInitializer() != null && node.getInitializer().getChildren() > 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getChildren() > 0) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit( TryStatement node, Object data ) {
        if ( node.getBody() != null && node.getBody().getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( FinallyStatement node, Object data ) {
        if ( node.getStatement() != null && (node.getStatement() instanceof Block) && ((Block) node.getStatement()).getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( SwitchStatement node, Object data ) {
        if ( node.getStatements() != null && node.getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( SynchronizedStatement node, Object data ) {
        if ( node.getBody() != null && node.getBody().getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( IfStatement node, Object data ) {
        if ( (node.getThenStatement() != null && (node.getThenStatement() instanceof Block) && ((Block) node.getThenStatement()).getStatements().isEmpty())
                || (node.getElseStatement() != null && (node.getElseStatement() instanceof Block) && ((Block) node.getElseStatement()).getStatements().isEmpty()) ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( WhileStatement node, Object data ) {
        if ( node.getBody() != null && node.getBody().getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( ForStatement node, Object data ) {
        if ( node.getBody() != null && node.getBody().getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( DoStatement node, Object data ) {
        if ( node.getBody() != null && node.getBody().getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( Block node, Object data ) {
        if ( node.getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( VariableDeclarator node, Object data ) {
        if ( node.getInitializer() != null && node.getInitializer().getStatements().isEmpty() ) {
            addViolation( data, node );
        }
        return super.visit( node, data );
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public void apply(List<? extends JavaNode> nodes, String ruleSetName) {
        for (JavaNode node : nodes) {
            if (node instanceof ASTTryStatement) {
                visitTryStatement((ASTTryStatement) node);
            } else if (node instanceof ASTSwitchStatement) {
                visitSwitchStatement((ASTSwitchStatement) node);
            } else if (node instanceof ASTIfStatement) {
                visitIfStatement((ASTIfStatement) node);
            } else if (node instanceof ASTWhileStatement) {
                visitWhileStatement((ASTWhileStatement) node);
            } else if (node instanceof ASTForStatement) {
                visitForStatement((ASTForStatement) node);
            } else if (node instanceof ASTDoStatement) {
                visitDoStatement((ASTDoStatement) node);
            } else if (node instanceof ASTFinallyBlock) {
                visitFinallyBlock((ASTFinallyBlock) node);
            } else if (node instanceof ASTBlock) {
                visitBlock((ASTBlock) node);
            } else if (node instanceof ASTEmptyStatement) {
                visitEmptyStatement((ASTEmptyStatement) node);
            } else if (node instanceof ASTEmptyForStatement) {
                visitEmptyForStatement((ASTEmptyForStatement) node);
            } else if (node instanceof ASTEmptyWhileStatement) {
                visitEmptyWhileStatement((ASTEmptyWhileStatement) node);
            } else if (node instanceof ASTEmptyForInit) {
                visitEmptyForInit((ASTEmptyForInit) node);
            } else if (node instanceof ASTEmptyForUpdate) {
                visitEmptyForUpdate((ASTEmptyForUpdate) node);
            }
        }
    }

    private void visitTryStatement(ASTTryStatement node) {
        if (node.getBody() != null && node.getBody().getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty try statement");
        }
        if (node.getFinallyBlock() != null && node.getFinallyBlock().getNumberOfChildren() == 0) {
            addRuleViolation(node.getFinallyBlock(), "Empty finally clause");
        }
    }

    private void visitSwitchStatement(ASTSwitchStatement node) {
        if (node.getStatementList() != null && node.getStatementList().getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty switch statement");
        }
    }

    private void visitIfStatement(ASTIfStatement node) {
        if (node.getThenStatementList() != null && node.getThenStatementList().getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty if statement");
        }
    }

    private void visitWhileStatement(ASTWhileStatement node) {
        if (node.getBody() != null && node.getBody().getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty while statement");
        }
    }

    private void visitForStatement(ASTForStatement node) {
        if (node.getBody() != null && node.getBody().getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty for statement");
        }
        if (node.getInit() != null && node.getInit().getNumberOfChildren() == 0) {
            addRuleViolation(node.getInit(), "Empty for initializer");
        }
        if (node.getUpdate() != null && node.getUpdate().getNumberOfChildren() == 0) {
            addRuleViolation(node.getUpdate(), "Empty for update");
        }
    }

    private void visitDoStatement(ASTDoStatement node) {
        if (node.getBody() != null && node.getBody().getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty do statement");
        }
    }

    private void visitFinallyBlock(ASTFinallyBlock node) {
        if (node.getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty finally clause");
        }
    }

    private void visitBlock(ASTBlock node) {
        if (node.getNumberOfChildren() == 0) {
            addRuleViolation(node, "Empty block");
        }
    }

    private void visitEmptyStatement(ASTEmptyStatement node) {
        addRuleViolation(node, "Empty statement");
    }

    private void visitEmptyForStatement(ASTEmptyForStatement node) {
        addRuleViolation(node, "Empty for statement");
    }

    private void visitEmptyWhileStatement(ASTEmptyWhileStatement node) {
        addRuleViolation(node, "Empty while statement");
    }

    private void visitEmptyForInit(ASTEmptyForInit node) {
        addRuleViolation(node, "Empty for initializer");
    }

    private void visitEmptyForUpdate(ASTEmptyForUpdate node) {
        addRuleViolation(node, "Empty for update");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    @Override
    public void apply(List<Object> list, JavaNode node, String... args) {
        visit(node, list);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTryStatementFinally node, Object data) {
        ASTTryStatementBody tryBody = node.getTryBody();
        if (tryBody != null && tryBody.getChildCount() == 0) {
            addViolation(data, tryBody);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getStatementList() != null && node.getStatementList().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getThenStatement() != null && node.getThenStatement().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyForInitializer node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyForStatement node, Object data) {
        if (node.getInitializer() != null && node.getInitializer().getChildCount() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyWhileStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyIfStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptySwitchStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptySynchronizedStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyTryStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyFinallyClause node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyForLoopStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyDoStatement node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptyIfStatementBody node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptySwitchStatementBody node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEmptySynchronizedStatementBody node, Object data) {
        addViolation(data, node);
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 193.67811751365662 秒
