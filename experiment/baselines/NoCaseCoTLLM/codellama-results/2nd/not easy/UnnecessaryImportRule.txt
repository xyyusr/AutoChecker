开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(JavaNode.CLASS_DECLARATION, JavaNode.IMPORT_DECLARATION);
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        Set<String> importedClasses = new HashSet<>();
        for (ImportIdentifier importIdentifier : node.getImportIdentifiers()) {
            importedClasses.add(importIdentifier.getIdentifier());
        }

        // Check if import statement is unused
        if (isUnusedImport(node, importedClasses)) {
            addViolation(data, node);
        }

        // Check if import statement is duplicated
        if (isDuplicatedImport(node, importedClasses, data)) {
            addViolation(data, node);
        }

        // Check if import statement imports classes from java.lang or current package
        if (isUnnecessaryImport(node, importedClasses)) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }

    private boolean isUnusedImport(ImportDeclaration node, Set<String> importedClasses) {
        // Traverse the AST to check if any of the imported classes are used
        ClassOrInterfaceDeclaration classDecl = (ClassOrInterfaceDeclaration) node.findParent(ClassOrInterfaceDeclaration.class);
        if (classDecl != null) {
            for (MethodDeclaration method : classDecl.getMethods()) {
                for (VariableDeclarationExpression var : method.getVariables()) {
                    for (String importedClass : importedClasses) {
                        if (var.getName().equals(importedClass)) {
                            return false; // Import is used
                        }
                    }
                }
            }
        }
        return true; // Import is unused
    }

    private boolean isDuplicatedImport(ImportDeclaration node, Set<String> importedClasses, Object data) {
        // Check if there are any other import statements that import the same classes
        for (ImportDeclaration otherImport : (List<ImportDeclaration>) data) {
            if (otherImport != node && importedClasses.equals(otherImport.getImportedClasses())) {
                return true; // Import is duplicated
            }
        }
        return false;
    }

    private boolean isUnnecessaryImport(ImportDeclaration node, Set<String> importedClasses) {
        // Check if the imported classes are in java.lang or the current package
        for (String importedClass : importedClasses) {
            if (importedClass.startsWith("java.lang.") || (node.getImportedClasses()).contains(importedClass)) {
                return true; // Import is unnecessary
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        // Get the imported class name
        String importedClassName = node.getIdentifier();
        // Get the import statement's target package
        PackageDeclaration targetPackageNode = (PackageDeclaration) node.getParent();
        String importStatementTargetPackage = targetPackageNode.getName();

        // Check if the imported class is used in the Java source code
        if (!isClassUsed(importedClassName)) {
            addViolation(data, node);
            return data;
        }

        // Check if the imported class is already implicitly in scope
        if (isImplicitlyInScope(importedClassName)) {
            addViolation(data, node);
            return data;
        }

        // Check if the imported class is duplicated
        if (isDuplicateImport(importedClassName, importStatementTargetPackage)) {
            addViolation(data, node);
            return data;
        }

        // Continue visiting other nodes
        return super.visit(node, data);
    }

    // Helper method to check if a class is used in the Java source code
    private boolean isClassUsed(String className) {
        // Get the AST nodes that represent the Java source code
        AST ast = getAST();
        NodeStream nodes = ast.getAllDescendants();

        // Iterate over each AST node
        for (Object node : nodes) {
            if (node instanceof ClassOrInterfaceDeclaration) {
                ClassOrInterfaceDeclaration classNode = (ClassOrInterfaceDeclaration) node;
                if (classNode.getName().equals(className)) {
                    // The class is used in the Java source code
                    return true;
                }
            }
        }
        return false;
    }

    // Helper method to check if a class is already implicitly in scope
    private boolean isImplicitlyInScope(String className) {
        // Check if the class is in java.lang
        if (className.startsWith("java.lang.")) {
            return true;
        }

        // Check if the class is in the current package
        PackageDeclaration packageNode = (PackageDeclaration) getAST().getPackage();
        if (packageNode.getName().equals(getPackageName())) {
            return className.equals(getClassName());
        }
        return false;
    }

    // Helper method to check if an import statement is duplicated
    private boolean isDuplicateImport(String className, String importStatementTargetPackage) {
        // Get the AST nodes that represent the import statements
        ImportDeclaration importDeclarations = (ImportDeclaration) getAST().getAllDescendants(ImportDeclaration.class);

        // Iterate over each import statement
        for (ImportDeclaration importDeclaration : importDeclarations) {
            // Check if the import statement has the same target package as the current import statement
            if (importDeclaration.getPackage() != null && importDeclaration.getPackage().getName().equals(importStatementTargetPackage)) {
                // Check if the import statement imports the same class as the current import statement
                if (importDeclaration.getIdentifier().equals(className)) {
                    return true;
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        if (!isFromJavaLangOrCurrentPackage(node)) {
            String importedClassName = getImportedClassName(node);
            if (isUnusedImport(node, importedClassName)) {
                addViolation(this, data, node);
            } else if (isDuplicatedImport(node, importedClassName)) {
                addViolation(this, data, node);
            } else if (isImplicitlyImported(node, importedClassName)) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isFromJavaLangOrCurrentPackage(ImportDeclaration node) {
        return node.getStaticImportTarget().startsWith("java.lang.") || node.getStaticImportTarget().startsWith(getCurrentPackageName());
    }

    private String getImportedClassName(ImportDeclaration node) {
        return node.getStaticImportTarget().replace(".", "");
    }

    private boolean isUnusedImport(ImportDeclaration node, String importedClassName) {
        return !isClassUsed(node.getStaticImportTarget());
    }

    private boolean isClassUsed(String className) {
        NodeStream stream = getAST().createNodeStream();
        for (JavaNode node : stream) {
            if (node instanceof Identifier && node.getImage().equals(className)) {
                return true;
            }
        }
        return false;
    }

    private boolean isDuplicatedImport(ImportDeclaration node, String importedClassName) {
        for (ImportDeclaration otherNode : getImportNodes()) {
            if (otherNode != node && otherNode.getStaticImportTarget().equals(node.getStaticImportTarget())) {
                return true;
            }
        }
        return false;
    }

    private boolean isImplicitlyImported(ImportDeclaration node, String importedClassName) {
        return isClassInJavaLang(node.getStaticImportTarget()) || isClassInCurrentPackage(node.getStaticImportTarget());
    }

    private boolean isClassInJavaLang(String className) {
        return className.startsWith("java.lang.");
    }

    private boolean isClassInCurrentPackage(String className) {
        return className.startsWith(getCurrentPackageName());
    }

    private String getCurrentPackageName() {
        ImportDeclaration node = getAST().createNodeStream().findFirst(ImportDeclaration.class).orElse(null);
        if (node != null) {
            return node.getStaticImportTarget().substring(0, node.getStaticImportTarget().indexOf("."));
        }
        return "";
    }

    private List<ImportDeclaration> getImportNodes() {
        NodeStream stream = getAST().createNodeStream();
        List<ImportDeclaration> importNodes = new ArrayList<>();
        for (JavaNode node : stream) {
            if (node instanceof ImportDeclaration) {
                importNodes.add((ImportDeclaration) node);
            }
        }
        return importNodes;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        Set<JavaNode> visitedNodes = (Set<JavaNode>) data;
        visitedNodes.add(node);

        String importedClassName = node.getName().toString();

        // Check if the imported class is in java.lang or the current package
        if (importedClassName.startsWith("java.") || importedClassName.startsWith(node.getPackageName())) {
            addViolation(this, node);
            return null;
        }

        // Get all nodes with access to the imported class
        NodeStream<JavaNode> nodesWithAccess = NodeStream.of(
                node.getAST().getAST().getCompilationUnit().getAllDescendants())
                .filter(n -> n instanceof TypeDeclaration || n instanceof VariableDeclarator || n instanceof MethodDeclaration)
                .filter(n -> {
                    if (n instanceof TypeDeclaration) {
                        return ((TypeDeclaration) n).getIdentifier().equals(importedClassName);
                    } else if (n instanceof VariableDeclarator) {
                        return ((VariableDeclarator) n).getIdentifier().equals(importedClassName);
                    } else if (n instanceof MethodDeclaration) {
                        return ((MethodDeclaration) n).getIdentifier().equals(importedClassName);
                    }
                    return false;
                });

        // Check if the imported class is used in the code
        if (nodesWithAccess.isEmpty()) {
            addViolation(this, node);
        }

        // Check for duplicated import statements
        for (ImportDeclaration duplicatedNode : node.getAST().getAST().getCompilationUnit().getAllDescendants(ImportDeclaration.class)) {
            if (duplicatedNode.getName().equals(node.getName())) {
                addViolation(this, node);
                return null;
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleMessage("Import statement is unnecessary.");
        addRuleMessage("Import statement is duplicated.");
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        // Get the imported symbol
        String importedSymbol = node.getImportedName();

        // Check if the imported symbol is used in the current scope
        if (!isSymbolUsed(importedSymbol)) {
            report(node);
            return data;
        }

        // Check if the same imported symbol is already imported from another source
        if (isImportedSymbolDuplicated(importedSymbol)) {
            report(node);
            return data;
        }

        // Check if the imported symbol is already implicitly in scope
        if (isImplicitlyImported(importedSymbol)) {
            report(node);
            return data;
        }

        return super.visit(node, data);
    }

    private boolean isSymbolUsed(String symbol) {
        // Get all defined symbols
        Set<String> definedSymbols = getDefinedSymbols();

        // Check if the symbol is used in the current scope
        return definedSymbols.contains(symbol);
    }

    private boolean isImportedSymbolDuplicated(String symbol) {
        // Get all import statements
        List<ImportDeclaration> importStatements = getImportStatements();

        // Check if the same symbol is already imported from another source
        for (ImportDeclaration importStatement : importStatements) {
            if (importStatement.getImportedName().equals(symbol) && !importStatement.getStaticImport()) {
                return true;
            }
        }

        return false;
    }

    private boolean isImplicitlyImported(String symbol) {
        // Check if the symbol is in java.lang or the current package
        return symbol.startsWith("java.lang.") || symbol.startsWith(getCurrentPackageName());
    }

    private Set<String> getDefinedSymbols() {
        // Get all defined symbols
        Set<String> definedSymbols = new HashSet<>();

        // Visit the MethodDeclaration and FieldDeclaration nodes
        NodeStream nodeStream = new NodeStream();
        for (MethodDeclaration method : nodeStream.findChildren(MethodDeclaration.class)) {
            definedSymbols.addAll(getMethodVariables(method));
        }
        for (FieldDeclaration field : nodeStream.findChildren(FieldDeclaration.class)) {
            definedSymbols.add(field.getVariable().getName());
        }

        return definedSymbols;
    }

    private List<ImportDeclaration> getImportStatements() {
        // Get all import statements
        List<ImportDeclaration> importStatements = new ArrayList<>();

        // Visit the ImportDeclaration nodes
        NodeStream nodeStream = new NodeStream();
        for (ImportDeclaration importStatement : nodeStream.findChildren(ImportDeclaration.class)) {
            importStatements.add(importStatement);
        }

        return importStatements;
    }

    private Set<String> getMethodVariables(MethodDeclaration method) {
        // Get the method variables
        Set<String> variables = new HashSet<>();

        // Visit the MethodDeclarator nodes
        NodeStream nodeStream = new NodeStream();
        for (VariableDeclarator variable : nodeStream.findChildren(VariableDeclarator.class)) {
            variables.add(variable.getName());
        }

        return variables;
    }

    private String getCurrentPackageName() {
        // Get the current package name
        return "net.sourceforge.pmd.lang.java.rule.codestyle";
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 158.89076137542725 秒
