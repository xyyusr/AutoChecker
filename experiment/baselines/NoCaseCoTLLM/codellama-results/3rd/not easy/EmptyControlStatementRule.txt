开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTFinallyStatement.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getBody() == null) {
            report(node, "The body of try statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFinallyStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getBody() == null) {
            report(node, "The finally clause is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getBody() == null) {
            report(node, "The block of switch statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getBlock() != null && node.getBlock().getBody() == null) {
            report(node, "The block of synchronized statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getThenStatement() != null && node.getThenStatement().getBody() == null) {
            report(node, "The then part of if statement is empty");
        }
        if (node.getElseStatement() != null && node.getElseStatement().getBody() == null) {
            report(node, "The else part of if statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getBody() == null) {
            report(node, "The body of while statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getInitializer() != null && node.getInitializer().getBody() == null) {
            report(node, "The initializer of for statement is empty");
        }
        if (node.getStatement() != null && node.getStatement().getBody() == null) {
            report(node, "The body of for statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getBody() == null) {
            report(node, "The body of do .. while statement is empty");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.getBody() == null) {
            report(node, "The block is empty");
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(tryStatement(), finallyClause(), switchStatement(), synchronizedStatement(), 
              ifStatement(), whileStatement(), forStatement(), doStatement(), initializerUsedAsStatement());
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildNodes().isEmpty()) {
            reportIssue(node, "Try statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FinallyClause node, Object data) {
        if (node.getBody() == null || node.getBody().getChildNodes().isEmpty()) {
            reportIssue(node, "Finally clause has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (node.getStatements() == null || node.getStatements().getChildNodes().isEmpty()) {
            reportIssue(node, "Switch statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildNodes().isEmpty()) {
            reportIssue(node, "Synchronized statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getThenStatement() == null || node.getThenStatement().getChildNodes().isEmpty()) {
            reportIssue(node, "If statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildNodes().isEmpty()) {
            reportIssue(node, "While statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildNodes().isEmpty()) {
            reportIssue(node, "For statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildNodes().isEmpty()) {
            reportIssue(node, "Do statement has an empty body");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Initializer node, Object data) {
        if (node.getParent() instanceof Statement) {
            reportIssue(node, "Initializer is used as a statement");
        }
        return super.visit(node, data);
    }

    private Node[] tryStatement() {
        return new Node[]{ASTTryStatement.class};
    }

    private Node[] finallyClause() {
        return new Node[]{ASTFinallyClause.class};
    }

    private Node[] switchStatement() {
        return new Node[]{ASTSwitchStatement.class};
    }

    private Node[] synchronizedStatement() {
        return new Node[]{ASTSynchronizedStatement.class};
    }

    private Node[] ifStatement() {
        return new Node[]{ASTIfStatement.class};
    }

    private Node[] whileStatement() {
        return new Node[]{ASTWhileStatement.class};
    }

    private Node[] forStatement() {
        return new Node[]{ASTForStatement.class};
    }

    private Node[] doStatement() {
        return new Node[]{ASTDoStatement.class};
    }

    private Node[] initializerUsedAsStatement() {
        return new Node[]{ASTInitializer.class};
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMessage("Empty control statement");
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        if (node.getTryBlock() instanceof Block && ((Block) node.getTryBlock()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        if (node.getFinallyBlock() instanceof Block && ((Block) node.getFinallyBlock()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (node.getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (node.getBlock() instanceof Block && ((Block) node.getBlock()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getThenStatement() instanceof Block && ((Block) node.getThenStatement()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        if (node.getElseStatement() instanceof Block && ((Block) node.getElseStatement()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getBody() instanceof Block && ((Block) node.getBody()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getBody() instanceof Block && ((Block) node.getBody()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoStatement node, Object data) {
        if (node.getBody() instanceof Block && ((Block) node.getBody()).getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getStatementList().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMessage( "EmptyControlStatementRule", "control statement body is empty" );
    }

    @Override
    public Object visit( TryStatement node, Object data ) {
        if ( node.getTryBlock().isEmpty() && node.catchClauses().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( FinallyBlockStatement node, Object data ) {
        if ( node.getBlock().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( SwitchStatement node, Object data ) {
        if ( node.getSwitchBlock().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( SynchronizedStatement node, Object data ) {
        if ( node.getBlock().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( IfStatement node, Object data ) {
        if ( node.getThenStatement().isEmpty() && node.getElseStatement().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( WhileStatement node, Object data ) {
        if ( node.getBody().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( ForStatement node, Object data ) {
        if ( node.getInitializer().isEmpty() && node.getForControl().isEmpty() && node.getBody().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( DoStatement node, Object data ) {
        if ( node.getBody().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( Block node, Object data ) {
        if ( node.getBody().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }

    @Override
    public Object visit( Initializer node, Object data ) {
        if ( node.getExpression().isEmpty() ) {
            addRuleViolation( node, "control statement body is empty" );
        }
        return super.visit( node, data );
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleChainVisitor(this);
    }

    @Override
    public Object visit(TryStatement n, Object data) {
        if (n.getBody() != null && n.getBody().isEmpty()) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(FinallyClause n, Object data) {
        if (n.getStatements() != null && n.getStatements().isEmpty()) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(SwitchStatement n, Object data) {
        if (n.getExpression() != null) {
            for (SwitchEntry entry : n.getSwitchEntries()) {
                if (!entry.getStatements().isEmpty()) {
                    return super.visit(n, data);
                }
            }
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(SynchronizedStatement n, Object data) {
        if (n.getBlock() != null && n.getBlock().isEmpty()) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(IfStatement n, Object data) {
        if (n.getElseStatement() == null && n.getThenStatement() == null) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(WhileStatement n, Object data) {
        if (n.getBody() != null && n.getBody().isEmpty()) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(ForStatement n, Object data) {
        if (n.getBody() != null && n.getBody().isEmpty()) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(DoStatement n, Object data) {
        if (n.getBody() != null && n.getBody().isEmpty()) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(Block n, Object data) {
        if (n.getStatements() != null && n.getStatements().stream().allMatch(Statement::isEmpty)) {
            addViolation(data, n);
        }
        return super.visit(n, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 199.0550651550293 秒
