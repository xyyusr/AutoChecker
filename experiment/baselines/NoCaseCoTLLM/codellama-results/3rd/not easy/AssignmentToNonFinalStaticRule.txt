开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleChainElement(new MethodCallExpression(node_MethodCallExpression.class, node_AssignmentExpression.class));
        addRuleChainElement(new ASTMethodCallExpression(node_MethodCallExpression.class));
        addRuleChainElement(new ASTAssignmentExpression(node_AssignmentExpression.class));
    }

    @Override
    public Object visit(MethodCallExpression node, Object data) {
        if (node.getImage().equals("this") && node.getParent() instanceof ConstructorDeclaration) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCallExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignmentExpression node, Object data) {
        if (node.getLeftHandSide() instanceof FieldAccess) {
            FieldAccess fieldAccess = (FieldAccess) node.getLeftHandSide();
            if (fieldAccess.getImage().contains(".staticField")) {
                if (isStaticFinal(node.getLeftHandSide())) {
                    return super.visit(node, data);
                }
                if (isConstantExpression(node.getRightHandSide())) {
                    return super.visit(node, data);
                }
                if (!isRightSideChangedInConstructor(node, data)) {
                    addViolation(this, data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isStaticFinal(Node leftSide) {
        FieldAccess fieldAccess = (FieldAccess) leftSide;
        MethodDeclaration method = (MethodDeclaration) fieldAccess.getParent();
        if (method.getImage().contains("=")) {
            FieldDeclaration fieldDeclaration = (FieldDeclaration) method.getParent();
            if (fieldDeclaration.getModifiers().contains(Modifier.STATIC) && fieldDeclaration.getModifiers().contains(Modifier.FINAL)) {
                return true;
            }
        }
        return false;
    }

    private boolean isConstantExpression(Node rightSide) {
        if (rightSide instanceof IntegerLiteral) {
            return true;
        }
        if (rightSide instanceof StringLiteral) {
            return true;
        }
        return false;
    }

    private boolean isRightSideChangedInConstructor(AssignmentExpression node, Object data) {
        MethodDeclaration method = (MethodDeclaration) node.getParent();
        for (Node child : method.getChildren()) {
            if (child instanceof AssignmentExpression && child != node) {
                if (child.getLeftHandSide() instanceof FieldAccess && child.getLeftHandSide().getImage().equals(node.getLeftHandSide().getImage())) {
                    return false;
                }
            }
        }
        return true;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        addRuleMessage( "Assignment to non-final static field in constructor is unsafe." );
    }

    @Override
    public Object visit(JavaClassOrInterfaceDeclaration node, Object data) {
        Set<JavaFieldDeclaration> staticFields = new HashSet<>();
        for (JavaFieldDeclaration field : node.getFields()) {
            if (field.isStatic()) {
                staticFields.add(field);
            }
        }
        for (JavaFieldAccessExpr expr : node.getBody().getStatements()) {
            if (expr instanceof JavaFieldAccessExpr && ((JavaFieldAccessExpr) expr).getField() != null) {
                JavaFieldDeclaration field = ((JavaFieldAccessExpr) expr).getField();
                if (staticFields.contains(field)) {
                    for (JavaAssignmentStmt stmt : node.getBody().getStatements()) {
                        if (stmt instanceof JavaAssignmentStmt) {
                            JavaFieldAccessExpr target = ((JavaAssignmentStmt) stmt).getTarget();
                            if (target instanceof JavaFieldAccessExpr && ((JavaFieldAccessExpr) target).getField() != null) {
                                JavaFieldDeclaration targetField = ((JavaFieldAccessExpr) target).getField();
                                if (targetField == field && node.getBody().getMethod() != null && node.getBody().getMethod().isConstructor()) {
                                    if (!field.isFinal()) {
                                        addViolation(this, data, expr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        addRuleChainElement(new ASTJavaClassDeclaration(this));
    }

    @Override
    public Object visit(ASTJavaClassDeclaration node, Object data) {
        if (node.hasConcreteMethod()) {
            ASTJavaConstructorDeclaration constructor = node.getConstructorDeclaration();
            if (constructor != null) {
                ASTJavaMethodDeclaration method = constructor.getMethodDeclaration();
                if (method != null) {
                    MethodDeclaration methodDeclaration = method.getMethodDeclaration();
                    for (AssignmentStatement assignment : method.getAssignments()) {
                        if (assignment.hasTarget()) {
                            ASTJavaFieldAccess target = assignment.getTarget();
                            if (target instanceof ASTJavaFieldAccess) {
                                ASTJavaFieldAccess fieldAccess = (ASTJavaFieldAccess) target;
                                if (fieldAccess.hasName()) {
                                    String fieldName = fieldAccess.getName();
                                    ASTJavaFieldDeclaration fieldDeclaration = node.getFieldDeclaration(fieldName);
                                    if (fieldDeclaration != null) {
                                        if (!isFinal(fieldDeclaration)) {
                                            addViolation(data, new RuleViolation(this, methodDeclaration, fieldName));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return data;
    }

    private boolean isFinal(ASTJavaFieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.hasModifiers()) {
            int modifiers = fieldDeclaration.getModifiers();
            return (modifiers & 0x10) != 0; // final modifier is 0x10
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isConstructor()) {
            visitConstructor(node, data);
        }
        return super.visit(node, data);
    }

    private void visitConstructor(MethodDeclaration node, Object data) {
        for (Statement statement : node.getBody().getStatements()) {
            visitStatement(statement, data);
        }
    }

    private void visitStatement(Statement statement, Object data) {
        if (statement instanceof AssignmentExpression) {
            AssignmentExpression assignment = (AssignmentExpression) statement;
            if (assignment.getOperation().isAssignment()) {
                Expression target = assignment.getTarget();
                if (target instanceof FieldAccess) {
                    FieldAccess fieldAccess = (FieldAccess) target;
                    if (fieldAccess.getField().isStatic()) {
                        if (!fieldAccess.getField().isFinal()) {
                            addViolation(data, statement);
                        }
                    }
                }
            }
        }
    }

    private void addViolation(Object data, Statement statement) {
        RuleViolation violation = new RuleViolation(
                this,
                "Assignment to non-final static field in constructor",
                statement.getBeginLine(),
                statement.getBeginColumn(),
                statement.getEndLine(),
                statement.getEndColumn()
        );
        data.addViolation(violation);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        // Get all the statements in the constructor
        List<ASTStatement> statements = node.getBody().getStatements();
        for (ASTStatement statement : statements) {
            if (statement instanceof ASTAssignment) {
                ASTAssignment assignment = (ASTAssignment) statement;
                ASTFieldAccess fa = assignment.getLeftHandSide();
                if (fa instanceof ASTFieldAccess && fa.getOperation().getImage().equals("this")) {
                    ASTFieldAccess fieldAccess = (ASTFieldAccess) fa;
                    ASTFieldAccess field = fieldAccess.getLeftHandSide();
                    if (field instanceof ASTFieldAccess) {
                        ASTIdentifier fieldId = field.getLeftHandSide();
                        if (fieldId.getImage().contains(".")) {
                            ASTFieldAccess staticFieldAccess = (ASTFieldAccess) field;
                            ASTIdentifier staticFieldId = staticFieldAccess.getLeftHandSide();
                            if (staticFieldId instanceof ASTStaticFieldAccess) {
                                if (!isFinal(staticFieldId)) {
                                    addViolation(data, statement, "Assignment to non-final static field '" + staticFieldId.getName() + "' in constructor is unsafe.");
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isFinal(ASTIdentifier identifier) {
        // Check if the field is final
        // This is a very simplified version, you may need to handle more cases
        ASTFieldDeclaration fd = identifier.resolve();
        if (fd != null) {
            for (ASTModifier modifier : fd.getModifiers()) {
                if (modifier.getImage().equals("final")) {
                    return true;
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 191.80029463768005 秒
