开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public PositionLiteralsFirstInComparisonsRule() {
        super(MethodDeclaration.class, ClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getImage().equals("equals") || node.getImage().equals("equalsIgnoreCase") ||
                node.getImage().equals("compareTo") || node.getImage().equals("compareToIgnoreCase") ||
                node.getImage().equals("contentEquals")) {
            if (node.getBody() != null && node.getBody().getParameters().size() == 1 && node.getType().getImage().equals("java.lang.Object")) {
                Object bodyData = visitBody(node.getBody(), data);
                if (node.getBody() != null && bodyData instanceof Violation[]) {
                    Violation[] violations = (Violation[]) bodyData;
                    for (Violation violation : violations) {
                        addViolation(data, node, violation.getMessage());
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visitBody(ASTNode node, Object data) {
        Violation[] violations = new Violation[0];
        if (node instanceof Block) {
            for (ASTNode child : node.getChildren()) {
                if (child instanceof MethodInvocation) {
                    MethodInvocation methodInvocation = (MethodInvocation) child;
                    if (methodInvocation.getTarget() instanceof MethodCallExpression) {
                        MethodCallExpression methodCall = (MethodCallExpression) methodInvocation.getTarget();
                        if (methodCall.getImage().startsWith("String.") && methodCall.getParameters().size() == 2) {
                            Expression arg1 = methodCall.getParameters().get(0);
                            Expression arg2 = methodCall.getParameters().get(1);
                            if (arg1 instanceof CharLiteral || arg1 instanceof StringLiteral) {
                                if (arg2 instanceof NullLiteral) {
                                    Violation violation = new Violation(getName(), node, node.getImage() + " argument should be a literal first.");
                                    violations = addViolation(violations, violation);
                                }
                            }
                        }
                    }
                }
                Object childData = visit(child, data);
                if (childData instanceof Violation[]) {
                    Violation[] childViolations = (Violation[]) childData;
                    Violation[] newViolations = new Violation[violation.length + childViolations.length];
                    System.arraycopy(violations, 0, newViolations, 0, violations.length);
                    System.arraycopy(childViolations, 0, newViolations, violations.length, childViolations.length);
                    violations = newViolations;
                }
            }
        }
        return violations;
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        List<MethodDeclaration> methodDeclarations = new ArrayList<>();
        for (MethodDeclaration method : node.getMethods()) {
            if (method.getImage().equals("equals") || method.getImage().equals("equalsIgnoreCase") ||
                    method.getImage().equals("compareTo") || method.getImage().equals("compareToIgnoreCase") ||
                    method.getImage().equals("contentEquals")) {
                methodDeclarations.add(method);
            }
        }
        List<MethodDeclaration> unvisitedMethods = new ArrayList<>();
        for (MethodDeclaration method : methodDeclarations) {
            if (method.getBody() != null && method.getBody().getParameters().size() == 1 && method.getType().getImage().equals("java.lang.Object")) {
                unvisitedMethods.add(method);
            }
        }
        for (MethodDeclaration method : unvisitedMethods) {
            Object bodyData = visitBody(method.getBody(), data);
            if (bodyData instanceof Violation[]) {
                Violation[] violations = (Violation[]) bodyData;
                addViolations(data, method, violations);
            }
        }
        return super.visit(node, data);
    }

    private Violation[] addViolation(Violation[] violations, Violation violation) {
        Violation[] newViolations = new Violation[violation.length + 1];
        System.arraycopy(violations, 0, newViolations, 0, violation.length);
        newViolations[violation.length] = violation;
        return newViolations;
    }
}

class Violation {
    private String message;
    private ASTNode node;

    public Violation(String message, ASTNode node) {
        this.message = message;
        this.node = node;
    }

    public String getMessage() {
        return message;
    }

    public ASTNode getNode() {
        return node;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        addRuleMessage("Position literals first in all String comparison methods.");
        addRulePriority(RulePriority.NORMAL);
        addRuleCategory(RuleCategory.BESTPRACTICES);
        addRuleSequence63870(new RuleChainBuilder(this).addRule(new MethodCallRule()));
    }

    @Override
    public Object visit(AstMethodDecl node, Object data) {
        if (node.getName().toString().matches("equals.*|equalsIgnoreCase|compareTo|compareToIgnoreCase|contentEquals")) {
            return super.visit(node, data);
        }
        return null;
    }

    @Override
    public Object visit(AstMethodCall node, Object data) {
        if (node.getMethod().getType().equals(ASTTypeReference.STRING)) {
            List<AstNode> params = node.getArguments();
            if (params.size() > 0) {
                AstNode param = params.get(0);
                if (param.getType().equals(ASTTypeReference.NULL)) {
                    addIssue(node, "Position literals first in all String comparison methods.");
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super();
        addRuleChainVisitorClass(LiteralsFirstInComparisonsRule_LiteralChecker.class);
    }

    public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
        @Override
        public Object visit(ASTMethodDeclaration node, Object data) {
            if (node.getImage().equals("equals") || node.getImage().equals("equalsIgnoreCase") || node.getImage().equals("compareTo") || node.getImage().equals("compareToIgnoreCase") || node.getImage().equals("contentEquals")) {
                ASTNode arg = node.getFirstChild();
                while (arg != null && !(arg instanceof ASTArgumentList)) {
                    arg = arg.getNext();
                }
                if (arg != null) {
                    ASTNode argValue = arg.getFirstChild();
                    while (argValue != null && !(argValue instanceof ASTVariableDeclaratorId)) {
                        argValue = argValue.getNext();
                    }
                    if (argValue != null) {
                        ASTNode initializer = argValue.getFirstChild();
                        while (initializer != null && !(initializer instanceof ASTLiteral)) {
                            initializer = initializer.getNext();
                        }
                        if (initializer != null && initializer.getImage().equals("null")) {
                            ASTMethodDeclaration method = (ASTMethodDeclaration) node;
                            return new Violation(this, method.getBeginLine(), method.getBeginColumn(), "Method " + method.getImage() + " has position literals first in all String comparison methods");
                        }
                    }
                }
            }
            return super.visit(node, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        addRuleMessage("Position literals first in all String comparison methods");
        addRulePattern(
                new RulePattern()
                        .setName("non-overloaded 'boolean equals(Object o)'")
                        .addMethodCall("public boolean equals(Object o)", "nonOverloadedEquals")
                        .addMethodCall("public boolean equalsIgnoreCase(Object o)", "nonOverloadedEqualsIgnoreCase")
                        .addMethodCall("public int compareTo(Object o)", "nonOverloadedCompareTo")
                        .addMethodCall("public int compareToIgnoreCase(Object o)", "nonOverloadedCompareToIgnoreCase")
                        .addMethodCall("public boolean contentEquals(CharSequence cs)", "nonOverloadedContentEquals")
        );
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getName().equals("equals") || node.getName().equals("equalsIgnoreCase") || node.getName().equals("compareTo") || node.getName().equals("compareToIgnoreCase") || node.getName().equals("contentEquals")) {
            if (node.getNumberOfParameters() == 1 && node.getParameter(0).getType().getName().equals("Object")) {
                if (!getMethodName(node)) {
                    return data;
                }
                if (node.getNumberOfBodyStatements() == 1 && node.getBodyStatement(0) instanceof ASTMethodInvocation) {
                    ASTMethodInvocation invocation = (ASTMethodInvocation) node.getBodyStatement(0);
                    if (invocation.getMethodName().contains("(")) {
                        String params = invocation.getMethodName().substring(invocation.getMethodName().indexOf("(") + 1, invocation.getMethodName().indexOf(")"));
                        if (!params.equals("null")) {
                            return data;
                        }
                    }
                }
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    private String getMethodName(ASTMethodDeclaration node) {
        if (node.getName().equals("equals")) {
            return "nonOverloadedEquals";
        } else if (node.getName().equals("equalsIgnoreCase")) {
            return "nonOverloadedEqualsIgnoreCase";
        } else if (node.getName().equals("compareTo")) {
            return "nonOverloadedCompareTo";
        } else if (node.getName().equals("compareToIgnoreCase")) {
            return "nonOverloadedCompareToIgnoreCase";
        } else if (node.getName().equals("contentEquals")) {
            return "nonOverloadedContentEquals";
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (isComparisonMethod(node)) {
            visitComparisonMethod(node, data);
        }
        return super.visit(node, data);
    }

    private boolean isComparisonMethod(MethodDeclaration node) {
        String name = node.getImage();
        return name.equals("equals") || name.equals("equalsIgnoreCase") || name.equals("compareTo") ||
                name.equals("compareToIgnoreCase") || name.equals("contentEquals");
    }

    private void visitComparisonMethod(MethodDeclaration node, Object data) {
        List<VariableDeclarator> parameters = node.getParameters();
        if (!parameters.isEmpty()) {
            VariableDeclarator firstParameter = parameters.get(0);
            if (!isLiteral(firstParameter)) {
                addViolation(data, node);
            }
        }
    }

    private boolean isLiteral(VariableDeclarator node) {
        Expression initializer = node.getInitializer();
        if (initializer != null) {
            return initializer.isLiteral();
        }
        return false;
    }

    private void addViolation(Object data, MethodDeclaration node) {
        // Report a violation
        // This can be done by calling methods from the PMD API
        // For example:
        // ViolationBuilder vb = new ViolationBuilder();
        // vb.addMessage("Position literals first in " + node.getImage());
        // vb.setLocation(node);
        // reportViolations(vb);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 156.02095556259155 秒
