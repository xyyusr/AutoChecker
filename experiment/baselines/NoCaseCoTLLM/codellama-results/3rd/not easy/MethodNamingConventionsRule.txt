开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final String JUNIT_3_TEST_METHOD_PATTERN = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT_4_TEST_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT_5_TEST_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String INSTANCE_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";

    public MethodNamingConventionsRule() {
        addRuleChainVisitorClass(this.getClass());
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getNameImage();

        // Check for JUnit test methods
        if (isJUnit3Test(node)) {
            if (!Pattern.matches(JUNIT_3_TEST_METHOD_PATTERN, methodName)) {
                addViolation(data, node);
            }
        } else if (isJUnit4Test(node)) {
            if (!Pattern.matches(JUNIT_4_TEST_METHOD_PATTERN, methodName)) {
                addViolation(data, node);
            }
        } else if (isJUnit5Test(node)) {
            if (!Pattern.matches(JUNIT_5_TEST_METHOD_PATTERN, methodName)) {
                addViolation(data, node);
            }
        } else {
            // Check for instance methods
            if (node.isInstanceMethod()) {
                if (!Pattern.matches(INSTANCE_METHOD_PATTERN, methodName)) {
                    addViolation(data, node);
                }
            } else if (node.isStaticMethod()) {
                if (!Pattern.matches(STATIC_METHOD_PATTERN, methodName)) {
                    addViolation(data, node);
                }
            } else if (node.isNativeMethod()) {
                if (!Pattern.matches(NATIVE_METHOD_PATTERN, methodName)) {
                    addViolation(data, node);
                }
            }
        }

        return super.visit(node, data);
    }

    private boolean isJUnit3Test(MethodDeclaration node) {
        AssertExpression assertExpr = node.getAnnotationOfType(AssertExpression.class);
        return assertExpr != null && assertExpr.getImage().equals("org.junit.Test");
    }

    private boolean isJUnit4Test(MethodDeclaration node) {
        AnnotationMirror annotation = node.getAnnotationOfType(AnnotationMirror.class);
        return annotation != null && annotation.getName().equals("org.junit.Test");
    }

    private boolean isJUnit5Test(MethodDeclaration node) {
        AnnotationMirror annotation = node.getAnnotationOfType(AnnotationMirror.class);
        return annotation != null && annotation.getName().equals("org.junit.jupiter.api.Test");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final Pattern INSTANCE_METHOD_REGEX = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern STATIC_METHOD_REGEX = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern NATIVE_METHOD_REGEX = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern JUNIT_3_TEST_METHOD_REGEX = Pattern.compile("^test[A-Z0-9][a-zA-Z0-9]*$");
    private static final Pattern JUNIT_4_TEST_METHOD_REGEX = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern JUNIT_5_TEST_METHOD_REGEX = Pattern.compile("^[a-z][a-zA-Z0-9]*$");

    public MethodNamingConventionsRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getImage();
        String modifiers = node.getModifiers().getImage();

        if (modifiers.contains("static")) {
            if (!STATIC_METHOD_REGEX.matcher(methodName).matches()) {
                reportViolation(node, "Static method name should match the regex: " + STATIC_METHOD_REGEX);
            }
        } else if (modifiers.contains("native")) {
            if (!NATIVE_METHOD_REGEX.matcher(methodName).matches()) {
                reportViolation(node, "Native method name should match the regex: " + NATIVE_METHOD_REGEX);
            }
        } else if (modifiers.contains("abstract") && node.getParameters().size() > 0) {
            // JUnit test methods have the same name as the method they're testing, so they don't need a regex
        } else if (node.getSuperClass() != null && node.getSuperClass().getImage().equals("junit.framework.TestCase")) {
            if (!JUNIT_3_TEST_METHOD_REGEX.matcher(methodName).matches()) {
                reportViolation(node, "JUnit 3 test method name should match the regex: " + JUNIT_3_TEST_METHOD_REGEX);
            }
        } else if (node.getSuperClass() != null && node.getSuperClass().getImage().equals("org.junit.Test")) {
            if (!JUNIT_4_TEST_METHOD_REGEX.matcher(methodName).matches()) {
                reportViolation(node, "JUnit 4 test method name should match the regex: " + JUNIT_4_TEST_METHOD_REGEX);
            }
        } else if (node.getSuperClass() != null && node.getSuperClass().getImage().equals("org.junit.jupiter.api.Test")) {
            if (!JUNIT_5_TEST_METHOD_REGEX.matcher(methodName).matches()) {
                reportViolation(node, "JUnit 5 test method name should match the regex: " + JUNIT_5_TEST_METHOD_REGEX);
            }
        } else {
            if (!INSTANCE_METHOD_REGEX.matcher(methodName).matches()) {
                reportViolation(node, "Instance method name should match the regex: " + INSTANCE_METHOD_REGEX);
            }
        }

        return super.visit(node, data);
    }

    @Override
    public void reportViolation(MethodDeclaration node, String message) {
        reportViolation(node, message, "method-naming-conventions");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (!node.isStatic() && !node.isConstructor()) {
            return super.visit(node, data);
        }

        String methodName = node.getName().getImage();

        if (node.isStatic() && !node.isConstructor()) {
            if (!Pattern.matches("^[a-z][a-zA-Z0-9]*$", methodName)) {
                addViolation(data, new MethodNamingConventionsRuleViolation(node, methodName));
            }
        } else if (node.isSynthetic() && node.getName().getImage().startsWith("test")) {
            if (!Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*$", methodName)) {
                addViolation(data, new MethodNamingConventionsRuleViolation(node, methodName));
            }
        } else if (node.getName().getImage().startsWith("test")) {
            if (!Pattern.matches("^[a-z][a-zA-Z0-9]*$", methodName)) {
                addViolation(data, new MethodNamingConventionsRuleViolation(node, methodName));
            }
        } else {
            if (!Pattern.matches("^[a-z][a-zA-Z0-9]*$", methodName)) {
                addViolation(data, new MethodNamingConventionsRuleViolation(node, methodName));
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.util.regex.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        super(MethodDecl.class);
    }

    @Override
    public Object visit(MethodDecl node, Object data) {
        String methodName = node.getImage();
        String methodDesc = node.getDesc();
        if (methodDesc == null) {
            methodDesc = "";
        }

        Pattern instancePattern = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
        Pattern staticPattern = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
        Pattern nativePattern = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
        Pattern junit3Pattern = Pattern.compile("^test[A-Z0-9][a-zA-Z0-9]*$");
        Pattern junit4Pattern = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
        Pattern junit5Pattern = Pattern.compile("^[a-z][a-zA-Z0-9]*$");

        if (node.getParent() instanceof ClassOrInterfaceDecl) {
            if (!(node.getModifiers().contains(Modifier.STATIC))) {
                if (!instancePattern.matcher(methodName).matches()) {
                    addRuleBreakingLocation(node);
                }
            } else {
                if (!staticPattern.matcher(methodName).matches()) {
                    addRuleBreakingLocation(node);
                }
            }
        } else if (node.getParent() instanceof MethodDecl) {
            if (methodName.equals(node.getImage())) {
                if (!nativePattern.matcher(methodName).matches()) {
                    addRuleBreakingLocation(node);
                }
            }
        } else if (node.getParent() instanceof ClassOrInterfaceDecl && methodDesc.equals("()V")) {
            if (methodName.equals(node.getImage())) {
                if (!junit3Pattern.matcher(methodName).matches()) {
                    addRuleBreakingLocation(node);
                }
            }
        } else if (node.getParent() instanceof ClassOrInterfaceDecl && methodDesc.equals("(Ljava/lang/Object;)V")) {
            if (methodName.equals(node.getImage())) {
                if (!junit4Pattern.matcher(methodName).matches()) {
                    addRuleBreakingLocation(node);
                }
            }
        } else if (node.getParent() instanceof ClassOrInterfaceDecl && methodDesc.equals("(Ljava/lang/Object;)V")) {
            if (methodName.equals(node.getImage())) {
                if (!junit5Pattern.matcher(methodName).matches()) {
                    addRuleBreakingLocation(node);
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        addRuleMessage("Method name should match the corresponding regex.");
        addRulePriority(RulePriority.SUPPORT);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getName().getImage();
        if (node.isStatic()) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                addRuleViolation(this, node, "Static method name should match the regex [a-z][a-zA-Z0-9]*.");
            }
        } else {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
                addRuleViolation(this, node, "Instance method name should match the regex [a-z][a-zA-Z0-9]*.");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JUnit3Test node, Object data) {
        String methodName = node.getName().getImage();
        if (!Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*", methodName)) {
            addRuleViolation(this, node, "JUnit 3 test method name should match the regex test[A-Z0-9][a-zA-Z0-9]*.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JUnit4Test node, Object data) {
        String methodName = node.getName().getImage();
        if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
            addRuleViolation(this, node, "JUnit 4 test method name should match the regex [a-z][a-zA-Z0-9]*.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JUnit5Test node, Object data) {
        String methodName = node.getName().getImage();
        if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
            addRuleViolation(this, node, "JUnit 5 test method name should match the regex [a-z][a-zA-Z0-9]*.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NativeMethodDeclaration node, Object data) {
        String methodName = node.getName().getImage();
        if (!Pattern.matches("[a-z][a-zA-Z0-9]*", methodName)) {
            addRuleViolation(this, node, "Native method name should match the regex [a-z][a-zA-Z0-9]*.");
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 173.09832763671875 秒
