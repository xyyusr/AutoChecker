开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        addVisitor(new MethodCallVisitor());
    }

    private class MethodCallVisitor extends AbstractJavaRuleChain.VisitorAdapter {

        @Override
        public Object visit(ASTMethodCall node, Object data) {
            ASTIdentifier methodName = (ASTIdentifier) node.getArgumentList().getChildren().get(0);

            if (methodName.getImage().equals("length") && node.getChildren().size() > 0) {
                ASTMethodCall trimMethodCall = (ASTMethodCall) node.getChildren().get(0);
                if (trimMethodCall.getImage().equals("trim")) {
                    ASTExpression expression = (ASTExpression) trimMethodCall.getParent();
                    if (expression.getImage().equals("isEmpty") || expression.getImage().equals("length") && ((ASTMethodCall) expression.getChildren().get(0)).getImage().equals("trim")) {
                        addViolation(node, data);
                    }
                }
            }

            if (methodName.getImage().equals("isEmpty") && node.getChildren().size() > 0) {
                ASTMethodCall trimMethodCall = (ASTMethodCall) node.getChildren().get(0);
                if (trimMethodCall.getImage().equals("trim")) {
                    ASTExpression expression = (ASTExpression) trimMethodCall.getParent();
                    if (expression.getImage().equals("length")) {
                        addViolation(node, data);
                    }
                }
            }

            return super.visit(node, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        addRuleMessage( "String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Please use String.trim().equals(\"\") instead.", RulePriority.MAJOR );
        addRuleChainVisitorFactory( new InefficientEmptyStringCheckRuleVisitorFactory() );
    }

    private class InefficientEmptyStringCheckRuleVisitorFactory implements RuleChainVisitorFactory {
        @Override
        public RuleChainVisitor createRuleChainVisitor( RuleContext ruleContext ) {
            return new InefficientEmptyStringCheckRuleVisitor( ruleContext );
        }
    }

    private class InefficientEmptyStringCheckRuleVisitor extends AbstractRuleChainVisitor {
        public InefficientEmptyStringCheckRuleVisitor( RuleContext ruleContext ) {
            super( ruleContext );
        }

        @Override
        public Object visit( MethodCallExpr node, Object data ) {
            if ( node.getTarget() instanceof VarAccessExpr ) {
                VarAccessExpr varAccessExpr = ( VarAccessExpr ) node.getTarget();
                if ( varAccessExpr.getName().getImage().equals( "trim" ) ) {
                    Object returnObject = visit( node, data );
                    if ( returnObject != null && returnObject instanceof MethodCallExpr ) {
                        MethodCallExpr nextMethodCallExpr = ( MethodCallExpr ) returnObject;
                        if ( nextMethodCallExpr.getTarget() instanceof VarAccessExpr ) {
                            VarAccessExpr nextVarAccessExpr = ( VarAccessExpr ) nextMethodCallExpr.getTarget();
                            if ( nextVarAccessExpr.getName().getImage().equals( "length" ) || nextVarAccessExpr.getName().getImage().equals( "isEmpty" ) ) {
                                Object comparisonResult = visit( nextMethodCallExpr, data );
                                if ( comparisonResult != null && comparisonResult instanceof MethodCallExpr ) {
                                    MethodCallExpr comparisonMethodCallExpr = ( MethodCallExpr ) comparisonResult;
                                    if ( comparisonMethodCallExpr.getTarget() instanceof VarAccessExpr ) {
                                        VarAccessExpr comparisonVarAccessExpr = ( VarAccessExpr ) comparisonMethodCallExpr.getTarget();
                                        if ( comparisonVarAccessExpr.getName().getImage().equals( "equals" ) && comparisonMethodCallExpr.getArguments().size() == 1 && comparisonMethodCallExpr.getArguments().get(0) instanceof LiteralExpr ) {
                                            LiteralExpr literalExpr = ( LiteralExpr ) comparisonMethodCallExpr.getArguments().get(0);
                                            if ( literalExpr.getValue().equals( 0 ) || literalExpr.getValue().equals( "" ) ) {
                                                addRuleViolation( node.getImage(), 1, 1 );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return visit( node, data );
        }

        @Override
        public Object visit( MethodInvocationExpr node, Object data ) {
            if ( node.getMethodName().getImage().equals( "trim" ) ) {
                Object returnObject = visit( node, data );
                if ( returnObject != null && returnObject instanceof MethodCallExpr ) {
                    MethodCallExpr nextMethodCallExpr = ( MethodCallExpr ) returnObject;
                    if ( nextMethodCallExpr.getTarget() instanceof VarAccessExpr ) {
                        VarAccessExpr nextVarAccessExpr = ( VarAccessExpr ) nextMethodCallExpr.getTarget();
                        if ( nextVarAccessExpr.getName().getImage().equals( "length" ) || nextVarAccessExpr.getName().getImage().equals( "isEmpty" ) ) {
                            Object comparisonResult = visit( nextMethodCallExpr, data );
                            if ( comparisonResult != null && comparisonResult instanceof MethodCallExpr ) {
                                MethodCallExpr comparisonMethodCallExpr = ( MethodCallExpr ) comparisonResult;
                                if ( comparisonMethodCallExpr.getTarget() instanceof VarAccessExpr ) {
                                    VarAccessExpr comparisonVarAccessExpr = ( VarAccessExpr ) comparisonMethodCallExpr.getTarget();
                                    if ( comparisonVarAccessExpr.getName().getImage().equals( "equals" ) && comparisonMethodCallExpr.getArguments().size() == 1 && comparisonMethodCallExpr.getArguments().get(0) instanceof LiteralExpr ) {
                                        LiteralExpr literalExpr = ( LiteralExpr ) comparisonMethodCallExpr.getArguments().get(0);
                                        if ( literalExpr.getValue().equals( 0 ) || literalExpr.getValue().equals( "" ) ) {
                                            addRuleViolation( node.getImage(), 1, 1 );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return visit( node, data );
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCallExpression node, Object data) {
        if (node.getImage().equals("trim") && node.getParent() instanceof ASTMethodCallExpression) {
            ASTMethodCallExpression parent = (ASTMethodCallExpression) node.getParent();
            if (parent.getImage().equals("length") || parent.getImage().equals("isEmpty")) {
                if (parent.getParent() instanceof ASTExpression && (parent.getParent() instanceof ASTConditionalExpression || parent.getParent() instanceof ASTIfStatement)) {
                    addViolation(data, this, parent);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignment node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.TreeSet;
import java.util.Comparator;
import java.util.function.Predicate;
import java.util.function.Function;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import java.util.stream.Collectors;
import java.util.Comparator;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.Map;
import java.util.stream.Collectors;

import java.util.Set;
import java.util.HashSet;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    private static final String TRIM_METHOD_NAME = "trim";
    private static final String LENGTH_METHOD_NAME = "length";
    private static final String IS_EMPTY_METHOD_NAME = "isEmpty";

    @Override
    public Object visit(ASTMethodCallExpr node, Object data) {
        String methodName = node.getImage();
        if (isTrimMethod(methodName) || isLengthMethod(methodName) || isEmptyMethod(methodName)) {
            ASTPrimaryExpr parent = node.getParent();
            if (parent instanceof ASTBinaryOpExpr) {
                ASTBinaryOpExpr binaryOp = (ASTBinaryOpExpr) parent;
                if (isZeroComparison(binaryOp)) {
                    reportViolation(node);
                }
            } else if (parent instanceof ASTAssignmentOperator) {
                ASTAssignmentOperator assignmentOp = (ASTAssignmentOperator) parent;
                if (isZeroComparison(assignmentOp)) {
                    reportViolation(node);
                }
            } else if (parent instanceof ASTMethodCallExpr) {
                ASTMethodCallExpr methodCall = (ASTMethodCallExpr) parent;
                if (isZeroComparison(methodCall)) {
                    reportViolation(node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimMethod(String methodName) {
        return TRIM_METHOD_NAME.equals(methodName);
    }

    private boolean isLengthMethod(String methodName) {
        return LENGTH_METHOD_NAME.equals(methodName);
    }

    private boolean isEmptyMethod(String methodName) {
        return IS_EMPTY_METHOD_NAME.equals(methodName);
    }

    private boolean isZeroComparison(ASTPrimaryExpr parent) {
        ASTBinaryOpExpr binaryOp = (ASTBinaryOpExpr) parent;
        ASTExpression left = binaryOp.getLeft();
        ASTExpression right = binaryOp.getRight();
        if (left instanceof ASTIntegerLiteralExpr && right instanceof ASTIntegerLiteralExpr) {
            int leftValue = ((ASTIntegerLiteralExpr) left).getImage();
            int rightValue = ((ASTIntegerLiteralExpr) right).getImage();
            return leftValue == 0 || rightValue == 0;
        }
        return false;
    }

    private void reportViolation(ASTMethodCallExpr node) {
        // report the violation
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        super(MethodCallExpression.class, MethodInvocation.class);
    }

    @Override
    public Object visit(MethodCallExpression node, Object data) {
        MethodSignature parent = (MethodSignature) node.getParent();
        if (parent != null) {
            Name methodName = parent.getName();
            if (methodName != null) {
                if (methodName.getImage().equals("length") || methodName.getImage().equals("isEmpty")) {
                    InvokeExpr invokeExpr = (InvokeExpr) node.getParent();
                    StringLiteral stringLiteral = findStringLiteral(invokeExpr);
                    if (stringLiteral != null) {
                        String trimmedString = stringLiteral.getImage().trim();
                        if (trimmedString.isEmpty()) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private StringLiteral findStringLiteral(InvokeExpr node) {
        for (Object child : node.getChildren()) {
            if (child instanceof StringLiteral) {
                return (StringLiteral) child;
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 203.26064109802246 秒
