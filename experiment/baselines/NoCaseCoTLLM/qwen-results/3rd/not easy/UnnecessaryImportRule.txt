开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTClassOrInterfaceTypeReference.class, ASTName.class);
    }

    private Set<String> usedTypes = new HashSet<>();

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedTypes.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName();

        // Skip wildcard imports
        if (importName.endsWith(".*")) {
            return super.visit(node, data);
        }

        // Check if the import is from java.lang or the current package
        if (importName.startsWith("java.lang.") || node.isFromCurrentPackage()) {
            addViolation(data, node);
            return super.visit(node, data);
        }

        // Check if the import is unused
        if (!usedTypes.contains(importName)) {
            addViolation(data, node);
        }

        // Check for duplicate imports
        if (node.getCompilationUnit().getImports().stream()
            .filter(ASTImportDeclaration.class::isInstance)
            .map(ASTImportDeclaration.class::cast)
            .map(ASTImportDeclaration::getImportedName)
            .filter(name -> !name.endsWith(".*"))
            .collect(Collectors.toSet()).size() > 1) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceTypeReference node, Object data) {
        usedTypes.add(node.getType().getName());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        usedTypes.add(node.getImage());
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTPrimaryExpression.class);
    }

    private Map<String, ASTImportDeclaration> imports = new HashMap<>();
    private Set<String> usedClasses = new HashSet<>();
    private String currentPackageName;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        currentPackageName = node.getPackageName();
        imports.clear();
        usedClasses.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName();
        if (importName.startsWith("java.lang.") || importName.equals(currentPackageName)) {
            return super.visit(node, data);
        }
        ASTName nameNode = node.getFirstChildOfType(ASTName.class);
        if (nameNode != null) {
            String name = nameNode.getImage();
            if (node.isImportOnDemand()) {
                imports.put(name + ".*", node);
            } else {
                imports.put(name, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        ASTName nameNode = node.getFirstChildOfType(ASTName.class);
        if (nameNode != null) {
            String name = nameNode.getImage();
            usedClasses.add(name);
        }
        return super.visit(node, data);
    }

    @Override
    public void addMessage(String msg, JavaNode node) {
        if (node instanceof ASTImportDeclaration) {
            ASTImportDeclaration importDecl = (ASTImportDeclaration) node;
            String importName = importDecl.getImportedName();
            if (!usedClasses.contains(importName) && !isClassInUsedClasses(importName)) {
                super.addMessage(msg, importDecl);
            }
        }
    }

    private boolean isClassInUsedClasses(String importName) {
        SymbolTable symbolTable = getCurrentRuleContext().getSymbolTable();
        TypeSystem typeSystem = symbolTable.getTypeSystem();
        JClassType classType = typeSystem.findClass(importName);
        if (classType != null) {
            JClassSymbol classSymbol = classType.getSymbol();
            if (classSymbol != null) {
                String className = classSymbol.getQualifiedName();
                for (String usedClass : usedClasses) {
                    if (usedClass.equals(className) || className.endsWith("." + usedClass)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    @Override
    public void end(ASTCompilationUnit node, Object data) {
        for (Map.Entry<String, ASTImportDeclaration> entry : imports.entrySet()) {
            String importName = entry.getKey();
            ASTImportDeclaration importDecl = entry.getValue();
            JType type = importDecl.getImportedType();
            if (type.isImported() && !usedClasses.contains(importName) && !isClassInUsedClasses(importName)) {
                addViolation(data, importDecl);
            }
        }
        super.end(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedTypes = new HashSet<>();
        Set<String> imports = new HashSet<>();

        // Collect all used types
        for (NameOccurrence occ : node.getReferences()) {
            NameDeclaration decl = occ.getNameDeclaration();
            if (decl != null && decl.getNode() instanceof ASTReferenceType) {
                JType type = ((ASTReferenceType) decl.getNode()).getType();
                usedTypes.add(type.getPackageName() + "." + type.getSimpleTypeName());
            }
        }

        // Collect all imports and check for unnecessary imports
        List<ASTImportDeclaration> importDeclarations = node.findDescendantsOfType(ASTImportDeclaration.class);
        for (ASTImportDeclaration importDecl : importDeclarations) {
            ASTName importName = importDecl.getFirstChildOfType(ASTName.class);
            if (importName != null) {
                String importFullName = importName.getImage();
                String importSimple = importDecl.getImportedSimpleName();
                JPackage pkg = TypeSystem.forName(importFullName).getPackage();

                // Check if the import is in java.lang or the current package
                if (pkg != null && ("java.lang".equals(pkg.getPackageName()) || pkg.getPackageName().equals(node.getPackageName()))) {
                    addViolation(data, importDecl);
                    continue;
                }

                // Check for duplication
                if (!imports.add(importFullName)) {
                    addViolation(data, importDecl);
                    continue;
                }

                // Check if the import is unused
                if (!isUsed(importFullName, importSimple, usedTypes)) {
                    addViolation(data, importDecl);
                }
            }
        }

        return super.visit(node, data);
    }

    private boolean isUsed(String importFullName, String importSimple, Set<String> usedTypes) {
        for (String usedType : usedTypes) {
            if (usedType.equals(importFullName) || usedType.endsWith("." + importSimple)) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedClasses = new HashSet<>();
        gatherUsedClasses(node, usedClasses);
        checkImports(node, usedClasses);
        return super.visit(node, data);
    }

    private void gatherUsedClasses(ASTCompilationUnit node, Set<String> usedClasses) {
        node.findDescendantsOfType(ASTName.class).stream()
            .filter(name -> name.getType() != null && name.getType().isReferenceType())
            .map(ASTName::getType)
            .map(JType::getSymbol)
            .map(JTypeDeclSymbol::getQualifiedName)
            .forEach(usedClasses::add);
    }

    private void checkImports(ASTCompilationUnit node, Set<String> usedClasses) {
        String currentPackage = getCurrentPackage(node);
        Set<String> imports = new HashSet<>();

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importStr = importDeclaration.getImportedName();
            JPackageSymbol packageSymbol = importDeclaration.getImportedPackage();

            if (isJavaLang(importStr) || importStr.startsWith(currentPackage)) {
                addViolation(importDeclaration);
            } else if (!imports.add(importStr)) {
                addViolation(importDeclaration);
            } else if (!usedClasses.contains(importStr)) {
                addViolation(importDeclaration);
            }
        }
    }

    private String getCurrentPackage(ASTCompilationUnit node) {
        return node.getPackageName();
    }

    private boolean isJavaLang(String importStr) {
        return importStr.startsWith("java.lang.");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        List<ASTImportDeclaration> imports = node.findDescendantsOfType(ASTImportDeclaration.class);
        Set<String> usedTypes = new HashSet<>();
        Set<String> implicitTypes = new HashSet<>();

        for (ASTImportDeclaration imp : imports) {
            if (imp.isImportOnDemand()) {
                JPackageSymbol pkg = imp.getImportedPackage();
                if (pkg != null) {
                    for (JClassSymbol cls : pkg.getDeclaredClasses()) {
                        implicitTypes.add(cls.getQualifiedName());
                    }
                }
            } else {
                ASTName name = imp.getFirstChildOfType(ASTName.class);
                if (name != null) {
                    implicitTypes.add(name.getQualifiedName());
                }
            }
        }

        for (ASTName name : node.findDescendantsOfType(ASTName.class)) {
            JClassSymbol symbol = TypeHelper.getReferencedClass(name);
            if (symbol != null && !symbol.isJavaLangObject()) {
                usedTypes.add(symbol.getQualifiedName());
            }
        }

        Set<String> currentPackageTypes = getCurrentPackageTypes(node);

        for (ASTImportDeclaration imp : imports) {
            ASTName name = imp.getFirstChildOfType(ASTName.class);
            if (name != null) {
                String qualifiedName = name.getQualifiedName();
                if (!usedTypes.contains(qualifiedName) || implicitTypes.contains(qualifiedName) || currentPackageTypes.contains(qualifiedName)) {
                    addViolation(data, imp);
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        return data;
    }

    private Set<String> getCurrentPackageTypes(ASTCompilationUnit node) {
        Set<String> currentPackageTypes = new HashSet<>();
        JPackageSymbol pkg = node.getPackageDeclarationNode().getPackageSymbol();
        if (pkg != null) {
            for (JClassSymbol cls : pkg.getDeclaredClasses()) {
                currentPackageTypes.add(cls.getQualifiedName());
            }
        }
        return currentPackageTypes;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 215.8693335056305 秒
