开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if ("trim".equals(node.getName())) {
            ASTPrimaryPrefix primaryPrefix = node.getFirstParentOfType(ASTPrimaryPrefix.class);
            if (primaryPrefix != null && primaryPrefix.getFirstParentOfType(ASTPrimaryExpression.class) != null) {
                NodeStream<ASTPrimarySuffix> suffixes = primaryPrefix.getFirstParentOfType(ASTPrimaryExpression.class).children(ASTPrimarySuffix.class);
                if (suffixes.count() == 1) {
                    ASTPrimarySuffix suffix = suffixes.get(0);
                    if (suffix.getNextSibling() instanceof ASTMethodCall) {
                        ASTMethodCall nextMethodCall = (ASTMethodCall) suffix.getNextSibling();
                        if ("length".equals(nextMethodCall.getName()) && nextMethodCall.getFirstChildOfType(ASTPrimarySuffix.class).getImage().equals("()")) {
                            ASTExpression grandParentExpression = node.getFirstParentOfType(ASTExpression.class);
                            if (grandParentExpression != null && grandParentExpression.getParent() instanceof ASTEqualityExpression) {
                                ASTEqualityExpression equalityExpression = (ASTEqualityExpression) grandParentExpression.getParent();
                                if (equalityExpression.getLeftOperand() == grandParentExpression && equalityExpression.getRightOperand() instanceof ASTLiteral && "0".equals(((ASTLiteral) equalityExpression.getRightOperand()).getImage())) {
                                    addViolation(data, node);
                                }
                            }
                        } else if ("isEmpty".equals(nextMethodCall.getName()) && nextMethodCall.getFirstChildOfType(ASTPrimarySuffix.class).getImage().equals("()")) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getName();
        if ("trim".equals(methodName)) {
            JavaNode parent = node.getParent();
            if (parent instanceof ASTPrimaryExpression) {
                NodeStream<ASTPrimarySuffix> suffixes = ((ASTPrimaryExpression) parent).children(ASTPrimarySuffix.class);
                if (suffixes.count() == 1) {
                    ASTPrimarySuffix suffix = suffixes.first();
                    if (suffix instanceof ASTPrimarySuffix) {
                        JavaNode suffixParent = suffix.getParent();
                        if (suffixParent instanceof ASTPrimaryExpression) {
                            NodeStream<ASTPrimarySuffix> nextSuffixes = ((ASTPrimaryExpression) suffixParent).children(ASTPrimarySuffix.class);
                            if (nextSuffixes.count() == 1) {
                                ASTPrimarySuffix nextSuffix = nextSuffixes.first();
                                String nextMethodName = nextSuffix.getName();
                                if ("length".equals(nextMethodName)) {
                                    JavaNode nextParent = nextSuffix.getParent();
                                    if (nextParent instanceof ASTPrimaryExpression) {
                                        NodeStream<ASTPrimarySuffix> comparisonSuffixes = ((ASTPrimaryExpression) nextParent).children(ASTPrimarySuffix.class);
                                        if (comparisonSuffixes.count() == 1) {
                                            ASTPrimarySuffix comparisonSuffix = comparisonSuffixes.first();
                                            if (comparisonSuffix.isArgumentList()) {
                                                if (comparisonSuffix.getArguments().size() == 1) {
                                                    JavaNode argument = comparisonSuffix.getArguments().get(0);
                                                    if (argument instanceof ASTPrimaryPrefix) {
                                                        if (((ASTPrimaryPrefix) argument).getFirstChildOfType(ASTLiteral.class) != null) {
                                                            ASTLiteral literal = (ASTLiteral) ((ASTPrimaryPrefix) argument).getFirstChildOfType(ASTLiteral.class);
                                                            if ("0".equals(literal.getImage())) {
                                                                addViolation(data, node);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if ("isEmpty".equals(nextMethodName)) {
                                    addViolation(data, node);
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTPrimaryExpression.class);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        NodeStream<ASTPrimarySuffix> suffixes = node.descendants(ASTPrimarySuffix.class);

        if (suffixes.filter(ASTPrimarySuffix::isMethodCall).size() >= 2) {
            Iterator<ASTPrimarySuffix> iterator = suffixes.filter(ASTPrimarySuffix::isMethodCall).iterator();
            ASTPrimarySuffix firstSuffix = iterator.next();
            ASTPrimarySuffix secondSuffix = iterator.next();

            if ("trim".equals(firstSuffix.getImage()) && (secondSuffix.getImage().equals("length") || secondSuffix.getImage().equals("isEmpty"))) {
                if (secondSuffix.getImage().equals("length")) {
                    ASTEqualityExpression equalityExpression = node.getFirstParentOfType(ASTEqualityExpression.class);
                    if (equalityExpression != null) {
                        ASTLiteral literal = (ASTLiteral) equalityExpression.findDescendantsOfType(ASTLiteral.class).stream().filter(lit -> lit.getEscapedValue().equals("0")).findFirst().orElse(null);
                        if (literal != null) {
                            addViolation(data, node);
                        }
                    }
                } else if (secondSuffix.getImage().equals("isEmpty")) {
                    ASTConditionalExpression conditionalExpression = node.getFirstParentOfType(ASTConditionalExpression.class);
                    if (conditionalExpression != null) {
                        addViolation(data, node);
                    }
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

出现语法错误，这一轮舍弃，直接重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimCall(node)) {
            NodeStream<ASTMethodCall> nextMethodCalls = node.getNextSibling().descendantsOrSelf(ASTMethodCall.class);
            nextMethodCalls.forEach(nextMethodCall -> {
                if (isLengthZeroCheck(nextMethodCall) || isIsEmptyCheck(nextMethodCall)) {
                    addViolation(data, node);
                }
            });
        }
        return super.visit(node, data);
    }

    private boolean isTrimCall(ASTMethodCall node) {
        ASTPrimaryExpression primaryExpression = node.getFirstParentOfType(ASTPrimaryExpression.class);
        if (primaryExpression != null) {
            ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (prefix != null && prefix.getImage() != null) {
                JType type = prefix.getType();
                if (type != null && type.isSubtypeOf(TypeSystem.getInstance().getString())) {
                    ASTPrimarySuffix suffix = node.getFirstFirstChildOfType(ASTPrimarySuffix.class);
                    return suffix != null && "trim".equals(suffix.getImage());
                }
            }
        }
        return false;
    }

    private boolean isLengthZeroCheck(ASTMethodCall node) {
        ASTPrimarySuffix suffix = node.getFirstFirstChildOfType(ASTPrimarySuffix.class);
        if (suffix != null && "length".equals(suffix.getImage())) {
            ASTExpression parentExpression = node.getFirstParentOfType(ASTExpression.class);
            if (parentExpression instanceof ASTEqualityExpression) {
                ASTEqualityExpression equalityExpression = (ASTEqualityExpression) parentExpression;
                ASTExpression rightOperand = equalityExpression.getRightOperand();
                if (rightOperand instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) rightOperand;
                    return "0".equals(literal.getImage());
                }
            }
        }
        return false;
    }

    private boolean isIsEmptyCheck(ASTMethodCall node) {
        ASTPrimarySuffix suffix = node.getFirstFirstChildOfType(ASTPrimarySuffix.class);
        return suffix != null && "isEmpty".equals(suffix.getImage());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 149.92704796791077 秒
