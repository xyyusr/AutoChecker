开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedTypes;
    private String currentPackageName;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedTypes = new HashSet<>();
        currentPackageName = null;
        ASTPackageDeclaration packageDeclaration = node.getFirstChildOfType(ASTPackageDeclaration.class);
        if (packageDeclaration != null) {
            currentPackageName = packageDeclaration.getPackageName();
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName nameNode = node.getFirstChildOfType(ASTName.class);
        if (nameNode != null) {
            String importName = nameNode.getImage();
            if (isImplicitlyAvailable(importName)) {
                addViolation(data, node);
            } else if (isDuplicateImport(node)) {
                addViolation(data, node);
            } else if (!isUsed(importName)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isImplicitlyAvailable(String importName) {
        return importName.startsWith("java.lang.") || (currentPackageName != null && importName.startsWith(currentPackageName + "."));
    }

    private boolean isDuplicateImport(ASTImportDeclaration node) {
        List<ASTImportDeclaration> imports = node.getCompilationUnit().findDescendantsOfType(ASTImportDeclaration.class);
        int count = 0;
        String importName = node.getFirstChildOfType(ASTName.class).getImage();
        for (ASTImportDeclaration imp : imports) {
            if (imp.getFirstChildOfType(ASTName.class).getImage().equals(importName)) {
                count++;
            }
        }
        return count > 1;
    }

    private boolean isUsed(String importName) {
        for (NameOccurrence occ : getSymbolFacade().getUsagesForType(node -> node.getImage().equals(importName))) {
            usedTypes.add(occ.getImage());
        }
        return usedTypes.contains(importName);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        usedTypes.add(node.getImage());
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedImports;
    private Set<String> allImports;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports = new HashSet<>();
        allImports = new HashSet<>();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName().getPackageName() + "." + node.getImportedName().getImage();
        allImports.add(importName);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        ASTPrimaryPrefix prefix = node.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix != null && prefix.getFirstChildOfType(ASTName.class) != null) {
            String name = prefix.getFirstChildOfType(ASTName.class).getImage();
            if (prefix.getFirstChildOfType(ASTPrimarySuffix.class) == null || prefix.getFirstChildOfType(ASTPrimarySuffix.class).getImage().isEmpty()) {
                usedImports.add(name);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimarySuffix node, Object data) {
        ASTPrimarySuffix suffix = node.getFirstChildOfType(ASTPrimarySuffix.class);
        if (suffix != null && suffix.getFirstChildOfType(ASTName.class) != null) {
            String name = suffix.getFirstChildOfType(ASTName.class).getImage();
            usedImports.add(name);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        super.visit(node, data);

        String currentPackageName = node.getPackageName();
        TypeSystem typeSystem = node.getTypeSystem();

        for (String importedName : allImports) {
            if (!usedImports.contains(importedName)) {
                addViolation(data, findImportNode(node, importedName));
            } else {
                if (importedName.startsWith("java.lang.") || importedName.startsWith(currentPackageName + ".")) {
                    addViolation(data, findImportNode(node, importedName));
                }
            }
        }

        return data;
    }

    private ASTImportDeclaration findImportNode(ASTCompilationUnit cu, String importedName) {
        for (ASTImportDeclaration id : cu.findDescendantsOfType(ASTImportDeclaration.class)) {
            if (id.getImportedName().getPackageName() + "." + id.getImportedName().getImage().equals(importedName)) {
                return id;
            }
        }
        return null;
    }

    private ASTImportDeclaration findImportNode(ASTCompilationUnit cu, String packageName, String className) {
        for (ASTImportDeclaration id : cu.findDescendantsOfType(ASTImportDeclaration.class)) {
            if (id.getImportedName().getPackageName().equals(packageName) && id.getImportedName().getImage().equals(className)) {
                return id;
            }
        }
        return null;
    }

    private boolean isDuplicateImport(ASTCompilationUnit cu, String importedName) {
        int count = 0;
        for (ASTImportDeclaration id : cu.findDescendantsOfType(ASTImportDeclaration.class)) {
            if (id.getImportedName().getPackageName() + "." + id.getImportedName().getImage().equals(importedName)) {
                count++;
                if (count > 1) {
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        super.visit(node, data);

        String currentPackageName = node.getPackageName();
        TypeSystem typeSystem = node.getTypeSystem();

        Map<String, Integer> importCounts = new HashMap<>();
        for (ASTImportDeclaration id : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String fullName = id.getImportedName().getPackageName() + "." + id.getImportedName().getImage();
            importCounts.put(fullName, importCounts.getOrDefault(fullName, 0) + 1);
        }

        for (Map.Entry<String, Integer> entry : importCounts.entrySet()) {
            String importedName = entry.getKey();
            int count = entry.getValue();

            if (count > 1) {
                addViolation(data, findImportNode(node, importedName));
            } else if (!usedImports.contains(importedName)) {
                addViolation(data, findImportNode(node, importedName));
            } else {
                if (importedName.startsWith("java.lang.") || importedName.startsWith(currentPackageName + ".")) {
                    addViolation(data, findImportNode(node, importedName));
                }
            }
        }

        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private Set<String> usedImports = new HashSet<>();
    private String currentPackageName;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        currentPackageName = node.getPackageName();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName();
        if (isImplicitImport(importName) || isDuplicateImport(node)) {
            addViolation(data, node);
        } else if (!isUsedImport(importName)) {
            addViolation(data, node);
        }
        return data;
    }

    private boolean isImplicitImport(String importName) {
        return importName.startsWith("java.lang.");
    }

    private boolean isDuplicateImport(ASTImportDeclaration node) {
        String importName = node.getImportedName();
        return !usedImports.add(importName);
    }

    private boolean isUsedImport(String importName) {
        return usedImports.contains(importName);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        String name = node.getImage();
        if (name.contains(".")) {
            usedImports.add(name);
        }
        return super.visit(node, data);
    }

    @Override
    protected void end(RuleContext ctx) {
        super.end(ctx);
        usedImports.clear();
        currentPackageName = null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private Set<String> usedImports;
    private String packageName;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports = new HashSet<>();
        packageName = node.getPackageName();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName name = node.getFirstChildOfType(ASTName.class);
        if (name != null) {
            String importName = name.getImage();
            if (importName.startsWith("java.lang.")) {
                // Skip imports from java.lang as they are implicitly in scope
                return data;
            }
            if (importName.equals(packageName)) {
                // Skip imports from the current package as they are implicitly in scope
                return data;
            }
            usedImports.add(importName);
        }
        return data;
    }

    @Override
    protected Object visitNode(JavaNode node, Object data) {
        List<NameOccurrence> usages = node.getUsagesForAllNamesInScope();
        for (NameOccurrence usage : usages) {
            String fullyQualifiedName = usage.getImage();
            usedImports.remove(fullyQualifiedName);
        }
        return super.visitNode(node, data);
    }

    @Override
    public void end(ASTCompilationUnit node, Object data) {
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            ASTName name = importDecl.getFirstChildOfType(ASTName.class);
            if (name != null && !usedImports.contains(name.getImage())) {
                addViolation(data, importDecl);
            }
        }
        super.end(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        Set<String> allImports = new HashSet<>();
        Set<String> redundantImports = new HashSet<>();

        // Collect all import declarations
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importName = importDecl.getImportedName();
            allImports.add(importName);
            if (importDecl.isImplicit()) {
                redundantImports.add(importName);
            }
        }

        // Collect all used classes
        for (ASTName nameNode : node.findDescendantsOfType(ASTName.class)) {
            JClassType type = nameNode.getType();
            if (type != null) {
                usedImports.add(type.getPackageName() + "." + type.getSimpleName());
            }
        }

        // Find unused imports
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importName = importDecl.getImportedName();
            if (!usedImports.contains(importName) && !importDecl.isOnDemand()) {
                addViolation(data, importDecl);
            }
        }

        // Find duplicate imports
        Set<String> seenImports = new HashSet<>();
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importName = importDecl.getImportedName();
            if (!seenImports.add(importName)) {
                addViolation(data, importDecl);
            }
        }

        // Find redundant imports
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importName = importDecl.getImportedName();
            if (redundantImports.contains(importName)) {
                addViolation(data, importDecl);
            } else if (importDecl.isOnDemand() && importDecl.getPackageName().equals(node.getPackageName())) {
                addViolation(data, importDecl);
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 194.88191533088684 秒
