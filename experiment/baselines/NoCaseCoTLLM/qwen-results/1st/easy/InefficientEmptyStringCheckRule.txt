开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTBinaryExpression.class);
    }
    
    @Override
    public Object visit(ASTBinaryExpression node, Object data) {
        if (node.isUsingOperator(ASTBinaryExpression.Operator.EQUAL)) {
            ASTPrimaryExpression left = node.getLeftOperand();
            ASTPrimaryExpression right = node.getRightOperand();
            
            if (right instanceof ASTPrimaryPrefix && ((ASTPrimaryPrefix) right).getFirstChildOfType(ASTLiteral.class) != null) {
                String rightValue = ((ASTLiteral) right.getFirstChildOfType(ASTLiteral.class)).getImage();
                if ("0".equals(rightValue)) {
                    ASTMethodCall trimCall = findTrimCall(left);
                    if (trimCall != null) {
                        JMethodSymbol methodSymbol = trimCall.getMethodSymbol();
                        if (methodSymbol != null && methodSymbol.getName().equals("trim") && methodSymbol.getErasedParameterTypes().isEmpty()) {
                            addViolation(data, node);
                        }
                    }
                }
            }
            
            if (right instanceof ASTPrimaryPrefix && ((ASTPrimaryPrefix) right).getFirstChildOfType(ASTPrimarySuffix.class) != null) {
                ASTPrimarySuffix suffix = ((ASTPrimaryPrefix) right).getFirstChildOfType(ASTPrimarySuffix.class);
                if (suffix.getImage().equals(".isEmpty()")) {
                    ASTPrimaryExpression primaryExpression = suffix.jjtGetParent().jjtGetParent().jjtGetParent();
                    ASTMethodCall trimCall = findTrimCall(primaryExpression);
                    if (trimCall != null) {
                        JMethodSymbol methodSymbol = trimCall.getMethodSymbol();
                        if (methodSymbol != null && methodSymbol.getName().equals("trim") && methodSymbol.getErasedParameterTypes().isEmpty()) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
    
    private ASTMethodCall findTrimCall(ASTPrimaryExpression primaryExpression) {
        ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix != null) {
            ASTPrimarySuffix suffix = prefix.getFirstChildOfType(ASTPrimarySuffix.class);
            if (suffix != null && suffix.getImage().equals(".trim()")) {
                return suffix.getFirstChildOfType(ASTMethodCall.class);
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        JTypeMirror type = node.getType();
        TypeSystem typeSystem = node.getTypeSystem();

        if (typeSystem.isA(type, typeSystem.STRING_TYPE)) {
            if ("trim".equals(node.getMethodName())) {
                ASTPrimaryExpression primaryExpression = node.getFirstParentOfType(ASTPrimaryExpression.class);
                if (primaryExpression != null) {
                    NodeStream<ASTMethodCall> subsequentMethodCalls = primaryExpression.getDescendantsOfType(ASTMethodCall.class);
                    subsequentMethodCalls.filter(subNode -> subNode != node)
                        .forEach(subNode -> {
                            if ("length".equals(subNode.getMethodName()) && subNode.getArgumentCount() == 0) {
                                ASTPrimaryPrefix prefix = subNode.getFirstParentOfType(ASTPrimaryPrefix.class);
                                if (prefix != null && prefix.getFirstChildOfType(ASTPrimarySuffix.class) != null && "trim".equals(prefix.getFirstChildOfType(ASTPrimarySuffix.class).getImage())) {
                                    addViolation(data, node);
                                }
                            } else if ("isEmpty".equals(subNode.getMethodName()) && subNode.getArgumentCount() == 0) {
                                ASTPrimaryPrefix prefix = subNode.getFirstParentOfType(ASTPrimaryPrefix.class);
                                if (prefix != null && prefix.getFirstChildOfType(ASTPrimarySuffix.class) != null && "trim".equals(prefix.getFirstChildOfType(ASTPrimarySuffix.class).getImage())) {
                                    addViolation(data, node);
                                }
                            }
                        });
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class, ASTMethodCall.class, ASTReturnStatement.class, ASTIfStatement.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getLeftOperand() instanceof ASTMethodCall && node.getRightOperand() instanceof ASTLiteral) {
            ASTMethodCall leftMethodCall = (ASTMethodCall) node.getLeftOperand();
            ASTLiteral rightLiteral = (ASTLiteral) node.getRightOperand();
            if (rightLiteral.getValue().equals("0") && isTrimLengthCall(leftMethodCall)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimIsEmptyCall(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTReturnStatement node, Object data) {
        if (node.getFirstChildOfType(ASTMethodCall.class) != null) {
            ASTMethodCall methodCall = node.getFirstChildOfType(ASTMethodCall.class);
            if (isTrimLengthCall(methodCall) || isTrimIsEmptyCall(methodCall)) {
                addViolation(data, methodCall);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getFirstChildOfType(ASTExpression.class) != null) {
            ASTExpression expression = node.getFirstChildOfType(ASTExpression.class);
            if (expression.getFirstChildOfType(ASTMethodCall.class) != null) {
                ASTMethodCall methodCall = expression.getFirstChildOfType(ASTMethodCall.class);
                if (isTrimLengthCall(methodCall) || isTrimIsEmptyCall(methodCall)) {
                    addViolation(data, methodCall);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthCall(ASTMethodCall methodCall) {
        if (methodCall.getImage().equals("length")) {
            ASTPrimaryExpression primaryExpression = methodCall.getFirstParentOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTPrimarySuffix suffix = primaryExpression.getFirstChildOfType(ASTPrimarySuffix.class);
                if (suffix != null && suffix.getImage().equals("trim")) {
                    ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
                    if (prefix != null && prefix.getFirstChildOfType(ASTMethodCall.class) == null) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean isTrimIsEmptyCall(ASTMethodCall methodCall) {
        if (methodCall.getImage().equals("isEmpty")) {
            ASTPrimaryExpression primaryExpression = methodCall.getFirstParentOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTPrimarySuffix suffix = primaryExpression.getFirstChildOfType(ASTPrimarySuffix.class);
                if (suffix != null && suffix.getImage().equals("trim")) {
                    ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
                    if (prefix != null && prefix.getFirstChildOfType(ASTMethodCall.class) == null) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTPrimaryExpression.class);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        if (node.jjtGetNumChildren() >= 2) {
            JavaNode firstChild = node.jjtGetChild(0);
            JavaNode secondChild = node.jjtGetChild(1);

            if (firstChild instanceof ASTPrimaryPrefix && secondChild instanceof ASTPrimarySuffix) {
                ASTPrimaryPrefix prefix = (ASTPrimaryPrefix) firstChild;
                ASTPrimarySuffix suffix = (ASTPrimarySuffix) secondChild;

                if (prefix.getFirstChildOfType(ASTMethodCall.class) != null) {
                    ASTMethodCall methodCall = prefix.getFirstChildOfType(ASTMethodCall.class);
                    if ("trim".equals(methodCall.getName())) {
                        NodeStream<ASTPrimarySuffix> subsequentSuffixes = node.children(ASTPrimarySuffix.class).skip(1);

                        for (ASTPrimarySuffix subsequentSuffix : subsequentSuffixes) {
                            if (subsequentSuffix.getFirstChildOfType(ASTMethodCall.class) != null) {
                                ASTMethodCall subsequentMethodCall = subsequentSuffix.getFirstChildOfType(ASTMethodCall.class);
                                if ("length".equals(subsequentMethodCall.getName())) {
                                    if (node.jjtGetNumChildren() == 3 && node.jjtGetChild(2) instanceof ASTEqualityExpression) {
                                        ASTEqualityExpression equalityExpression = (ASTEqualityExpression) node.jjtGetChild(2);
                                        if (equalityExpression.jjtGetNumChildren() == 2 && equalityExpression.jjtGetChild(1) instanceof ASTLiteral) {
                                            ASTLiteral literal = (ASTLiteral) equalityExpression.jjtGetChild(1);
                                            if ("0".equals(literal.getImage())) {
                                                addViolation(data, node);
                                            }
                                        }
                                    }
                                } else if ("isEmpty".equals(subsequentMethodCall.getName())) {
                                    addViolation(data, node);
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class, ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getType() == ASTEqualityExpression.Type.EQUAL) {
            List<ASTExpression> children = node.findDescendantsOfType(ASTExpression.class);
            if (children.size() == 2) {
                ASTExpression left = children.get(0);
                ASTExpression right = children.get(1);

                if (isTrimLengthComparison(left, right) || isTrimLengthComparison(right, left)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimIsEmptyCall(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthComparison(ASTExpression expr1, ASTExpression expr2) {
        if (!(expr1 instanceof ASTMethodCall)) {
            return false;
        }
        ASTMethodCall methodCall = (ASTMethodCall) expr1;

        if (!(expr2 instanceof ASTLiteral)) {
            return false;
        }
        ASTLiteral literal = (ASTLiteral) expr2;

        if (literal.getLiteralValue().equals("0")) {
            return isTrimMethodCall(methodCall) && isLengthMethodCall(methodCall.getFirstParentOfType(ASTMethodCall.class));
        }
        return false;
    }

    private boolean isTrimIsEmptyCall(ASTMethodCall methodCall) {
        return isTrimMethodCall(methodCall) && isEmptyMethodCall(methodCall.getFirstParentOfType(ASTMethodCall.class));
    }

    private boolean isTrimMethodCall(ASTMethodCall methodCall) {
        if (methodCall == null) {
            return false;
        }

        ASTPrimaryExpression primaryExpression = methodCall.getFirstParentOfType(ASTPrimaryExpression.class);
        if (primaryExpression == null) {
            return false;
        }

        ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (primaryPrefix == null) {
            return false;
        }

        JType type = primaryPrefix.getType();
        if (type != null && type.equalsTo(TypeSystem.STRING_TYPE)) {
            ASTPrimarySuffix suffix = methodCall.getFirstChildOfType(ASTPrimarySuffix.class);
            if (suffix != null && suffix.getImage().equals("trim")) {
                return true;
            }
        }
        return false;
    }

    private boolean isLengthMethodCall(ASTMethodCall methodCall) {
        if (methodCall == null) {
            return false;
        }

        ASTPrimarySuffix suffix = methodCall.getFirstChildOfType(ASTPrimarySuffix.class);
        if (suffix != null && suffix.getImage().equals("length")) {
            return true;
        }
        return false;
    }

    private boolean isEmptyMethodCall(ASTMethodCall methodCall) {
        if (methodCall == null) {
            return false;
        }

        ASTPrimarySuffix suffix = methodCall.getFirstChildOfType(ASTPrimarySuffix.class);
        if (suffix != null && suffix.getImage().equals("isEmpty")) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 154.71018838882446 秒
