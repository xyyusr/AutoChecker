开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedClasses = new HashSet<>();
    private Set<String> imports = new HashSet<>();
    private Set<String> reportedImports = new HashSet<>();

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTName.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedClasses.clear();
        imports.clear();
        reportedImports.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName();
        if (!imports.add(importName)) {
            addViolation(data, node);
            reportedImports.add(importName);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        NameDeclaration declaration = node.getNameDeclaration();
        if (declaration != null) {
            JClassType type = declaration.getType();
            if (type != null && !type.getName().startsWith("java.lang.")) {
                usedClasses.add(type.getName());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, VisitorTypeSystem visitorTypeSystem) {
        SourceFileScope sourceFileScope = node.getScope();
        PackageScope packageScope = sourceFileScope.getPackageScope();
        String packageName = packageScope.getPackageName();

        for (String importName : imports) {
            if (!reportedImports.contains(importName) && !usedClasses.contains(importName)) {
                if (importName.startsWith(packageName + ".") || importName.startsWith("java.lang.")) {
                    for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
                        if (importDeclaration.getImportedName().equals(importName)) {
                            addViolation(data, importDeclaration);
                            reportedImports.add(importName);
                            break;
                        }
                    }
                }
            }
        }

        return super.visit(node, visitorTypeSystem);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedClasses = new HashSet<>();
    private String currentPackageName;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTName.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        this.currentPackageName = node.getPackageName();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName();
        if (importName.startsWith("java.lang.") || importName.equals(currentPackageName)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        JType type = TypeHelper.getType(node);
        if (type instanceof JClassType) {
            JClassType classType = (JClassType) type;
            JClassSymbol classSymbol = classType.getSymbol();
            if (classSymbol != null) {
                String className = classSymbol.getQualifiedName();
                usedClasses.add(className);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public void end(RuleContext ctx) {
        super.end(ctx);
        ASTCompilationUnit compilationUnit = (ASTCompilationUnit) ctx.getData();
        List<ASTImportDeclaration> imports = compilationUnit.findDescendantsOfType(ASTImportDeclaration.class);
        Set<String> processedImports = new HashSet<>();

        for (ASTImportDeclaration importNode : imports) {
            String importName = importNode.getImportedName();
            if (importName.endsWith(".*")) {
                importName = importName.substring(0, importName.length() - 2);
                if (usedClasses.stream().anyMatch(className -> className.startsWith(importName))) {
                    processedImports.add(importName);
                } else {
                    addViolation(ctx, importNode);
                }
            } else {
                if (usedClasses.contains(importName)) {
                    processedImports.add(importName);
                } else {
                    addViolation(ctx, importNode);
                }
            }
        }

        // Check for duplicates
        Set<String> seenImports = new HashSet<>();
        for (ASTImportDeclaration importNode : imports) {
            String importName = importNode.getImportedName();
            if (!processedImports.contains(importName) && !seenImports.add(importName)) {
                addViolation(ctx, importNode);
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedImports;
    private Set<String> implicitImports;
    private TypeSystem typeSystem;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTPrimaryExpression.class, ASTPrimaryPrefix.class, ASTPrimarySuffix.class, ASTType.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports = new HashSet<>();
        implicitImports = new HashSet<>();
        typeSystem = node.getTypeSystem();

        // Add all classes in java.lang to implicitImports
        implicitImports.add("java.lang.Object");
        implicitImports.add("java.lang.String");
        implicitImports.add("java.lang.Integer");
        implicitImports.add("java.lang.Long");
        implicitImports.add("java.lang.Float");
        implicitImports.add("java.lang.Double");
        implicitImports.add("java.lang.Boolean");
        implicitImports.add("java.lang.Character");
        implicitImports.add("java.lang.Byte");
        implicitImports.add("java.lang.Short");
        implicitImports.add("java.lang.Void");
        implicitImports.add("java.lang.Class");
        implicitImports.add("java.lang.Cloneable");
        implicitImports.add("java.lang.Comparable");
        implicitImports.add("java.lang.Enum");
        implicitImports.add("java.lang.Exception");
        implicitImports.add("java.lang.Error");
        implicitImports.add("java.lang.RuntimeException");
        implicitImports.add("java.lang.Thread");
        implicitImports.add("java.lang.ThreadGroup");
        implicitImports.add("java.lang.StackTraceElement");
        implicitImports.add("java.lang.StringBuffer");
        implicitImports.add("java.lang.StringBuilder");
        implicitImports.add("java.lang.System");
        implicitImports.add("java.lang.Throwable");
        implicitImports.add("java.lang.reflect.Array");

        // Add all classes in the current package to implicitImports
        String currentPackageName = node.getPackageName();
        if (currentPackageName != null && !currentPackageName.isEmpty()) {
            implicitImports.add(currentPackageName + ".*");
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName importName = node.getFirstDescendantOfType(ASTName.class);
        if (importName != null) {
            String importStr = importName.getImage();
            if (!importStr.endsWith(".*")) {
                usedImports.add(importStr);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        ASTPrimaryPrefix prefix = node.getFirstDescendantOfType(ASTPrimaryPrefix.class);
        if (prefix != null) {
            ASTPrimarySuffix suffix = prefix.getFirstDescendantOfType(ASTPrimarySuffix.class);
            if (suffix != null && suffix.getType() == ASTPrimarySuffix.ARRAY_ACCESS) {
                JClassType arrayType = typeSystem.resolveArrayType(prefix.getType());
                if (arrayType != null) {
                    usedImports.add(arrayType.getQualifiedName());
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryPrefix node, Object data) {
        ASTName name = node.getFirstDescendantOfType(ASTName.class);
        if (name != null) {
            JClassType classType = typeSystem.resolveType(name.getImage());
            if (classType != null) {
                usedImports.add(classType.getQualifiedName());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimarySuffix node, Object data) {
        if (node.getType() == ASTPrimarySuffix.CLASS) {
            ASTPrimaryPrefix prefix = node.getFirstParentOfType(ASTPrimaryPrefix.class);
            if (prefix != null) {
                ASTName name = prefix.getFirstDescendantOfType(ASTName.class);
                if (name != null) {
                    JClassType classType = typeSystem.resolveType(name.getImage());
                    if (classType != null) {
                        usedImports.add(classType.getQualifiedName());
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTType node, Object data) {
        JClassType type = node.getType();
        if (type != null) {
            usedImports.add(type.getQualifiedName());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> reportedImports = new HashSet<>();
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            ASTName importName = importDecl.getFirstDescendantOfType(ASTName.class);
            if (importName != null) {
                String importStr = importName.getImage();
                if (importStr.endsWith(".*")) {
                    // Check for classes in the import package
                    String packageName = importStr.substring(0, importStr.length() - 2);
                    for (String usedImport : usedImports) {
                        if (usedImport.startsWith(packageName + ".")) {
                            reportedImports.add(usedImport);
                        }
                    }
                } else {
                    if (!usedImports.contains(importStr) && !implicitImports.contains(importStr)) {
                        addViolation(data, importDecl);
                    }
                }
            }
        }

        // Check for duplicates
        Set<String> importSet = new HashSet<>();
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            ASTName importName = importDecl.getFirstDescendantOfType(ASTName.class);
            if (importName != null) {
                String importStr = importName.getImage();
                if (!importSet.add(importStr)) {
                    addViolation(data, importDecl);
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private Set<String> usedClasses = new HashSet<>();
    private JPackageSymbol currentPackage;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        currentPackage = node.getPackageDeclaration().getPackageName();
        NodeStream<ASTType> types = node.getDescendantsStream(ASTType.class);
        for (ASTType type : types) {
            JClassSymbol classSymbol = type.getTypeMirror().getErasedType().getAsClassSymbol();
            if (classSymbol != null && !classSymbol.isPrimitive()) {
                usedClasses.add(classSymbol.getQualifiedName());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName nameNode = node.getImportedName();
        String importName = nameNode.getQualifiedName();
        boolean isJavaLang = importName.startsWith("java.lang.");
        boolean isInCurrentPackage = importName.startsWith(currentPackage + ".");

        if (isJavaLang || isInCurrentPackage) {
            addViolation(node, data);
        } else {
            JClassSymbol classSymbol = TypeSystem.forName(importName);
            if (classSymbol != null && !usedClasses.contains(classSymbol.getQualifiedName())) {
                addViolation(node, data);
            }
        }

        // Check for duplicates
        List<ASTImportDeclaration> imports = node.getCompilationUnit().getImportDeclarations();
        for (int i = 0; i < imports.size(); i++) {
            ASTImportDeclaration importDeclaration = imports.get(i);
            if (importDeclaration != node && importDeclaration.getImportedName().getQualifiedName().equals(importName)) {
                addViolation(importDeclaration, data);
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```

Note that the generated code needs to contain import information, do not contain pseudo code, and no comments are required. Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Map<String, Integer> importUsageMap = new HashMap<>();
        Set<String> imports = new HashSet<>();

        // Collect all import declarations
        for (ASTImportDeclaration importDeclaration : node.findAllDescendantsOfType(ASTImportDeclaration.class)) {
            String importName = importDeclaration.getImportedName();
            imports.add(importName);
            importUsageMap.put(importName, 0);
        }

        // Collect all class names used in the compilation unit
        for (ASTPrimaryExpression primaryExpression : node.findAllDescendantsOfType(ASTPrimaryExpression.class)) {
            ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (prefix != null) {
                ASTName name = prefix.getFirstChildOfType(ASTName.class);
                if (name != null) {
                    String className = name.getImage();
                    for (String importName : imports) {
                        if (importName.endsWith(className) || importName.endsWith(className + ".*")) {
                            importUsageMap.put(importName, importUsageMap.get(importName) + 1);
                        }
                    }
                }
            }

            // Check for static imports
            for (ASTPrimarySuffix suffix : primaryExpression.findAllDescendantsOfType(ASTPrimarySuffix.class)) {
                if (suffix.isStatic()) {
                    String staticMemberName = suffix.getImage();
                    for (String importName : imports) {
                        if (importName.endsWith(staticMemberName)) {
                            importUsageMap.put(importName, importUsageMap.get(importName) + 1);
                        }
                    }
                }
            }
        }

        // Add implicitly imported classes from java.lang
        for (JClassSymbol classSymbol : TypeSystem.getTypeSystem(node).getPackages().get("java.lang").getClasses()) {
            importUsageMap.put("java.lang." + classSymbol.getSimpleName(), Integer.MAX_VALUE);
        }

        // Add implicitly imported classes from the current package
        JPackageSymbol currentPackage = node.getPackageDeclaration().getPackageName();
        if (currentPackage != null) {
            for (JClassSymbol classSymbol : currentPackage.getClasses()) {
                importUsageMap.put(currentPackage.getQualifiedName() + "." + classSymbol.getSimpleName(), Integer.MAX_VALUE);
            }
        }

        // Report unnecessary imports
        for (Map.Entry<String, Integer> entry : importUsageMap.entrySet()) {
            if (entry.getValue() == 0) {
                addViolation(data, entry.getKey());
            }
        }

        // Check for duplicate imports
        Set<String> seenImports = new HashSet<>();
        for (String importName : imports) {
            if (!seenImports.add(importName)) {
                addViolation(data, importName);
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        return data;
    }

    private void addViolation(Object data, String importName) {
        addViolation(data, node);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 180.1487033367157 秒
