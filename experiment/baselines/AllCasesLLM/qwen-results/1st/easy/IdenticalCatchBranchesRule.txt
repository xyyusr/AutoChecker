开始

========================================== Rule IdenticalCatchBranchesRule ===========================================
一共 7 个测试用例
正例 5 个
反例 2 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Collapsible statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) { // Can be collapsed into the previous block
            throw e;
        }
    }
}
```
2. This is a positive test case
```java
// Different statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
```
3. This is a negative test case
```java
// Identical statements, with different exception names
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalStateException ise) {
            throw new RuntimeException(ise);
        }
    }
}
```
4. This is a positive test case
```java
// #1158 false positive 1
class Foo {
    {
        try {
            // do something
        } catch (NoSuchFieldException e) {
            throw new IllegalStateException("field not found", e);
        } catch (NoSuchFieldException | NoSuchFieldError e) {
            throw new IllegalArgumentException("field exception ", e);
        }
    }
}
```
5. This is a positive test case
```java
// #1158 false positive 2
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException exception) {
            throw new RuntimeException("Error message 1", exception);
        } catch (IllegalStateException exception) {
            throw new RuntimeException("Error message 2", exception);
        }
    }
}
```
6. This is a positive test case
```java
// False positive with method name mistaken for exception parameter
class Foo {
    static {
        try {
            // do something
        } catch (RuntimeException exception) {
            exception(exception);
        } catch (IllegalStateException exception2) {
            exception2(exception2);
        }
    }

    private static void exception(Exception exception) {
        throw new RuntimeException("Error message 1", exception);
    }


    private static exception2(Exception exception) {
        throw new RuntimeException("Error message 2", exception);
    }
}
```
7. This is a positive test case
```java
// [java] IdenticalCatchBranches false positive #1480
class Foo {
                public boolean classNameExists(String fullyQualifiedClassName) {
                    try {
                        Foo.class.getClassLoader().loadClass(fullyQualifiedClassName);
                        return true; // Class found
                    } catch (ClassNotFoundException e) {
                        return false;
                    } catch (LinkageError e2) {
                        // Class exists, but may be invalid (see https://github.com/pmd/pmd/issues/1131)
                        return true;
                    }
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Collapsible statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) { // Can be collapsed into the previous block
            throw e;
        }
    }
}
```
2. This is a positive test case
```java
// Different statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
```
3. This is a negative test case
```java
// Identical statements, with different exception names
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalStateException ise) {
            throw new RuntimeException(ise);
        }
    }
}
```
4. This is a positive test case
```java
// #1158 false positive 1
class Foo {
    {
        try {
            // do something
        } catch (NoSuchFieldException e) {
            throw new IllegalStateException("field not found", e);
        } catch (NoSuchFieldException | NoSuchFieldError e) {
            throw new IllegalArgumentException("field exception ", e);
        }
    }
}
```
5. This is a positive test case
```java
// #1158 false positive 2
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException exception) {
            throw new RuntimeException("Error message 1", exception);
        } catch (IllegalStateException exception) {
            throw new RuntimeException("Error message 2", exception);
        }
    }
}
```
6. This is a positive test case
```java
// False positive with method name mistaken for exception parameter
class Foo {
    static {
        try {
            // do something
        } catch (RuntimeException exception) {
            exception(exception);
        } catch (IllegalStateException exception2) {
            exception2(exception2);
        }
    }

    private static void exception(Exception exception) {
        throw new RuntimeException("Error message 1", exception);
    }


    private static exception2(Exception exception) {
        throw new RuntimeException("Error message 2", exception);
    }
}
```
7. This is a positive test case
```java
// [java] IdenticalCatchBranches false positive #1480
class Foo {
                public boolean classNameExists(String fullyQualifiedClassName) {
                    try {
                        Foo.class.getClassLoader().loadClass(fullyQualifiedClassName);
                        return true; // Class found
                    } catch (ClassNotFoundException e) {
                        return false;
                    } catch (LinkageError e2) {
                        // Class exists, but may be invalid (see https://github.com/pmd/pmd/issues/1131)
                        return true;
                    }
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {

    public IdenticalCatchBranchesRule() {
        super(ASTTryStatement.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        ASTCatchClauses catchClauses = node.getCatchClauses();
        if (catchClauses == null || catchClauses.size() < 2) {
            return data;
        }

        Map<String, ASTCatchClause> branchMap = new HashMap<>();
        for (ASTCatchClause catchClause : catchClauses) {
            ASTBlockStatement blockStatement = catchClause.getFirstChildOfType(ASTBlockStatement.class);
            if (blockStatement != null) {
                ASTStatement statement = blockStatement.getFirstChildOfType(ASTStatement.class);
                if (statement != null) {
                    String statementImage = JavaAstUtils.getImage(statement);
                    if (branchMap.containsKey(statementImage)) {
                        ASTCatchClause previousClause = branchMap.get(statementImage);
                        if (isIdenticalBranch(statement, previousClause.getFirstChildOfType(ASTStatement.class))) {
                            if (TypeSystem.getInstance().areErasureEqual(getExceptionType(catchClause), getExceptionType(previousClause))) {
                                addViolation(data, catchClause);
                            }
                        }
                    } else {
                        branchMap.put(statementImage, catchClause);
                    }
                }
            }
        }

        return data;
    }

    private boolean isIdenticalBranch(ASTStatement statement1, ASTStatement statement2) {
        return statement1.getXPathNode().equals(statement2.getXPathNode());
    }

    private JType getExceptionType(ASTCatchClause catchClause) {
        ASTFormalParameter formalParameter = catchClause.getFirstChildOfType(ASTFormalParameter.class);
        return formalParameter.getType();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Collapsible statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) { // Can be collapsed into the previous block
            throw e;
        }
    }
}
```
2. This is a positive test case
```java
// Different statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
```
3. This is a negative test case
```java
// Identical statements, with different exception names
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalStateException ise) {
            throw new RuntimeException(ise);
        }
    }
}
```
4. This is a positive test case
```java
// #1158 false positive 1
class Foo {
    {
        try {
            // do something
        } catch (NoSuchFieldException e) {
            throw new IllegalStateException("field not found", e);
        } catch (NoSuchFieldException | NoSuchFieldError e) {
            throw new IllegalArgumentException("field exception ", e);
        }
    }
}
```
5. This is a positive test case
```java
// #1158 false positive 2
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException exception) {
            throw new RuntimeException("Error message 1", exception);
        } catch (IllegalStateException exception) {
            throw new RuntimeException("Error message 2", exception);
        }
    }
}
```
6. This is a positive test case
```java
// False positive with method name mistaken for exception parameter
class Foo {
    static {
        try {
            // do something
        } catch (RuntimeException exception) {
            exception(exception);
        } catch (IllegalStateException exception2) {
            exception2(exception2);
        }
    }

    private static void exception(Exception exception) {
        throw new RuntimeException("Error message 1", exception);
    }


    private static exception2(Exception exception) {
        throw new RuntimeException("Error message 2", exception);
    }
}
```
7. This is a positive test case
```java
// [java] IdenticalCatchBranches false positive #1480
class Foo {
                public boolean classNameExists(String fullyQualifiedClassName) {
                    try {
                        Foo.class.getClassLoader().loadClass(fullyQualifiedClassName);
                        return true; // Class found
                    } catch (ClassNotFoundException e) {
                        return false;
                    } catch (LinkageError e2) {
                        // Class exists, but may be invalid (see https://github.com/pmd/pmd/issues/1131)
                        return true;
                    }
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.List;
import java.util.ArrayList;
import java.util.Objects;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public IdenticalCatchBranchesRule() {
        super(ASTCatchStatement.class);
    }

    @Override
    public Object visit(ASTCatchStatement node, Object data) {
        List<ASTCatchStatement> catchStatements = new ArrayList<>();
        ASTCatchStatement current = node;
        while (current.getNextSibling() instanceof ASTCatchStatement) {
            catchStatements.add(current);
            current = (ASTCatchStatement) current.getNextSibling();
        }
        catchStatements.add(current);

        for (int i = 0; i < catchStatements.size() - 1; i++) {
            ASTCatchStatement catchStmt1 = catchStatements.get(i);
            ASTCatchStatement catchStmt2 = catchStatements.get(i + 1);
            if (areCatchBranchesIdentical(catchStmt1, catchStmt2)) {
                addViolation(data, catchStmt1);
            }
        }

        return super.visit(node, data);
    }

    private boolean areCatchBranchesIdentical(ASTCatchStatement catchStmt1, ASTCatchStatement catchStmt2) {
        ASTBlockStatement block1 = catchStmt1.getFirstChildOfType(ASTBlockStatement.class);
        ASTBlockStatement block2 = catchStmt2.getFirstChildOfType(ASTBlockStatement.class);
        if (block1 == null || block2 == null) {
            return false;
        }

        ASTStatement stmt1 = block1.getFirstChildOfType(ASTStatement.class);
        ASTStatement stmt2 = block2.getFirstChildOfType(ASTStatement.class);
        if (stmt1 == null || stmt2 == null || stmt1.getClass() != stmt2.getClass()) {
            return false;
        }

        if (stmt1 instanceof ASTExpression) {
            return areExpressionsIdentical((ASTExpression) stmt1, (ASTExpression) stmt2);
        }

        return false;
    }

    private boolean areExpressionsIdentical(ASTExpression expr1, ASTExpression expr2) {
        if (expr1.jjtGetNumChildren() != expr2.jjtGetNumChildren()) {
            return false;
        }

        for (int i = 0; i < expr1.jjtGetNumChildren(); i++) {
            if (expr1.jjtGetChild(i).getClass() != expr2.jjtGetChild(i).getClass()) {
                return false;
            }
            if (expr1.jjtGetChild(i) instanceof ASTPrimaryExpression) {
                if (!arePrimaryExpressionsIdentical((ASTPrimaryExpression) expr1.jjtGetChild(i), (ASTPrimaryExpression) expr2.jjtGetChild(i))) {
                    return false;
                }
            } else if (expr1.jjtGetChild(i) instanceof ASTLiteral) {
                if (!Objects.equals(((ASTLiteral) expr1.jjtGetChild(i)).getImage(), ((ASTLiteral) expr2.jjtGetChild(i)).getImage())) {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;
    }

    private boolean arePrimaryExpressionsIdentical(ASTPrimaryExpression primaryExpr1, ASTPrimaryExpression primaryExpr2) {
        ASTPrimaryPrefix prefix1 = primaryExpr1.getFirstChildOfType(ASTPrimaryPrefix.class);
        ASTPrimaryPrefix prefix2 = primaryExpr2.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix1 == null || prefix2 == null) {
            return false;
        }

        if (!prefix1.getImage().equals(prefix2.getImage())) {
            return false;
        }

        List<ASTPrimarySuffix> suffixes1 = NodeStream.of(primaryExpr1).children(ASTPrimarySuffix.class).collectToList();
        List<ASTPrimarySuffix> suffixes2 = NodeStream.of(primaryExpr2).children(ASTPrimarySuffix.class).collectToList();
        if (suffixes1.size() != suffixes2.size()) {
            return false;
        }

        for (int i = 0; i < suffixes1.size(); i++) {
            if (!suffixes1.get(i).getImage().equals(suffixes2.get(i).getImage())) {
                return false;
            }
        }
        return true;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Collapsible statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) { // Can be collapsed into the previous block
            throw e;
        }
    }
}
```
2. This is a positive test case
```java
// Different statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
```
3. This is a negative test case
```java
// Identical statements, with different exception names
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalStateException ise) {
            throw new RuntimeException(ise);
        }
    }
}
```
4. This is a positive test case
```java
// #1158 false positive 1
class Foo {
    {
        try {
            // do something
        } catch (NoSuchFieldException e) {
            throw new IllegalStateException("field not found", e);
        } catch (NoSuchFieldException | NoSuchFieldError e) {
            throw new IllegalArgumentException("field exception ", e);
        }
    }
}
```
5. This is a positive test case
```java
// #1158 false positive 2
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException exception) {
            throw new RuntimeException("Error message 1", exception);
        } catch (IllegalStateException exception) {
            throw new RuntimeException("Error message 2", exception);
        }
    }
}
```
6. This is a positive test case
```java
// False positive with method name mistaken for exception parameter
class Foo {
    static {
        try {
            // do something
        } catch (RuntimeException exception) {
            exception(exception);
        } catch (IllegalStateException exception2) {
            exception2(exception2);
        }
    }

    private static void exception(Exception exception) {
        throw new RuntimeException("Error message 1", exception);
    }


    private static exception2(Exception exception) {
        throw new RuntimeException("Error message 2", exception);
    }
}
```
7. This is a positive test case
```java
// [java] IdenticalCatchBranches false positive #1480
class Foo {
                public boolean classNameExists(String fullyQualifiedClassName) {
                    try {
                        Foo.class.getClassLoader().loadClass(fullyQualifiedClassName);
                        return true; // Class found
                    } catch (ClassNotFoundException e) {
                        return false;
                    } catch (LinkageError e2) {
                        // Class exists, but may be invalid (see https://github.com/pmd/pmd/issues/1131)
                        return true;
                    }
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public IdenticalCatchBranchesRule() {
        super(ASTTryStatement.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        List<ASTCatchStatement> catchStatements = node.findDescendantsOfType(ASTCatchStatement.class);
        Map<ASTBlock, List<ASTCatchStatement>> blockToCatches = new HashMap<>();

        for (ASTCatchStatement catchStmt : catchStatements) {
            ASTBlock block = catchStmt.getFirstChildOfType(ASTBlock.class);
            if (block != null) {
                blockToCatches.computeIfAbsent(block, k -> new ArrayList<>()).add(catchStmt);
            }
        }

        for (Map.Entry<ASTBlock, List<ASTCatchStatement>> entry : blockToCatches.entrySet()) {
            List<ASTCatchStatement> catches = entry.getValue();
            if (catches.size() > 1) {
                Set<JClassSymbol> exceptionTypes = new HashSet<>();
                for (ASTCatchStatement catchStmt : catches) {
                    exceptionTypes.addAll(getExceptionTypes(catchStmt));
                }
                if (exceptionTypes.size() == catches.size()) {
                    addViolation(data, catches.get(0));
                }
            }
        }

        return super.visit(node, data);
    }

    private Set<JClassSymbol> getExceptionTypes(ASTCatchStatement catchStmt) {
        Set<JClassSymbol> result = new HashSet<>();
        NodeStream<ASTType> types = catchStmt.getTypeNode().getTypeImage().stream()
                .map(TypeSystem::fromName)
                .flatMap(ts -> JavaAstUtils.toClassSymbolStream(ts));
        types.forEach(ts -> result.add((JClassSymbol) ts));
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Collapsible statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) { // Can be collapsed into the previous block
            throw e;
        }
    }
}
```
2. This is a positive test case
```java
// Different statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
```
3. This is a negative test case
```java
// Identical statements, with different exception names
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalStateException ise) {
            throw new RuntimeException(ise);
        }
    }
}
```
4. This is a positive test case
```java
// #1158 false positive 1
class Foo {
    {
        try {
            // do something
        } catch (NoSuchFieldException e) {
            throw new IllegalStateException("field not found", e);
        } catch (NoSuchFieldException | NoSuchFieldError e) {
            throw new IllegalArgumentException("field exception ", e);
        }
    }
}
```
5. This is a positive test case
```java
// #1158 false positive 2
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException exception) {
            throw new RuntimeException("Error message 1", exception);
        } catch (IllegalStateException exception) {
            throw new RuntimeException("Error message 2", exception);
        }
    }
}
```
6. This is a positive test case
```java
// False positive with method name mistaken for exception parameter
class Foo {
    static {
        try {
            // do something
        } catch (RuntimeException exception) {
            exception(exception);
        } catch (IllegalStateException exception2) {
            exception2(exception2);
        }
    }

    private static void exception(Exception exception) {
        throw new RuntimeException("Error message 1", exception);
    }


    private static exception2(Exception exception) {
        throw new RuntimeException("Error message 2", exception);
    }
}
```
7. This is a positive test case
```java
// [java] IdenticalCatchBranches false positive #1480
class Foo {
                public boolean classNameExists(String fullyQualifiedClassName) {
                    try {
                        Foo.class.getClassLoader().loadClass(fullyQualifiedClassName);
                        return true; // Class found
                    } catch (ClassNotFoundException e) {
                        return false;
                    } catch (LinkageError e2) {
                        // Class exists, but may be invalid (see https://github.com/pmd/pmd/issues/1131)
                        return true;
                    }
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.List;
import java.util.stream.Collectors;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public IdenticalCatchBranchesRule() {
        super(ASTTryStatement.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        List<ASTCatchClause> catchClauses = node.findDescendantsOfType(ASTCatchClause.class);
        for (int i = 0; i < catchClauses.size(); i++) {
            for (int j = i + 1; j < catchClauses.size(); j++) {
                if (areCatchBranchesIdentical(catchClauses.get(i), catchClauses.get(j))) {
                    addViolation(data, catchClauses.get(j));
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean areCatchBranchesIdentical(ASTCatchClause catchClause1, ASTCatchClause catchClause2) {
        List<ASTStatement> statements1 = catchClause1.findDescendantsOfType(ASTBlockStatement.class).stream()
                .map(ASTBlockStatement::getStatement)
                .collect(Collectors.toList());
        List<ASTStatement> statements2 = catchClause2.findDescendantsOfType(ASTBlockStatement.class).stream()
                .map(ASTBlockStatement::getStatement)
                .collect(Collectors.toList());

        if (statements1.size() != statements2.size()) {
            return false;
        }

        for (int i = 0; i < statements1.size(); i++) {
            if (!statements1.get(i).isEquivalentTo(statements2.get(i))) {
                return false;
            }
        }

        return true;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Collapsible statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) { // Can be collapsed into the previous block
            throw e;
        }
    }
}
```
2. This is a positive test case
```java
// Different statement
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw e;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
```
3. This is a negative test case
```java
// Identical statements, with different exception names
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalStateException ise) {
            throw new RuntimeException(ise);
        }
    }
}
```
4. This is a positive test case
```java
// #1158 false positive 1
class Foo {
    {
        try {
            // do something
        } catch (NoSuchFieldException e) {
            throw new IllegalStateException("field not found", e);
        } catch (NoSuchFieldException | NoSuchFieldError e) {
            throw new IllegalArgumentException("field exception ", e);
        }
    }
}
```
5. This is a positive test case
```java
// #1158 false positive 2
class Foo {
    {
        try {
            // do something
        } catch (IllegalArgumentException exception) {
            throw new RuntimeException("Error message 1", exception);
        } catch (IllegalStateException exception) {
            throw new RuntimeException("Error message 2", exception);
        }
    }
}
```
6. This is a positive test case
```java
// False positive with method name mistaken for exception parameter
class Foo {
    static {
        try {
            // do something
        } catch (RuntimeException exception) {
            exception(exception);
        } catch (IllegalStateException exception2) {
            exception2(exception2);
        }
    }

    private static void exception(Exception exception) {
        throw new RuntimeException("Error message 1", exception);
    }


    private static exception2(Exception exception) {
        throw new RuntimeException("Error message 2", exception);
    }
}
```
7. This is a positive test case
```java
// [java] IdenticalCatchBranches false positive #1480
class Foo {
                public boolean classNameExists(String fullyQualifiedClassName) {
                    try {
                        Foo.class.getClassLoader().loadClass(fullyQualifiedClassName);
                        return true; // Class found
                    } catch (ClassNotFoundException e) {
                        return false;
                    } catch (LinkageError e2) {
                        // Class exists, but may be invalid (see https://github.com/pmd/pmd/issues/1131)
                        return true;
                    }
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule {
    public IdenticalCatchBranchesRule() {
        super(ASTTryStatement.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        List<ASTCatchStatement> catches = node.getCatchStatements();
        Map<List<ASTStatement>, List<ASTCatchStatement>> branches = new HashMap<>();

        for (ASTCatchStatement catchStmt : catches) {
            ASTBlock block = catchStmt.getFirstChildOfType(ASTBlock.class);
            if (block != null) {
                List<ASTStatement> statements = block.findDescendantsOfType(ASTStatement.class);
                branches.computeIfAbsent(statements, k -> new ArrayList<>()).add(catchStmt);
            }
        }

        for (List<ASTCatchStatement> catchGroup : branches.values()) {
            if (catchGroup.size() > 1 && areBranchesIdentical(catchGroup)) {
                addViolation(data, catchGroup.get(1));
            }
        }

        return super.visit(node, data);
    }

    private boolean areBranchesIdentical(List<ASTCatchStatement> catchGroup) {
        if (catchGroup.size() < 2) {
            return false;
        }

        ASTCatchStatement first = catchGroup.get(0);
        ASTBlock firstBlock = first.getFirstChildOfType(ASTBlock.class);
        List<ASTStatement> firstStatements = firstBlock.findDescendantsOfType(ASTStatement.class);

        for (int i = 1; i < catchGroup.size(); i++) {
            ASTCatchStatement current = catchGroup.get(i);
            ASTBlock currentBlock = current.getFirstChildOfType(ASTBlock.class);
            List<ASTStatement> currentStatements = currentBlock.findDescendantsOfType(ASTStatement.class);

            if (!areStatementsIdentical(firstStatements, currentStatements)) {
                return false;
            }
        }

        return true;
    }

    private boolean areStatementsIdentical(List<ASTStatement> firstStatements, List<ASTStatement> currentStatements) {
        if (firstStatements.size() != currentStatements.size()) {
            return false;
        }

        for (int i = 0; i < firstStatements.size(); i++) {
            ASTStatement firstStmt = firstStatements.get(i);
            ASTStatement currentStmt = currentStatements.get(i);

            if (!areASTNodesIdentical(firstStmt, currentStmt)) {
                return false;
            }
        }

        return true;
    }

    private boolean areASTNodesIdentical(JavaNode firstNode, JavaNode currentNode) {
        if (!firstNode.getClass().equals(currentNode.getClass())) {
            return false;
        }

        if (firstNode instanceof ASTStatementExpression) {
            ASTStatementExpression firstExprStmt = (ASTStatementExpression) firstNode;
            ASTStatementExpression currentExprStmt = (ASTStatementExpression) currentNode;
            return areASTNodesIdentical(firstExprStmt.getFirstChildOfType(ASTExpression.class), currentExprStmt.getFirstChildOfType(ASTExpression.class));
        }

        if (firstNode instanceof ASTMethodCall) {
            ASTMethodCall firstMethodCall = (ASTMethodCall) firstNode;
            ASTMethodCall currentMethodCall = (ASTMethodCall) currentNode;

            if (!firstMethodCall.getImage().equals(currentMethodCall.getImage())) {
                return false;
            }

            List<ASTExpression> firstArgs = firstMethodCall.findDescendantsOfType(ASTExpression.class);
            List<ASTExpression> currentArgs = currentMethodCall.findDescendantsOfType(ASTExpression.class);

            if (firstArgs.size() != currentArgs.size()) {
                return false;
            }

            for (int i = 0; i < firstArgs.size(); i++) {
                if (!areASTNodesIdentical(firstArgs.get(i), currentArgs.get(i))) {
                    return false;
                }
            }

            return true;
        }

        if (firstNode instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression firstPrimaryExpr = (ASTPrimaryExpression) firstNode;
            ASTPrimaryExpression currentPrimaryExpr = (ASTPrimaryExpression) currentNode;

            ASTPrimaryPrefix firstPrefix = firstPrimaryExpr.getFirstChildOfType(ASTPrimaryPrefix.class);
            ASTPrimaryPrefix currentPrefix = currentPrimaryExpr.getFirstChildOfType(ASTPrimaryPrefix.class);

            if (!areASTNodesIdentical(firstPrefix, currentPrefix)) {
                return false;
            }

            List<ASTPrimarySuffix> firstSuffixes = firstPrimaryExpr.findDescendantsOfType(ASTPrimarySuffix.class);
            List<ASTPrimarySuffix> currentSuffixes = currentPrimaryExpr.findDescendantsOfType(ASTPrimarySuffix.class);

            if (firstSuffixes.size() != currentSuffixes.size()) {
                return false;
            }

            for (int i = 0; i < firstSuffixes.size(); i++) {
                if (!areASTNodesIdentical(firstSuffixes.get(i), currentSuffixes.get(i))) {
                    return false;
                }
            }

            return true;
        }

        if (firstNode instanceof ASTPrimaryPrefix) {
            ASTPrimaryPrefix firstPrefix = (ASTPrimaryPrefix) firstNode;
            ASTPrimaryPrefix currentPrefix = (ASTPrimaryPrefix) currentNode;

            if (!firstPrefix.getImage().equals(currentPrefix.getImage())) {
                return false;
            }

            return true;
        }

        if (firstNode instanceof ASTPrimarySuffix) {
            ASTPrimarySuffix firstSuffix = (ASTPrimarySuffix) firstNode;
            ASTPrimarySuffix currentSuffix = (ASTPrimarySuffix) currentNode;

            if (!firstSuffix.getImage().equals(currentSuffix.getImage())) {
                return false;
            }

            if (firstSuffix instanceof ASTArguments && currentSuffix instanceof ASTArguments) {
                ASTArguments firstArgs = (ASTArguments) firstSuffix;
                ASTArguments currentArgs = (ASTArguments) currentSuffix;

                List<ASTExpression> firstExprs = firstArgs.findDescendantsOfType(ASTExpression.class);
                List<ASTExpression> currentExprs = currentArgs.findDescendantsOfType(ASTExpression.class);

                if (firstExprs.size() != currentExprs.size()) {
                    return false;
                }

                for (int i = 0; i < firstExprs.size(); i++) {
                    if (!areASTNodesIdentical(firstExprs.get(i), currentExprs.get(i))) {
                        return false;
                    }
                }
            }

            return true;
        }

        if (firstNode instanceof ASTLiteral) {
            ASTLiteral firstLiteral = (ASTLiteral) firstNode;
            ASTLiteral currentLiteral = (ASTLiteral) currentNode;

            return firstLiteral.getImage().equals(currentLiteral.getImage());
        }

        if (firstNode instanceof ASTVariableDeclaratorId) {
            ASTVariableDeclaratorId firstVar = (ASTVariableDeclaratorId) firstNode;
            ASTVariableDeclaratorId currentVar = (ASTVariableDeclaratorId) currentNode;

            return firstVar.getImage().equals(currentVar.getImage());
        }

        if (firstNode instanceof ASTName) {
            ASTName firstName = (ASTName) firstNode;
            ASTName currentName = (ASTName) currentNode;

            return firstName.getImage().equals(currentName.getImage());
        }

        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 156.121333360672 秒
