开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getParent() instanceof ASTConstructorDeclaration) {
            ASTPrimaryExpression primaryExpression = node.getLeftOperand().getFirstDescendantOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstDescendantOfType(ASTPrimaryPrefix.class);
                if (primaryPrefix != null && primaryPrefix.getQualifier() == null) {
                    JFieldSymbol fieldSymbol = primaryPrefix.getSymbol(JFieldSymbol.class);
                    if (fieldSymbol != null && fieldSymbol.isStatic() && !fieldSymbol.isFinal()) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        List<ASTFieldDeclaration> staticFields = node.getScope().getDeclarations(ASTFieldDeclaration.class)
                .filter(ASTFieldDeclaration::isStatic)
                .filter(field -> !field.hasModifier(ASTFieldDeclaration.Modifier.FINAL))
                .toList();

        for (ASTAssignmentExpression assignment : node.findDescendantsOfType(ASTAssignmentExpression.class)) {
            ASTPrimaryExpression primaryExpression = assignment.getLeftOperand().getFirstDescendantOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstDescendantOfType(ASTPrimaryPrefix.class);
                if (primaryPrefix != null) {
                    ASTVariableDeclaratorId varId = primaryPrefix.getFirstDescendantOfType(ASTVariableDeclaratorId.class);
                    if (varId != null) {
                        JFieldSymbol fieldSymbol = varId.getSymbol();
                        if (fieldSymbol != null && staticFields.stream().anyMatch(field -> field.getDeclaratorId().getSymbol() == fieldSymbol)) {
                            addViolation(data, assignment);
                        }
                    }
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        JFieldSymbol fieldSymbol = getFieldSymbol(node.getLeftOperand());
        if (fieldSymbol != null && fieldSymbol.isStatic() && !fieldSymbol.isFinal()) {
            if (node.getAncestor(ASTConstructorDeclaration.class) != null) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private JFieldSymbol getFieldSymbol(ASTPrimaryExpression primaryExpression) {
        ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (primaryPrefix != null && primaryPrefix.getChild(0) instanceof ASTVariableDeclaratorId) {
            ASTVariableDeclaratorId variableDeclaratorId = (ASTVariableDeclaratorId) primaryPrefix.getChild(0);
            JVariableSymbol variableSymbol = variableDeclaratorId.getSymbol();
            if (variableSymbol instanceof JFieldSymbol) {
                return (JFieldSymbol) variableSymbol;
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTPrimaryExpression primaryExpression = node.getLeftOperand();
        ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (primaryPrefix != null) {
            ASTVariableDeclaratorId varId = primaryPrefix.getFirstChildOfType(ASTVariableDeclaratorId.class);
            if (varId != null) {
                JVariableSymbol symbol = varId.getSymbol();
                if (symbol instanceof JFieldSymbol) {
                    JFieldSymbol fieldSymbol = (JFieldSymbol) symbol;
                    if (fieldSymbol.isStatic() && !fieldSymbol.isFinal()) {
                        if (node.getFirstParentOfType(ASTConstructorDeclaration.class) != null) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        List<JFieldSymbol> nonFinalStaticFields = new ArrayList<>();
        for (ASTFieldDeclaration field : node.getTopLevelClassDeclaration().getFields()) {
            if (field.isStatic() && !field.isFinal()) {
                for (ASTVariableDeclaratorId id : field.getVariableDeclaratorIds()) {
                    nonFinalStaticFields.add(id.getSymbol());
                }
            }
        }
        node.getEnclosingClass().addUserData("nonFinalStaticFields", nonFinalStaticFields);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        ASTPrimaryExpression primaryExpression = node.getLeftOperand();
        if (primaryExpression != null) {
            ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (primaryPrefix != null) {
                JFieldSymbol fieldSymbol = primaryPrefix.getSymbol();
                if (fieldSymbol != null && fieldSymbol.isStatic() && !fieldSymbol.isFinal()) {
                    List<JFieldSymbol> nonFinalStaticFields = node.getEnclosingClass().getUserData("nonFinalStaticFields");
                    if (nonFinalStaticFields.contains(fieldSymbol)) {
                        if (node.getAncestorOfType(ASTConstructorDeclaration.class) != null) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 122.13815402984619 秒
