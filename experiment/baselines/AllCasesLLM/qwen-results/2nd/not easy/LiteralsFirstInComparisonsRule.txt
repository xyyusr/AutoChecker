开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(ASTEqualsExpression.class, ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTEqualsExpression node, Object data) {
        if (node.getOperator().equals(ASTEqualsExpression.EQUALS)) {
            JType leftType = node.getLeftOperand().getType();
            JType rightType = node.getRightOperand().getType();

            if (isStringType(leftType) && isStringType(rightType)) {
                if (isLiteral(node.getLeftOperand()) && !isLiteral(node.getRightOperand())) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getName();
        if ("equals".equals(methodName) || "equalsIgnoreCase".equals(methodName) || 
            "compareTo".equals(methodName) || "compareToIgnoreCase".equals(methodName) || 
            "contentEquals".equals(methodName)) {

            NodeStream<ASTPrimaryPrefix> primaryPrefixes = node.childrenOfType(ASTPrimaryPrefix.class);
            if (primaryPrefixes.size() != 1) return super.visit(node, data);

            ASTPrimaryPrefix prefix = primaryPrefixes.first();
            if (prefix.getFirstChildOfType(ASTPrimaryExpression.class) != null) {
                JType type = prefix.getType();
                if (isStringType(type) || isCharacterType(type)) {
                    NodeStream<ASTPrimarySuffix> suffixes = node.childrenOfType(ASTPrimarySuffix.class);
                    if (suffixes.size() != 1) return super.visit(node, data);

                    ASTPrimarySuffix suffix = suffixes.first();
                    if (suffix.getChildCount() >= 2) {
                        ASTPrimaryExpression expression = (ASTPrimaryExpression) suffix.getChild(1);
                        if (!isLiteral(expression) && isLiteral(node.getFirstChildOfType(ASTPrimaryExpression.class))) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringType(JType type) {
        return TypeSystem.STRING_TYPE.equals(type);
    }

    private boolean isCharacterType(JType type) {
        return TypeSystem.CHAR_TYPE.equals(type) || TypeSystem.CHAR_WRAPPER_TYPE.equals(type);
    }

    private boolean isLiteral(ASTPrimaryExpression expr) {
        ASTPrimaryPrefix prefix = expr.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix.getChildCount() == 1) {
            JNode child = prefix.getChild(0);
            return child instanceof ASTLiteral || child instanceof ASTName && isStaticFinalString(child);
        }
        return false;
    }

    private boolean isStaticFinalString(JNode node) {
        if (node instanceof ASTName) {
            ASTName name = (ASTName) node;
            JFieldSymbol fieldSymbol = name.getReferencedField();
            if (fieldSymbol != null) {
                return fieldSymbol.isStatic() && fieldSymbol.isFinal() && TypeSystem.STRING_TYPE.equals(fieldSymbol.getType());
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getName();
        if (methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals")) {
            NodeStream<ASTPrimaryExpression> arguments = node.getArguments();
            if (arguments.size() == 2) {
                ASTPrimaryExpression firstArg = arguments.first();
                ASTPrimaryExpression secondArg = arguments.last();

                if (isLiteral(firstArg) && !isLiteral(secondArg)) {
                    if (!isStringLiteral(secondArg) && !isStaticFinalString(secondArg)) {
                        addViolation(data, node);
                    }
                } else if (!isLiteral(firstArg) && isLiteral(secondArg)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isLiteral(ASTPrimaryExpression node) {
        return node.getFirstChildOfType(ASTLiteral.class) != null;
    }

    private boolean isStringLiteral(ASTPrimaryExpression node) {
        ASTLiteral literal = node.getFirstChildOfType(ASTLiteral.class);
        return literal != null && literal.getType() == Type.String;
    }

    private boolean isStaticFinalString(ASTPrimaryExpression node) {
        JVariableSymbol symbol = node.getQualifier().getReferencedSym();
        return symbol instanceof JFieldSymbol && ((JFieldSymbol) symbol).isStatic() && ((JFieldSymbol) symbol).isFinal() && ((JFieldSymbol) symbol).getType() == JType.STRING;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class, ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        JTypeMirror receiverType = node.getReceiverType();
        if (TypeTestUtil.isA(receiverType, String.class)) {
            String methodName = node.getMethodName();
            if ("equals".equals(methodName) || "equalsIgnoreCase".equals(methodName) ||
                "compareTo".equals(methodName) || "compareToIgnoreCase".equals(methodName) ||
                "contentEquals".equals(methodName)) {
                NodeStream<ASTPrimaryExpression> arguments = node.getArguments().children(ASTPrimaryExpression.class);
                if (arguments.size() == 1) {
                    ASTPrimaryExpression firstArgument = arguments.first();
                    ASTPrimaryExpression secondArgument = node.getFirstChildOfType(ASTPrimaryExpression.class);
                    if (secondArgument != null && firstArgument != null) {
                        if (isStringLiteral(secondArgument) && !isStringLiteral(firstArgument)) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.isEquality()) {
            ASTPrimaryExpression left = node.getLeftOperand().getFirstChildOfType(ASTPrimaryExpression.class);
            ASTPrimaryExpression right = node.getRightOperand().getFirstChildOfType(ASTPrimaryExpression.class);
            if (left != null && right != null) {
                if (isStringLiteral(right) && !isStringLiteral(left)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringLiteral(ASTPrimaryExpression expr) {
        ASTPrimaryPrefix prefix = expr.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix != null) {
            ASTLiteral literal = prefix.getFirstChildOfType(ASTLiteral.class);
            if (literal != null) {
                return literal.isStringLiteral();
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import java.util.Optional;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getMethodName();
        if (methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals")) {
            Optional<ASTLiteral> literal = node.arguments().firstChild(ASTLiteral.class);
            if (literal.isPresent() && literal.get().isStringLiteral()) {
                return data;
            }

            Optional<ASTVariableDeclaratorId> variable = node.arguments().lastChild(ASTVariableDeclaratorId.class);
            if (variable.isPresent() && !isStaticFinalString(node.getQualifier(), variable.get())) {
                addViolation(data, node);
            }
        }
        return data;
    }

    private boolean isStaticFinalString(ASTPrimaryExpression qualifier, ASTVariableDeclaratorId variable) {
        if (qualifier != null) {
            Type type = qualifier.getType();
            if (type instanceof JClassSymbol) {
                JClassSymbol classSymbol = (JClassSymbol) type;
                return classSymbol.getDeclaredFields().stream()
                        .filter(field -> field.isStatic() && field.isFinal() && field.getType().isString())
                        .map(JFieldSymbol::getName)
                        .anyMatch(name -> name.equals(variable.getName()));
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        JMethodSymbol methodSymbol = node.getMethodSignature().getSymbol();
        if (methodSymbol != null) {
            String methodName = methodSymbol.getName();
            if (methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals")) {
                List<ASTPrimaryExpression> arguments = node.getArguments();
                if (arguments.size() == 2) {
                    ASTPrimaryExpression firstArgument = arguments.get(0);
                    ASTPrimaryExpression secondArgument = arguments.get(1);
                    Type firstArgumentType = firstArgument.getType();
                    Type secondArgumentType = secondArgument.getType();
                    Type stringType = TypeSystem.STRING;

                    if (firstArgumentType == stringType && secondArgumentType == stringType) {
                        ASTPrimaryPrefix firstPrefix = firstArgument.getFirstChildOfType(ASTPrimaryPrefix.class);
                        ASTPrimaryPrefix secondPrefix = secondArgument.getFirstChildOfType(ASTPrimaryPrefix.class);

                        if (firstPrefix != null && firstPrefix.getFirstChildOfType(ASTLiteral.class) == null) {
                            if (secondPrefix != null && secondPrefix.getFirstChildOfType(ASTLiteral.class) != null) {
                                addViolation(data, node);
                            }
                        }
                    } else if (firstArgumentType == stringType && secondArgumentType.isSubtypeOf(stringType)) {
                        ASTPrimaryPrefix secondPrefix = secondArgument.getFirstChildOfType(ASTPrimaryPrefix.class);
                        if (secondPrefix != null && secondPrefix.getFirstChildOfType(ASTLiteral.class) != null) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 166.9639024734497 秒
