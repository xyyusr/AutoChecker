开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final String JUNIT3_TEST_CLASS = "junit.framework.TestCase";
    private static final String JUNIT4_TEST_ANNOTATION = "org.junit.Test";
    private static final String JUNIT5_TEST_ANNOTATION = "org.junit.jupiter.api.Test";
    private static final String JUNIT5_PARAMETERIZED_TEST_ANNOTATION = "org.junit.jupiter.params.ParameterizedTest";

    private static final String INSTANCE_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT3_TEST_METHOD_PATTERN = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT4_TEST_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT5_TEST_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";

    private boolean isJUnit3TestClass;
    private Set<String> testAnnotations;

    public MethodNamingConventionsRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTMethodDeclaration.class);
        testAnnotations = new HashSet<>();
        testAnnotations.add(JUNIT4_TEST_ANNOTATION);
        testAnnotations.add(JUNIT5_TEST_ANNOTATION);
        testAnnotations.add(JUNIT5_PARAMETERIZED_TEST_ANNOTATION);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        isJUnit3TestClass = false;
        for (ASTAnnotation annotation : node.getAnnotations()) {
            if (annotation.getTypeName().equals("Test")) {
                isJUnit3TestClass = true;
                break;
            }
        }
        JClassType classType = node.getType();
        if (classType != null && classType.isSubtypeOf(JUNIT3_TEST_CLASS)) {
            isJUnit3TestClass = true;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        if (node.isNative()) {
            if (!methodName.matches(NATIVE_METHOD_PATTERN)) {
                addViolation(data, node);
            }
        } else if (node.isStatic()) {
            if (!methodName.matches(STATIC_METHOD_PATTERN)) {
                addViolation(data, node);
            }
        } else if (isJUnit3TestClass && methodName.matches("test[A-Z][a-zA-Z0-9]*")) {
            if (!methodName.matches(JUNIT3_TEST_METHOD_PATTERN)) {
                addViolation(data, node);
            }
        } else if (node.hasAnnotation(JUNIT4_TEST_ANNOTATION) || node.hasAnnotation(JUNIT5_TEST_ANNOTATION) || node.hasAnnotation(JUNIT5_PARAMETERIZED_TEST_ANNOTATION)) {
            if (!methodName.matches(JUNIT4_TEST_METHOD_PATTERN) && !methodName.matches(JUNIT5_TEST_METHOD_PATTERN)) {
                addViolation(data, node);
            }
        } else {
            if (!methodName.matches(INSTANCE_METHOD_PATTERN)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        if (node.isJUnitTest()) {
            if (node.hasAnnotation("org.junit.Test") || node.hasAnnotation("org.junit.jupiter.api.Test") || node.hasAnnotation("org.junit.jupiter.params.ParameterizedTest")) {
                if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                    addViolation(data, node);
                }
            } else if (node.hasAnnotation("junit.framework.Test")) {
                if (!methodName.matches("test[A-Z0-9][a-zA-Z0-9]*")) {
                    addViolation(data, node);
                }
            }
        } else if (node.isNative()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else if (node.isStatic()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean hasAnnotation(ASTMethodDeclaration node, String annotationName) {
        for (ASTAnnotation annotation : node.annotations()) {
            if (annotation.getType().getName().equals(annotationName)) {
                return true;
            }
        }
        return false;
    }

    private boolean isJUnitTest(ASTMethodDeclaration node) {
        return hasAnnotation(node, "org.junit.Test") || hasAnnotation(node, "org.junit.jupiter.api.Test") || hasAnnotation(node, "org.junit.jupiter.params.ParameterizedTest") || hasAnnotation(node, "junit.framework.Test");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final Pattern INSTANCE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern STATIC_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern NATIVE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT3_TEST_METHOD_PATTERN = Pattern.compile("test[A-Z0-9][a-zA-Z0-9]*");
    private static final Pattern JUNIT4_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT5_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");

    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class, ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        if (node.isNative()) {
            if (!NATIVE_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        } else if (node.isStatic()) {
            if (!STATIC_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        } else if (isJUnit3TestMethod(node)) {
            if (!JUNIT3_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        } else if (isJUnit4TestMethod(node) || isJUnit5TestMethod(node)) {
            if (!JUNIT4_TEST_METHOD_PATTERN.matcher(methodName).matches() && !JUNIT5_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        } else {
            if (!INSTANCE_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isJUnit3TestMethod(ASTMethodDeclaration node) {
        ASTClassOrInterfaceDeclaration classNode = node.getNearestAncestorOfType(ASTClassOrInterfaceDeclaration.class);
        if (classNode != null) {
            JClassType classType = classNode.getType();
            return classType != null && classType.isSubtypeOf("junit.framework.TestCase");
        }
        return false;
    }

    private boolean isJUnit4TestMethod(ASTMethodDeclaration node) {
        for (ASTAnnotation annotation : node.getAnnotations()) {
            JAnnotation jAnnotation = annotation.getSymbol();
            if (jAnnotation != null && "org.junit.Test".equals(jAnnotation.getQualifiedName())) {
                return true;
            }
        }
        return false;
    }

    private boolean isJUnit5TestMethod(ASTMethodDeclaration node) {
        for (ASTAnnotation annotation : node.getAnnotations()) {
            JAnnotation jAnnotation = annotation.getSymbol();
            if (jAnnotation != null && ("org.junit.jupiter.api.Test".equals(jAnnotation.getQualifiedName()) || "org.junit.jupiter.params.ParameterizedTest".equals(jAnnotation.getQualifiedName()))) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.List;
import java.util.Optional;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class, ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        boolean isJUnit3Test = isJUnit3TestClass(node) && methodName.startsWith("test");
        boolean isJUnit4Test = isJUnit4TestClass(node) && hasJUnit4TestAnnotation(node);
        boolean isJUnit5Test = isJUnit5TestClass(node) && hasJUnit5TestAnnotation(node);

        if (isJUnit3Test) {
            if (!methodName.matches("test[A-Z0-9][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else if (isJUnit4Test || isJUnit5Test) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else if (node.isNative()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else if (node.isStatic()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        }
        return data;
    }

    private boolean isJUnit3TestClass(ASTMethodDeclaration node) {
        ASTClassOrInterfaceDeclaration classNode = node.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
        return classNode != null && classNode.hasSuperclassExact("junit.framework.TestCase");
    }

    private boolean isJUnit4TestClass(ASTMethodDeclaration node) {
        ASTClassOrInterfaceDeclaration classNode = node.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
        return classNode != null && classNode.hasImportDeclaration("org.junit.Test");
    }

    private boolean isJUnit5TestClass(ASTMethodDeclaration node) {
        ASTClassOrInterfaceDeclaration classNode = node.getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
        return classNode != null && (classNode.hasImportDeclaration("org.junit.jupiter.api.Test") || classNode.hasImportDeclaration("org.junit.jupiter.params.ParameterizedTest"));
    }

    private boolean hasJUnit4TestAnnotation(ASTMethodDeclaration node) {
        return node.hasAnnotation("org.junit.Test");
    }

    private boolean hasJUnit5TestAnnotation(ASTMethodDeclaration node) {
        return node.hasAnnotation("org.junit.jupiter.api.Test") || node.hasAnnotation("org.junit.jupiter.params.ParameterizedTest");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    private static final Pattern INSTANCE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern STATIC_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern NATIVE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT3_TEST_METHOD_PATTERN = Pattern.compile("test[A-Z0-9][a-zA-Z0-9]*");
    private static final Pattern JUNIT4_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT5_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");

    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        if (node.isNative() && !NATIVE_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node);
        } else if (node.isStatic() && !STATIC_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node);
        } else if (isJUnit3TestMethod(node)) {
            if (!JUNIT3_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        } else if (isJUnit4TestMethod(node) || isJUnit5TestMethod(node)) {
            if (!JUNIT4_TEST_METHOD_PATTERN.matcher(methodName).matches() && !JUNIT5_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
                addViolation(data, node);
            }
        } else if (!INSTANCE_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isJUnit3TestMethod(ASTMethodDeclaration node) {
        return node.getParent() instanceof ASTClassOrInterfaceDeclaration &&
               ((ASTClassOrInterfaceDeclaration) node.getParent()).hasSuperClass("junit.framework.TestCase");
    }

    private boolean isJUnit4TestMethod(ASTMethodDeclaration node) {
        return node.hasAnnotation("org.junit.Test");
    }

    private boolean isJUnit5TestMethod(ASTMethodDeclaration node) {
        return node.hasAnnotation("org.junit.jupiter.api.Test") || node.hasAnnotation("org.junit.jupiter.params.ParameterizedTest");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 172.44732451438904 秒
