开始

========================================== Rule AvoidDuplicateLiteralsRule ===========================================
一共 11 个测试用例
正例 3 个
反例 8 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
2. This is a positive test case
```java
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}
```
3. This is a negative test case
```java
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
```
4. This is a negative test case
```java
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
```
5. This is a positive test case
```java
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
6. This is a negative test case
```java
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}
```
7. This is a positive test case
```java
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}
```
8. This is a negative test case
```java
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}
```
9. This is a negative test case
```java
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}
```
10. This is a negative test case
```java
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}
```
11. This is a negative test case
```java
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
2. This is a positive test case
```java
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}
```
3. This is a negative test case
```java
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
```
4. This is a negative test case
```java
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
```
5. This is a positive test case
```java
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
6. This is a negative test case
```java
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}
```
7. This is a positive test case
```java
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}
```
8. This is a negative test case
```java
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}
```
9. This is a negative test case
```java
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}
```
10. This is a negative test case
```java
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}
```
11. This is a negative test case
```java
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    private int duplicateCount = 0;
    private Set<String> seenStrings = new HashSet<>();
    private int minLength = 3;

    public AvoidDuplicateLiteralsRule() {
        super(1, 1);
        setProperty("duplicateCountThreshold", 4);
        setProperty("minLength", 3);
    }

    @Override
    public Object visit(ASTLiteralExpression node, Object data) {
        String literal = node.getImage();
        if (literal != null && literal.length() >= minLength && !seenStrings.contains(literal)) {
            seenStrings.add(literal);
            duplicateCount++;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        if (node.getImage() instanceof String && node.getImage().equals("bzz")) {
            duplicateCount = 0;
            seenStrings.clear();
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (duplicateCount >= getPropertyAsInt("duplicateCountThreshold")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTParameter node, Object data) {
        if (node.getImage() instanceof ASTLiteralExpression) {
            ASTLiteralExpression literal = (ASTLiteralExpression) node.getImage();
            String literalImage = literal.getImage();
            if (literalImage != null && literalImage.length() >= minLength && !seenStrings.contains(literalImage)) {
                seenStrings.add(literalImage);
                duplicateCount++;
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableDeclarator node, Object data) {
        if (node.getImage() instanceof ASTStringLiteralExpression) {
            ASTStringLiteralExpression stringLiteral = (ASTStringLiteralExpression) node.getImage();
            String literalImage = stringLiteral.getImage();
            if (literalImage != null && literalImage.length() >= minLength && !seenStrings.contains(literalImage)) {
                seenStrings.add(literalImage);
                duplicateCount++;
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStringLiteralExpression node, Object data) {
        String literal = node.getImage();
        if (literal != null && literal.length() >= minLength && !seenStrings.contains(literal)) {
            seenStrings.add(literal);
            duplicateCount++;
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
2. This is a positive test case
```java
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}
```
3. This is a negative test case
```java
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
```
4. This is a negative test case
```java
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
```
5. This is a positive test case
```java
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
6. This is a negative test case
```java
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}
```
7. This is a positive test case
```java
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}
```
8. This is a negative test case
```java
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}
```
9. This is a negative test case
```java
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}
```
10. This is a negative test case
```java
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}
```
11. This is a negative test case
```java
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

出现语法错误，这一轮舍弃，直接重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
2. This is a positive test case
```java
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}
```
3. This is a negative test case
```java
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
```
4. This is a negative test case
```java
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
```
5. This is a positive test case
```java
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
6. This is a negative test case
```java
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}
```
7. This is a positive test case
```java
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}
```
8. This is a negative test case
```java
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}
```
9. This is a negative test case
```java
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}
```
10. This is a negative test case
```java
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}
```
11. This is a negative test case
```java
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    private static final int DUPLICATE_THRESHOLD = 4;
    private static final int MIN_LITERAL_LENGTH = 3;

    public AvoidDuplicateLiteralsRule() {
        super( "AvoidDuplicateLiteralsRule", "Code containing duplicate String literals can usually be improved by declaring the String as a constant field.", "error", false, false, null);
    }

    @Override
    public Object visit(ASTLiteral node, Object data) {
        if (!(node.getImage().getClass().equals(String.class))) {
            return super.visit(node, data);
        }

        String literal = (String) node.getImage();
        ASTMethodCall node = (ASTMethodCall) data;

        if (node == null || node.getMethodName() != null) {
            return super.visit(node, data);
        }

        boolean isDuplicate = false;

        for (Object argument : node.getArguments()) {
            if (argument instanceof ASTLiteral && ((ASTLiteral) argument).getImage().equals(literal)) {
                isDuplicate = true;
                break;
            }
        }

        if (isDuplicate && node.getArguments().size() >= DUPLICATE_THRESHOLD && literal.length() >= MIN_LITERAL_LENGTH) {
            addViolation(this, data, "Duplicate string literal '" + literal + "' found.");
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (data == null) {
            data = node;
        }

        if (node.getMethodName() == null) {
            for (Object argument : node.getArguments()) {
                if (argument instanceof ASTLiteral) {
                    return visit((ASTLiteral) argument, data);
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldAccess node, Object data) {
        if (data == null) {
            data = node;
        }

        if (node.getType() instanceof ASTArrayAccess) {
            return super.visit(node, data);
        }

        return visit((ASTLiteral) node.getExpression(), data);
    }

    @Override
    public Object visit(ASTArrayAccess node, Object data) {
        if (data == null) {
            data = node;
        }

        if (node.getIndex() instanceof ASTLiteral) {
            return visit((ASTLiteral) node.getIndex(), data);
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAnnotation node, Object data) {
        if (data == null) {
            data = node;
        }

        if (node.getMembers() == null) {
            for (Object member : node.getMembers()) {
                if (member instanceof ASTLiteral) {
                    return visit((ASTLiteral) member, data);
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLiteral node, Object data) {
        if (!(node.getImage().getClass().equals(String.class))) {
            return super.visit(node, data);
        }

        if (node.getImage().length() < MIN_LITERAL_LENGTH) {
            return super.visit(node, data);
        }

        String literal = (String) node.getImage();

        ASTAnnotation node = (ASTAnnotation) data;

        if (node == null || node.getMembers() == null) {
            return super.visit(node, data);
        }

        boolean isDuplicate = false;

        for (Object member : node.getMembers()) {
            if (member instanceof ASTLiteral && ((ASTLiteral) member).getImage().equals(literal)) {
                isDuplicate = true;
                break;
            }
        }

        if (isDuplicate && node.getMembers().size() >= DUPLICATE_THRESHOLD) {
            addViolation(this, data, "Duplicate string literal '" + literal + "' found.");
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        if (!(node.getImage().getClass().equals(String.class))) {
            return super.visit(node, data);
        }

        String name = (String) node.getImage();

        Pattern pattern = Pattern.compile(".*\\s.");

        if (pattern.matcher(name).matches()) {
            return super.visit(node, data);
        }

        return visit((ASTLiteral) node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
2. This is a positive test case
```java
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}
```
3. This is a negative test case
```java
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
```
4. This is a negative test case
```java
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
```
5. This is a positive test case
```java
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
6. This is a negative test case
```java
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}
```
7. This is a positive test case
```java
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}
```
8. This is a negative test case
```java
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}
```
9. This is a negative test case
```java
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}
```
10. This is a negative test case
```java
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}
```
11. This is a negative test case
```java
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTLiteral node, Object data) {
        if (node.getImage().length() < 3) {
            return data;
        }
        
        NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
        if (literals.size() >= 4) {
            addViolation(data, node);
        }
        return data;
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        if (node.getVariableDeclarators().size() > 1) {
            NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
            if (literals.size() >= 4) {
                addViolation(data, node);
            }
        }
        return data;
    }

    @Override
    public Object visit(ASTAnnotatable node, Object data) {
        if (node.getAnnotations().size() > 1) {
            NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
            if (literals.size() >= 4) {
                addViolation(data, node);
            }
        }
        return data;
    }

    @Override
    public Object visit(ASTArrayInitializer node, Object data) {
        NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
        if (literals.size() >= 4) {
            addViolation(data, node);
        }
        return data;
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
        if (literals.size() >= 4) {
            addViolation(data, node);
        }
        return data;
    }

    @Override
    public Object visit(ASTExpressionList node, Object data) {
        NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
        if (literals.size() >= 4) {
            addViolation(data, node);
        }
        return data;
    }

    @Override
    public Object visit(ASTMethodCallExpression node, Object data) {
        if (node.getType() == InternalJavaNodeTypes.METHOD_INVOCATION) {
            NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
            if (literals.size() >= 4) {
                addViolation(data, node);
            }
        }
        return data;
    }

    @Override
    public Object visit(ASTAnnotation node, Object data) {
        NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
        if (literals.size() >= 4) {
            addViolation(data, node);
        }
        return data;
    }

    @Override
    public Object visit(ASTAnnotationMemberValuePair node, Object data) {
        NodeList<ASTLiteral> literals = findDuplicateLiterals(node);
        if (literals.size() >= 4) {
            addViolation(data, node);
        }
        return data;
    }

    private NodeList<ASTLiteral> findDuplicateLiterals(Node node) {
        NodeList<ASTLiteral> literals = new NodeList<>();
        if (node instanceof ASTLiteral) {
            ASTLiteral literal = (ASTLiteral) node;
            if (!literals.contains(literal)) {
                literals.add(literal);
            }
        } else if (node instanceof ASTMethodDeclaration) {
            ASTMethodDeclaration method = (ASTMethodDeclaration) node;
            NodeList<ASTExpression> parameters = method.getParameters();
            for (ASTExpression parameter : parameters) {
                if (parameter instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) parameter;
                    if (!literals.contains(literal)) {
                        literals.add(literal);
                    }
                }
            }
        } else if (node instanceof ASTMethodInvocation) {
            ASTMethodInvocation method = (ASTMethodInvocation) node;
            ASTExpressionList arguments = method.getArguments();
            for (ASTExpression argument : arguments) {
                if (argument instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) argument;
                    if (!literals.contains(literal)) {
                        literals.add(literal);
                    }
                }
            }
        } else if (node instanceof ASTFieldDeclaration) {
            ASTFieldDeclaration field = (ASTFieldDeclaration) node;
            NodeList<ASTVariableDeclarator> declarators = field.getVariableDeclarators();
            for (ASTVariableDeclarator declarator : declarators) {
                if (declarator.getInitializer() instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) declarator.getInitializer();
                    if (!literals.contains(literal)) {
                        literals.add(literal);
                    }
                }
            }
        } else if (node instanceof ASTAnnotatable) {
            ASTAnnotatable annotatable = (ASTAnnotatable) node;
            NodeList<ASTAnnotation> annotations = annotatable.getAnnotations();
            for (ASTAnnotation annotation : annotations) {
                if (annotation.getMemberValuePairs().size() > 0) {
                    ASTAnnotationMemberValuePair pair = annotation.getMemberValuePairs().get(0);
                    if (pair.getValue() instanceof ASTLiteral) {
                        ASTLiteral literal = (ASTLiteral) pair.getValue();
                        if (!literals.contains(literal)) {
                            literals.add(literal);
                        }
                    }
                }
            }
        } else if (node instanceof ASTArrayInitializer) {
            ASTArrayInitializer array = (ASTArrayInitializer) node;
            NodeList<ASTInitializer> initializers = array.getInitializers();
            for (ASTInitializer initializer : initializers) {
                if (initializer.getExpression() instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) initializer.getExpression();
                    if (!literals.contains(literal)) {
                        literals.add(literal);
                    }
                }
            }
        } else if (node instanceof ASTCompilationUnit) {
            ASTCompilationUnit unit = (ASTCompilationUnit) node;
            NodeList<ASTImportDeclaration> imports = unit.getImports();
            for (ASTImportDeclaration importDecl : imports) {
                if (importDecl.getImportType() instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) importDecl.getImportType();
                    if (!literals.contains(literal)) {
                        literals.add(literal);
                    }
                }
            }
        } else if (node instanceof ASTExpressionList) {
            ASTExpressionList list = (ASTExpressionList) node;
            NodeList<ASTExpression> expressions = list.getExpressions();
            for (ASTExpression expression : expressions) {
                if (expression instanceof ASTLiteral) {
                    ASTLiteral literal = (ASTLiteral) expression;
                    if (!literals.contains(literal)) {
                        literals.add(literal);
                    }
                }
            }
        }
        return literals;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// duplicate literals in argument list
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
2. This is a positive test case
```java
// literal int argument, ok for now
public class Foo {
    private void bar() {
        buz(2);
    }
    private void buz(int x) {}
}
```
3. This is a negative test case
```java
// duplicate literals in field decl
public class Foo {
    String[] FOO = {"foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo", "foo"};
}
```
4. This is a negative test case
```java
// duplicate literals in annotations, default case
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
@SuppressWarnings("foo")
public class Foo {
}
```
5. This is a positive test case
```java
public class Foo {
    private void bar() {
        buz("Howdy");
        buz("Howdy");
    }
    private void buz(String x) {}
}
```
6. This is a negative test case
```java
// exception list property
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
    }
    private void buz(String x) {}
}
```
7. This is a positive test case
```java
// exception list with escape
public class Foo {
    private void bar() {
        buz("Howdy,foo");
        buz("Howdy,foo");
    }
    private void buz(String x) {}
}
```
8. This is a negative test case
```java
public class Foo {
    private void bar() {
        buz("Howdy"); buz("Howdy"); buz("Howdy"); buz("Howdy");
    }
    private void buz(String x) {}
}
```
9. This is a negative test case
```java
// minimum length property, default value
public class Foo {
    private void bar() {
        buz("foo"); buz("foo"); buz("foo"); buz("foo");
        buz("fo"); buz("fo"); buz("fo"); buz("fo");
    }
    private void buz(String x) {}
}
```
10. This is a negative test case
```java
// #1425 Invalid XML Characters in Output
public class Duplicate {
    String s1 = "Tokenizer \ud801\udc1ctest";
    String s2 = "Tokenizer \ud801\udc1ctest";
    String s3 = "Tokenizer \ud801\udc1ctest";
    String s4 = "Tokenizer \ud801\udc1ctest";
    char c = '\uffef';
    char c\u0030 = 'a';
}
```
11. This is a negative test case
```java
// Duplicated string literals as annotation parameter
public class AnnotationParams {
    public static void foo(@SuppressWarnings("unused") Object str,
                           @SuppressWarnings("unused") String str2,
                           @SuppressWarnings("unused") String str3,
                           @SuppressWarnings("unused") String str4) {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(ASTLiteral.class, ASTMethodInvocation.class, ASTFieldAccess.class, ASTArrayCreationExpression.class, ASTArrayInitializer.class, ASTStatement.class, ASTAssertStatement.class, ASTSwitchStatement.class, ASTForStatement.class);
    }

    @Override
    public Object visit(ASTLiteral node, Object data) {
        String literal = node.getImage();
        if (literal == null) {
            return data;
        }
        if (literal.length() < 3 || !literal.startsWith("\"") || !literal.endsWith("\"")) {
            return data;
        }
        int count = 1;
        if (data instanceof Map) {
            Map<String, Integer> map = (Map<String, Integer>) data;
            if (map.containsKey(literal)) {
                count = map.get(literal) + 1;
            }
            map.put(literal, count);
        } else {
            if (data instanceof List) {
                List<String> list = (List<String>) data;
                if (list.contains(literal)) {
                    count = list.indexOf(literal) + 1;
                }
                list.add(literal);
            }
        }
        if (count >= 4) {
            addViolation(data, new Object[]{node});
        }
        return data;
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        String name = node.getImage();
        if (name == null) {
            return data;
        }
        if (name.length() < 3 || !name.startsWith("\"") || !name.endsWith("\"")) {
            return data;
        }
        int count = 1;
        if (data instanceof Map) {
            Map<String, Integer> map = (Map<String, Integer>) data;
            if (map.containsKey(name)) {
                count = map.get(name) + 1;
            }
            map.put(name, count);
        } else {
            if (data instanceof List) {
                List<String> list = (List<String>) data;
                if (list.contains(name)) {
                    count = list.indexOf(name) + 1;
                }
                list.add(name);
            }
        }
        if (count >= 4) {
            addViolation(data, new Object[]{node});
        }
        return data;
    }

    @Override
    public Object visit(ASTFieldAccess node, Object data) {
        String name = node.getImage();
        if (name == null) {
            return data;
        }
        if (name.length() < 3 || !name.startsWith("\"") || !name.endsWith("\"")) {
            return data;
        }
        int count = 1;
        if (data instanceof Map) {
            Map<String, Integer> map = (Map<String, Integer>) data;
            if (map.containsKey(name)) {
                count = map.get(name) + 1;
            }
            map.put(name, count);
        } else {
            if (data instanceof List) {
                List<String> list = (List<String>) data;
                if (list.contains(name)) {
                    count = list.indexOf(name) + 1;
                }
                list.add(name);
            }
        }
        if (count >= 4) {
            addViolation(data, new Object[]{node});
        }
        return data;
    }

    @Override
    public Object visit(ASTArrayCreationExpression node, Object data) {
        String name = node.getImage();
        if (name == null) {
            return data;
        }
        if (name.length() < 3 || !name.startsWith("\"") || !name.endsWith("\"")) {
            return data;
        }
        int count = 1;
        if (data instanceof Map) {
            Map<String, Integer> map = (Map<String, Integer>) data;
            if (map.containsKey(name)) {
                count = map.get(name) + 1;
            }
            map.put(name, count);
        } else {
            if (data instanceof List) {
                List<String> list = (List<String>) data;
                if (list.contains(name)) {
                    count = list.indexOf(name) + 1;
                }
                list.add(name);
            }
        }
        if (count >= 4) {
            addViolation(data, new Object[]{node});
        }
        return data;
    }

    @Override
    public Object visit(ASTArrayInitializer node, Object data) {
        String name = node.getImage();
        if (name == null) {
            return data;
        }
        if (name.length() < 3 || !name.startsWith("\"") || !name.endsWith("\"")) {
            return data;
        }
        int count = 1;
        if (data instanceof Map) {
            Map<String, Integer> map = (Map<String, Integer>) data;
            if (map.containsKey(name)) {
                count = map.get(name) + 1;
            }
            map.put(name, count);
        } else {
            if (data instanceof List) {
                List<String> list = (List<String>) data;
                if (list.contains(name)) {
                    count = list.indexOf(name) + 1;
                }
                list.add(name);
            }
        }
        if (count >= 4) {
            addViolation(data, new Object[]{node});
        }
        return data;
    }

    @Override
    public Object visit(ASTStatement node, Object data) {
        return data;
    }

    @Override
    public Object visit(ASTAssertStatement node, Object data) {
        return data;
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        return data;
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 334.73568773269653 秒
