开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isConstructor()) {
            visitConstructor(node, data);
        } else {
            super.visit(node, data);
        }
        return data;
    }

    private void visitConstructor(MethodDeclaration node, Object data) {
        MethodDeclarator methodDeclarator = node.getMethodDeclarator();
        if (methodDeclarator == null) {
            return;
        }

        VariableDeclarationsInConstructor variableDeclarationsInConstructor = node.getVariableDeclarationsInConstructor();
        if (variableDeclarationsInConstructor == null) {
            return;
        }

        for (VariableInitializer variableInitializer : variableDeclarationsInConstructor.getVariableInitializers()) {
            Expression expression = variableInitializer.getExpression();
            if (expression == null) {
                continue;
            }

            Assignment assignment = expression.getAssignment();
            if (assignment == null) {
                continue;
            }

            Expression leftHandSide = assignment.getLeftHandSide();
            if (leftHandSide == null) {
                continue;
            }

            SingleMemberAnnotation singleMemberAnnotation = leftHandSide.getSingleMemberAnnotation();
            if (singleMemberAnnotation != null) {
                continue;
            }

            SimpleName simpleName = leftHandSide.getSimpleName();
            if (simpleName == null) {
                continue;
            }

            SymbolTable symbolTable = node.getSymbolTable();
            Symbol symbol = symbolTable.lookup(simpleName.getImage());
            if (symbol == null) {
                continue;
            }

            if (symbol.isStatic()) {
                reportError(node, "Assignment to non-final static field in constructor is unsafe.");
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

出现语法错误，这一轮舍弃，直接重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    private static final String MESSAGE = "Assignment to non-final static field in constructor is unsafe";

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (!node.isStatic() && node.isFieldDeclaration() && node.getFirstBodyDeclaration() instanceof ASTConstructorDeclaration) {
            ASTFieldDeclaration fieldDeclaration = (ASTFieldDeclaration) node.getFirstFieldDeclaration();
            if (fieldDeclaration.isFinal() || !(fieldDeclaration.getFirstVariableInitializer() instanceof ASTExpression)) {
                return super.visit(node, data);
            }
            final Set<ASTFieldDeclaration> fields = new HashSet<>();
            for (ASTBodyDeclaration field : node.getBodyDeclarations()) {
                if (field instanceof ASTFieldDeclaration) {
                    fields.add((ASTFieldDeclaration) field);
                }
            }
            for (ASTFieldDeclaration field : fields) {
                if (field.isStatic() && field.getFirstVariableInitializer() instanceof ASTExpression) {
                    ASTExpression initializer = (ASTExpression) field.getFirstVariableInitializer();
                    if (node.getBodyDeclarations().contains(initializer)) {
                        ASTConstructorDeclaration constructor = (ASTConstructorDeclaration) node.getFirstBodyDeclaration();
                        addViolation(this, data, new NodePair(constructor, field));
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isStatic() && node.getFirstBodyDeclaration() instanceof ASTBlock) {
            ASTBlock block = (ASTBlock) node.getFirstBodyDeclaration();
            for (ASTStatement statement : block.getStatements()) {
                if (statement instanceof ASTAssignment) {
                    ASTAssignment assignment = (ASTAssignment) statement;
                    if (assignment.getAssigned() instanceof ASTFieldAccess) {
                        ASTFieldAccess fieldAccess = (ASTFieldAccess) assignment.getAssigned();
                        ASTFieldDeclaration field = (ASTFieldDeclaration) fieldAccess.getScope().findFirst(ASTFieldDeclaration.class);
                        if (field.isStatic()) {
                            addViolation(this, data, new NodePair(node, field));
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (!isConstructor(node)) {
            return super.visit(node, data);
        }

        TargetTypeDecl target = getTargetTypeDecl(node);
        if (target == null) {
            return super.visit(node, data);
        }

        for (Assignment targetAssignment : node.getAssignments()) {
            if (!isFinal(targetAssignment.getTarget().getImage())) {
                addViolation(data, targetAssignment);
            }
        }

        return super.visit(node, data);
    }

    private boolean isConstructor(MethodDeclaration node) {
        return node.getName().getImage().equals("<init>");
    }

    private TargetTypeDecl getTargetTypeDecl(MethodDeclaration node) {
        Assignment targetAssignment = node.getAssignments().get(0);
        Expression target = targetAssignment.getTarget();
        if (target instanceof MemberReferenceExpr) {
            MemberReferenceExpr mre = (MemberReferenceExpr) target;
            if (mre.getScope() instanceof TypeDeclaration || mre.getScope() instanceof TypeParameter) {
                return (TargetTypeDecl) mre.getScope();
            }
        }
        return null;
    }

    private boolean isFinal(String imageName) {
        return imageName.endsWith("final");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ASTConstructorDeclaration.class, ASTFieldDeclaration.class);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        Type type = node.getType();
        if (type instanceof ASTStaticKeyword) {
            ASTModifiers modifiers = node.getModifiers();
            if (modifiers != null && !modifiers.hasModifier("final")) {
                for (VariableSymbol symbol : SymbolTableBuilder.getVariables(node)) {
                    ASTName name = symbol.getName();
                    if (name != null && name.image.equals(node.getSimpleName())) {
                        ASTPrimaryExpression assignment = findAssignment(node, symbol);
                        if (assignment != null) {
                            addRuleViolation(data, name, "Assignment to non-final static field " + node.getSimpleName() + " in constructor is unsafe.");
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private ASTPrimaryExpression findAssignment(ASTFieldDeclaration node, VariableSymbol symbol) {
        NodeStream<ASTNode> children = node.jjtGetChild(0).jjtGetChildren();
        for (ASTNode child : children) {
            if (child instanceof ASTConstructorDeclarator) {
                ASTConstructorDeclarator declarator = (ASTConstructorDeclarator) child;
                if (declarator.getConstructorBody() != null) {
                    NodeStream<ASTNode> bodyChildren = declarator.getConstructorBody().jjtGetChildren();
                    for (ASTNode bodyChild : bodyChildren) {
                        if (bodyChild instanceof ASTAssignment) {
                            ASTAssignment assignment = (ASTAssignment) bodyChild;
                            if (assignment.getVariable() != null && assignment.getVariable().identifier.equals(symbol.getName().image)) {
                                return assignment.getExpression();
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 124.83421802520752 秒
