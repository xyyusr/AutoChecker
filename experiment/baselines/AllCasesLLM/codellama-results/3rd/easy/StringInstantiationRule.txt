开始

========================================== Rule StringInstantiationRule ===========================================
一共 10 个测试用例
正例 5 个
反例 5 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(AstNewNode node, Object data) {
        StringInstantiationDescriptor descriptor = new StringInstantiationDescriptor();
        ClassDeclarationNode parent = (ClassDeclarationNode) node.getParent();
        if (parent != null) {
            descriptor.setLocation(parent.getBeginLine(), parent.getBeginColumn(), parent.getEndLine(), parent.getEndColumn());
        }
        descriptor.setNode(node);
        return visit(node.getImage(), descriptor, data);
    }

    @Override
    public Object visit(MethodCallExpressionNode node, Object data) {
        ClassNode classNode = node.getImage().resolveToClass();
        if (classNode != null && classNode.getName().equals("String")) {
            StringInstantiationDescriptor descriptor = new StringInstantiationDescriptor();
            descriptor.setLocation(node.getBeginLine(), node.getBeginColumn(), node.getEndLine(), node.getEndColumn());
            descriptor.setNode(node);
            return visit(node.getImage(), descriptor, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IdentifierNode node, Object data) {
        ClassNode classNode = node.resolveToClass();
        if (classNode != null && classNode.getName().equals("String")) {
            StringInstantiationDescriptor descriptor = new StringInstantiationDescriptor();
            descriptor.setLocation(node.getBeginLine(), node.getBeginColumn(), node.getEndLine(), node.getEndColumn());
            descriptor.setNode(node);
            return visit(node.getImage(), descriptor, data);
        }
        return super.visit(node, data);
    }

    private Object visit(String target, StringInstantiationDescriptor descriptor, Object data) {
        if (target.equals("new String") || target.equals("new String(")) {
            addViolation(data, descriptor);
        }
        return data;
    }

    private class StringInstantiationDescriptor {
        private int beginLine;
        private int beginColumn;
        private int endLine;
        private int endColumn;
        private AstNode node;

        public StringInstantiationDescriptor() {
        }

        public void setLocation(int beginLine, int beginColumn, int endLine, int endColumn) {
            this.beginLine = beginLine;
            this.beginColumn = beginColumn;
            this.endLine = endLine;
            this.endColumn = endColumn;
        }

        public void setNode(AstNode node) {
            this.node = node;
        }

        public int getBeginLine() {
            return beginLine;
        }

        public int getBeginColumn() {
            return beginColumn;
        }

        public int getEndLine() {
            return endLine;
        }

        public int getEndColumn() {
            return endColumn;
        }

        public AstNode getNode() {
            return node;
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        super("StringInstantiationRule", "Avoid instantiating String objects.");
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        if (node instanceof ASTFieldDeclaration) {
            ASTFieldDeclaration fieldDeclaration = (ASTFieldDeclaration) node;
            for (ASTVariableDeclarator declarator : fieldDeclaration.declarationSpecifiers().variableDeclarators()) {
                if (declarator.initializer() instanceof ASTNewClassExpression) {
                    ASTNewClassExpression newClassExpression = (ASTNewClassExpression) declarator.initializer();
                    if (newClassExpression.type() instanceof ASTClassOrInterfaceType) {
                        ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType) newClassExpression.type();
                        if (classOrInterfaceType.identifier() instanceof ASTIdentifier) {
                            ASTIdentifier identifier = (ASTIdentifier) classOrInterfaceType.identifier();
                            if (identifier.image().equals("String")) {
                                addViolation(data, fieldDeclaration);
                            }
                        }
                    }
                }
            }
        } else if (node instanceof ASTMethodDeclaration) {
            ASTMethodDeclaration methodDeclaration = (ASTMethodDeclaration) node;
            for (ASTStatement statement : methodDeclaration.body().statements()) {
                if (statement instanceof ASTExpressionStatement) {
                    ASTExpressionStatement expressionStatement = (ASTExpressionStatement) statement;
                    if (expressionStatement.expression() instanceof ASTAssignment) {
                        ASTAssignment assignment = (ASTAssignment) expressionStatement.expression();
                        if (assignment.left() instanceof ASTFieldAccess) {
                            ASTFieldAccess fieldAccess = (ASTFieldAccess) assignment.left();
                            if (fieldAccess.expression() instanceof ASTIdentifier) {
                                ASTIdentifier identifier = (ASTIdentifier) fieldAccess.expression();
                                if (identifier.image().equals("this")) {
                                    if (assignment.right() instanceof ASTNewClassExpression) {
                                        ASTNewClassExpression newClassExpression = (ASTNewClassExpression) assignment.right();
                                        if (newClassExpression.type() instanceof ASTClassOrInterfaceType) {
                                            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType) newClassExpression.type();
                                            if (classOrInterfaceType.identifier() instanceof ASTIdentifier) {
                                                ASTIdentifier identifier2 = (ASTIdentifier) classOrInterfaceType.identifier();
                                                if (identifier2.image().equals("String")) {
                                                    addViolation(data, methodDeclaration);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else if (statement instanceof ASTBlockStatement) {
                    ASTBlockStatement blockStatement = (ASTBlockStatement) statement;
                    for (ASTStatement innerStatement : blockStatement.statements()) {
                        if (innerStatement instanceof ASTExpressionStatement) {
                            ASTExpressionStatement expressionStatement = (ASTExpressionStatement) innerStatement;
                            if (expressionStatement.expression() instanceof ASTNewClassExpression) {
                                ASTNewClassExpression newClassExpression = (ASTNewClassExpression) expressionStatement.expression();
                                if (newClassExpression.type() instanceof ASTClassOrInterfaceType) {
                                    ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType) newClassExpression.type();
                                    if (classOrInterfaceType.identifier() instanceof ASTIdentifier) {
                                        ASTIdentifier identifier = (ASTIdentifier) classOrInterfaceType.identifier();
                                        if (identifier.image().equals("String")) {
                                            addViolation(data, methodDeclaration);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else if (node instanceof ASTMethodInvocation) {
            ASTMethodInvocation methodInvocation = (ASTMethodInvocation);
            if (methodInvocation.methodSelector() instanceof ASTIdentifier) {
                ASTIdentifier identifier = (ASTIdentifier) methodInvocation.methodSelector();
                if (identifier.image().equals("String")) {
                    if (methodInvocation.arguments().size() == 0 || methodInvocation.arguments().size() > 1) {
                        addViolation(data, methodInvocation);
                    }
                }
            }
        } else if (node instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression);
            if (primaryExpression.children().size() == 1 && primaryExpression.jjtGetChild(0) instanceof ASTLiteral) {
                ASTLiteral literal = (ASTLiteral) primaryExpression.jjtGetChild(0);
                if (literal.image().equals("new")) {
                    ASTPrimaryExpression child = (ASTPrimaryExpression) primaryExpression.jjtGetChild(1);
                    if (child instanceof ASTNewArrayExpression || child instanceof ASTNewClassExpression) {
                        if (child instanceof ASTNewClassExpression) {
                            ASTNewClassExpression newClassExpression = (ASTNewClassExpression) child;
                            if (newClassExpression.type() instanceof ASTClassOrInterfaceType) {
                                ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType) newClassExpression.type();
                                if (classOrInterfaceType.identifier() instanceof ASTIdentifier) {
                                    ASTIdentifier identifier = (ASTIdentifier) classOrInterfaceType.identifier();
                                    if (identifier.image().equals("String")) {
                                        addViolation(data, primaryExpression);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        super(NewClassExpression.class, Assign.class, NewArray.javaClass(), 
                MethodInvocation.javaClass(), Cast.javaClass());
    }

    @Override
    public Object visit(NewClassExpression node, Object data) {
        if (typeIsString(node.getType())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getTarget() instanceof NewClassExpression) {
            NewClassExpression newExpression = (NewClassExpression) node.getTarget();
            if (typeIsString(newExpression.getType())) {
                addViolation(data, newExpression);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewArray node, Object data) {
        if (node.getType() == PrimitiveType.STRING_TYPE) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        if (node.getImage().equals("newString") && node.getMethodTarget() instanceof NewClassExpression) {
            NewClassExpression newExpression = (NewClassExpression) node.getMethodTarget();
            if (typeIsString(newExpression.getType())) {
                addViolation(data, newExpression);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Cast node, Object data) {
        if (node.getType() == PrimitiveType.STRING_TYPE) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean typeIsString(Type type) {
        return type instanceof ReferenceType && ((ReferenceType) type).getTypeString().equals("java.lang.String");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(AssignExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(StringLiteralExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ArrayCreationExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewArrayExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewArrayExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(StringConstructorExpr node, Object data) {
        if (node.getArgs().size() == 1 && node.getArgs().get(0) instanceof StringLiteralExpr) {
            return super.visit(node, data);
        }
        return visit(node, data);
    }

    @Override
    public Object visit(StringConstructorExpr node, Object data) {
        if (node.getArgs().size() == 4) {
            return super.visit(node, data);
        }
        return visit(node, data);
    }

    @Override
    public Object visit(NewArrayExpr node, Object data) {
        if (node.getDimensions().size() == 1 && node.getInitializers().size() == 0) {
            return super.visit(node, data);
        }
        return visit(node, data);
    }

    @Override
    public void addViolation(Visitable node, Object data) {
        String message = "Avoid instantiating String objects.";
        addRuleCompliantMessage(node, message);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    private static final String NEW_STRING_CONSTRUCTOR = "new String";
    private static final String MULTIPLE_PARAMETER_CONSTRUCTOR = "new String(bytes, offset, length)";
    private static final String FOUR_PARAMETER_CONSTRUCTOR = "new String(bytes, offset, length, encoding)";

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getType() instanceof PrimitiveType) {
            PrimitiveType primitiveType = (PrimitiveType) node.getType();
            if (primitiveType.getPrimitiveType() == PrimitiveType.PrimitiveTypeCode.VOID) {
                return data;
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MultExpr node, Object data) {
        if (node.getOperator() == MultExpr.Operator.MULTI_NEW_ARRAY) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        String methodName = node.getMethodName();
        List<Expr> args = node.getArgs();
        if (methodName.equals("getChars") || methodName.equals("getBytes")) {
            return data;
        } else if (methodName.equals("getBytes") && args.size() == 3) {
            return data;
        } else if (methodName.equals("getBytes") && args.size() == 4) {
            return data;
        } else if (methodName.equals("intern")) {
            return data;
        } else if (methodName.equals("toString") && args.size() == 0) {
            return data;
        } else if (methodName.equals("toString") && args.size() == 1) {
            return data;
        } else if (methodName.equals("toString") && args.size() == 2) {
            return data;
        } else if (methodName.equals("toString") && args.size() == 3) {
            return data;
        } else if (methodName.equals("toString") && args.size() == 4) {
            return data;
        } else if (methodName.equals("new String")) {
            if (args.size() == 0 || args.size() > 1) {
                addViolation(data, node);
            } else {
                return data;
            }
        } else if (methodName.equals("new String") && args.get(0).getType() instanceof ArrayType) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewArrayExpr node, Object data) {
        if (node.getArrayType().getComponentType() instanceof ClassOrInterfaceType) {
            return data;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpr node, Object data) {
        if (node.getType() instanceof ClassOrInterfaceType) {
            ClassOrInterfaceType classOrInterfaceType = (ClassOrInterfaceType) node.getType();
            if (classOrInterfaceType.getName().equals(String.class.getName()) && node.getArgs().size() == 0) {
                addViolation(data, node);
            } else {
                return data;
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpr node, Object data) {
        if (node.getType() instanceof ClassOrInterfaceType) {
            ClassOrInterfaceType classOrInterfaceType = (ClassOrInterfaceType) node.getType();
            if (classOrInterfaceType.getName().equals(String.class.getName()) && node.getArgs().size() == 1) {
                return data;
            } else if (node.getArgs().size() == 2) {
                return data;
            } else if (node.getArgs().size() == 3) {
                return data;
            } else if (node.getArgs().size() == 4) {
                return data;
            } else if (node.getArgs().size() == 5) {
                return data;
            } else {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftHandSide().getType() instanceof ClassOrInterfaceType && node.getOperators().size() == 0) {
            if (((ClassOrInterfaceType) node.getLeftHandSide().getType()).getName().equals(String.class.getName())) {
                return data;
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 173.34473824501038 秒
