开始

========================================== Rule NullAssignmentRule ===========================================
一共 19 个测试用例
正例 14 个
反例 5 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.function.Predicate;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(NodeKind.ASSIGN, NodeKind.ASSIGN);
    }

    @Override
    public Object visit(Node node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignop node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Ternary node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorInvocation node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConditionalExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        if (node.getInitializer() != null) {
            return super.visit(node, data);
        }
        return null;
    }

    @Override
    public Object visit(VariableDeclaratorId node, Object data) {
        if (node.getInitializer() != null) {
            return super.visit(node, data);
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(AssignExpr.class, AssignExpr.class, AssignExpr.class, AssignExpr.class, AssignExpr.class,
                AssignExpr.class, AssignExpr.class, AssignExpr.class, AssignExpr.class,
                AssignExpr.class, AssignExpr.class, AssignExpr.class, AssignExpr.class,
                AssignExpr.class, AssignExpr.class, AssignExpr.class, AssignExpr.class,
                AssignExpr.class, AssignExpr.class, AssignExpr.class, AssignExpr.class);
    }

    @Override
    public Object visit(PlainAssignExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            RightHandSide rhs = node.getRightHandSide();
            if (rhs != null) {
                Object value = rhs.jjtGetChild(0);
                if (value instanceof NullLiteral) {
                    if (node.getIdentifier() != null && node.getIdentifier().getImage().equals(node.getIdentifier().getImage())) {
                        reportRuleViolation(node, "Assigning a null to a variable " + node.getIdentifier().getImage() + " is usually bad form.");
                    }
                }
            }
        }
        return result;
    }

    @Override
    public Object visit(TernaryExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression condition = node.getCondition();
            Expression thenExpression = node.getThenExpression();
            Expression elseExpression = node.getElseExpression();
            if (condition instanceof NullLiteral) {
                if (thenExpression instanceof NullLiteral || elseExpression instanceof NullLiteral) {
                    reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
                }
            } else if (thenExpression instanceof NullLiteral) {
                if (condition != null && condition.getIdentifier() == null && condition.getImage().equals(condition.getImage())) {
                    reportRuleViolation(node, "Assigning a null to a variable " + condition.getImage() + " is usually bad form.");
                }
            } else if (elseExpression instanceof NullLiteral) {
                if (condition != null && condition.getIdentifier() == null && condition.getImage().equals(condition.getImage())) {
                    reportRuleViolation(node, "Assigning a null to a variable " + condition.getImage() + " is usually bad form.");
                }
            }
        }
        return result;
    }

    @Override
    public Object visit(ReturnExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression expression = node.getExpression();
            if (expression instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(CompoundAssignExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            RightHandSide rhs = node.getRightHandSide();
            if (rhs != null) {
                Object value = rhs.jjtGetChild(0);
                if (value instanceof NullLiteral) {
                    if (node.getIdentifier() != null && node.getIdentifier().getImage().equals(node.getIdentifier().getImage())) {
                        reportRuleViolation(node, "Assigning a null to a variable " + node.getIdentifier().getImage() + " is usually bad form.");
                    }
                }
            }
        }
        return result;
    }

    @Override
    public Object visit(BinaryExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression left = node.getLeft();
            Expression right = node.getRight();
            if (left instanceof NullLiteral && right instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(ConditionalExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression condition = node.getCondition();
            Expression thenExpression = node.getThenExpression();
            Expression elseExpression = node.getElseExpression();
            if (condition instanceof NullLiteral && thenExpression instanceof NullLiteral && elseExpression instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(NewExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression arg = node.getArgument();
            if (arg instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression method = node.getMethod();
            List<Expression> args = node.getArguments();
            if (method instanceof NullLiteral && args.isEmpty()) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(InvocationExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression method = node.getExpression();
            List<Expression> args = node.getArguments();
            if (method instanceof NullLiteral && args.isEmpty()) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Object initializer = node.getInitializer();
            if (initializer instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression init = node.getInitialization();
            Expression condition = node.getCondition();
            if (init instanceof NullLiteral && condition instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression condition = node.getCondition();
            if (condition instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression condition = node.getCondition();
            if (condition instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression expression = node.getExpression();
            if (expression instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(LambdaExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression body = node.getBody();
            if (body instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(ConditionalExpression node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression condition = node.getCondition();
            Expression thenExpression = node.getThenExpression();
            Expression elseExpression = node.getElseExpression();
            if (condition instanceof NullLiteral && thenExpression instanceof NullLiteral && elseExpression instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }

    @Override
    public Object visit(CastExpr node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            Expression expression = node.getExpression();
            if (expression instanceof NullLiteral) {
                reportRuleViolation(node, "Assigning a null to a variable is usually bad form.");
            }
        }
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.function.Function;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(AssignmentExpr.class);
    }

    @Override
    public Object visit(AssignmentExpr node, Object data) {
        if (isDirectAssignment(node) && isVariable(node.getLeftHandSide()) && isAssigningNull(node.getRightHandSide())) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    private boolean isDirectAssignment(AssignmentExpr node) {
        return node.getLeftHandSide().getKind() == NodeKind.IDENTIFIER;
    }

    private boolean isVariable(JavaNode node) {
        return node.getKind() == NodeKind.IDENTIFIER && node.getImage().matches("[a-zA-Z_][a-zA-Z0-9_]*");
    }

    private boolean isAssigningNull(Expr node) {
        return node.getKind() == NodeKind.LITERAL && node.getImage().equals("null")
                || node.getKind() == NodeKind.NULL_LITERAL
                || node.getKind() == NodeKind.NULL;
    }

    @Override
    public Object visit(TernaryExpr node, Object data) {
        if (isAssigningNull(node.getCondition()) && isVariable(node.getTrueExpr()) && isVariable(node.getFalseExpr())) {
            return visit(node.getFalseExpr(), data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        if (node.getImage().matches(".*\\(.*?(null|NULL).*\\)")) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NullLiteral node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(UnaryExpr node, Object data) {
        if (node.getOperator().equals("!")) {
            return super.visit(node.getOperand(), data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NullAssertionExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NullCheckExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NullCoalescingExpr node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(VariableDeclarator.class, Assign.class, AssignArray.class, AssignExpr.class, AssignOp.class, TernaryExpr.class, MethodInvocation.class, ConstructorCall.class);
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        if (node.getInit() != null) {
            Object init = node.getInit();
            if (init instanceof Assign || init instanceof AssignArray || init instanceof AssignExpr || init instanceof AssignOp) {
                Object rhs = ((AssignmentExpression) init).getRHS();
                if (rhs instanceof TernaryExpr || rhs instanceof MethodInvocation || rhs instanceof ConstructorCall) {
                    if (rhs instanceof TernaryExpr) {
                        TernaryExpr ternary = (TernaryExpr) rhs;
                        if (ternary.getCondition() == null) {
                            addViolation(this, node, data);
                        }
                    } else if (rhs instanceof MethodInvocation) {
                        MethodInvocation methodInv = (MethodInvocation) rhs;
                        if (methodInv.getMethodName().equals("computeIfAbsent") && methodInv.getArgumentCount() > 0 && methodInv.getArgument(0) instanceof NullLiteral) {
                            addViolation(this, node, data);
                        }
                    } else if (rhs instanceof ConstructorCall) {
                        ConstructorCall constructorCall = (ConstructorCall) rhs;
                        if (constructorCall.getArgumentCount() > 0 && constructorCall.getArgument(0) instanceof NullLiteral) {
                            addViolation(this, node, data);
                        }
                    }
                } else if (rhs instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        Object rhs = ((AssignmentExpression) node).getRHS();
        if (rhs instanceof TernaryExpr || rhs instanceof MethodInvocation || rhs instanceof ConstructorCall) {
            if (rhs instanceof TernaryExpr) {
                TernaryExpr ternary = (TernaryExpr) rhs;
                if (ternary.getCondition() == null) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof MethodInvocation) {
                MethodInvocation methodInv = (MethodInvocation) rhs;
                if (methodInv.getMethodName().equals("computeIfAbsent") && methodInv.getArgumentCount() > 0 && methodInv.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof ConstructorCall) {
                ConstructorCall constructorCall = (ConstructorCall) rhs;
                if (constructorCall.getArgumentCount() > 0 && constructorCall.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            }
        } else if (rhs instanceof NullLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignArray node, Object data) {
        Object rhs = ((ArrayAssignmentExpression) node).getRHS();
        if (rhs instanceof TernaryExpr || rhs instanceof MethodInvocation || rhs instanceof ConstructorCall) {
            if (rhs instanceof TernaryExpr) {
                TernaryExpr ternary = (TernaryExpr) rhs;
                if (ternary.getCondition() == null) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof MethodInvocation) {
                MethodInvocation methodInv = (MethodInvocation) rhs;
                if (methodInv.getMethodName().equals("computeIfAbsent") && methodInv.getArgumentCount() > 0 && methodInv.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof ConstructorCall) {
                ConstructorCall constructorCall = (ConstructorCall) rhs;
                if (constructorCall.getArgumentCount() > 0 && constructorCall.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            }
        } else if (rhs instanceof NullLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        Object rhs = node.getRHS();
        if (rhs instanceof TernaryExpr || rhs instanceof MethodInvocation || rhs instanceof ConstructorCall) {
            if (rhs instanceof TernaryExpr) {
                TernaryExpr ternary = (TernaryExpr) rhs;
                if (ternary.getCondition() == null) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof MethodInvocation) {
                MethodInvocation methodInv = (MethodInvocation) rhs;
                if (methodInv.getMethodName().equals("computeIfAbsent") && methodInv.getArgumentCount() > 0 && methodInv.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof ConstructorCall) {
                ConstructorCall constructorCall = (ConstructorCall) rhs;
                if (constructorCall.getArgumentCount() > 0 && constructorCall.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            }
        } else if (rhs instanceof NullLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignOp node, Object data) {
        Object rhs = ((BinaryExpression) node).getRHS();
        if (rhs instanceof TernaryExpr || rhs instanceof MethodInvocation || rhs instanceof ConstructorCall) {
            if (rhs instanceof TernaryExpr) {
                TernaryExpr ternary = (TernaryExpr) rhs;
                if (ternary.getCondition() == null) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof MethodInvocation) {
                MethodInvocation methodInv = (MethodInvocation) rhs;
                if (methodInv.getMethodName().equals("computeIfAbsent") && methodInv.getArgumentCount() > 0 && methodInv.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            } else if (rhs instanceof ConstructorCall) {
                ConstructorCall constructorCall = (ConstructorCall) rhs;
                if (constructorCall.getArgumentCount() > 0 && constructorCall.getArgument(0) instanceof NullLiteral) {
                    addViolation(this, node, data);
                }
            }
        } else if (rhs instanceof NullLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(TernaryExpr node, Object data) {
        if (node.getCondition() == null) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        if (node.getMethodName().equals("computeIfAbsent") && node.getArgumentCount() > 0 && node.getArgument(0) instanceof NullLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorCall node, Object data) {
        if (node.getArgumentCount() > 0 && node.getArgument(0) instanceof NullLiteral) {
            addViolation(this, node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ComparisonExpr node, Object data) {
        if (node.getOperator() == ComparisonOperator.EQUALITY) {
            return super.visit(node, data);
        } else {
            if (node.getRHS() instanceof NullLiteral) {
                addViolation(this, node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NullLiteral node, Object data) {
        addViolation(this, node, data);
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

出现语法错误，这一轮舍弃，直接重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 184.10565733909607 秒
