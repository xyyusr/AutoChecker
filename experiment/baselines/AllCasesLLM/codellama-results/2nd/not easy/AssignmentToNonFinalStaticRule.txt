开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        addRuleMatch(ASTConstructorDeclaration.class, this::visitConstructor);
    }

    @Override
    public Object visitConstructor(ASTConstructorDeclaration node, Object data) {
        VariableNameDeclaration fieldDeclaration = (VariableNameDeclaration) node.findDescendant(ASTFieldDeclaration.class);
        if (fieldDeclaration != null && isStaticField(fieldDeclaration) && !isFinalField(fieldDeclaration)) {
            JavaNode assignmentNode = findAssignmentNodeInConstructor(node);
            if (assignmentNode != null) {
                addViolation(data, node);
            }
        }
        return data;
    }

    private boolean isStaticField(VariableNameDeclaration fieldDeclaration) {
        ASTFieldDeclaration fieldDecl = fieldDeclaration.getFirstDeclaration();
        ASTMethodDeclaration methodDecl = fieldDecl.getFirstAnnotationOrModifier(ASTStaticKeyword.class);
        return methodDecl != null;
    }

    private boolean isFinalField(VariableNameDeclaration fieldDeclaration) {
        ASTFieldDeclaration fieldDecl = fieldDeclaration.getFirstDeclaration();
        ASTMethodDeclaration methodDecl = fieldDecl.getFirstAnnotationOrModifier(ASTFinalKeyword.class);
        return methodDecl != null;
    }

    private JavaNode findAssignmentNodeInConstructor(ASTConstructorDeclaration node) {
        for (JavaNode child : node.getChildren()) {
            if (child instanceof ASTMethodInvocation) {
                ASTMethodInvocation methodInvocation = (ASTMethodInvocation) child;
                if (methodInvocation.getMethodName().equals("increment") || methodInvocation.getMethodName().equals("clear")) {
                    continue;
                }
                return child;
            } else if (child instanceof ASTExpressionStatement) {
                ASTExpressionStatement statement = (ASTExpressionStatement) child;
                return statement.getExpression();
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(JavaConstructor.class, JavaFieldAccess.class, JavaFieldDeclaration.class);
    }

    @Override
    public Object visit(JavaConstructor node, Object data) {
        Object result = super.visit(node, data);
        if (node instanceof JavaConstructor) {
            JavaFieldAccess thisFieldAccess = (JavaFieldAccess) node.findChildOfType(JavaFieldAccess.class);
            if (thisFieldAccess != null) {
                JavaFieldDeclaration fieldDeclaration = (JavaFieldDeclaration) thisFieldAccess.findParentOfType(JavaFieldDeclaration.class);
                if (fieldDeclaration != null) {
                    JavaFieldAccess fieldAccess = (JavaFieldAccess) node.findChildOfType(JavaFieldAccess.class);
                    if (fieldAccess != null) {
                        JavaFieldDeclaration assignedField = (JavaFieldDeclaration) fieldAccess.findParentOfType(JavaFieldDeclaration.class);
                        if (assignedField != null && fieldDeclaration != null && !assignedField.isFinal()) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return result;
    }

    @Override
    public Object visit(JavaFieldAccess node, Object data) {
        Object result = super.visit(node, data);
        if (node instanceof JavaFieldAccess) {
            JavaFieldDeclaration fieldDeclaration = (JavaFieldDeclaration) node.findParentOfType(JavaFieldDeclaration.class);
            if (fieldDeclaration != null && fieldDeclaration.isStatic()) {
                addViolation(data, node);
            }
        }
        return result;
    }

    @Override
    public Object visit(JavaFieldDeclaration node, Object data) {
        Object result = super.visit(node, data);
        if (node instanceof JavaFieldDeclaration) {
            JavaModifierList modifiers = node.getModifiers();
            if (modifiers != null) {
                if (!modifiers.contains(JavaKeyword.FINAL)) {
                    if (node.isStatic()) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (isConstructor(node)) {
            for (VariableDeclarationFragment fragment : node.getParameters()) {
                if (isStaticAndNonFinalField(fragment)) {
                    addViolation(data, node, "Assignment to non-final static field in constructor is unsafe.");
                }
            }
        }
        for (Statement statement : node.getBody().getStatements()) {
            if (isStaticAndNonFinalField(statement)) {
                addViolation(data, statement, "Assignment to non-final static field in constructor is unsafe.");
            }
        }
        for (Expression expression : node.getBody().getExpressionStatements()) {
            if (isStaticAndNonFinalField(expression)) {
                addViolation(data, expression, "Assignment to non-final static field in constructor is unsafe.");
            }
        }
        return super.visit(node, data);
    }

    private boolean isConstructor(MethodDeclaration node) {
        return node.getName().getImage().equals("<init>") && node.getParameters().size() > 0;
    }

    private boolean isStaticAndNonFinalField(ASTNode node) {
        if (node instanceof FieldAccessExpr) {
            FieldAccessExpr fieldAccess = (FieldAccessExpr) node;
            if (fieldAccess.getScope() instanceof TypeDeclaration) {
                TypeDeclaration typeDecl = (TypeDeclaration) fieldAccess.getScope();
                if (typeDecl.getModifiers().contains(Modifier.STATIC)) {
                    if (fieldAccess.getAccess() == Access.READ) {
                        if (fieldAccess.getMember() instanceof SimpleName) {
                            SimpleName name = (SimpleName) fieldAccess.getMember();
                            if (typeDecl.getFields().stream().anyMatch(field -> field.getName().equals(name.getImage()))) {
                                return true;
                            }
                        }
                    } else if (fieldAccess.getAccess() == Access.WRITE) {
                        if (fieldAccess.getMember() instanceof SimpleName) {
                            SimpleName name = (SimpleName) fieldAccess.getMember();
                            if (typeDecl.getFields().stream().anyMatch(field -> field.getName().equals(name.getImage()))) {
                                return field.getModifiers().stream().noneMatch(modifier -> modifier == Modifier.FINAL);
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleMatch(AssignmentToNonFinalStaticRule.class, "assignment_to_non_final_static", "Assignment to non-final static fields in constructor is unsafe.");
    }

    @Override
    public Object visit(JavaMethodDeclaration n, Object data) {
        if (n instanceof ConstructorDeclaration) {
            return visitConstructor(n, data);
        }
        return super.visit(n, data);
    }

    private Object visitConstructor(JavaMethodDeclaration n, Object data) {
        for (JavaVariableDeclaratorId id : n.getParameters()) {
            JavaFieldReference fieldRef = findFieldReference(id, n.getScope());
            if (fieldRef != null && fieldRef.getField() instanceof StaticFieldAccess) {
                if (n instanceof ConstructorDeclaration && !(id.getType() instanceof TypeLiteral)) {
                    addRuleViolation(data, n, "Assignment to non-final static field in constructor");
                } else {
                    return super.visit(n, data);
                }
            }
        }
        return super.visit(n, data);
    }

    private JavaFieldReference findFieldReference(JavaVariableDeclaratorId id, Scope scope) {
        for (JavaFieldReference fieldRef : scope.getFields()) {
            if (fieldRef.getField().getSimpleName().equals(id.getName())) {
                return fieldRef;
            }
        }
        return null;
    }

    @Override
    public Object visit(JavaFieldDeclaration n, Object data) {
        for (JavaVariableDeclarator declarator : n.getVariables()) {
            if (declarator.getType() instanceof PrimitiveType) {
                for (JavaMethodDeclaration method : n.getBody().getMethods()) {
                    if (method instanceof ConstructorDeclaration) {
                        for (JavaVariableDeclaratorId id : method.getParameters()) {
                            if (declarator.getName().equals(id.getName())) {
                                if (n.getModifiers().getFinalModifier() == null) {
                                    addRuleViolation(data, n, "Assignment to non-final static field in constructor");
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(n, data);
    }

    @Override
    public Object visit(JavaClassOrInterfaceNode n, Object data) {
        for (JavaMethodDeclaration method : n.getMethods()) {
            if (method instanceof ConstructorDeclaration) {
                visitConstructor(method, data);
            }
        }
        return super.visit(n, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// clear rule violation
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
2. This is a negative test case
```java
// clear rule violation with this
public class Foo {
    static int x;
    Foo(int y) {
        this.x = y;
    }
}
```
3. This is a positive test case
```java
// ok
public class Foo {
    static final int x;
    Foo(int y) {
        x = y;
    }
}
```
4. This is a negative test case
```java
// rule violated twice
public class Foo {
    static int x;
    Foo(int y) {
        x = y;
    }
}
```
5. This is a positive test case
```java
// legitimate case - assignment in a regular method instead of constructor
public class Foo {
    static int counter;
    public void increment() {
        counter++;
    }
    public void clear() {
        counter = 0;
    }
}
```
6. This is a negative test case
```java
// violation with increments
public class Foo {
    static int counter;
    private final int id1;
    private final int id2;
    Foo() {
        id2 = counter++;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleMatch(AssignmentToNonFinalStaticRule.class, "AssignmentToNonFinalStaticRule");
    }

    @Override
    public Object visit(JavaConstructor node, Object data) {
        List<JavaFieldAccess> fieldAccesses = node.findDescendants(JavaFieldAccess.class);
        for (JavaFieldAccess fieldAccess : fieldAccesses) {
            JavaNode field = fieldAccess.getField();
            if (field instanceof JavaFieldDeclaration) {
                JavaFieldDeclaration fieldDeclaration = (JavaFieldDeclaration) field;
                if (isStaticField(fieldDeclaration) && !isFinalField(fieldDeclaration)) {
                    addViolation(data, fieldAccess);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaMethodDeclaration node, Object data) {
        // This method is not relevant for this rule
        return super.visit(node, data);
    }

    private boolean isStaticField(JavaFieldDeclaration fieldDeclaration) {
        JavaModifiers modifiers = fieldDeclaration.getModifiers();
        return modifiers.hasModifier(JavaModifiers.STATIC);
    }

    private boolean isFinalField(JavaFieldDeclaration fieldDeclaration) {
        JavaModifiers modifiers = fieldDeclaration.getModifiers();
        return modifiers.hasModifier(JavaModifiers.FINAL);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 145.63580083847046 秒
