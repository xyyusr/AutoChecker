开始

========================================== Rule StringInstantiationRule ===========================================
一共 10 个测试用例
正例 5 个
反例 5 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {
    @Override
    public Object visit(ASTStringNew node, Object data) {
        if (node.getImage().equals("String")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTNewArray node, Object data) {
        if (node.getType().equals(Type.STRING)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        if (node.getImage().equals("new String")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodReference node, Object data) {
        if (node.getImage().equals("new String")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        if (node.getImage().equals("new String")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isMethodInvocation()) {
            ASTMethodInvocation methodInvocation = (ASTMethodInvocation) node;
            if (methodInvocation.getImage().equals("new String")) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isMethodInvocation()) {
            ASTMethodInvocation methodInvocation = (ASTMethodInvocation) node;
            if (methodInvocation.getImage().equals("new String")) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTArrayAccess node, Object data) {
        if (node.getType().equals(Type.STRING)) {
            ASTExpression arrayExpression = node.getArrayExpression();
            if (arrayExpression instanceof ASTArrayCreation || arrayExpression instanceof ASTMethodInvocation || arrayExpression instanceof ASTMethodReference) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        if (node.getImage().equals("new String")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

出现语法错误，这一轮舍弃，直接重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.List;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTNewClassExpression node, Object data) {
        StringInstantiationResult result = checkNode(node, data);
        if (result.shouldReport()) {
            addRuleViolation(result.getRuleMessage());
        }
        return super.visit(node, data);
    }

    private StringInstantiationResult checkNode(ASTNewClassExpression node, Object data) {
        if (node.getImage().equals("String")) {
            ASTExpression expression = node.getExpression();
            if (expression instanceof ASTPrimaryExpression && ((ASTPrimaryExpression) expression).getImage().equals("new")) {
                return new StringInstantiationResult("New String instantiation without explicit encoding");
            } else if (expression instanceof ASTArrayAccess && ((ASTArrayAccess) expression).getImage().equals("new")) {
                return new StringInstantiationResult("New String instantiation without explicit encoding");
            } else if (expression instanceof ASTMethodInvocation && ((ASTMethodInvocation) expression).getImage().equals("new")) {
                return new StringInstantiationResult("New String instantiation without explicit encoding");
            } else {
                return new StringInstantiationResult("New String instantiation");
            }
        } else {
            return new StringInstantiationResult("No warning");
        }
    }

    @Override
    public Object visit(ASTNewArrayExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        StringInstantiationResult result = checkNode(node, data);
        if (result.shouldReport()) {
            addRuleViolation(result.getRuleMessage());
        }
        return super.visit(node, data);
    }

    private StringInstantiationResult checkNode(ASTMethodInvocation node, Object data) {
        List<ASTExpression> arguments = node.getArguments();
        if (arguments != null && !arguments.isEmpty()) {
            ASTExpression firstArgument = arguments.get(0);
            if (firstArgument instanceof ASTPrimaryExpression && firstArgument.getImage().equals("new")) {
                ASTClassOrInterfaceDeclaration classDeclaration = firstArgument.getParent().getParent();
                if (classDeclaration != null && classDeclaration.getImage().equals("String")) {
                    return new StringInstantiationResult("New String instantiation without explicit encoding");
                }
            }
        }
        return new StringInstantiationResult("No warning");
    }

    @Override
    public Object visit(ASTMethodCallExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorCallExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodReferenceExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLiteralExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        return super.visit(node, data);
    }

    public class StringInstantiationResult {
        private String message;

        public StringInstantiationResult(String message) {
            this.message = message;
        }

        public String getRuleMessage() {
            return message;
        }

        public boolean shouldReport() {
            return !message.isEmpty();
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        addRuleChainVisitor(this, MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration n, Object data) {
        if (n.getBody() == null || n.getBody().getText().trim().isEmpty()) {
            return data;
        }

        ExpressionList body = n.getBody().getStatementList();
        for (Object stmt : body.getStatements()) {
            if (stmt instanceof MethodCallExpression) {
                MethodCallExpression call = (MethodCallExpression) stmt;
                if (call.getMethodName().getImage().equals("new") && call.getType() instanceof PrimitiveType) {
                    if (((PrimitiveType) call.getType()).getPrimitiveType() == PrimitiveType.PrimitiveType.STRING) {
                        addViolation(this, data, n);
                    }
                }
            } else if (stmt instanceof ExpressionStatement) {
                ExpressionStatement exprStmt = (ExpressionStatement) stmt;
                if (exprStmt.getExpression() instanceof NewClassExpression) {
                    NewClassExpression newExpr = (NewClassExpression) exprStmt.getExpression();
                    if (newExpr.getType() instanceof PrimitiveType) {
                        if (((PrimitiveType) newExpr.getType()).getPrimitiveType() == PrimitiveType.PrimitiveType.STRING) {
                            addViolation(this, data, n);
                        }
                    }
                } else if (exprStmt.getExpression() instanceof ArrayAccessExpression) {
                    ArrayAccessExpression access = (ArrayAccessExpression) exprStmt.getExpression();
                    if (access.getArray() instanceof ArrayCreationExpression) {
                        ArrayCreationExpression creation = (ArrayCreationExpression) access.getArray();
                        if (creation.getType() instanceof PrimitiveType) {
                            if (((PrimitiveType) creation.getType()).getPrimitiveType() == PrimitiveType.PrimitiveType.STRING) {
                                addViolation(this, data, n);
                            }
                        }
                    }
                }
            }
        }

        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid instantiating String objects.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// new 'new String's
public class Foo {
    private String bar = new String("bar");
    private String baz = new String();
}
```
2. This is a positive test case
```java
// new String array
public class Foo {
    private String[] bar = new String[5];
}
```
3. This is a positive test case
```java
// using multiple parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length);
    }
}
```
4. This is a positive test case
```java
// using 4 parameter constructor
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes, 0, bytes.length, "some-encoding");
    }
}
```
5. This is a positive test case
```java
// byte array constructor is ok
public class Foo {
    void foo() {
        byte[] bytes = new byte[50];
        String bar = new String(bytes);
    }
}
```
6. This is a negative test case
```java
// Method returning new String
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
7. This is a positive test case
```java
// Not a new String
import my.String;
public class Foo {
    String foo() {
        return new String("foo");
    }
}
```
8. This is a negative test case
```java
// Returns new String(str)
public class Foo {
    String foo(String str) {
        return new String(str);
    }
}
```
9. This is a negative test case
```java
// #2141 [java] StringInstatiation: False negative with String-array access
public class Foo {
    public void bar() {
        String[] arr = getArray();
        String s = new String(arr[0]);
        // better
        String s2 = arr[0];
    }
    public void bar2() {
        String[][] arr = getArray2();
        String s = new String(arr[0][0]);
    }
}
```
10. This is a negative test case
```java
// [java] StringInstantiation: false negative when using method result #3848
public class Foo {
    String getLiteral() {
        return "foo";
    }
    String foo() {
        return new String(getLiteral()); // should report a warning at this line
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(AssignAccessExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ArrayAccessExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignArrayAccessExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewArrayExpr node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpr node, Object data) {
        if (node.getType().getQualifiedName().equals("java.lang.String")) {
            if (node.getArguments().size() == 0) {
                addViolation(this, data, node);
            } else if (node.getArguments().size() == 1) {
                Object argument = node.getArguments().get(0);
                if (argument instanceof NewArrayExpr || argument instanceof ArrayAccessExpr || argument instanceof AssignArrayAccessExpr) {
                    return super.visit(node, data);
                }
            } else if (node.getArguments().size() == 4) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 130.1767554283142 秒
