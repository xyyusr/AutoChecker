开始

========================================== Rule SignatureDeclareThrowsExceptionRule ===========================================
一共 22 个测试用例
正例 15 个
反例 7 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}
```
2. This is a positive test case
```java
// ok
public class Foo {
    void foo() {}
}
```
3. This is a negative test case
```java
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}
```
4. This is a positive test case
```java
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }
```
5. This is a positive test case
```java
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }
```
6. This is a positive test case
```java
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}
```
7. This is a positive test case
```java
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}
```
8. This is a positive test case
```java
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}
```
9. This is a negative test case
```java
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
10. This is a negative test case
```java
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
11. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}
```
12. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
13. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}
```
14. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
15. This is a positive test case
```java
// Generics
public class Foo {
    public <T> Bar<T> foo() { /* blah */}
}
class Bar<X> {}
```
16. This is a positive test case
```java
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}
```
17. This is a negative test case
```java
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}
```
18. This is a positive test case
```java
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}
@interface Readonly {}
```
19. This is a negative test case
```java
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // <-- this is reported
}
```
20. This is a negative test case
```java
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}
```
21. This is a positive test case
```java
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}
```
22. This is a positive test case
```java
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}
```
2. This is a positive test case
```java
// ok
public class Foo {
    void foo() {}
}
```
3. This is a negative test case
```java
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}
```
4. This is a positive test case
```java
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }
```
5. This is a positive test case
```java
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }
```
6. This is a positive test case
```java
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}
```
7. This is a positive test case
```java
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}
```
8. This is a positive test case
```java
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}
```
9. This is a negative test case
```java
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
10. This is a negative test case
```java
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
11. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}
```
12. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
13. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}
```
14. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
15. This is a positive test case
```java
// Generics
public class Foo {
    public <T> Bar<T> foo() { /* blah */}
}
class Bar<X> {}
```
16. This is a positive test case
```java
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}
```
17. This is a negative test case
```java
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}
```
18. This is a positive test case
```java
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}
@interface Readonly {}
```
19. This is a negative test case
```java
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // <-- this is reported
}
```
20. This is a negative test case
```java
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}
```
21. This is a positive test case
```java
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}
```
22. This is a positive test case
```java
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {

    public SignatureDeclareThrowsExceptionRule() {
        addRuleMessage(
                "A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.");
        addRulePriority(RulePriority.LOW);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getExceptionList() != null && node.getExceptionList().getExceptions().stream()
                .map(JavaType::getQualifiedName).anyMatch(qname -> qname.equals("java.lang.Exception"))) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        if (node.getConstructorList() != null) {
            node.getConstructorList().forEach(constructor -> {
                if (constructor.getExceptionList() != null && constructor.getExceptionList().getExceptions().stream()
                        .map(JavaType::getQualifiedName).anyMatch(qname -> qname.equals("java.lang.Exception"))) {
                    addViolation(data, this, constructor);
                }
            });
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        if (node.getScope() instanceof MethodDeclaration) {
            MethodDeclaration methodDeclaration = (MethodDeclaration) node.getScope();
            if (methodDeclaration.getExceptionList() != null && methodDeclaration.getExceptionList().getExceptions().stream()
                    .map(JavaType::getQualifiedName).anyMatch(qname -> qname.equals("java.lang.Exception"))) {
                addViolation(data, this, methodDeclaration);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SimpleMethodCallExpression node, Object data) {
        if (node.getScope() instanceof ClassOrInterfaceDeclaration) {
            ClassOrInterfaceDeclaration classOrInterfaceDeclaration = (ClassOrInterfaceDeclaration) node.getScope();
            if (classOrInterfaceDeclaration.getConstructorList() != null) {
                classOrInterfaceDeclaration.getConstructorList().forEach(constructor -> {
                    if (constructor.getExceptionList() != null && constructor.getExceptionList().getExceptions().stream()
                            .map(JavaType::getQualifiedName).anyMatch(qname -> qname.equals("java.lang.Exception"))) {
                        addViolation(data, this, constructor);
                    }
                });
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorDeclaration node, Object data) {
        if (node.getExceptionList() != null && node.getExceptionList().getExceptions().stream()
                .map(JavaType::getQualifiedName).anyMatch(qname -> qname.equals("java.lang.Exception"))) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ExplicitConstructorInvocation node, Object data) {
        if (node.getExceptionList() != null && node.getExceptionList().getExceptions().stream()
                .map(JavaType::getQualifiedName).anyMatch(qname -> qname.equals("java.lang.Exception"))) {
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AnnotationTypeDeclaration node, Object data) {
        if (node.getMembers() != null) {
            node.getMembers().forEach(member -> {
                if (member instanceof AnnotationTypeMemberDeclaration) {
                    AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration = (AnnotationTypeMemberDeclaration) member;
                    if (annotationTypeMemberDeclaration.getAnnotations().stream()
                            .anyMatch(annotation -> "java.lang.Exception".equals(annotation.getQualifiedName()))) {
                        addViolation(data, this, annotationTypeMemberDeclaration);
                    }
                }
            });
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}
```
2. This is a positive test case
```java
// ok
public class Foo {
    void foo() {}
}
```
3. This is a negative test case
```java
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}
```
4. This is a positive test case
```java
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }
```
5. This is a positive test case
```java
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }
```
6. This is a positive test case
```java
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}
```
7. This is a positive test case
```java
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}
```
8. This is a positive test case
```java
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}
```
9. This is a negative test case
```java
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
10. This is a negative test case
```java
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
11. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}
```
12. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
13. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}
```
14. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
15. This is a positive test case
```java
// Generics
public class Foo {
    public <T> Bar<T> foo() { /* blah */}
}
class Bar<X> {}
```
16. This is a positive test case
```java
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}
```
17. This is a negative test case
```java
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}
```
18. This is a positive test case
```java
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}
@interface Readonly {}
```
19. This is a negative test case
```java
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // <-- this is reported
}
```
20. This is a negative test case
```java
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}
```
21. This is a positive test case
```java
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}
```
22. This is a positive test case
```java
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

出现语法错误，这一轮舍弃，直接重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}
```
2. This is a positive test case
```java
// ok
public class Foo {
    void foo() {}
}
```
3. This is a negative test case
```java
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}
```
4. This is a positive test case
```java
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }
```
5. This is a positive test case
```java
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }
```
6. This is a positive test case
```java
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}
```
7. This is a positive test case
```java
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}
```
8. This is a positive test case
```java
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}
```
9. This is a negative test case
```java
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
10. This is a negative test case
```java
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
11. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}
```
12. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
13. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}
```
14. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
15. This is a positive test case
```java
// Generics
public class Foo {
    public <T> Bar<T> foo() { /* blah */}
}
class Bar<X> {}
```
16. This is a positive test case
```java
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}
```
17. This is a negative test case
```java
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}
```
18. This is a positive test case
```java
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}
@interface Readonly {}
```
19. This is a negative test case
```java
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // <-- this is reported
}
```
20. This is a negative test case
```java
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}
```
21. This is a positive test case
```java
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}
```
22. This is a positive test case
```java
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {

    public SignatureDeclareThrowsExceptionRule() {
        addRuleMatch("method/constructor shouldn't explicitly throw the generic java.lang.Exception");
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getThrows().size() > 0) {
            Type type = TypeUtils.getType(node.getThrows().get(0));
            if (type.getName().equals("java.lang.Exception") && !isExemptMethod(node)) {
                addViolation(data, this, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorDeclaration node, Object data) {
        if (node.getThrows().size() > 0) {
            Type type = TypeUtils.getType(node.getThrows().get(0));
            if (type.getName().equals("java.lang.Exception") && !isExemptMethod(node)) {
                addViolation(data, this, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isExemptMethod(ASTNode node) {
        if (node instanceof MethodDeclaration) {
            MethodDeclaration method = (MethodDeclaration) node;
            if (method.getModifiers().contains(ModifierEnum.STATIC)) {
                return true;
            }
            if (method.getModifiers().contains(ModifierEnum.FINAL)) {
                return true;
            }
            if (method.getName().startsWith("setUp") || method.getName().startsWith("tearDown")) {
                return true;
            }
            if (node.getAncestor(MethodDeclaration.class) instanceof MethodDeclaration) {
                MethodDeclaration parentMethod = (MethodDeclaration) node.getAncestor(MethodDeclaration.class);
                if (parentMethod.getModifiers().contains(ModifierEnum.STATIC)) {
                    return true;
                }
                if (parentMethod.getModifiers().contains(ModifierEnum.FINAL)) {
                    return true;
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}
```
2. This is a positive test case
```java
// ok
public class Foo {
    void foo() {}
}
```
3. This is a negative test case
```java
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}
```
4. This is a positive test case
```java
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }
```
5. This is a positive test case
```java
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }
```
6. This is a positive test case
```java
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}
```
7. This is a positive test case
```java
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}
```
8. This is a positive test case
```java
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}
```
9. This is a negative test case
```java
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
10. This is a negative test case
```java
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
11. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}
```
12. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
13. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}
```
14. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
15. This is a positive test case
```java
// Generics
public class Foo {
    public <T> Bar<T> foo() { /* blah */}
}
class Bar<X> {}
```
16. This is a positive test case
```java
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}
```
17. This is a negative test case
```java
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}
```
18. This is a positive test case
```java
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}
@interface Readonly {}
```
19. This is a negative test case
```java
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // <-- this is reported
}
```
20. This is a negative test case
```java
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}
```
21. This is a positive test case
```java
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}
```
22. This is a positive test case
```java
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {

    public SignatureDeclareThrowsExceptionRule() {
        addRuleMatch(JavaliMethodDeclaration.class, "methodDecl");
        addRuleMatch(JavaliConstructorDeclaration.class, "constructorDecl");
    }

    @Override
    public void visit(JavaliMethodDeclaration node, Object data) {
        Collection<TypeSpec> exceptions = getExceptionTypes(node);
        for (TypeSpec exception : exceptions) {
            if (exception.getName().equals("java.lang.Exception")) {
                addViolation(data, node);
                return;
            }
        }
        super.visit(node, data);
    }

    @Override
    public void visit(JavaliConstructorDeclaration node, Object data) {
        Collection<TypeSpec> exceptions = getExceptionTypes(node);
        for (TypeSpec exception : exceptions) {
            if (exception.getName().equals("java.lang.Exception")) {
                addViolation(data, node);
                return;
            }
        }
        super.visit(node, data);
    }

    private Collection<TypeSpec> getExceptionTypes(JavaliMethodDeclaration node) {
        return node.getExceptions();
    }

    private Collection<TypeSpec> getExceptionTypes(JavaliConstructorDeclaration node) {
        return node.getExceptions();
    }

    @Override
    public void visit(JavaliMethodDeclaration node, Object data, NodeStream stream) {
        if (isJUnitSetupMethod(node, stream)) {
            return;
        }
        Collection<TypeSpec> exceptions = getExceptionTypes(node);
        for (TypeSpec exception : exceptions) {
            if (exception.getName().equals("java.lang.Exception")) {
                addViolation(data, node);
                return;
            }
        }
        super.visit(node, data, stream);
    }

    @Override
    public void visit(JavaliConstructorDeclaration node, Object data, NodeStream stream) {
        if (isJUnitSetupMethod(node, stream)) {
            return;
        }
        Collection<TypeSpec> exceptions = getExceptionTypes(node);
        for (TypeSpec exception : exceptions) {
            if (exception.getName().equals("java.lang.Exception")) {
                addViolation(data, node);
                return;
            }
        }
        super.visit(node, data, stream);
    }

    private boolean isJUnitSetupMethod(JavaliMethodDeclaration node, NodeStream stream) {
        if (node.getName().equals("setUp") || node.getName().equals("tearDown")) {
            String className = node.getParent().getName();
            if (className.startsWith("net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception")) {
                return true;
            }
            if (className.startsWith("junit.framework.TestCase")) {
                if (hasExplicitImport(node, "net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase")) {
                    return true;
                }
                if (hasImplicitImport(node, "net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase")) {
                    return true;
                }
                if (hasSuperclass(node, "net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase")) {
                    return true;
                }
                if (isInSamePackage(node, "net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase")) {
                    return true;
                }
            }
            if (node.getName().startsWith("test")) {
                if (hasExplicitImport(node, "junit.framework.TestCase")) {
                    return true;
                }
                if (hasImplicitImport(node, "junit.framework.TestCase")) {
                    return true;
                }
                if (hasSuperclass(node, "junit.framework.TestCase")) {
                    return true;
                }
                if (isInSamePackage(node, "junit.framework.TestCase")) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean hasExplicitImport(JavaliMethod node, String className) {
        String[] imports = node.getImports();
        for (String importName : imports) {
            if (importName.equals(className.replace(".", "/"))) {
                return true;
            }
        }
        return false;
    }

    private boolean hasImplicitImport(JavaliMethod node, String className) {
        String[] imports = node.getImports();
        for (String importName : imports) {
            if (importName.startsWith(className.replace(".", "/") + ".")) {
                return true;
            }
        }
        return false;
    }

    private boolean hasSuperclass(JavaliMethod node, String className) {
        String[] superclasses = node.getSuperclasses();
        for (String superclass : superclasses) {
            if (superclass.equals(className.replace(".", "/"))) {
                return true;
            }
        }
        return false;
    }

    private boolean isInSamePackage(JavaliMethod node, String className) {
        String nodePackage = node.getParent().getParent().getPackage().getName();
        String classNamePackage = className.replace(".", "/");
        return nodePackage.equals(classNamePackage);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method throws Exception
public class Foo {
    void foo() throws Exception {}
}
```
2. This is a positive test case
```java
// ok
public class Foo {
    void foo() {}
}
```
3. This is a negative test case
```java
// constructor throws Exception
public class Foo {
    Foo() throws Exception {}
}
```
4. This is a positive test case
```java
// constructor throws IOException
import java.io.IOException;
            public class Foo {
                Foo() throws IOException { }
            }
```
5. This is a positive test case
```java
// method throws IOException
import java.io.IOException;
            public class Foo {
                void foo() throws IOException { }
            }
```
6. This is a positive test case
```java
// skip junit3 setUp method
import junit.framework.*;
public class Foo extends TestCase {
    void setUp() throws Exception {}
}
```
7. This is a positive test case
```java
// skip junit3 tearDown method
import junit.framework.*;
public class Foo extends TestCase {
    void tearDown() throws Exception {}
}
```
8. This is a positive test case
```java
// JUnit 4 testcase
import org.junit.*;
public class Foo {
    @Before
    void setUp() throws Exception {}
}
```
9. This is a negative test case
```java
// Don't skip other methods
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
10. This is a negative test case
```java
import junit.framework.*;
public class Foo extends TestCase {
    void bar() throws Exception {}
}
```
11. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase
public class Foo extends net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase {
    void setUp() throws Exception {}
}
```
12. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, imported explicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
13. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase, but is imported implicitly
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.*;
public class Foo extends MyTestCase {
 void setUp() throws Exception {}
}
```
14. This is a positive test case
```java
// skip junit setUp method where the superclass is TestCase  and is in the same package
package net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception;

public class Foo extends MyTestCase {
    void setUp() throws Exception {}
}
```
15. This is a positive test case
```java
// Generics
public class Foo {
    public <T> Bar<T> foo() { /* blah */}
}
class Bar<X> {}
```
16. This is a positive test case
```java
// skip any method starting with 'test' for junit3
import junit.framework.*;
public class FooTest extends TestCase {
    public void testFoo() throws Exception {}
}
```
17. This is a negative test case
```java
// #913 SignatureDeclareThrowsException is raised twice
import javax.swing.SwingWorker;
public class BugSignature {
  public void record() {
    SwingWorker worker = new SwingWorker() {
      protected String construct() throws Exception {
        //
      }
    };
  }
}
```
18. This is a positive test case
```java
// #1535 [java] SignatureDeclareThrowsException: ClassCastException with Annotation
import java.util.List;
public class UnmodifiableList<T> implements @Readonly List<@Readonly T> {}
@interface Readonly {}
```
19. This is a negative test case
```java
// #350 allow throws exception when overriding a method defined elsewhere
public class BugSignature implements LousyInterface {
    @Override
    public void record() throws Exception {
    }
}
interface LousyInterface {
    void record() throws Exception; // <-- this is reported
}
```
20. This is a negative test case
```java
import junit.framework.*;

public class JUnitAnnotationTest extends TestCase {
    public JUnitAnnotationTest() throws Exception {
    }
}
```
21. This is a positive test case
```java
// #1369 ClassCastException in annotated extends
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public final class Namespace {

    @Target(ElementType.TYPE_USE)
    public @interface Weird {
    }

    public class WeirdException extends @Weird Exception {
    }

}
```
22. This is a positive test case
```java
// #4477:[java] SignatureDeclareThrowsException: false-positive with TestNG annotations
import net.sourceforge.pmd.lang.java.rule.design.signaturedeclarethrowsexception.MyTestCase;
public class Foo extends MyTestCase {
    @org.testng.annotations.AfterClass
    void setUp() throws Exception {}
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule {

    public SignatureDeclareThrowsExceptionRule() {
        super(JavaMethodDeclaration.class, JavaConstructorDeclaration.class);
    }

    @Override
    public Object visit(JavaMethodDeclaration node, Object data) {
        if (node.getThrowsClause() != null && node.getThrowsClause().getExceptions().contains("java.lang.Exception")) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaConstructorDeclaration node, Object data) {
        if (node.getThrowsClause() != null && node.getThrowsClause().getExceptions().contains("java.lang.Exception")) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaClassOrInterfaceType node, Object data) {
        if (node.getImage().equals("java.lang.Exception")) {
            return super.visit(node, data);
        }
        if (node.getSuperClass().getImage().equals("java.lang.Exception")) {
            return super.visit(node, data);
        }
        if (node.getInterfaces().stream().anyMatch(JavaClassOrInterfaceType.class::isInstance) && ((JavaClassOrInterfaceType) node.getInterfaces().get(0)).getImage().equals("java.lang.Exception")) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaImport node, Object data) {
        if (node.getImportedName().getImage().equals("java.lang.Exception") && node.getStatic() == null) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 133.07507419586182 秒
