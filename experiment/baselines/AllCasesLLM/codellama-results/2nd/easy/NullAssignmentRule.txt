开始

========================================== Rule NullAssignmentRule ===========================================
一共 19 个测试用例
正例 14 个
反例 5 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.function.Function;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(AssignmentExpression.class, MethodCallExpression.class, MethodReferenceExpression.class, NewArrayAccess.class, NewClassExpression.class, NewArrayExpression.class, BinaryExpression.class, ConditionalExpression.class, Assign.class);
    }

    @Override
    public Object visit(AssignmentExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getVariable() != null && n.getVariable().getImage().equals("null")) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(MethodCallExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getArguments().size() > 0 && n.getArguments().get(0) instanceof NullLiteral) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(MethodReferenceExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getArguments().size() > 0 && n.getArguments().get(0) instanceof NullLiteral) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(NewArrayAccess n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getExpression() != null && n.getExpression().getImage().equals("null")) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(NewClassExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getArguments().size() > 0 && n.getArguments().get(0) instanceof NullLiteral) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(NewArrayExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getArgument() instanceof NullLiteral) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(BinaryExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getLeftOperand() != null && n.getLeftOperand().getImage().equals("null")) {
                if (!(n.getRightOperand() instanceof NullLiteral && n.getOperator() == BinaryExpression.Operator.EQUALS)) {
                    addViolation(this, data, n);
                }
            }
        }
        return result;
    }

    @Override
    public Object visit(ConditionalExpression n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getTrueExpression() != null && n.getTrueExpression().getImage().equals("null")) {
                addViolation(this, data, n);
            }
            if (n.getFalseExpression() != null && n.getFalseExpression().getImage().equals("null")) {
                addViolation(this, data, n);
            }
        }
        return result;
    }

    @Override
    public Object visit(Assign n, Object data) {
        Object result = super.visit(n, data);
        if (result == null || !(result instanceof Boolean)) {
            return result;
        }
        Boolean isOK = (Boolean) result;
        if (!isOK) {
            if (n.getRightHandSide() != null && n.getRightHandSide().getImage().equals("null")) {
                addViolation(this, data, n);
            }
        }
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class,
                Assign.class,
                AssignExpr.class
        );
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.getKind() == AssignKind.ASSIGN) {
            if (node.getAssignedExpr() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (node.getAssignedExpr() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) node.getAssignedExpr();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.getLeftOp() instanceof VarDeclarator) {
            VarDeclarator varDeclarator = (VarDeclarator) node.getLeftOp();
            if (varDeclarator.getInitializer() == null) {
                if (node.getRightOp() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
                if (node.getRightOp() instanceof LiteralExpr) {
                    LiteralExpr literal = (LiteralExpr) node.getRightOp();
                    if (literal.getLiteral() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            } else {
                return super.visit(node, data);
            }
        }
        if (node.getLeftOp() instanceof ConditionalExpr) {
            ConditionalExpr conditional = (ConditionalExpr) node.getLeftOp();
            if (conditional.getLeftOp() instanceof NullLiteral) {
                return super.visit(node, data);
            }
            if (conditional.getLeftOp() instanceof LiteralExpr) {
                LiteralExpr literal = (LiteralExpr) conditional.getLeftOp();
                if (literal.getLiteral() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }
        if (node.getRightOp() instanceof NullLiteral) {
            return super.visit(node, data);
        }
        if (node.getRightOp() instanceof LiteralExpr) {
            LiteralExpr literal = (LiteralExpr) node.getRightOp();
            if (literal.getLiteral() instanceof NullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class, ASTTernaryExpression.class, ASTMethodCallExpression.class, ASTBinaryExpression.class, ASTPrimaryPrefix.class, ASTReturnStatement.class, ASTMethodDeclaration.class, ASTConstructorDeclaration.class, ASTAssignmentOperator.class, ASTStatementExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getRightOp().getImage().equals("=") && node.getLeft().getImage().equals("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTernaryExpression node, Object data) {
        if (node.getLeft().getImage().equals("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCallExpression node, Object data) {
        if (node.getImage().contains("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBinaryExpression node, Object data) {
        if (node.getImage().equals("== null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryPrefix node, Object data) {
        if (node.getImage().equals("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTReturnStatement node, Object data) {
        if (node.getImage().equals("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getImage().contains("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorDeclaration node, Object data) {
        if (node.getImage().contains("null")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.getImage().equals("=")) {
            return null;
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStatementExpression node, Object data) {
        if (node.getImage().equals("null")) {
            return null;
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(ASTAssignment.class, ASTTernaryExpression.class);
    }

    @Override
    public Object visit(ASTAssignment node, Object data) {
        if (visitAssignment(node, data)) {
            return report(node, "Assigning a null to a variable is usually bad form.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTernaryExpression node, Object data) {
        if (visitTernaryExpression(node, data)) {
            return report(node, "Assigning a null to a variable is usually bad form.");
        }
        return super.visit(node, data);
    }

    private boolean visitAssignment(ASTAssignment node, Object data) {
        ASTAssignmentOperator operator = node.getOperator();
        if (operator == null || operator.getImage().equals("=")) {
            ASTExpression left = node.getLeftHandSide();
            if (left instanceof ASTName) {
                ASTName name = (ASTName) left;
                if (name.getImage().equals("null")) {
                    return true;
                }
                if (name.isDeclaration()) {
                    ASTVariableDeclarator declarator = (ASTVariableDeclarator) name.getDeclaration();
                    if (declarator.getInitializer() == null) {
                        return true;
                    }
                    ASTExpression initializer = declarator.getInitializer();
                    if (initializer instanceof ASTStringLiteralExpression) {
                        ASTStringLiteralExpression stringLiteral = (ASTStringLiteralExpression) initializer;
                        if (stringLiteral.getImage().equals("null")) {
                            return true;
                        }
                    }
                }
            } else if (left instanceof ASTPrimarySuffix) {
                ASTPrimarySuffix primarySuffix = (ASTPrimarySuffix) left;
                if (primarySuffix.getOperator() == null && primarySuffix.getImage().equals("null")) {
                    return true;
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean visitTernaryExpression(ASTTernaryExpression node, Object data) {
        ASTExpression condition = node.getCondition();
        if (condition instanceof ASTName) {
            ASTName name = (ASTName) condition;
            if (name.getImage().equals("null")) {
                return true;
            }
            if (name.isDeclaration()) {
                ASTVariableDeclarator declarator = (ASTVariableDeclarator) name.getDeclaration();
                if (declarator.getInitializer() == null) {
                    return true;
                }
                ASTExpression initializer = declarator.getInitializer();
                if (initializer instanceof ASTStringLiteralExpression) {
                    ASTStringLiteralExpression stringLiteral = (ASTStringLiteralExpression) initializer;
                    if (stringLiteral.getImage().equals("null")) {
                        return true;
                    }
                }
            }
        } else if (condition instanceof ASTPrimarySuffix) {
            ASTPrimarySuffix primarySuffix = (ASTPrimarySuffix) condition;
            if (primarySuffix.getOperator() == null && primarySuffix.getImage().equals("null")) {
                return true;
            }
        }
        return super.visit(node, data);
    }

    private boolean visitMethodInvocation(ASTMethodInvocation node, Object data) {
        if (node.getSelector() instanceof ASTName) {
            ASTName name = (ASTName) node.getSelector();
            if (name.getImage().equals("null")) {
                return true;
            }
            if (name.isDeclaration()) {
                ASTVariableDeclarator declarator = (ASTVariableDeclarator) name.getDeclaration();
                if (declarator.getInitializer() == null) {
                    return true;
                }
                ASTExpression initializer = declarator.getInitializer();
                if (initializer instanceof ASTStringLiteralExpression) {
                    ASTStringLiteralExpression stringLiteral = (ASTStringLiteralExpression) initializer;
                    if (stringLiteral.getImage().equals("null")) {
                        return true;
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public NullAssignmentRule() {
        super(
                Assign.class, Assign.class, ConditionalExpression.class, ConstantExpression.class,
                MethodCall.class, NewArrayAccess.class, MethodCall.class, Assign.class
        );
    }

    @Override
    public Object visit(Assign node, Object data) {
        Object result = super.visit(node, data);
        if (result instanceof RuleChainResult) {
            RuleChainResult ruleChainResult = (RuleChainResult) result;
            if (ruleChainResult.getState() == RuleChainResult.STATE_STOP) {
                return ruleChainResult;
            }
            if (node.getLeftHandSide().getImage().equals(node.getRightHandSide().getImage())) {
                return ruleChainResult;
            }
            if (node.getLeftHandSide().getImage().contains("this") || node.getLeftHandSide().getImage().contains("super")) {
                return ruleChainResult;
            }
            if (node.getLeftHandSide().getImage().contains("[]") && node.getLeftHandSide().getImage().contains("new")) {
                return ruleChainResult;
            }
            if (node.getLeftHandSide().getImage().contains("computeIfAbsent") && node.getLeftHandSide().getImage().contains("HashMap")) {
                return ruleChainResult;
            }
            if (node.getRightHandSide() instanceof ConditionalExpression) {
                return ruleChainResult;
            }
            if (node.getRightHandSide() instanceof ConstantExpression) {
                if (((ConstantExpression) node.getRightHandSide()).getImage().equals("null")) {
                    ruleChainResult.addViolation(this, node, "NullAssignment");
                }
                return ruleChainResult;
            }
            if (node.getLeftHandSide() instanceof FieldAccess) {
                FieldAccess fieldAccess = (FieldAccess) node.getLeftHandSide();
                if (fieldAccess.getImage().contains("final") && fieldAccess.getImage().contains("=")) {
                    return ruleChainResult;
                }
            }
            if (node.getLeftHandSide() instanceof MethodCall) {
                MethodCall methodCall = (MethodCall) node.getLeftHandSide();
                if (methodCall.getImage().contains("==") && methodCall.getImage().contains("null")) {
                    return ruleChainResult;
                }
                if (methodCall.getImage().contains("getYear") && methodCall.getImage().contains("null")) {
                    return ruleChainResult;
                }
            }
            ruleChainResult.addViolation(this, node, "NullAssignment");
        }
        return ruleChainResult;
    }

    @Override
    public Object visit(ConditionalExpression node, Object data) {
        Object result = super.visit(node, data);
        if (result instanceof RuleChainResult) {
            RuleChainResult ruleChainResult = (RuleChainResult) result;
            if (node.getLeftOp() instanceof ConstantExpression && ((ConstantExpression) node.getLeftOp()).getImage().equals("null")) {
                ruleChainResult.addViolation(this, node, "NullAssignment");
            }
            if (node.getRightOp() instanceof ConstantExpression && ((ConstantExpression) node.getRightOp()).getImage().equals("null")) {
                ruleChainResult.addViolation(this, node, "NullAssignment");
            }
            return ruleChainResult;
        }
        return result;
    }

    @Override
    public Object visit(ConstantExpression node, Object data) {
        if (((ConstantExpression) node).getImage().equals("null")) {
            Object result = super.visit(node, data);
            if (result instanceof RuleChainResult) {
                RuleChainResult ruleChainResult = (RuleChainResult) result;
                ruleChainResult.addViolation(this, node, "NullAssignment");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCall node, Object data) {
        Object result = super.visit(node, data);
        if (result instanceof RuleChainResult) {
            RuleChainResult ruleChainResult = (RuleChainResult) result;
            if (node.getImage().contains("getString") && node.getImage().contains("(") && node.getImage().contains("null")) {
                ruleChainResult.addViolation(this, node, "NullAssignment");
            }
            if (node.getImage().contains("bar") && node.getImage().contains("(") && node.getImage().contains("null")) {
                ruleChainResult.addViolation(this, node, "NullAssignment");
            }
            return ruleChainResult;
        }
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 298.0237464904785 秒
