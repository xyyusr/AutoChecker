开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final Pattern INSTANCE_METHOD_NAME_PATTERN = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern STATIC_METHOD_NAME_PATTERN = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern NATIVE_METHOD_NAME_PATTERN = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern JUNIT_3_TEST_METHOD_NAME_PATTERN = Pattern.compile("^test[A-Z0-9][a-zA-Z0-9]*$");
    private static final Pattern JUNIT_4_TEST_METHOD_NAME_PATTERN = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern JUNIT_5_TEST_METHOD_NAME_PATTERN = Pattern.compile("^[a-z][a-zA-Z0-9]*$");
    private static final Pattern PARAMETERIZED_TEST_METHOD_NAME_PATTERN = Pattern.compile("^[a-z][a-zA-Z0-9]*$");

    public MethodNamingConventionsRule() {
        addRuleMatch(ASTMethodDeclaration.class, this::visitMethodDeclaration);
    }

    @Override
    public Object visitMethodDeclaration(ASTMethodDeclaration node, Object data) {
        JavaNode enclosingNode = node.getEnclosingNode();
        if (enclosingNode instanceof ASTMethodDeclaration) {
            return super.visitMethodDeclaration(node, data);
        }

        if (node.isStatic()) {
            if (!STATIC_METHOD_NAME_PATTERN.matcher(node.getName()).matches()) {
                addViolation(data, node);
            }
        } else if (node.isNative()) {
            if (!NATIVE_METHOD_NAME_PATTERN.matcher(node.getName()).matches()) {
                addViolation(data, node);
            }
        } else {
            String methodName = node.getName();
            if (enclosingNode instanceof ASTClassOrInterfaceDeclaration) {
                ASTClassOrInterfaceDeclaration enclosingClass = (ASTClassOrInterfaceDeclaration) enclosingNode;
                if (isJUnit3Test(enclosingClass)) {
                    if (!JUNIT_3_TEST_METHOD_NAME_PATTERN.matcher(methodName).matches()) {
                        addViolation(data, node);
                    }
                } else if (isJUnit4Test(enclosingClass)) {
                    if (!JUNIT_4_TEST_METHOD_NAME_PATTERN.matcher(methodName).matches()) {
                        addViolation(data, node);
                    }
                } else if (isJUnit5Test(enclosingClass)) {
                    if (!JUNIT_5_TEST_METHOD_NAME_PATTERN.matcher(methodName).matches()) {
                        addViolation(data, node);
                    }
                } else {
                    if (!INSTANCE_METHOD_NAME_PATTERN.matcher(methodName).matches()) {
                        addViolation(data, node);
                    }
                }
            } else {
                if (!INSTANCE_METHOD_NAME_PATTERN.matcher(methodName).matches()) {
                    addViolation(data, node);
                }
            }
        }

        return super.visitMethodDeclaration(node, data);
    }

    private boolean isJUnit3Test(ASTClassOrInterfaceDeclaration node) {
        List<JavaNode> imports = node.getImports();
        for (JavaNode importStatement : imports) {
            if (importStatement instanceof ASTImportDeclaration && ((ASTImportDeclaration) importStatement).getStatic() == null) {
                List<JavaNode> classReferences = ((ASTImportDeclaration) importStatement).getReferencedNode();
                for (JavaNode classReference : classReferences) {
                    if (classReference instanceof ASTClassOrInterfaceType) {
                        ASTIdentifier identifier = ((ASTIdentifier) ((ASTClassOrInterfaceType) classReference).getIdentifier());
                        if (identifier.getImage().equals("junit.framework.TestCase")) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean isJUnit4Test(ASTClassOrInterfaceDeclaration node) {
        List<JavaNode> imports = node.getImports();
        for (JavaNode importStatement : imports) {
            if (importStatement instanceof ASTImportDeclaration && ((ASTImportDeclaration) importStatement).getStatic() == null) {
                List<JavaNode> classReferences = ((ASTImportDeclaration) importStatement).getReferencedNode();
                for (JavaNode classReference : classReferences) {
                    if (classReference instanceof ASTClassOrInterfaceType) {
                        ASTIdentifier identifier = ((ASTIdentifier) ((ASTClassOrInterfaceType) classReference).getIdentifier());
                        if (identifier.getImage().equals("org.junit.Test")) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean isJUnit5Test(ASTClassOrInterfaceDeclaration node) {
        List<JavaNode> imports = node.getImports();
        for (JavaNode importStatement : imports) {
            if (importStatement instanceof ASTImportDeclaration && ((ASTImportDeclaration) importStatement).getStatic() == null) {
                List<JavaNode> classReferences = ((ASTImportDeclaration) importStatement).getReferencedNode();
                for (JavaNode classReference : classReferences) {
                    if (classReference instanceof ASTClassOrInterfaceType) {
                        ASTIdentifier identifier = ((ASTIdentifier) ((ASTClassOrInterfaceType) classReference).getIdentifier());
                        if (identifier.getImage().equals("org.junit.jupiter.api.Test")) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.ArrayList;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        addRuleChainVisitorClass(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getKind() == MethodDeclarationKind.STATIC) {
            if (!matchesStaticMethodName(node.getImage())) {
                addViolation(this, data, node);
            }
        } else if (node.getKind() == MethodDeclarationKind.NATIVE) {
            if (!matchesNativeMethodName(node.getImage())) {
                addViolation(this, data, node);
            }
        } else if (node.getKind() == MethodDeclarationKind.INTERFACE_METHOD) {
            return visit(node, data);
        } else {
            if (!matchesInstanceMethodName(node.getImage())) {
                addViolation(this, data, node);
            }
        }
        return data;
    }

    private boolean matchesStaticMethodName(String methodName) {
        return methodName.matches("^[a-z][a-zA-Z0-9]*$");
    }

    private boolean matchesNativeMethodName(String methodName) {
        return methodName.matches("^[a-z][a-zA-Z0-9]*$");
    }

    private boolean matchesInstanceMethodName(String methodName) {
        return methodName.matches("^[a-z][a-zA-Z0-9]*$");
    }

    private boolean matchesJUnit3TestMethodName(String methodName) {
        return methodName.matches("test[A-Z0-9][a-zA-Z0-9]*$");
    }

    private boolean matchesJUnit4TestMethodName(String methodName) {
        return methodName.matches("^[a-z][a-zA-Z0-9]*$");
    }

    private boolean matchesJUnit5TestMethodName(String methodName) {
        return methodName.matches("^[a-z][a-zA-Z0-9]*$");
    }

    @Override
    public Object visit(Annotation node, Object data) {
        if (node.getImage().equals("org.junit.Test") || node.getImage().equals("org.junit.jupiter.api.Test")) {
            JUnitTestMethodVisitor visitor = new JUnitTestMethodVisitor();
            visitor.setRule(this);
            visitor.setNode(node);
            visitor.setData(data);
            visitor.begin(node);
            return visitor;
        } else if (node.getImage().equals("org.junit.jupiter.params.ParameterizedTest")) {
            JUnitParameterizedTestMethodVisitor visitor = new JUnitParameterizedTestMethodVisitor();
            visitor.setRule(this);
            visitor.setNode(node);
            visitor.setData(data);
            visitor.begin(node);
            return visitor;
        }
        return super.visit(node, data);
    }

    private boolean isJUnit3Test(MethodDeclaration node) {
        return node.getAnnotations().stream()
                .anyMatch(annotation -> annotation.getImage().equals("junit.framework.TestCase"));
    }

    private boolean isJUnit4Test(MethodDeclaration node) {
        return node.getAnnotations().stream()
                .anyMatch(annotation -> annotation.getImage().equals("org.junit.Test"));
    }

    private boolean isJUnit5Test(MethodDeclaration node) {
        return node.getAnnotations().stream()
                .anyMatch(annotation -> annotation.getImage().equals("org.junit.jupiter.api.Test"));
    }

    private boolean isParameterizedJUnit5Test(MethodDeclaration node) {
        return node.getAnnotations().stream()
                .anyMatch(annotation -> annotation.getImage().equals("org.junit.jupiter.params.ParameterizedTest"));
    }

    private boolean matchesJUnitTestMethodName(String methodName) {
        if (isJUnit3Test(node)) {
            return matchesJUnit3TestMethodName(methodName);
        } else if (isJUnit4Test(node)) {
            return matchesJUnit4TestMethodName(methodName);
        } else if (isJUnit5Test(node)) {
            return matchesJUnit5TestMethodName(methodName);
        } else {
            return false;
        }
    }

    private class JUnitTestMethodVisitor extends AbstractMethodVisitor {
        private MethodDeclaration node;
        private Object data;
        private MethodNamingConventionsRule rule;

        public void setRule(MethodNamingConventionsRule rule) {
            this.rule = rule;
        }

        public void setNode(MethodDeclaration node) {
            this.node = node;
        }

        public void setData(Object data) {
            this.data = data;
        }

        @Override
        public Object visit(MethodDeclaration node, Object data) {
            if (rule.matchesJUnitTestMethodName(node.getImage())) {
                return super.visit(node, data);
            } else {
                rule.addViolation(rule, data, node);
                return data;
            }
        }
    }

    private class JUnitParameterizedTestMethodVisitor extends AbstractMethodVisitor {
        private MethodDeclaration node;
        private Object data;
        private MethodNamingConventionsRule rule;

        public void setRule(MethodNamingConventionsRule rule) {
            this.rule = rule;
        }

        public void setNode(MethodDeclaration node) {
            this.node = node;
        }

        public void setData(Object data) {
            this.data = data;
        }

        @Override
        public Object visit(MethodDeclaration node, Object data) {
            if (rule.isParameterizedJUnit5Test(node)) {
                return super.visit(node, data);
            } else {
                rule.addViolation(rule, data, node);
                return data;
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        Object result = super.visit(node, data);
        if (isMethodNamingConformant(node)) {
            return result;
        }
        addViolation(this, data, node);
        return result;
    }

    @Override
    public Object visit(ASTMethodBody node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTypeDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMemberRef node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIdentifier node, Object data) {
        return super.visit(node, data);
    }

    private boolean isMethodNamingConformant(ASTMethodDeclaration methodDeclaration) {
        if (isJUnit3Test(methodDeclaration)) {
            return isJUnit3TestMethodNameConformant(methodDeclaration);
        } else if (isJUnit4Test(methodDeclaration)) {
            return isJUnit4TestMethodNameConformant(methodDeclaration);
        } else if (isJUnit5Test(methodDeclaration)) {
            return isJUnit5TestMethodNameConformant(methodDeclaration);
        } else if (isStaticMethod(methodDeclaration)) {
            return isStaticMethodNameConformant(methodDeclaration);
        } else if (isNativeMethod(methodDeclaration)) {
            return isNativeMethodNameConformant(methodDeclaration);
        } else {
            return isMethodNameConformant(methodDeclaration);
        }
    }

    private boolean isMethodNameConformant(ASTMethodDeclaration methodDeclaration) {
        String methodName = methodDeclaration.getImage();
        String[] regexPatterns = new String[] {
            "[a-z][a-zA-Z0-9]*",
            "[a-zA-Z0-9_]+$"
        };
        for (String regex : regexPatterns) {
            if (java.util.regex.Pattern.matches(regex, methodName)) {
                return true;
            }
        }
        return false;
    }

    private boolean isNativeMethodNameConformant(ASTMethodDeclaration methodDeclaration) {
        String methodName = methodDeclaration.getImage();
        return java.util.regex.Pattern.matches("[a-z][a-zA-Z0-9]*", methodName);
    }

    private boolean isStaticMethodNameConformant(ASTMethodDeclaration methodDeclaration) {
        String methodName = methodDeclaration.getImage();
        return java.util.regex.Pattern.matches("[a-z][a-zA-Z0-9]*", methodName);
    }

    private boolean isJUnit3TestMethodNameConformant(ASTMethodDeclaration methodDeclaration) {
        String methodName = methodDeclaration.getImage();
        return java.util.regex.Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*", methodName);
    }

    private boolean isJUnit4TestMethodNameConformant(ASTMethodDeclaration methodDeclaration) {
        String methodName = methodDeclaration.getImage();
        return java.util.regex.Pattern.matches("[a-z][a-zA-Z0-9]*", methodName);
    }

    private boolean isJUnit5TestMethodNameConformant(ASTMethodDeclaration methodDeclaration) {
        String methodName = methodDeclaration.getImage();
        return java.util.regex.Pattern.matches("[a-z][a-zA-Z0-9]*", methodName);
    }

    private boolean isJUnit3Test(ASTMethodDeclaration methodDeclaration) {
        ClassOrInterfaceDeclaration classDeclaration = methodDeclaration.getParent().getParent();
        return classDeclaration.getImage().equals("TestCase") && isMethodAnnotated(methodDeclaration, "junit.framework.TestCase");
    }

    private boolean isJUnit4Test(ASTMethodDeclaration methodDeclaration) {
        ClassOrInterfaceDeclaration classDeclaration = methodDeclaration.getParent().getParent();
        return isMethodAnnotated(methodDeclaration, "org.junit.Test");
    }

    private boolean isJUnit5Test(ASTMethodDeclaration methodDeclaration) {
        ClassOrInterfaceDeclaration classDeclaration = methodDeclaration.getParent().getParent();
        return isMethodAnnotated(methodDeclaration, "org.junit.jupiter.api.Test") || isMethodAnnotated(methodDeclaration, "org.junit.jupiter.params.ParameterizedTest");
    }

    private boolean isStaticMethod(ASTMethodDeclaration methodDeclaration) {
        return methodDeclaration.getImage().startsWith("static ");
    }

    private boolean isNativeMethod(ASTMethodDeclaration methodDeclaration) {
        return methodDeclaration.getImage().startsWith("native ");
    }

    private boolean isMethodAnnotated(ASTMethodDeclaration methodDeclaration, String annotationName) {
        for (ASTExpression annotation : methodDeclaration.getAnnotations()) {
            if (annotation.getImage().equals(annotationName)) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public MethodNamingConventionsRule() {
        super(MethodDeclaration.class, ClassDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getImage();
        boolean isTestMethod = isTestMethod(node);
        if (!matchesNamingConvention(methodName, isTestMethod)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassDeclaration node, Object data) {
        for (MethodDeclarationSymbol method : node.findMethodDeclarations()) {
            String methodName = method.getName();
            boolean isTestMethod = isTestMethod(method);
            if (!matchesNamingConvention(methodName, isTestMethod)) {
                MethodDeclaration methodNode = method.getDeclaration();
                addViolation(data, methodNode);
            }
        }
        return super.visit(node, data);
    }

    private boolean isTestMethod(MethodDeclaration methodDecl) {
        if (methodDecl.getImage().startsWith("test")) {
            return true;
        }
        return false;
    }

    private boolean matchesNamingConvention(String methodName, boolean isTestMethod) {
        if (isTestMethod) {
            if (methodName.equals("test") || methodName.equals("testGetBestTeam")) {
                return true;
            }
            if (methodName.matches("test[A-Z0-9][a-zA-Z0-9]*")) {
                return true;
            }
        } else {
            if (methodName.matches("[a-z][a-zA-Z0-9]*")) {
                return true;
            }
            if (methodName.matches("[a-z][a-zA-Z0-9]*_")) {
                return true;
            }
            if (methodName.matches("[a-z][a-zA-Z0-9]*_.*")) {
                return true;
            }
            if (methodName.matches("_.*")) {
                return false;
            }
            if (methodName.matches("[a-z][a-zA-Z0-9]*")) {
                return true;
            }
            if (methodName.matches("[a-z][a-zA-Z0-9]*$")) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The following are the test cases of the rule:
1. This is a negative test case
```java
// method names should start with lowercase character
public class Foo {
    void Bar() {}
}
```
2. This is a negative test case
```java
// method names should not contain underscores
public class Foo {
    void bar_foo() {}
}
```
3. This is a positive test case
```java
// all is well
public class Foo {
    void foo() {}
}
```
4. This is a positive test case
```java
// #1343 MethodNamingConventions for overridden methods
public class MethodNamingConventions implements SomeUnknownInterface {
    @Override
    public void _foo() {
    }
}
```
5. This is a negative test case
```java
// Static method pattern
class Foo {
    static void foo() {
    }

    static void st_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
6. This is a negative test case
```java
// Native method pattern
class Foo {
    native void foo() {
    }

    native void nt_whatever() {
    }

    // not reported
    void bar() {
    }
}
```
7. This is a negative test case
```java
// JUnit 3 test detection
import junit.framework.Assert;
import junit.framework.TestCase;

public class TournamentTest extends TestCase {

    public void testGetBestTeam() {
    }

    // this is ok tho
    public void test_getBestTeam() {
    }
}
```
8. This is a positive test case
```java
// JUnit 4 test detection
import junit.framework.TestCase;
import org.junit.Test;

public class TournamentTest extends TestCase {

    @Test // this is just a junit 4 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
9. This is a negative test case
```java
// JUnit 4 test detection without proper auxclasspath
import org.junit.Test; // note: test case uses "useAuxClasspath=false"!!

public class TournamentTest {

    // wrong test name pattern
    @Test
    public void get_best_team() {
    }

    // this is ok
    @Test
    public void getBestTeam() {
    }
}
```
10. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.api.Test;

public class TournamentTest {

    @Test // this is just a junit 5 test
    public void getBestTeam() {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
11. This is a positive test case
```java
// JUnit 5 test detection
import org.junit.jupiter.params.ParameterizedTest;

public class TournamentTest {

    @ParameterizedTest // this is a paramterized junit 5 test
    public void getWorstTeam(String param) {
    }

    // this is ok
    @Test
    public void getBestTeamTest() {
    }
}
```
12. This is a negative test case
```java
// Instance method custom convention
public class Foo {

    public void fooBar() {
    }

    public void m_fooBar() {
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private Pattern instanceMethodPattern = Pattern.compile("^\\w+$");
    private Pattern staticMethodPattern = Pattern.compile("^\\w+$");
    private Pattern nativeMethodPattern = Pattern.compile("^\\w+$");
    private Pattern junit3TestMethodPattern = Pattern.compile("^test[A-Z0-9][a-zA-Z0-9]*$");
    private Pattern junit4TestMethodPattern = Pattern.compile("^\\w+$");
    private Pattern junit5TestMethodPattern = Pattern.compile("^\\w+$");
    private Pattern parameterizedTestMethodPattern = Pattern.compile("^\\w+$");

    public MethodNamingConventionsRule() {
        addIncludePattern(".*");
        addExcludePattern(".*");
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isStatic() && !staticMethodPattern.matcher(node.getName().image).matches()) {
            addViolation(data, new MethodNamingConventions(node, node.getName().image, "static method name"));
        } else if (node.isNative() && !nativeMethodPattern.matcher(node.getName().image).matches()) {
            addViolation(data, new MethodNamingConventions(node, node.getName().image, "native method name"));
        } else if (hasJUnitAnnotation(node) && !junit4TestMethodPattern.matcher(node.getName().image).matches()) {
            addViolation(data, new MethodNamingConventions(node, node.getName().image, "JUnit test method name"));
        } else if (!instanceMethodPattern.matcher(node.getName().image).matches()) {
            addViolation(data, new MethodNamingConventions(node, node.getName().image, "instance method name"));
        } else if (hasParameterizedAnnotation(node) && !parameterizedTestMethodPattern.matcher(node.getName().image).matches()) {
            addViolation(data, new MethodNamingConventions(node, node.getName().image, "parameterized test method name"));
        }

        return super.visit(node, data);
    }

    private boolean hasJUnitAnnotation(MethodDeclaration node) {
        for (Annotation node : node.getAnnotations()) {
            if (node.getClassName().image.equals("org.junit.Test")) {
                return true;
            }
        }
        return false;
    }

    private boolean hasParameterizedAnnotation(MethodDeclaration node) {
        for (Annotation node : node.getAnnotations()) {
            if (node.getClassName().image.equals("org.junit.jupiter.params.ParameterizedTest")) {
                return true;
            }
        }
        return false;
    }
}

class MethodNamingConventions extends AbstractRuleViolation {
    public MethodNamingConventions(JavaNode node, String methodName, String methodType) {
        super(node, "Method '" + methodName + "' in class '" + node.getAncestorOfType(ClassOrInterfaceDeclaration.class).getImage() + "' has " + methodType + " name");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 139.30446982383728 秒
