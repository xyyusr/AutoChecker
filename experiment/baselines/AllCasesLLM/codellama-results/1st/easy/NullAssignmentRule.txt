开始

========================================== Rule NullAssignmentRule ===========================================
一共 19 个测试用例
正例 14 个
反例 5 个
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class, 
                AssignExpr.class
        );
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node instanceof NullAssignment) {
            return super.visit(node, data);
        }

        if (node.getRightOp() instanceof NullLiteral) {
            if (node.getLeftOp() instanceof VariableDecl) {
                VariableDecl variable = (VariableDecl) node.getLeftOp();
                if (variable.getVarDeclSpecifiers().size() == 0) {
                    return super.visit(node, data);
                }
            }
            if (node.getRightOp() instanceof UnaryExpr) {
                UnaryExpr unary = (UnaryExpr) node.getRightOp();
                if (unary.getOperator() == UnaryExpr.Operator.LOGICAL_NOT) {
                    if (unary.getOperand() instanceof NullLiteral) {
                        return super.visit(node, data);
                    }
                }
            }
            if (node.getRightOp() instanceof CastExpr) {
                CastExpr cast = (CastExpr) node.getRightOp();
                if (cast.getExpression() instanceof NullLiteral) {
                    return super.visit(node, data);
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(UnaryExpr node, Object data) {
        if (node.getOperator() != UnaryExpr.Operator.LOGICAL_NOT) {
            return super.visit(node, data);
        }

        if (node.getOperand() instanceof NullLiteral) {
            return super.visit(node, data);
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(CastExpr node, Object data) {
        if (node.getExpression() instanceof NullLiteral) {
            return super.visit(node, data);
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(NullLiteral node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(VariableDecl node, Object data) {
        if (node.getVarDeclSpecifiers().size() == 0) {
            return super.visit(node, data);
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(
            Assign.class, 
            Assign.class, 
            Expression.class, 
            Assign.class, 
            ConditionalExpression.class, 
            ConditionalExpression.class, 
            Assign.class, 
            Assign.class, 
            Assign.class, 
            Assign.class, 
            ConditionalExpression.class, 
            Assign.class, 
            Assign.class, 
            AssignmentOperator.class, 
            MethodCallExpr.class, 
            Assign.class, 
            Assign.class
        );
    }

    @Override
    public Object visit(Assign node, Object data) {
        if (node.isAssignment()) {
            if (!node.getOperand(0).isVariableDeclarator()) {
                if (node.getOperand(1) instanceof NullLiteral || node.getOperand(1) == null) {
                    addViolation(this, data, node);
                }
            } else {
                if (node.getOperand(1) instanceof NullLiteral || node.getOperand(1) == null) {
                    if (!node.getAttributes().containsKey(VariableDeclaratorNode.VARIABLE_DECLARATOR_NOT_INITIALIZED)) {
                        addViolation(this, data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConditionalExpression node, Object data) {
        if (node.isTernaryExpression()) {
            if (node.getLeftOperand() instanceof NullLiteral || node.getLeftOperand() == null) {
                if (node.getRightOperand() instanceof NullLiteral || node.getRightOperand() == null) {
                    addViolation(this, data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        if (node.getArgumentCount() == 1) {
            Object argument = node.getArgument(0);
            if (argument instanceof NullLiteral || argument == null) {
                return super.visit(node, data);
            } else {
                if (argument instanceof NullLiteral || argument == null) {
                    if (node.getReturnType().isPrimitive() || node.getReturnType().isVoid()) {
                        addViolation(this, data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {
    @Override
    public Object visit(ASTAssignment node, Object data) {
        if (node.getChildCount() == 1 && node.getChild(0) instanceof ASTLiteral) {
            return super.visit(node, data);
        }

        if (node.getChildCount() == 2 && node.getChild(0) instanceof ASTIdentifier && node.getChild(1) instanceof ASTAssignmentOperatorAssign) {
            ASTExpression expression = (ASTExpression) node.getChild(1).getNextChild();
            if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
                return super.visit(node, data);
            }
        }

        if (node.getChildCount() == 2 && node.getChild(0) instanceof ASTIdentifier && node.getChild(1) instanceof ASTConditionalExpression) {
            ASTExpression expression = ((ASTConditionalExpression) node.getChild(1)).getChild(1);
            if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
                return super.visit(node, data);
            }
        }

        if (node.getChildCount() == 3 && node.getChild(0) instanceof ASTIdentifier && node.getChild(1) instanceof ASTAssignmentOperatorAssign && node.getChild(2) instanceof ASTConditionalExpression) {
            ASTExpression expression = ((ASTConditionalExpression) node.getChild(2)).getChild(1);
            if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
                return super.visit(node, data);
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        for (Object child : node.getChildren()) {
            if (child instanceof ASTVariableDeclarator) {
                ASTVariableInitializer initializer = ((ASTVariableDeclarator) child).getInitializer();
                if (initializer != null && initializer instanceof ASTAssignment) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTReturnStatement node, Object data) {
        if (node.getChildCount() == 1 && node.getChild(0) instanceof ASTReturn) {
            ASTExpression expression = ((ASTReturn) node.getChild(0)).getExpression();
            if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCallExpression node, Object data) {
        if (node.getChildCount() == 3 && node.getChild(0) instanceof ASTPrimaryPrefix && node.getChild(1) instanceof ASTArguments && node.getChild(2) instanceof ASTExpression) {
            ASTExpression expression = (ASTExpression) node.getChild(2);
            if (expression instanceof ASTLambdaExpression) {
                ASTLambdaFormalParameterList formalParameters = ((ASTLambdaExpression) expression).getFormalParameters();
                if (formalParameters.getChildCount() == 1 && formalParameters.getChild(0) instanceof ASTVariableDeclarator) {
                    ASTVariableDeclarator declarator = (ASTVariableDeclarator) formalParameters.getChild(0);
                    if (declarator.getInitializer() instanceof ASTAssignment) {
                        return super.visit(node, data);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getChildCount() == 3 && node.getChild(0) instanceof ASTPrimaryExpression && node.getChild(1) instanceof ASTAssignmentOperatorAssign && node.getChild(2) instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression initializer = (ASTPrimaryExpression) node.getChild(0);
            if (initializer instanceof ASTLiteral && ((ASTLiteral) initializer).getImage().equals("null")) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTArrayAccess node, Object data) {
        if (node.getChildCount() == 2 && node.getChild(0) instanceof ASTPrimaryPrefix && node.getChild(1) instanceof ASTPrimarySuffix) {
            ASTPrimarySuffix suffix = (ASTPrimarySuffix) node.getChild(1);
            if (suffix instanceof ASTArrayAccess) {
                ASTPrimaryExpression expression = (ASTPrimaryExpression) suffix.getChild(0);
                if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTNewArray node, Object data) {
        if (node.getChildCount() == 2 && node.getChild(0) instanceof ASTNewArray && node.getChild(1) instanceof ASTExpression) {
            ASTExpression expression = (ASTExpression) node.getChild(1);
            if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentOperatorAssign node, Object data) {
        ASTExpression expression = node.getNextChild();
        if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConditionalExpression node, Object data) {
        ASTExpression expression = node.getChild(1);
        if (expression instanceof ASTLiteral && ((ASTLiteral) expression).getImage().equals("null")) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLambdaExpression node, Object data) {
        ASTLambdaFormalParameterList formalParameters = node.getFormalParameters();
        if (formalParameters.getChildCount() == 1 && formalParameters.getChild(0) instanceof ASTVariableDeclarator) {
            ASTVariableDeclarator declarator = (ASTVariableDeclarator) formalParameters.getChild(0);
            if (declarator.getInitializer() instanceof ASTAssignment) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLambdaFormalParameterList node, Object data) {
        if (node.getChildCount() == 1 && node.getChild(0) instanceof ASTVariableDeclarator) {
            ASTVariableDeclarator declarator = (ASTVariableDeclarator) node.getChild(0);
            if (declarator.getInitializer() instanceof ASTAssignment) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLambdaBody node, Object data) {
        if (node.getChildCount() == 1 && node.getChild(0) instanceof ASTExpression) {
            ASTExpression expression = (ASTExpression) node.getChild(0);
            if (expression instanceof ASTAssignment) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTArrayInitializer node, Object data) {
        for (Object child : node.getChildren()) {
            if (child instanceof ASTVariableDeclarator) {
                ASTVariableInitializer initializer = ((ASTVariableDeclarator) child).getInitializer();
                if (initializer != null && initializer instanceof ASTAssignment) {
                    return super.visit(node, data);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableDeclarator node, Object data) {
        ASTVariableInitializer initializer = node.getInitializer();
        if (initializer != null && initializer instanceof ASTAssignment) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableInitializer node, Object data) {
        if (node instanceof ASTAssignment) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(VariableDeclarator.class, Assignment.class, ConditionalExpression.class, MethodInvocation.class, MemberValuePair.class);
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        if (node.getInitializer() == null) {
            return super.visit(node, data);
        } else {
            return data;
        }
    }

    @Override
    public Object visit(Assignment node, Object data) {
        if (data instanceof VariableDeclarator) {
            return data;
        }

        if (node.getRightOperand() instanceof NullLiteral) {
            if (node.getLeftOperand() instanceof VariableDeclarator) {
                VariableDeclarator var = (VariableDeclarator) node.getLeftOperand();
                if (var.getInitializer() == null) {
                    addViolation(this, node, "Assigning a null to a variable is usually bad form.");
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ConditionalExpression node, Object data) {
        if (data instanceof VariableDeclarator) {
            return data;
        }

        if (node.getLeftExpression() instanceof NullLiteral) {
            if (node.getRightExpression() instanceof NullLiteral) {
                return data;
            } else {
                if (node.getRightExpression() instanceof VariableDeclarator) {
                    VariableDeclarator var = (VariableDeclarator) node.getRightExpression();
                    if (var.getInitializer() == null) {
                        addViolation(this, node, "Assigning a null to a variable is usually bad form.");
                    }
                }
            }
        }
        if (node.getRightExpression() instanceof NullLiteral) {
            if (node.getLeftExpression() instanceof VariableDeclarator) {
                VariableDeclarator var = (VariableDeclarator) node.getLeftExpression();
                if (var.getInitializer() == null) {
                    addViolation(this, node, "Assigning a null to a variable is usually bad form.");
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        if (data instanceof VariableDeclarator) {
            return data;
        }

        if (node.getArguments().size() > 0 && node.getArguments().get(0) instanceof NullLiteral) {
            if (node.getMethodName().equals("computeIfAbsent")) {
                return data;
            } else {
                if (node.getArguments().size() == 1) {
                    if (node.getTarget() instanceof VariableDeclarator) {
                        VariableDeclarator var = (VariableDeclarator) node.getTarget();
                        if (var.getInitializer() == null) {
                            addViolation(this, node, "Assigning a null to a variable is usually bad form.");
                        }
                    }
                }
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(MemberValuePair node, Object data) {
        if (data instanceof VariableDeclarator) {
            return data;
        }

        if (node.getValue() instanceof NullLiteral) {
            if (node.getMember() instanceof VariableDeclarator) {
                VariableDeclarator var = (VariableDeclarator) node.getMember();
                if (var.getInitializer() == null) {
                    addViolation(this, node, "Assigning a null to a variable is usually bad form.");
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Assigning a null to a variable (outside of its declaration) is usually bad form.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// initial assignment
public class Foo {
    public Object foo() {
        Object x = null; // OK
        return x;
    }
}
```
2. This is a negative test case
```java
// bad assignment
public class Foo {
    public void foo() {
        Object x;
        x = new Object();
        bar(x);
        x = null; // This is bad
    }
    private void bar(Object o) { }
}
```
3. This is a positive test case
```java
// check test
public class Foo {
    public void foo() {
        Object x;
        if (x == null) { // This is OK
            return;
        }
    }
}
```
4. This is a positive test case
```java
// null param on right hand side
public class Foo {
    public void foo() {
        String x = null;
        x = new String(null);
    }
}
```
5. This is a positive test case
```java
// null assignment in ternary - initialization
public class Foo {
    public void foo() {
        String x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
6. This is a negative test case
```java
// null assignment in ternary
public class Foo {
    public void foo() {
        String x;
        x = bar() ? "fiz" : null;
    }
    private boolean bar() { return false; }
}
```
7. This is a positive test case
```java
// null assignment in ternary, part deux - initialization
public class Foo {
    public void foo() {
        String x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
8. This is a negative test case
```java
// null assignment in ternary, part deux
public class Foo {
    public void foo() {
        String x;
        x = bar() ? null : "fiz";
    }
    private boolean bar() { return true; }
}
```
9. This is a positive test case
```java
// comparison is not assignment
public class Foo {
    public String foo(String x) {
        return x == null ? "42" : x;
    }
}
```
10. This is a positive test case
```java
// final fields must be assigned
public class Foo {
    private final String x;
    public Foo(String y) {
        if (y == "") x = null;
    }
}
```
11. This is a positive test case
```java
// 1556594 - Wonky detection of NullAssignment
public class Foo {
    private Object parentContext;
    public void foo() {
        assert isRoot() ? parentContext == null : parentContext != null;
    }
    private boolean isRoot() { return true; }
}
```
12. This is a positive test case
```java
// NullAssignment false positive - initialization
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
13. This is a positive test case
```java
// NullAssignment false positive - no direct assignment, but lambda
import java.util.HashMap;
import java.util.Map;

public class NullAssignmentFP {
    private Map<String, Object> someHash = new HashMap<>();
    public void foo(String a, boolean test, Object truthy) {
        Object result;
        result = someHash.computeIfAbsent(a, _unused -> test ? truthy : null);
    }
}
```
14. This is a positive test case
```java
// NullAssignment false positive - return with ternary
import java.time.LocalDateTime;

public class NullAssignmentFP {
    public LocalDateTime foo(LocalDateTime dateTime) {
        return dateTime.getYear() < 2100 ? dateTime : null;
    }
}
```
15. This is a negative test case
```java
// False negative with ternary
public class NullAssignmentTernary {
    public void bar(String a) {
        String b;
        b = (a == null || a.length() < 1) ? null : a.substring(1);
    }
}
```
16. This is a negative test case
```java
// Multiple ternaries with null assignment eventually
public class NullAssignmentTernary {
    public void bar(String a, String b, String c) {
        String x;
        x = a != null ? a : b != null ? b : c != null ? c : null;
    }
}
```
17. This is a positive test case
```java
// False positive with initializing final var
public class NullAssignmentFinal {
    public void bar(String a) {
        final String b;
        if (a != null) {
            b = a;
        } else {
            b = null;
        }
    }
}
```
18. This is a positive test case
```java
// NullAssignment - FP with ternary and null as method argument
import java.util.ArrayList;
import java.util.List;

public class NullAssignmentMethodCall {
    public void bar(String a) {
        String b = this.getString(a == null ? null : a);
    }

    private String getString(String a) { return a; }

    public String methodOne(String one, String two) {
        return "test";
    }
    public String methodTwo(String one, String two) {
        List<String> strings = new ArrayList<>();
        return methodOne("one", strings.isEmpty() ? null : "two");
    }
}
```
19. This is a positive test case
```java
// NullAssignment - FP with ternay and null as constructor argument
public class NullAssignmentConstructorCall {
    public void bar(String discordClient) {
        throw new IllegalArgumentException(String.format(
            "Unsupported client with class '%s' given",
            (discordClient == null) ? null : discordClient.getClass()));
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class NullAssignmentRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(
            Assignment.class,
            Assign.class,
            CompoundAssignmentOperator.class,
            NullLiteral.class,
            SimpleName.class,
            Expression.class,
            ConditionalExpression.class,
            MethodCall.class,
            NewClassExpression.class,
            ArrayAccess.class,
            IdentifierReference.class,
            MethodInvocation.class
        );
    }

    @Override
    public Object visit(Assignment node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assign node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(CompoundAssignmentOperator node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NullLiteral node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(SimpleName node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Expression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConditionalExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCall node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ArrayAccess node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(IdentifierReference node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignment context, Object data) {
        if (data != null && data instanceof Boolean && (Boolean) data) {
            JavaNode leftSide = context.getLeftHandSide();
            if (leftSide instanceof SimpleName) {
                JavaNode rightSide = context.getRightHandSide();
                if (rightSide instanceof NullLiteral) {
                    reportRuleViolation(context, "Assigning a null to a variable is usually bad form");
                } else {
                    reportRuleViolation(context, "Assigning a non-null to a variable is usually bad form");
                }
            } else if (leftSide instanceof IdentifierReference) {
                JavaNode id = ((IdentifierReference) leftSide).getIdentifier();
                if (id instanceof SimpleName) {
                    JavaNode rightSide = context.getRightHandSide();
                    if (rightSide instanceof NullLiteral) {
                        reportRuleViolation(context, "Assigning a null to a variable is usually bad form");
                    } else {
                        reportRuleViolation(context, "Assigning a non-null to a variable is usually bad form");
                    }
                }
            }
        }
        return super.visit(context, data);
    }

    @Override
    public Object visit(Assign context, Object data) {
        return super.visit(context, data);
    }

    @Override
    public Object visit(ConditionalExpression context, Object data) {
        if (data != null && data instanceof Boolean && (Boolean) data) {
            JavaNode leftSide = context.getLeftHandSide();
            if (leftSide instanceof SimpleName) {
                JavaNode rightSide = context.getRightHandSide();
                if (rightSide == null) {
                    reportRuleViolation(context, "Assigning a null to a variable is usually bad form");
                } else {
                    reportRuleViolation(context, "Assigning a non-null to a variable is usually bad form");
                }
            } else if (leftSide instanceof IdentifierReference) {
                JavaNode id = ((IdentifierReference) leftSide).getIdentifier();
                if (id instanceof SimpleName) {
                    JavaNode rightSide = context.getRightHandSide();
                    if (rightSide == null) {
                        reportRuleViolation(context, "Assigning a null to a variable is usually bad form");
                    } else {
                        reportRuleViolation(context, "Assigning a non-null to a variable is usually bad form");
                    }
                }
            }
        }
        return super.visit(context, data);
    }

    @Override
    public Object visit(MethodCall context, Object data) {
        if (data != null && data instanceof Boolean && (Boolean) data) {
            JavaNode leftSide = context.getLeftHandSide();
            if (leftSide instanceof SimpleName) {
                JavaNode rightSide = context.getRightHandSide();
                if (rightSide instanceof NullLiteral) {
                    reportRuleViolation(context, "Assigning a null to a variable is usually bad form");
                } else {
                    reportRuleViolation(context, "Assigning a non-null to a variable is usually bad form");
                }
            } else if (leftSide instanceof IdentifierReference) {
                JavaNode id = ((IdentifierReference) leftSide).getIdentifier();
                if (id instanceof SimpleName) {
                    JavaNode rightSide = context.getRightHandSide();
                    if (rightSide instanceof NullLiteral) {
                        reportRuleViolation(context, "Assigning a null to a variable is usually bad form");
                    } else {
                        reportRuleViolation(context, "Assigning a non-null to a variable is usually bad form");
                    }
                }
            }
        }
        return super.visit(context, data);
    }

    @Override
    public Object visit(NewClassExpression context, Object data) {
        return super.visit(context, data);
    }

    @Override
    public Object visit(ArrayAccess context, Object data) {
        return super.visit(context, data);
    }

    @Override
    public Object visit(IdentifierReference context, Object data) {
        return super.visit(context, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 170.1513695716858 秒
