开始

========================================== Rule UseStringBufferForStringAppendsRule ===========================================
一共 28 个测试用例
正例 17 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()
3. net.sourceforge.pmd.lang.java.ast.ASTYieldStatement: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isStringConcatExpr(net.sourceforge.pmd.lang.java.ast.JavaNode), //This is type-aware, so will not pick up on numeric addition.
6. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void jjtClose()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public void jjtClose()
12. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType(), //Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
14. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToSameVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if both expressions refer to the same variable. A "variable" here can also means a field path, eg, {@code this.field.a}. This method unifies {@code this.field} and {@code field} if possible, and also considers {@code this}. <p>Note that while this is more useful than just checking whether both expressions access the same symbol, it still does not mean that they both access the same <i>value</i>. The actual value is data-flow dependent.
15. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public int hashCode()
16. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isExplicitUnusedVarName(java.lang.String), //Whether the name may be ignored by unused rules like UnusedAssignment.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
18. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    private Map<String, Integer> stringVariables = new HashMap<>();

    public UseStringBufferForStringAppendsRule() {
        super(ASTLocalVariableDeclaration.class, ASTAssignmentOperator.class);
    }

    @Override
    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        if (node.getType() == String.class) {
            ASTVariableDeclaratorId variableIdNode = (ASTVariableDeclaratorId) node.getFirstChildOfType(ASTVariableDeclaratorId.class);
            if (variableIdNode != null) {
                stringVariables.put(variableIdNode.getImage(), 0);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.isCompound()) {
            String variableName = node.jjtGetParent().getFirstChildOfType(ASTVariableDeclaratorId.class).getImage();
            if (stringVariables.containsKey(variableName)) {
                int usageCount = stringVariables.get(variableName) + 1;
                stringVariables.put(variableName, usageCount);
                if (usageCount > 1) {
                    addViolation(data, node, "Use StringBuilder or StringBuffer for string appends.");
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()
3. net.sourceforge.pmd.lang.java.ast.ASTYieldStatement: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isStringConcatExpr(net.sourceforge.pmd.lang.java.ast.JavaNode), //This is type-aware, so will not pick up on numeric addition.
6. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void jjtClose()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public void jjtClose()
12. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType(), //Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
14. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToSameVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if both expressions refer to the same variable. A "variable" here can also means a field path, eg, {@code this.field.a}. This method unifies {@code this.field} and {@code field} if possible, and also considers {@code this}. <p>Note that while this is more useful than just checking whether both expressions access the same symbol, it still does not mean that they both access the same <i>value</i>. The actual value is data-flow dependent.
15. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public int hashCode()
16. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isExplicitUnusedVarName(java.lang.String), //Whether the name may be ignored by unused rules like UnusedAssignment.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
18. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentOperator.class);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.isAdditive()) { // Check if it is an Additive Assignment Operator
            ASTStatementExpression statement = node.getFirstParentOfType(ASTStatementExpression.class);
            if (statement != null) {
                ASTPrimaryExpression primaryExpression = statement.getFirstDescendantOfType(ASTPrimaryExpression.class);
                if (primaryExpression != null) {
                    ASTName name = primaryExpression.getFirstDescendantOfType(ASTName.class);
                    if (name != null) {
                        String variableName = name.getImage();
                        ASTTypeDeclaration typeDeclaration = node.getFirstParentOfType(ASTTypeDeclaration.class);
                        if (typeDeclaration != null) {
                            ASTFieldDeclaration fieldDeclaration = typeDeclaration.getFirstChildOfType(ASTFieldDeclaration.class);
                            if (fieldDeclaration != null && fieldDeclaration.getTypeNode().getTypeImage().equals("String") && fieldDeclaration.getVariableName().equals(variableName)) {
                                addViolation(data, node);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()
3. net.sourceforge.pmd.lang.java.ast.ASTYieldStatement: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isStringConcatExpr(net.sourceforge.pmd.lang.java.ast.JavaNode), //This is type-aware, so will not pick up on numeric addition.
6. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void jjtClose()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public void jjtClose()
12. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType(), //Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
14. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToSameVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if both expressions refer to the same variable. A "variable" here can also means a field path, eg, {@code this.field.a}. This method unifies {@code this.field} and {@code field} if possible, and also considers {@code this}. <p>Note that while this is more useful than just checking whether both expressions access the same symbol, it still does not mean that they both access the same <i>value</i>. The actual value is data-flow dependent.
15. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public int hashCode()
16. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isExplicitUnusedVarName(java.lang.String), //Whether the name may be ignored by unused rules like UnusedAssignment.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
18. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    private Map<String, Integer> stringVariables = new HashMap<>();

    public UseStringBufferForStringAppendsRule() {
        addRuleChainVisit(ASTAssignmentOperator.class);
    }

    @Override
    public Object visit(ASTVariableDeclaratorId node, Object data) {
        if (node.getType() == String.class) {
            stringVariables.put(node.getImage(), 0);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.isCompound()) {
            Node parentNode = node.jjtGetParent();
            if (parentNode instanceof ASTStatementExpression) {
                ASTStatementExpression stmt = (ASTStatementExpression) parentNode;
                if (stmt.jjtGetChild(0) instanceof ASTExpression) {
                    String variableName = stmt.jjtGetChild(0).jjtGetChild(0).getImage();
                    if (stringVariables.containsKey(variableName)) {
                        stringVariables.put(variableName, stringVariables.get(variableName) + 1);
                        if (stringVariables.get(variableName) > 1) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()
3. net.sourceforge.pmd.lang.java.ast.ASTYieldStatement: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isStringConcatExpr(net.sourceforge.pmd.lang.java.ast.JavaNode), //This is type-aware, so will not pick up on numeric addition.
6. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void jjtClose()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public void jjtClose()
12. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType(), //Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
14. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToSameVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if both expressions refer to the same variable. A "variable" here can also means a field path, eg, {@code this.field.a}. This method unifies {@code this.field} and {@code field} if possible, and also considers {@code this}. <p>Note that while this is more useful than just checking whether both expressions access the same symbol, it still does not mean that they both access the same <i>value</i>. The actual value is data-flow dependent.
15. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public int hashCode()
16. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isExplicitUnusedVarName(java.lang.String), //Whether the name may be ignored by unused rules like UnusedAssignment.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
18. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentOperator.class);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.getImage().equals("+=")) {
            Node parent = node.jjtGetParent();
            if (parent.jjtGetChild(0) instanceof ASTPrimaryExpression) {
                ASTPrimaryExpression lhs = (ASTPrimaryExpression) parent.jjtGetChild(0);
                if (lhs.jjtGetChild(0) instanceof ASTPrimaryPrefix) {
                    ASTPrimaryPrefix lhsPrefix = (ASTPrimaryPrefix) lhs.jjtGetChild(0);
                    if (lhsPrefix.jjtGetChild(0) instanceof ASTName) {
                        ASTName lhsName = (ASTName) lhsPrefix.jjtGetChild(0);
                        if ("String".equals(lhsName.getTypeImage())) {
                            if (parent.jjtGetChild(1) instanceof ASTPrimaryExpression) {
                                ASTPrimaryExpression rhs = (ASTPrimaryExpression) parent.jjtGetChild(1);
                                if (rhs.jjtGetChild(0) instanceof ASTPrimaryPrefix) {
                                    ASTPrimaryPrefix rhsPrefix = (ASTPrimaryPrefix) rhs.jjtGetChild(0);
                                    if (rhsPrefix.jjtGetChild(0) instanceof ASTPrimarySuffix) {
                                        ASTPrimarySuffix rhsSuffix = (ASTPrimarySuffix) rhsPrefix.jjtGetChild(0);
                                        if ("String".equals(rhsSuffix.getTypeImage())) {
                                            addViolation(data, node);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()
3. net.sourceforge.pmd.lang.java.ast.ASTYieldStatement: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isStringConcatExpr(net.sourceforge.pmd.lang.java.ast.JavaNode), //This is type-aware, so will not pick up on numeric addition.
6. net.sourceforge.pmd.lang.java.ast.ASTMemberValueArrayInitializer: public void jjtClose()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
8. net.sourceforge.pmd.lang.java.ast.ASTThrowsList: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList), //Returns the element if there is exactly one, otherwise returns null. @param list List node @param <N>  Type of elements @return An element, or null.
9. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public void jjtClose()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public void jjtClose()
12. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType(), //Returns the node representing the type declaration this node is found in. The type of that node is the type of the {@code this} expression. <p>This returns null for nodes that aren't enclosed in a type declaration. This includes {@linkplain ASTPackageDeclaration PackageDeclaration}, This includes {@linkplain ASTImportDeclaration ImportDeclaration}, {@linkplain ASTModuleDeclaration ModuleDeclaration}, {@linkplain ASTCompilationUnit CompilationUnit}, and top-level {@linkplain ASTAnyTypeDeclaration AnyTypeDeclaration}s.
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> asStream()
14. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToSameVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if both expressions refer to the same variable. A "variable" here can also means a field path, eg, {@code this.field.a}. This method unifies {@code this.field} and {@code field} if possible, and also considers {@code this}. <p>Note that while this is more useful than just checking whether both expressions access the same symbol, it still does not mean that they both access the same <i>value</i>. The actual value is data-flow dependent.
15. net.sourceforge.pmd.lang.java.ast.ASTContinueStatement: public int hashCode()
16. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isExplicitUnusedVarName(java.lang.String), //Whether the name may be ignored by unused rules like UnusedAssignment.
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCompileTimeConstant()
18. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        addRuleChainVisit(ASTAssignmentOperator.class);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.isCompound()) {
            Node primaryExpression = node.jjtGetParent().jjtGetChild(0);
            if (primaryExpression instanceof ASTPrimaryExpression) {
                Node primaryPrefix = primaryExpression.jjtGetChild(0);
                if (primaryPrefix instanceof ASTPrimaryPrefix) {
                    Node nameNode = primaryPrefix.jjtGetChild(0);
                    if (nameNode instanceof ASTName) {
                        String variableName = ((ASTName)nameNode).getImage();
                        Node declaration = getVariableDeclaration(variableName, node);
                        if (declaration != null && isStringType(declaration)) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringType(Node node) {
        ASTType typeNode = node.getFirstDescendantOfType(ASTType.class);
        return typeNode.getTypeImage().equals("String");
    }

    private Node getVariableDeclaration(String variableName, Node node) {
        ASTVariableDeclaratorId varDeclaratorId = node.getFirstParentOfType(ASTVariableDeclaratorId.class);
        if (varDeclaratorId != null && varDeclaratorId.hasImageEqualTo(variableName)) {
            return varDeclaratorId.getParent().getParent().getParent();
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 230.935870885849 秒
