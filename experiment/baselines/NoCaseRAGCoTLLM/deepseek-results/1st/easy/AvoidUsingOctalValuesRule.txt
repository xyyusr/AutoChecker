开始

========================================== Rule AvoidUsingOctalValuesRule ===========================================
一共 8 个测试用例
正例 6 个
反例 2 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isIntLiteral()
2. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getBase(), //Returns the base of the literal, eg 8 for an octal literal, 10 for a decimal literal, etc. By convention this returns 10 for the literal {@code 0} (which can really be any base).
3. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isLiteralInt(net.sourceforge.pmd.lang.java.ast.JavaNode, int), //Returns true if this is a numeric literal with the given int value. This also considers long literals.
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isIntLiteral(), //Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isIntLiteral(), //Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.
6. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getValueAsInt()
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isIntLiteral(), //Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isIntLiteral(), //Returns true if this is an {@linkplain ASTNumericLiteral integer literal}.
9. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public R firstChild(java.lang.Class)
11. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isFloatLiteral()
12. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> children()
13. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNumericLiteral(), //Returns true if this is a {@linkplain ASTNumericLiteral numeric literal} of any kind.
14. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean equals(java.lang.Object)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {
    public AvoidUsingOctalValuesRule() {
        super(ASTNumericLiteral.class);
    }

    @Override
    public Object visit(ASTNumericLiteral node, Object data) {
        if (node.isIntLiteral() && node.getBase() == 8) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
[INFO] Tests run: 5, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.105 s <<< FAILURE! - in net.sourceforge.pmd.lang.java.rule.errorprone.AvoidUsingOctalValuesTest
结束

规则执行完毕，时间总花销： 74.72270655632019 秒
