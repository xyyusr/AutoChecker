开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isStringComparisonMethod(node)) {
            ASTExpression firstArg = node.getFirstChildOfType(ASTExpression.class);
            ASTExpression secondArg = node.getFirstChildOfType(ASTExpression.class).getNextSiblingOfType(ASTExpression.class);

            if (isLiteral(secondArg) && !isLiteral(firstArg)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringComparisonMethod(ASTMethodCall node) {
        String methodName = node.getMethodName();
        return "equals".equals(methodName) || "equalsIgnoreCase".equals(methodName) ||
               "compareTo".equals(methodName) || "compareToIgnoreCase".equals(methodName) ||
               "contentEquals".equals(methodName);
    }

    private boolean isLiteral(ASTExpression expression) {
        return expression instanceof ASTStringLiteral || expression instanceof ASTNullLiteral;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.List;
import java.util.Arrays;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    private List<String> methodNames = Arrays.asList("equals", "equalsIgnoreCase", "compareTo", "compareToIgnoreCase", "contentEquals");

    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        JMethodSymbol methodSymbol = node.getInvokedMethodSymbol();
        if (methodSymbol != null && methodNames.contains(methodSymbol.getSimpleName())) {
            JType ownerType = methodSymbol.getOwnerType();
            if (ownerType != null && ownerType.isSubtypeOf("java.lang.String")) {
                ASTPrimaryExpression primaryExpression = node.getFirstChildOfType(ASTPrimaryExpression.class);
                if (primaryExpression != null) {
                    ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
                    if (primaryPrefix != null && primaryPrefix.getFirstChildOfType(ASTStringLiteral.class) == null) {
                        ASTPrimarySuffix primarySuffix = primaryExpression.getFirstChildOfType(ASTPrimarySuffix.class);
                        if (primarySuffix != null) {
                            List<ASTExpression> arguments = primarySuffix.getArguments();
                            if (arguments.size() == 1) {
                                ASTExpression argument = arguments.get(0);
                                if (argument.getFirstChildOfType(ASTStringLiteral.class) == null && !(argument instanceof ASTNullLiteral)) {
                                    addViolation(data, node);
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getName();
        List<ASTExpression> arguments = node.getArguments();

        if (arguments.size() == 2 && (methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals"))) {
            ASTExpression firstArg = arguments.get(0);
            ASTExpression secondArg = arguments.get(1);

            if (!(firstArg instanceof ASTStringLiteral) && secondArg instanceof ASTStringLiteral) {
                addViolation(data, node);
            } else if (firstArg instanceof ASTNullLiteral || JavaAstUtils.isNullLiteral(secondArg)) {
                // No violation if the first argument is null or second argument is null
            } else if (firstArg instanceof ASTStringLiteral && secondArg instanceof ASTNullLiteral) {
                // This is allowed as it avoids NullPointerException
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getMethodName();
        if (Arrays.asList("equals", "equalsIgnoreCase", "compareTo", "compareToIgnoreCase", "contentEquals").contains(methodName)) {
            ASTPrimaryExpression primaryExpression = node.getFirstChildOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
                if (primaryPrefix != null && primaryPrefix.getFirstChildOfType(ASTLiteral.class) != null) {
                    ASTPrimarySuffix primarySuffix = primaryExpression.getFirstChildOfType(ASTPrimarySuffix.class);
                    if (primarySuffix != null && primarySuffix.getArguments() != null) {
                        NodeStream<ASTExpression> arguments = primarySuffix.getArguments().getArguments();
                        if (arguments.size() == 1) {
                            ASTExpression argument = arguments.getFirst();
                            if (JavaAstUtils.isNullLiteral(argument)) {
                                addViolation(data, node);
                            } else if (!(argument instanceof ASTStringLiteral)) {
                                addViolation(data, node);
                            }
                        } else if (arguments.size() == 2) {
                            ASTExpression firstArgument = arguments.get(0);
                            ASTExpression secondArgument = arguments.get(1);
                            if (!(firstArgument instanceof ASTStringLiteral) && secondArgument instanceof ASTStringLiteral) {
                                addViolation(data, node);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        ASTPrimaryExpression primaryExpression = node.getFirstChildOfType(ASTPrimaryExpression.class);
        if (primaryExpression != null) {
            ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (primaryPrefix != null && primaryPrefix.getNumChildren() > 0) {
                ASTName methodName = primaryPrefix.getFirstChildOfType(ASTName.class);
                if (methodName != null) {
                    String methodNameImage = methodName.getImage();
                    if ("equals".equals(methodNameImage) || "equalsIgnoreCase".equals(methodNameImage) ||
                        "compareTo".equals(methodNameImage) || "compareToIgnoreCase".equals(methodNameImage) ||
                        "contentEquals".equals(methodNameImage)) {

                        List<ASTExpression> arguments = node.findDescendantsOfType(ASTExpression.class);
                        if (arguments.size() == 2) {
                            ASTExpression firstArgument = arguments.get(0);
                            ASTExpression secondArgument = arguments.get(1);

                            if (JavaAstUtils.isNullLiteral(secondArgument) && !firstArgument.isStringLiteral()) {
                                addViolation(data, node);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 167.77647829055786 秒
