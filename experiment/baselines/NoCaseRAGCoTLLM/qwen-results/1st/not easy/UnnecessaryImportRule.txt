开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private String currentPackageName;
    private Set<String> usedImports;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        currentPackageName = "";
        usedImports = new HashSet<>();
        ASTPackageDeclaration packageDeclaration = node.getPackageDeclaration();
        if (packageDeclaration != null) {
            currentPackageName = packageDeclaration.getPackageName();
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importedName = node.getImportedSimpleName();
        if (importedName == null) {
            return super.visit(node, data);
        }
        String importStatement = node.getImage().replaceFirst("^import\\s+", "").replaceFirst("\\s*;$", "");
        if (importStatement.startsWith("java.lang.")) {
            addViolation(node, data);
        } else if (importStatement.startsWith(currentPackageName + ".")) {
            addViolation(node, data);
        } else {
            usedImports.add(importedName);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        processTypeReferences(node.getTypeParameters());
        processTypeReferences(node.getImplementsList());
        processTypeReferences(node.getExtendsList());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        processTypeReferences(node.getTypeNode());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        processTypeReferences(node.getTypeNode());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        processNameReferences(node.getName());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTConstructorCall node, Object data) {
        processTypeReferences(node.getType());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTExplicitConstructorInvocation node, Object data) {
        processTypeReferences(node.getType());
        return super.visit(node, data);
    }

    private void processTypeReferences(ASTType typeNode) {
        if (typeNode != null) {
            for (ASTName nameNode : typeNode.descendants(ASTName.class)) {
                usedImports.add(nameNode.getImage());
            }
        }
    }

    private void processTypeReferences(List<ASTType> typeNodes) {
        if (typeNodes != null) {
            for (ASTType typeNode : typeNodes) {
                processTypeReferences(typeNode);
            }
        }
    }

    private void processNameReferences(ASTName nameNode) {
        if (nameNode != null) {
            usedImports.add(nameNode.getImage());
        }
    }

    private void addViolation(ASTImportDeclaration node, Object data) {
        if (!node.isStatic()) {
            super.addViolation(node, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        Set<String> unnecessaryImports = new HashSet<>();
        JSymbolTable symbolTable = node.getTopLevelScope().getSymbolTable();
        String currentPackage = getCurrentPackageName(node);

        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class, false)) {
            if (isImplicitImport(importDecl) || isDuplicatedImport(importDecl, node)) {
                unnecessaryImports.add(importDecl.getImage());
                continue;
            }

            String importedName = importDecl.getImportedSimpleName();
            if (importedName == null) {
                unnecessaryImports.add(importDecl.getImage());
                continue;
            }

            boolean isUsed = false;
            for (ASTName nameNode : node.findDescendantsOfType(ASTName.class, false)) {
                if (nameNode.getQualifier() == null && nameNode.getImage().equals(importedName)) {
                    isUsed = true;
                    break;
                }
            }

            if (!isUsed) {
                unnecessaryImports.add(importDecl.getImage());
            }
        }

        for (String unnecessaryImport : unnecessaryImports) {
            node.addViolation(data, FileLocation.fromCharOffset(unnecessaryImport.indexOf('.')), unnecessaryImport);
        }

        return super.visit(node, data);
    }

    private String getCurrentPackageName(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDecl = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDecl != null ? packageDecl.getPackageName() : null;
    }

    private boolean isImplicitImport(ASTImportDeclaration importDecl) {
        String importedName = importDecl.getImportedSimpleName();
        return "java.lang".equals(importDecl.getPackageName()) || importedName == null;
    }

    private boolean isDuplicatedImport(ASTImportDeclaration importDecl, ASTCompilationUnit node) {
        String importImage = importDecl.getImage();
        int count = 0;
        for (ASTImportDeclaration otherImportDecl : node.findDescendantsOfType(ASTImportDeclaration.class, false)) {
            if (importImage.equals(otherImportDecl.getImage())) {
                count++;
            }
        }
        return count > 1;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class, ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedTypes = new HashSet<>();
        for (JavaNode child : node.children(ASTImportDeclaration.class)) {
            if (((ASTImportDeclaration) child).isStatic()) {
                usedTypes.addAll(collectUsedStaticImports(child));
            } else {
                usedTypes.addAll(collectUsedTypeImports(child));
            }
        }

        Set<String> allImports = getAllImports(node);
        Set<String> currentPackage = getCurrentPackage(node);
        Set<String> javaLangImports = getJavaLangImports(node);

        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class, true)) {
            String importedName = importDecl.getImportedSimpleName();
            boolean isOnDemand = importedName == null;

            String fullImportName = isOnDemand ? importDecl.getImportedName() + ".*" : importDecl.getImportedName();
            if (isOnDemand && usedTypes.stream().noneMatch(fullImportName::startsWith) ||
                !isOnDemand && !usedTypes.contains(fullImportName) ||
                currentPackage.contains(fullImportName) ||
                javaLangImports.contains(fullImportName)) {
                addViolation(data, importDecl);
            }
        }

        return super.visit(node, data);
    }

    private Set<String> getAllImports(ASTCompilationUnit node) {
        Set<String> allImports = new HashSet<>();
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class, true)) {
            String importedName = importDecl.getImportedName();
            String simpleName = importDecl.getImportedSimpleName();
            if (simpleName == null) {
                allImports.add(importedName + ".*");
            } else {
                allImports.add(importedName);
            }
        }
        return allImports;
    }

    private Set<String> getCurrentPackage(ASTCompilationUnit node) {
        Set<String> currentPackage = new HashSet<>();
        ASTPackageDeclaration packageDecl = node.getFirstChildOfType(ASTPackageDeclaration.class);
        if (packageDecl != null) {
            String packageName = packageDecl.getPackageName();
            for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class, true)) {
                if (importDecl.getImportedName().startsWith(packageName + ".")) {
                    currentPackage.add(importDecl.getImportedName());
                }
            }
        }
        return currentPackage;
    }

    private Set<String> getJavaLangImports(ASTCompilationUnit node) {
        Set<String> javaLangImports = new HashSet<>();
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class, true)) {
            if (importDecl.getImportedName().startsWith("java.lang.")) {
                javaLangImports.add(importDecl.getImportedName());
            }
        }
        return javaLangImports;
    }

    private Set<String> collectUsedStaticImports(JavaNode node) {
        Set<String> usedImports = new HashSet<>();
        JSymbolTable symbolTable = node.getSymbolTable();
        for (JImport jImport : symbolTable.getImports()) {
            if (jImport.isStatic()) {
                String simpleName = jImport.getSimpleName();
                int count = node.descendants().filter(desc -> desc instanceof ASTName && ((ASTName) desc).getImage().equals(simpleName)).count();
                if (count > 0) {
                    usedImports.add(jImport.getCanonicalName());
                }
            }
        }
        return usedImports;
    }

    private Set<String> collectUsedTypeImports(JavaNode node) {
        Set<String> usedImports = new HashSet<>();
        JSymbolTable symbolTable = node.getSymbolTable();
        for (JImport jImport : symbolTable.getImports()) {
            if (!jImport.isStatic()) {
                String simpleName = jImport.getSimpleName();
                int count = node.descendants().filter(desc -> desc instanceof ASTName && ((ASTName) desc).getImage().equals(simpleName)).count();
                if (count > 0) {
                    usedImports.add(jImport.getCanonicalName());
                }
            }
        }
        return usedImports;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        RuleContext ctx = (RuleContext) data;
        Set<String> usedImports = new HashSet<>();
        String packageName = getPackageName(node);

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class, false)) {
            if (isUnnecessaryImport(importDeclaration, packageName, node)) {
                ctx.addViolation(importDeclaration);
            } else {
                usedImports.add(importDeclaration.getImportedName());
            }
        }

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class, false)) {
            if (!importDeclaration.isStatic()) {
                String importName = importDeclaration.getImportedName();
                String importSimpleName = importDeclaration.getImportedSimpleName();
                if (importSimpleName != null) {
                    for (ASTName name : node.findDescendantsOfType(ASTName.class, false)) {
                        if (name.getImage().equals(importSimpleName) && !usedImports.contains(importName)) {
                            ctx.addViolation(importDeclaration);
                            break;
                        }
                    }
                }
            }
        }

        return super.visit(node, data);
    }

    private String getPackageName(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDeclaration = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDeclaration != null ? packageDeclaration.getPackageName() : "";
    }

    private boolean isUnnecessaryImport(ASTImportDeclaration importDeclaration, String packageName, ASTCompilationUnit node) {
        JSymbolTable symTable = importDeclaration.getSymbolTable();
        String fullName = importDeclaration.getImportedName();
        String simpleName = importDeclaration.getImportedSimpleName();

        if (importDeclaration.getImportedPackageName().equals("java.lang") || 
            importDeclaration.getImportedPackageName().equals(packageName) || 
            importDeclaration.isStarImport()) {
            return true;
        }

        if (importDeclaration.isStatic() && simpleName != null) {
            return symTable.lookupStaticQualified(fullName) == null;
        }

        for (ASTImportDeclaration otherImport : node.findDescendantsOfType(ASTImportDeclaration.class, false)) {
            if (!importDeclaration.equals(otherImport) && otherImport.getImportedName().equals(fullName)) {
                return true;
            }
        }

        for (ASTName name : node.findDescendantsOfType(ASTName.class, false)) {
            if (name.getImage().equals(simpleName)) {
                return false;
            }
        }

        return true;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        String currentPackageName = getCurrentPackageName(node);
        TypeSystem typeSystem = node.getTypeSystem();

        List<ASTTypeDeclaration> typeDeclarations = node.findDescendantsOfType(ASTTypeDeclaration.class, true);
        typeDeclarations.forEach(typeDeclaration -> collectUsedImports(typeDeclaration, usedImports, typeSystem));

        List<ASTImportDeclaration> importDeclarations = node.findDescendantsOfType(ASTImportDeclaration.class, true);
        importDeclarations.forEach(importDeclaration -> checkImport(importDeclaration, usedImports, currentPackageName));

        return super.visit(node, data);
    }

    private String getCurrentPackageName(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDeclaration = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDeclaration != null ? packageDeclaration.getPackageName() : "";
    }

    private void collectUsedImports(ASTTypeDeclaration typeDeclaration, Set<String> usedImports, TypeSystem typeSystem) {
        typeDeclaration.descendantsOrSelf(ASTName.class)
            .filter(name -> !name.isDeclaration())
            .forEach(name -> usedImports.add(getFullyQualifiedName(name, typeSystem)));
    }

    private String getFullyQualifiedName(ASTName name, TypeSystem typeSystem) {
        return typeSystem.resolve(name).orElseThrow().getQualifiedName();
    }

    private void checkImport(ASTImportDeclaration importDeclaration, Set<String> usedImports, String currentPackageName) {
        if (importDeclaration.isStatic()) {
            return;
        }

        String importedName = importDeclaration.getImportedSimpleName();
        String importFqn = importDeclaration.getImportedName().getQualifiedName();

        if (importDeclaration.isStarImport()) {
            if (isRedundantStarImport(importDeclaration, usedImports)) {
                addViolation(importDeclaration, data);
            }
        } else {
            if (!usedImports.contains(importFqn) || isRedundantNonStarImport(importFqn, currentPackageName)) {
                addViolation(importDeclaration, data);
            }
        }
    }

    private boolean isRedundantStarImport(ASTImportDeclaration importDeclaration, Set<String> usedImports) {
        String importPrefix = importDeclaration.getImportedName().getPackageName();
        return usedImports.stream().noneMatch(name -> name.startsWith(importPrefix)) || isJavaLangImport(importPrefix);
    }

    private boolean isRedundantNonStarImport(String importFqn, String currentPackageName) {
        return isJavaLangImport(importFqn) || importFqn.startsWith(currentPackageName + ".");
    }

    private boolean isJavaLangImport(String name) {
        return name.startsWith("java.lang.");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 196.40218997001648 秒
