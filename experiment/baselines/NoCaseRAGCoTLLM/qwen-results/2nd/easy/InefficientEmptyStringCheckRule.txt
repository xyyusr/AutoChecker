开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimLengthCheck(node) || isTrimEmptyCheck(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthCheck(ASTMethodCall node) {
        return node.getImage().equals("length") &&
               node.getParent() instanceof ASTPrimarySuffix &&
               node.getParent().getParent() instanceof ASTPrimaryExpression &&
               node.getParent().getPreviousSibling() instanceof ASTPrimarySuffix &&
               node.getParent().getPreviousSibling().getImage().equals("trim") &&
               node.getParent().getPreviousSibling().getPreviousSibling() instanceof ASTMethodCall &&
               ((ASTMethodCall) node.getParent().getPreviousSibling().getPreviousSibling()).getImage().equals("trim") &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent() instanceof ASTPrimaryExpression &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent().getFirstChild() instanceof ASTPrimarySuffix &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent().getFirstChild().getImage().equals("trim") &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent().getParent() instanceof ASTName &&
               ((ASTName) node.getParent().getPreviousSibling().getPreviousSibling().getParent().getParent()).getType() instanceof JPrimitiveType &&
               ((JPrimitiveType) ((ASTName) node.getParent().getPreviousSibling().getPreviousSibling().getParent().getParent()).getType()).isString();
    }

    private boolean isTrimEmptyCheck(ASTMethodCall node) {
        return node.getImage().equals("isEmpty") &&
               node.getParent() instanceof ASTPrimarySuffix &&
               node.getParent().getParent() instanceof ASTPrimaryExpression &&
               node.getParent().getPreviousSibling() instanceof ASTPrimarySuffix &&
               node.getParent().getPreviousSibling().getImage().equals("trim") &&
               node.getParent().getPreviousSibling().getPreviousSibling() instanceof ASTMethodCall &&
               ((ASTMethodCall) node.getParent().getPreviousSibling().getPreviousSibling()).getImage().equals("trim") &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent() instanceof ASTPrimaryExpression &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent().getFirstChild() instanceof ASTPrimarySuffix &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent().getFirstChild().getImage().equals("trim") &&
               node.getParent().getPreviousSibling().getPreviousSibling().getParent().getParent() instanceof ASTName &&
               ((ASTName) node.getParent().getPreviousSibling().getPreviousSibling().getParent().getParent()).getType() instanceof JPrimitiveType &&
               ((JPrimitiveType) ((ASTName) node.getParent().getPreviousSibling().getPreviousSibling().getParent().getParent()).getType()).isString();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getNumChildren() == 2) {
            JavaNode left = node.getChild(0);
            JavaNode right = node.getChild(1);

            if (isInefficientBlankCheck(left, right) || isInefficientBlankCheck(right, left)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isInefficientBlankCheck(JavaNode methodCallSide, JavaNode literalSide) {
        if (methodCallSide instanceof ASTPrimaryExpression && literalSide instanceof ASTLiteral) {
            ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression) methodCallSide;
            ASTLiteral literal = (ASTLiteral) literalSide;

            if (literal instanceof ASTStringLiteral && ((ASTStringLiteral) literal).getValue().equals("0")) {
                return isTrimAndLength(primaryExpression) || isTrimAndIsEmpty(primaryExpression);
            }
        }
        return false;
    }

    private boolean isTrimAndLength(ASTPrimaryExpression primaryExpression) {
        ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
        ASTPrimarySuffix suffix = primaryExpression.getFirstChildOfType(ASTPrimarySuffix.class);
        ASTPrimarySuffix secondSuffix = primaryExpression.getChildOfType(ASTPrimarySuffix.class, 1);

        if (prefix != null && suffix != null && secondSuffix != null) {
            if (suffix.getImage().equals("trim") && secondSuffix.getImage().equals("length")) {
                return true;
            }
        }
        return false;
    }

    private boolean isTrimAndIsEmpty(ASTPrimaryExpression primaryExpression) {
        ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
        ASTPrimarySuffix suffix = primaryExpression.getFirstChildOfType(ASTPrimarySuffix.class);
        ASTPrimarySuffix secondSuffix = primaryExpression.getChildOfType(ASTPrimarySuffix.class, 1);

        if (prefix != null && suffix != null && secondSuffix != null) {
            if (suffix.getImage().equals("trim") && secondSuffix.getImage().equals("isEmpty")) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (node.getImage().equals("trim")) {
            JavaNode parent = node.getParent();
            if (parent instanceof ASTPrimaryExpression) {
                NodeStream<JavaNode> nextNodes = parent.getNextSibling().children(ASTMethodCall.class);
                for (JavaNode nextNode : nextNodes) {
                    if (nextNode.getImage().equals("length") && nextNode.getChildCount() == 0) {
                        ASTMethodCall grandParentCall = (ASTMethodCall) parent.getParent();
                        if (grandParentCall.getImage().equals("==") && grandParentCall.getFirstChild().getImage().equals("0")) {
                            addViolation(data, grandParentCall);
                        }
                    } else if (nextNode.getImage().equals("isEmpty") && nextNode.getChildCount() == 0) {
                        addViolation(data, nextNode);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;
import java.util.Objects;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        List<ASTPrimaryExpression> primaryExpressions = node.findDescendantsOfType(ASTPrimaryExpression.class);
        if (primaryExpressions.size() != 2) {
            return super.visit(node, data);
        }

        ASTPrimaryExpression left = primaryExpressions.get(0);
        ASTPrimaryExpression right = primaryExpressions.get(1);

        if (isTrimLengthZero(left, right) || isTrimLengthZero(right, left)) {
            addViolation(data, node);
        } else if (isTrimIsEmpty(left, right) || isTrimIsEmpty(right, left)) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }

    private boolean isTrimLengthZero(ASTPrimaryExpression expression, ASTPrimaryExpression other) {
        ASTPrimaryPrefix prefix = expression.getFirstChildOfType(ASTPrimaryPrefix.class);
        ASTPrimarySuffix suffix = expression.getFirstChildOfType(ASTPrimarySuffix.class);
        ASTPrimarySuffix otherSuffix = other.getFirstChildOfType(ASTPrimarySuffix.class);

        if (prefix == null || suffix == null || otherSuffix == null) {
            return false;
        }

        ASTMethodCall methodCall = suffix.getFirstChildOfType(ASTMethodCall.class);
        ASTMethodCall otherMethodCall = otherSuffix.getFirstChildOfType(ASTMethodCall.class);

        if (methodCall == null || otherMethodCall == null) {
            return false;
        }

        ASTExpression expr = methodCall.getQualifier();
        if (!(expr instanceof ASTPrimaryExpression)) {
            return false;
        }

        ASTPrimaryExpression primaryExpr = (ASTPrimaryExpression) expr;
        JType type = primaryExpr.getType();
        TypeSystem typeSystem = primaryExpr.getTypeSystem();

        if (!typeSystem.isA(type, typeSystem.STRING)) {
            return false;
        }

        String methodName = methodCall.getName();
        String otherMethodName = otherMethodCall.getName();

        if (!"trim".equals(methodName)) {
            return false;
        }

        ASTExpression otherExpr = otherMethodCall.getQualifier();
        if (!(otherExpr instanceof ASTPrimaryExpression)) {
            return false;
        }

        ASTPrimaryExpression otherPrimaryExpr = (ASTPrimaryExpression) otherExpr;
        JType otherType = otherPrimaryExpr.getType();

        if (!typeSystem.isA(otherType, typeSystem.STRING)) {
            return false;
        }

        List<ASTPrimarySuffix> suffixes = methodCall.getChildrenOfType(ASTPrimarySuffix.class);
        if (suffixes.size() != 1 || !"length".equals(suffixes.get(0).getName())) {
            return false;
        }

        ASTExpression otherQualifier = otherMethodCall.getQualifier();
        if (!(otherQualifier instanceof ASTPrimaryExpression)) {
            return false;
        }

        ASTPrimarySuffix otherMethodSuffix = methodCall.getChildrenOfType(ASTPrimarySuffix.class).get(0);
        ASTPrimarySuffix otherOtherMethodSuffix = otherMethodCall.getChildrenOfType(ASTPrimarySuffix.class).get(0);

        if (otherSuffix.getChildrenOfType(ASTPrimarySuffix.class).size() != 0 || otherOtherMethodSuffix.getChildrenOfType(ASTPrimarySuffix.class).size() != 0) {
            return false;
        }

        ASTLiteral literal = other.getFirstChildOfType(ASTLiteral.class);
        return literal != null && Objects.equals(literal.getImage(), "0");
    }

    private boolean isTrimIsEmpty(ASTPrimaryExpression expression, ASTPrimaryExpression other) {
        ASTPrimaryPrefix prefix = expression.getFirstChildOfType(ASTPrimaryPrefix.class);
        ASTPrimarySuffix suffix = expression.getFirstChildOfType(ASTPrimarySuffix.class);

        if (prefix == null || suffix == null) {
            return false;
        }

        ASTMethodCall methodCall = suffix.getFirstChildOfType(ASTMethodCall.class);

        if (methodCall == null) {
            return false;
        }

        ASTExpression expr = methodCall.getQualifier();
        if (!(expr instanceof ASTPrimaryExpression)) {
            return false;
        }

        ASTPrimaryExpression primaryExpr = (ASTPrimaryExpression) expr;
        JType type = primaryExpr.getType();
        TypeSystem typeSystem = primaryExpr.getTypeSystem();

        if (!typeSystem.isA(type, typeSystem.STRING)) {
            return false;
        }

        String methodName = methodCall.getName();

        if (!"trim".equals(methodName)) {
            return false;
        }

        List<ASTPrimarySuffix> suffixes = methodCall.getChildrenOfType(ASTPrimarySuffix.class);
        if (suffixes.size() != 1 || !"isEmpty".equals(suffixes.get(0).getName())) {
            return false;
        }

        ASTExpression otherQualifier = other.getFirstChildOfType(ASTExpression.class);
        if (!(otherQualifier instanceof ASTPrimaryExpression)) {
            return false;
        }

        ASTPrimaryExpression otherPrimaryExpr = (ASTPrimaryExpression) otherQualifier;
        JType otherType = otherPrimaryExpr.getType();

        if (!typeSystem.isA(otherType, typeSystem.BOOLEAN)) {
            return false;
        }

        ASTLiteral literal = other.getFirstChildOfType(ASTLiteral.class);
        return literal != null && Boolean.parseBoolean(literal.getImage()) == true;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty(), //True if the constant value is empty. Does not necessarily compute the constant value.
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
5. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
8. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean isFindBoundary()
9. net.sourceforge.pmd.lang.java.ast.ASTList: public boolean isEmpty()
10. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean hasImageEqualTo(java.lang.String)
13. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTList$ASTMaybeEmptyListOf: static public N singleOrNull(net.sourceforge.pmd.lang.java.ast.ASTList)
16. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
17. net.sourceforge.pmd.lang.java.ast.ASTArrayDimensions: public boolean isEmpty()
18. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getMethodName();
        if ("length".equals(methodName) || "isEmpty".equals(methodName)) {
            ASTPrimaryExpression primaryExpression = node.getFirstParentOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
                if (primaryPrefix != null) {
                    List<ASTPrimarySuffix> suffixes = primaryPrefix.getChildrenOfType(ASTPrimarySuffix.class);
                    if (suffixes.size() == 2) {
                        ASTPrimarySuffix firstSuffix = suffixes.get(0);
                        ASTPrimarySuffix secondSuffix = suffixes.get(1);
                        if ("trim".equals(firstSuffix.getImage()) && (".length() == 0".equals(secondSuffix.getImage()) || ".isEmpty()".equals(secondSuffix.getImage()))) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 166.2923014163971 秒
