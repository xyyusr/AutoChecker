开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        JSymbolTable symbolTable = node.getSymbolTable();

        node.descendants(ASTPrimaryExpression.class)
            .filter(primaryExpression -> primaryExpression.getFirstChild() instanceof ASTPrimaryPrefix)
            .forEach(primaryExpression -> {
                ASTPrimaryPrefix prefix = (ASTPrimaryPrefix) primaryExpression.getFirstChild();
                NodeStream<ASTName> names = prefix.descendants(ASTName.class);
                names.forEach(name -> {
                    JType type = symbolTable.lookupClass(name.getImage()).orElse(null);
                    if (type != null) {
                        usedImports.add(type.getQualifiedName());
                    }
                });
            });

        List<ASTImportDeclaration> importDeclarations = node.findDescendantsOfType(ASTImportDeclaration.class, true);

        importDeclarations.forEach(importDeclaration -> {
            if (importDeclaration.isStatic()) {
                return;
            }

            String importedName = importDeclaration.getImportedSimpleName();
            String qualifiedName = importDeclaration.getImportedName().getQualifiedName();

            if (qualifiedName.startsWith("java.lang.") || qualifiedName.equals(node.getPackageName())) {
                addViolation(importDeclaration, data);
            } else if (importDeclaration.isStarImport()) {
                if (symbolTable.lookupClassInPackage(importDeclaration.getImportedName().getImage(), importDeclaration.getImportedName().getPackageName()).isEmpty()) {
                    addViolation(importDeclaration, data);
                }
            } else {
                if (!usedImports.contains(qualifiedName)) {
                    addViolation(importDeclaration, data);
                }
            }
        });

        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        String currentPackage = getCurrentPackage(node);

        node.descendantsOfType(ASTReferenceType.class)
            .filter(ASTReferenceType::isImported)
            .forEach(rt -> trackUsedImport(rt, usedImports));

        node.descendantsOfType(ASTFieldDeclaration.class)
            .flatMap(ASTFieldDeclaration::getDescendantsOfType, ASTReferenceType.class)
            .filter(ASTReferenceType::isImported)
            .forEach(rt -> trackUsedImport(rt, usedImports));

        node.descendantsOfType(ASTMethodDeclaration.class)
            .flatMap(ASTMethodDeclaration::getDescendantsOfType, ASTReferenceType.class)
            .filter(ASTReferenceType::isImported)
            .forEach(rt -> trackUsedImport(rt, usedImports));

        node.descendantsOfType(ASTConstructorDeclaration.class)
            .flatMap(ASTConstructorDeclaration::getDescendantsOfType, ASTReferenceType.class)
            .filter(ASTReferenceType::isImported)
            .forEach(rt -> trackUsedImport(rt, usedImports));

        Map<String, Integer> importCount = new HashMap<>();
        Set<String> implicitImports = getImplicitImports();

        node.descendantsOfType(ASTImportDeclaration.class)
            .forEach(id -> {
                String importStr = id.getImportedName();
                if (importStr == null) return;

                if (implicitImports.contains(importStr) || currentPackage != null && importStr.startsWith(currentPackage)) {
                    addViolation(data, id);
                } else {
                    importCount.put(importStr, importCount.getOrDefault(importStr, 0) + 1);
                }
            });

        importCount.forEach((importStr, count) -> {
            if (count == 1 && !usedImports.contains(importStr)) {
                ASTImportDeclaration id = node.descendantsOfType(ASTImportDeclaration.class)
                    .filter(i -> importStr.equals(i.getImportedName()))
                    .findFirst().orElse(null);
                if (id != null) addViolation(data, id);
            }
        });

        return data;
    }

    private void trackUsedImport(ASTReferenceType rt, Set<String> usedImports) {
        JType type = rt.getType();
        if (type != null && type.getSymbol() instanceof JClassSymbol) {
            usedImports.add(((JClassSymbol) type.getSymbol()).getQualifiedName());
        }
    }

    private String getCurrentPackage(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDeclaration = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDeclaration != null ? packageDeclaration.getPackageName() : null;
    }

    private Set<String> getImplicitImports() {
        Set<String> implicitImports = new HashSet<>();
        implicitImports.add("java.lang");
        return implicitImports;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    Set<String> usedImports = new HashSet<>();
    String currentPackageName;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports.clear();
        currentPackageName = node.getPackageDeclaration().getPackageNameImage();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        if (node.isStatic()) {
            checkStaticImportUsage(node, data);
        } else {
            checkNormalImportUsage(node, data);
        }
        return data;
    }

    private void checkStaticImportUsage(ASTImportDeclaration node, Object data) {
        String importedName = node.getImportedSimpleName();
        if (importedName != null && !isUsed(node.getType(), importedName)) {
            addViolation(data, node);
        }
    }

    private void checkNormalImportUsage(ASTImportDeclaration node, Object data) {
        if (node.isFindBoundary()) {
            return;
        }

        if (node.isAsteriskImport()) {
            checkAsteriskImportUsage(node, data);
        } else {
            String importedName = node.getImportedSimpleName();
            if (!isUsed(node.getType(), importedName) || isImplicitlyImported(node.getType())) {
                addViolation(data, node);
            }
        }
    }

    private void checkAsteriskImportUsage(ASTImportDeclaration node, Object data) {
        JType type = node.getType();
        if (type != null) {
            JClassSymbol classSymbol = type.getSymbol();
            if (classSymbol != null) {
                for (JMemberSymbol memberSymbol : classSymbol.getVisibleMembers()) {
                    if (!isUsed(type, memberSymbol.getSimpleName())) {
                        addViolation(data, node);
                        return;
                    }
                }
            }
        }
    }

    private boolean isUsed(JType type, String name) {
        String importName = type.getSimpleName() + "." + name;
        for (String usedImport : usedImports) {
            if (usedImport.equals(importName) || usedImport.endsWith("." + name)) {
                return true;
            }
        }
        NodeStream<ASTName> nameNodes = type.getCompilationUnit().descendants(ASTName.class);
        for (ASTName nameNode : nameNodes) {
            if (nameNode.getImage().equals(name) && !nameNode.hasAncestor(ASTImportDeclaration.class)) {
                usedImports.add(importName);
                return true;
            }
        }
        return false;
    }

    private boolean isImplicitlyImported(JType type) {
        JTypeSymbol typeSymbol = type.getSymbol();
        if (typeSymbol != null) {
            JPackageSymbol packageSymbol = typeSymbol.getPackageName();
            if (packageSymbol != null && ("java.lang".equals(packageSymbol.getQualifiedName()) || packageSymbol.getQualifiedName().equals(currentPackageName))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Object visit(ASTName node, Object data) {
        String fullName = node.getFullyQualifiedName();
        if (fullName != null) {
            usedImports.add(fullName);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedImports;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports = new HashSet<>();
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class, false)) {
            if (!importDecl.isStatic()) {
                String importedName = importDecl.getImportedSimpleName();
                if (importedName == null) {
                    usedImports.add(importDecl.getOriginalText().toString());
                } else {
                    usedImports.add(importDecl.getImportedSimpleName());
                }
            }
        }
        if (node.hasDescendantOfType(ASTPackageDeclaration.class)) {
            usedImports.add(node.getFirstDescendantOfType(ASTPackageDeclaration.class).getPackageNameImage());
        }
        usedImports.addAll(Arrays.asList("Object", "String", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double", "Void"));
        for (ASTClassOrInterfaceDeclaration classOrInterface : node.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class, false)) {
            processType(classOrInterface);
        }
        return super.visit(node, data);
    }

    private void processType(ASTClassOrInterfaceDeclaration node) {
        for (ASTFieldDeclaration field : node.findDescendantsOfType(ASTFieldDeclaration.class, false)) {
            processName(field.getFirstDescendantOfType(ASTName.class));
        }
        for (ASTMethodOrConstructorDeclaration method : node.findDescendantsOfType(ASTMethodOrConstructorDeclaration.class, false)) {
            for (ASTName name : method.findDescendantsOfType(ASTName.class, false)) {
                processName(name);
            }
        }
    }

    private void processName(ASTName name) {
        if (name != null) {
            JType type = name.getType();
            if (type != null) {
                JClassSymbol classSymbol = type.toClassSymbol();
                if (classSymbol != null) {
                    usedImports.remove(classSymbol.getQualifiedName());
                    usedImports.remove(classSymbol.getSimpleName());
                }
            }
        }
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        if (!node.isStatic()) {
            String importedName = node.getImportedSimpleName();
            String importText = node.getOriginalText().toString();
            if (importedName == null) {
                if (node.descendantsOrSelf(ASTName.class).noneMatch(name -> usedImports.contains(name.getQualifiedName()))) {
                    addViolation(data, node);
                }
            } else {
                if (!usedImports.contains(importedName) && !usedImports.contains(importText)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendants()
3. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedSimpleName(), //Returns the simple name of the type or method imported by this declaration. For on-demand imports, returns {@code null}.
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Iterable<JavaccToken> tokens()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findChildrenOfType(java.lang.Class)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.AstInfo<RootNode> getAstInfo()
9. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.symbols.table.JSymbolTable getSymbolTable()
10. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isFindBoundary()
11. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.FileLocation getReportLocation()
12. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.util.List<List<T> findDescendantsOfType(java.lang.Class, boolean)
13. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getOriginalText()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
15. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations(), //Returns all annotations present on this node.
16. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int hashCode()


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        Set<String> usedTypes = new HashSet<>();
        Set<String> implicitImports = new HashSet<>(Arrays.asList("Object", "String", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double", "Void"));
        String packageName = "";

        if (node.hasDescendantOfType(ASTPackageDeclaration.class)) {
            packageName = node.getFirstDescendantOfType(ASTPackageDeclaration.class).getPackageName();
        }

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importedName = importDeclaration.getImportedSimpleName();
            if (importDeclaration.isStatic() || importDeclaration.isStarImport()) {
                continue;
            }
            if (importedName == null) {
                continue;
            }
            if (importDeclaration.getPackageName().equals(packageName) || "java.lang".equals(importDeclaration.getPackageName())) {
                implicitImports.add(importedName);
            }
        }

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importedName = importDeclaration.getImportedSimpleName();
            if (importDeclaration.isStatic() || importDeclaration.isStarImport()) {
                continue;
            }
            if (importedName == null) {
                continue;
            }
            usedImports.add(importedName);
        }

        for (ASTName name : node.findDescendantsOfType(ASTName.class)) {
            JClassSymbol symbol = name.getType().getSymbol();
            if (symbol != null) {
                String simpleName = symbol.getSimpleName();
                usedTypes.add(simpleName);
            }
        }

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importedName = importDeclaration.getImportedSimpleName();
            if (importedName == null) {
                continue;
            }
            if (!usedTypes.contains(importedName) || implicitImports.contains(importedName)) {
                addViolation(data, importDeclaration);
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 175.1931116580963 秒
