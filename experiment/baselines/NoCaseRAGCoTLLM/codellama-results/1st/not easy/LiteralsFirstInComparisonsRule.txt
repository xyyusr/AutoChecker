开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getName().getImage().equals("equals") && !node.isOverloaded()) {
            return visitEqualsMethod(node, data);
        } else if (node.getName().getImage().equals("equalsIgnoreCase")) {
            return visitEqualsMethod(node, data);
        } else if (node.getName().getImage().equals("compareTo")) {
            return visitCompareMethod(node, data);
        } else if (node.getName().getImage().equals("compareToIgnoreCase")) {
            return visitCompareMethod(node, data);
        } else if (node.getName().getImage().equals("contentEquals")) {
            return visitContentEqualsMethod(node, data);
        }
        return super.visit(node, data);
    }

    private Object visitEqualsMethod(ASTMethodDeclaration node, Object data) {
        List<ASTArgumentAccess> arguments = node.getParameters();
        if (arguments != null && arguments.size() == 1) {
            ASTArgumentAccess argument = arguments.get(0);
            if (argument.getType() instanceof ASTPrimitiveType) {
                ASTPrimitiveType type = (ASTPrimitiveType) argument.getType();
                if (type.getType().equals("boolean")) {
                    return visitBooleanEqualsMethod(node, argument, data);
                } else if (type.getType().equals("char")) {
                    return visitCharEqualsMethod(node, argument, data);
                }
            }
        }
        return super.visit(node, data);
    }

    private Object visitBooleanEqualsMethod(ASTMethodDeclaration node, ASTArgumentAccess argument, Object data) {
        List<ASTExpression> expressions = argument.getExpressions();
        if (expressions != null && expressions.size() == 1) {
            ASTExpression expression = expressions.get(0);
            if (expression instanceof ASTNullLiteral || expression instanceof ASTBooleanLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    private Object visitCharEqualsMethod(ASTMethodDeclaration node, ASTArgumentAccess argument, Object data) {
        List<ASTExpression> expressions = argument.getExpressions();
        if (expressions != null && expressions.size() == 1) {
            ASTExpression expression = expressions.get(0);
            if (expression instanceof ASTNullLiteral || expression instanceof ASTCharLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    private Object visitCompareMethod(ASTMethodDeclaration node, Object data) {
        List<ASTArgumentAccess> arguments = node.getParameters();
        if (arguments != null && arguments.size() == 1) {
            ASTArgumentAccess argument = arguments.get(0);
            if (argument.getType() instanceof ASTPrimitiveType) {
                ASTPrimitiveType type = (ASTPrimitiveType) argument.getType();
                if (type.getType().equals("boolean")) {
                    return visitBooleanCompareMethod(node, argument, data);
                } else if (type.getType().equals("char")) {
                    return visitCharCompareMethod(node, argument, data);
                } else if (type.getType().equals("String")) {
                    return visitStringCompareMethod(node, argument, data);
                }
            }
        }
        return super.visit(node, data);
    }

    private Object visitBooleanCompareMethod(ASTMethodDeclaration node, ASTArgumentAccess argument, Object data) {
        List<ASTExpression> expressions = argument.getExpressions();
        if (expressions != null && expressions.size() == 1) {
            ASTExpression expression = expressions.get(0);
            if (expression instanceof ASTNullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    private Object visitCharCompareMethod(ASTMethodDeclaration node, ASTArgumentAccess argument, Object data) {
        List<ASTExpression> expressions = argument.getExpressions();
        if (expressions != null && expressions.size() == 1) {
            ASTExpression expression = expressions.get(0);
            if (expression instanceof ASTNullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    private Object visitStringCompareMethod(ASTMethodDeclaration node, ASTArgumentAccess argument, Object data) {
        List<ASTExpression> expressions = argument.getExpressions();
        if (expressions != null && expressions.size() == 1) {
            ASTExpression expression = expressions.get(0);
            if (expression instanceof ASTStringLiteral) {
                ASTStringLiteral stringLiteral = (ASTStringLiteral) expression;
                if (stringLiteral.isNullLiteral()) {
                    return super.visit(node, data);
                }
            } else if (expression instanceof ASTNullLiteral) {
                return super.visit(node, data);
            }
        }
        return super.visit(node, data);
    }

    private Object visitContentEqualsMethod(ASTMethodDeclaration node, Object data) {
        List<ASTArgumentAccess> arguments = node.getParameters();
        if (arguments != null && arguments.size() == 1) {
            ASTArgumentAccess argument = arguments.get(0);
            if (argument.getType() instanceof ASTPrimitiveType) {
                ASTPrimitiveType type = (ASTPrimitiveType) argument.getType();
                if (type.getType().equals("String")) {
                    return visitStringCompareMethod(node, argument, data);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getName().getImage().equals("equals") || node.getName().getImage().equals("equalsIgnoreCase") || node.getName().getImage().equals("compareTo") || node.getName().getImage().equals("compareToIgnoreCase") || node.getName().getImage().equals("contentEquals")) {
            return super.visit(node, data);
        }

        return visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCallExpression node, Object data) {
        if (node.getType() == ASTMethodCallExpression.METHOD_CALL) {
            ASTIdentifier methodName = (ASTIdentifier) node.getFirstChildByType(ASTIdentifier.class);
            if (methodName.getImage().equals("equals") || methodName.getImage().equals("equalsIgnoreCase") || methodName.getImage().equals("compareTo") || methodName.getImage().equals("compareToIgnoreCase") || methodName.getImage().equals("contentEquals")) {
                if (node.getLastChild().getType() == ASTLiteral.class) {
                    ASTLiteral literal = (ASTLiteral) node.getLastChild();
                    if (literal.getType() == ASTNullLiteral.class) {
                        addViolation(data, node, "Position literals first in " + methodName.getImage() + " method");
                    }
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getImage().contains("equals") || node.getImage().contains("equalsIgnoreCase") || node.getImage().contains("compareTo") || node.getImage().contains("compareToIgnoreCase") || node.getImage().contains("contentEquals")) {
            Object methodParams[] = node.getParameters();
            if (methodParams.length == 1) {
                ASTExpression arg = (ASTExpression) methodParams[0].getFirstDescendant(ASTExpression.class);
                if (arg != null) {
                    Object methodResult = isLiteralsFirstInComparisons(arg, node);
                    if (methodResult != null) {
                        addViolation(this, node, methodResult);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private Object isLiteralsFirstInComparisons(ASTExpression node, ASTMethodDeclaration methodDeclaration) {
        if (node.getFirstDescendantOrNull(ASTStringLiteral.class) != null) {
            return methodDeclaration;
        } else if (node.getFirstDescendantOrNull(ASTNullLiteral.class) != null) {
            return methodDeclaration;
        } else {
            return null;
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        addRuleChainVisitorClass(MethodCall.class);
    }

    @Override
    public Object visit(MethodCall node, Object data) {
        if (node.getImage().contains("equals") || node.getImage().contains("equalsIgnoreCase") || node.getImage().contains("compareTo") || node.getImage().contains("compareToIgnoreCase") || node.getImage().contains("contentEquals")) {
            Object arg1 = node.getFirstChildByType(ASTMethodInvocation.class).getFirstChildByType(ASTLiteralExpression.class);
            Object arg2 = node.getFirstChildByType(ASTMethodInvocation.class).getFirstChildByType(ASTArgumentList.class).getFirstChildByType(ASTExpression.class);
            if (arg2 != null) {
                if ((arg1 instanceof ASTStringLiteral && !((ASTStringLiteral) arg1).isNullLiteral()) || (arg1 instanceof ASTNullLiteral && !((ASTNullLiteral) arg1).isNullLiteral()) || (arg1 instanceof ASTBooleanLiteral && !((ASTBooleanLiteral) arg1).isNullLiteral()) || (arg1 instanceof ASTCharLiteral && !((ASTCharLiteral) arg1).isNullLiteral())) {
                    addViolation(this, data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean equals(java.lang.Object)
2. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
4. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
5. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
6. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
7. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
8. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNullLiteral(net.sourceforge.pmd.lang.java.ast.ASTExpression)
9. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
10. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
11. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isCharLiteral(), //Returns true if this is a {@linkplain ASTCharLiteral character literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
13. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTBooleanLiteral: public boolean equals(java.lang.Object)
15. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isBooleanLiteral(), //Returns true if this is a {@linkplain ASTBooleanLiteral boolean literal}.
16. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean hasImageEqualTo(java.lang.String)


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getImage().equals("equals") || node.getImage().equals("equalsIgnoreCase") || node.getImage().equals("compareTo") || node.getImage().equals("compareToIgnoreCase") || node.getImage().equals("contentEquals")) {
            for(Object argument : node.getArguments()){
                if(argument instanceof ASTPrimaryPrefix) {
                    for (Object descendant : ((ASTPrimaryPrefix) argument).descendants()) {
                        if (descendant instanceof ASTConstantExpression) {
                            ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                            if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                addViolation(this, node, "Position literals first in comparison method");
                                break;
                            }
                        }
                    }
                }
                if(argument instanceof ASTArrayAccess) {
                    for (Object arrayAccessDescendant : ((ASTArrayAccess) argument).descendants()) {
                        if (arrayAccessDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) arrayAccessDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTFieldAccess) {
                    for (Object fieldAccessDescendant : ((ASTFieldAccess) argument).descendants()) {
                        if (fieldAccessDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) fieldAccessDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTMethodInvocation) {
                    for (Object methodInvocationDescendant : ((ASTMethodInvocation) argument).descendants()) {
                        if (methodInvocationDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) methodInvocationDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTConditionalExpression) {
                    for (Object conditionalExpressionDescendant : ((ASTConditionalExpression) argument).descendants()) {
                        if (conditionalExpressionDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) conditionalExpressionDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTInstanceOfExpression) {
                    for (Object instanceOfExpressionDescendant : ((ASTInstanceOfExpression) argument).descendants()) {
                        if (instanceOfExpressionDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) instanceOfExpressionDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTLambdaExpression) {
                    for (Object lambdaExpressionDescendant : ((ASTLambdaExpression) argument).descendants()) {
                        if (lambdaExpressionDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) lambdaExpressionDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTMethodReference) {
                    for (Object methodReferenceDescendant : ((ASTMethodReference) argument).descendants()) {
                        if (methodReferenceDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) methodReferenceDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTArrayCreation) {
                    for (Object arrayCreationDescendant : ((ASTArrayCreation) argument).descendants()) {
                        if (arrayCreationDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) arrayCreationDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTArrayInitializer) {
                    for (Object arrayInitializerDescendant : ((ASTArrayInitializer) argument).descendants()) {
                        if (arrayInitializerDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) arrayInitializerDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTNewArray) {
                    for (Object newArrayDescendant : ((ASTNewArray) argument).descendants()) {
                        if (newArrayDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) newArrayDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if(argument instanceof ASTNewArrayInitializer) {
                    for (Object newArrayInitializerDescendant : ((ASTNewArrayInitializer) argument).descendants()) {
                        if (newArrayInitializerDescendant instanceof ASTPrimaryPrefix) {
                            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) newArrayInitializerDescendant;
                            for (Object descendant : primaryPrefix.descendants()) {
                                if (descendant instanceof ASTConstantExpression) {
                                    ASTConstantExpression constantExpression = (ASTConstantExpression) descendant;
                                    if (constantExpression.getExpression() instanceof ASTNullLiteral) {
                                        addViolation(this, node, "Position literals first in comparison method");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 154.598792552948 秒
