开始

========================================== Rule StringInstantiationRule ===========================================
一共 10 个测试用例
正例 5 个
反例 5 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTNewClass node, Object data) {
        if (node.getType().isString()) {
            return new RuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTNewArray node, Object data) {
        if (node.getInitializer() instanceof ASTNewArrayInitializer) {
            return new RuleViolation(node, "Avoid instantiating String arrays.");
        }
        if (node.getInitializer() instanceof ASTNewClassInitializer) {
            ASTNewClassInitializer initializer = (ASTNewClassInitializer) node.getInitializer();
            if (initializer.getExpression().isString()) {
                return new RuleViolation(node, "Avoid instantiating String objects.");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTNewClassOrInterfaceType node, Object data) {
        if (node.getType().isString()) {
            return new RuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTNewPrimitiveType node, Object data) {
        if (node.getType().isString()) {
            return new RuleViolation(node, "Avoid instantiating String objects.");
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public StringInstantiationRule() {
        super(ASTNewClass.class, ASTMethodInvocation.class);
    }

    @Override
    public Object visit(ASTNewClass node, Object data) {
        if (isStringClass(node) && isDirectInstantiation(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        if (isStringClass(node.getMethodName()) && isDirectInstantiation(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isStringClass(ASTName node) {
        return node.getImage().equals("String");
    }

    private boolean isDirectInstantiation(ASTNewClass node) {
        return node.getChildren(ASTArgument.class).isEmpty();
    }

    private boolean isDirectInstantiation(ASTMethodInvocation node) {
        return node.getChildren(ASTArgument.class).isEmpty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    public StringInstantiationRule() {
        super(ASTNewClass.class);
    }

    @Override
    public Object visit(ASTNewClass node, Object data) {
        if (!isStringClass(node)) {
            return super.visit(node, data);
        }

        SymbolTable symbolTable = node.getSymbolTable();
        if (symbolTable == null) {
            return super.visit(node, data);
        }

        ClassOrInterfaceDeclaration cd = node.getType();
        if (cd == null) {
            return super.visit(node, data);
        }

        if (!cd.isTypeDeclaration()) {
            return super.visit(node, data);
        }

        String className = cd.getIdentifier();
        if (!className.equals("String")) {
            return super.visit(node, data);
        }

        ASTExpression initializer = node.getInitializer();
        if (initializer == null) {
            return super.visit(node, data);
        }

        if (JavaRuleUtil.isStringBuilderCtorOrAppend(initializer)) {
            return super.visit(node, data);
        }

        return "Avoid instantiating String objects.";
    }

    private boolean isStringClass(ASTNewClass node) {
        if (node.getType() instanceof ClassOrInterfaceType) {
            ClassOrInterfaceType classOrInterfaceType = (ClassOrInterfaceType) node.getType();
            if (classOrInterfaceType.getIdentifier().equals("String")) {
                return true;
            }
        }
        return false;
    }

}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class StringInstantiationRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTNewClass node, Object data) {
        if (node.getType().toString().equals(String.class.getName())) {
            StringInstantiationRuleViolation violation = new StringInstantiationRuleViolation(node);
            addRuleViolation(violation);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        ASTFieldAccess fa = node.getFirstChildByType(ASTFieldAccess.class);
        if (fa == null) {
            return super.visit(node, data);
        }
        ASTExpression expr = fa.getFirstChildByType(ASTExpression.class);
        if (expr == null) {
            return super.visit(node, data);
        }
        if (expr.toString().equals("new")) {
            ASTNewArray na = expr.getFirstChildByType(ASTNewArray.class);
            if (na == null) {
                na = expr.getFirstChildByType(ASTNewClass.class);
                if (na == null) {
                    return super.visit(node, data);
                }
                String classType = na.getType().toString();
                if (classType.equals("java.lang.StringBuilder") || classType.equals("java.lang.StringBuffer")) {
                    return super.visit(node, data);
                }
            }
            if (na == null) {
                return super.visit(node, data);
            }
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, and ask you to write the checker according to the following two steps, and finally give me the complete checker code for the rule.

-step1: According to the text description of the rule, list the checking logic of the rule checker in text form step by step, that is, how to write the checker code.
-step2: Generate the rule checker code according to the checking logic of the rule checker you gave and the PMD tool rule checker code template I give you below and related checker API tips in the end. 

Rule description: Avoid instantiating String objects.;

The PMD tool rule checker code template is as follows:
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class StringInstantiationRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForInit: public java.lang.String toString()
2. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public R acceptVisitor(net.sourceforge.pmd.lang.ast.AstVisitor, java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTEmptyDeclaration: public java.lang.String toString()
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public java.lang.String toString()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.String toString()
6. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public java.lang.String toString()
7. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<NodeStream$DescendantNodeStream<N> descendantsOrSelf()
8. net.sourceforge.pmd.lang.java.ast.ASTAnonymousClassDeclaration: public java.lang.String toString()
9. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.String toString()
10. net.sourceforge.pmd.lang.java.ast.ASTExplicitConstructorInvocation: public java.lang.String toString()
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<N> ancestorsOrSelf()
13. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTArrayInitializer: public java.lang.String toString()
16. net.sourceforge.pmd.lang.java.types.TypesFromReflection: public java.lang.String toString()
17. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public java.lang.String toString()
18. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public java.lang.String toString()
19. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isStringBuilderCtorOrAppend(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression is a stringbuilder (or stringbuffer) append call, or a constructor call for one of these classes. <p>If it is a constructor call, returns false if this is a call to the constructor with a capacity parameter.


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============

第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
[INFO] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.182 s <<< FAILURE! - in net.sourceforge.pmd.lang.java.rule.performance.StringInstantiationTest
结束

规则执行完毕，时间总花销： 156.4139485359192 秒
