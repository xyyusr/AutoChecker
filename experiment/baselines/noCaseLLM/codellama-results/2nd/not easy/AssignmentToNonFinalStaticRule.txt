开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(ClassOrInterfaceDeclaration.class, MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getBody() != null && node.isConstructor()) {
            mark(node.getBody(), "assignment to non-final static field in constructor is unsafe");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        for (FieldDeclaration field : getFields(node)) {
            if (!isFinal(field) && isStatic(field)) {
                mark(node, "assignment to non-final static field in constructor is unsafe");
            }
        }
        return super.visit(node, data);
    }

    private List<FieldDeclaration> getFields(ASTBlock block) {
        List<FieldDeclaration> fields = new ArrayList<>();
        for (MethodDeclaration method : block.getMethods()) {
            if (method.isConstructor()) {
                fields.addAll(method.getBody().getFields());
            }
        }
        return fields;
    }

    private boolean isFinal(FieldDeclaration field) {
        for (ASTNode modifier : field.getModifiers()) {
            if (modifier instanceof ASTFinalModifier) {
                return true;
            }
        }
        return false;
    }

    private boolean isStatic(FieldDeclaration field) {
        for (ASTNode modifier : field.getModifiers()) {
            if (modifier instanceof ASTStaticModifier) {
                return true;
            }
        }
        return false;
    }

    private void mark(Node node, String message) {
        addViolation(this, node, message);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.function.Function;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(JavaConstructor.class, JavaAssignment.class);
    }

    @Override
    public Object visit(JavaConstructor n, Object data) {
        Set<String> nonFinalStaticFields = new HashSet<>();
        NodeStream<JavaFieldAccess> fieldAccesses = n.findDescendants(JavaFieldAccess.class);
        for (JavaFieldAccess fa : fieldAccesses) {
            JavaFieldAccessExpression expr = (JavaFieldAccessExpression) fa.getJavaExpression();
            if (expr.getExpression() instanceof JavaName) {
                JavaName name = (JavaName) expr.getExpression();
                if (name.getQualifier() instanceof JavaNewClass) {
                    JavaNewClass newClass = (JavaNewClass) name.getQualifier();
                    if (isNonFinalStaticField(newClass)) {
                        nonFinalStaticFields.add(newClass.getName());
                    }
                }
            }
        }
        if (!nonFinalStaticFields.isEmpty()) {
            for (JavaStatement s : n.getBody().getStatements()) {
                if (s instanceof JavaAssignment) {
                    JavaAssignment assignment = (JavaAssignment) s;
                    JavaAssignmentTarget target = assignment.getTarget();
                    if (target instanceof JavaFieldAccess) {
                        JavaFieldAccess fieldAccess = (JavaFieldAccess) target;
                        JavaFieldAccessExpression expr = (JavaFieldAccessExpression) fieldAccess.getJavaExpression();
                        if (expr.getExpression() instanceof JavaName) {
                            JavaName name = (JavaName) expr.getExpression();
                            if (name.getQualifier() instanceof JavaNewClass) {
                                JavaNewClass newClass = (JavaNewClass) name.getQualifier();
                                if (newClass.getName().equalsAny(nonFinalStaticFields)) {
                                    addViolation(this, data, assignment);
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(n, data);
    }

    private boolean isNonFinalStaticField(JavaNewClass newClass) {
        Function<JavaClassOrInterface, Boolean> isField = (c -> {
            if (c instanceof JavaFieldDeclaration) {
                JavaFieldDeclaration fd = (JavaFieldDeclaration) c;
                if (fd.getAccess() == JavaAccessModifier.STATIC && fd.getModifiers().stream().anyMatch(JavaModifier::isFinal)) {
                    return false;
                }
                return true;
            }
            return false;
        });
        return newClass.findAncestor(isField).isPresent();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    private static final String FINAL_KEYWORD = "final";
    private static final String STATIC_KEYWORD = "static";

    public AssignmentToNonFinalStaticRule() {
        super(MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isConstructor()) {
            for (VariableDeclaratorId var : node.getBody().getVariables()) {
                for (AssignmentExpression assignment : node.getBody().getAssignments()) {
                    Expression varExpression = assignment.getVariable();
                    if (varExpression instanceof FieldAccessExpr) {
                        FieldAccessExpr fieldAccess = (FieldAccessExpr) varExpression;
                        if (fieldAccess.getScope() instanceof ClassOrInterfaceDeclaration) {
                            ClassOrInterfaceDeclaration classDecl = (ClassOrInterfaceDeclaration) fieldAccess.getScope();
                            if (!classDecl.isFinal() && classDecl.isStatic()) {
                                addViolation(this, data, assignment);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    private static final String MESSAGE = "Assignment to non-final static field %s in constructor is unsafe.";

    @Override
    public Object visit( ConstructorDeclaration n, Object data ) {
        super.visit( n, data );
        if ( n.getBody() == null ) {
            return data;
        }
        ASTBlockStatement body = n.getBody();
        for ( JavaNode child : body.getJavaNodes() ) {
            if ( child instanceof ASTAssignment ) {
                ASTAssignment assignment = (ASTAssignment) child;
                if ( assignment.getLeftHandSide() instanceof FieldAccess ) {
                    FieldAccess fieldAccess = (FieldAccess) assignment.getLeftHandSide();
                    if ( fieldAccess.getExpression() instanceof ASTVariableDeclarator ) {
                        ASTVariableDeclarator declarator = (ASTVariableDeclarator) fieldAccess.getExpression();
                        if ( declarator.getInitializer() != null && declarator.getInitializer() instanceof ASTExpression ) {
                            ASTExpression initializer = (ASTExpression) declarator.getInitializer();
                            if ( fieldAccess.getScope() instanceof MethodDeclaration ) {
                                MethodDeclaration method = (MethodDeclaration) fieldAccess.getScope();
                                if ( method.getName().equals( n.getName() ) && !isFinal( declarator.getField() ) ) {
                                    addViolation( this, data, fieldAccess, String.format( MESSAGE, declarator.getField() ) );
                                }
                            }
                        }
                    }
                }
            }
        }
        return data;
    }

    private static boolean isFinal( ASTNode declarator ) {
        ASTNode parent = declarator.getParent();
        if ( parent instanceof ASTVariableDeclarator ) {
            ASTNode grandParent = parent.getParent();
            if ( grandParent instanceof FieldDeclaration ) {
                FieldDeclaration fieldDeclaration = (FieldDeclaration) grandParent;
                if ( fieldDeclaration.getModifiers().contains( Modifier.FINAL ) ) {
                    return true;
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.AssignExpr;
import com.github.javaparser.ast.expr.NameExpr;
import com.github.javaparser.ast.expr.FieldAccessExpr;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import com.github.javaparser.ast.visitor.ModifierVisitor;
import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleMatch(AssignmentExpr.class, "Assignment to non-final static field in constructor is unsafe");
    }

    @Override
    public Object visit(AssignmentExpr node, Object data) {
        if (isConstructor(node) && isStaticFieldAssignment(node)) {
            addViolation(this, node);
        }
        return super.visit(node, data);
    }

    private boolean isConstructor(AssignmentExpr node) {
        return node.getParentNode().isInstanceOf(MethodDeclaration.class) && node.getParentNode().as(MethodDeclaration.class).isConstructor();
    }

    private boolean isStaticFieldAssignment(AssignmentExpr node) {
        if (node.getTarget().isInstanceOf(NameExpr.class)) {
            NameExpr target = node.getTarget().as(NameExpr.class);
            if (target.getIdentifier().isPresent()) {
                String fieldName = target.getIdentifier().get();
                if (isStaticField(fieldName)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isStaticField(String fieldName) {
        return fieldName.contains("$") && !fieldName.contains("$this.") && !fieldName.contains("$class.");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 134.98523902893066 秒
