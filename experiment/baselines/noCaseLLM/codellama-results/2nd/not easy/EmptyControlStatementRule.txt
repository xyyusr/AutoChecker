开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

出现语法错误，这一轮舍弃，直接重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        addRuleChainVisitor(this);
    }

    @Override
    public Object visit(TRYStatement node, Object data) {
        if (node.getTryBlock().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FINALLYStatement node, Object data) {
        if (node.getStatement().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SWITCHStatement node, Object data) {
        if (node.getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SYNCHRONIZEDStatement node, Object data) {
        if (node.getStatement().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IFStatement node, Object data) {
        if (node.getThenStatement().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        if (node.getElseStatement() != null && node.getElseStatement().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(EnhancedForStatement node, Object data) {
        if (node.getInitializer().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getInit().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        if (node.getUpdate().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getCondition().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoWhileStatement node, Object data) {
        if (node.getStatement().getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(IfStatement.class, SwitchStatement.class, SynchronizedStatement.class, TryStatement.class, WhileStatement.class, ForStatement.class, DoWhileStatement.class, Block.class);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getThenStatement() != null && node.getElseStatement() == null && JavaNode.isEmpty(node.getThenStatement())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (JavaNode.isEmpty(node.getStatements())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (JavaNode.isEmpty(node.getStatement())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        if (node.getFinallyBlock() != null && JavaNode.isEmpty(node.getFinallyBlock())) {
            addViolation(data, node);
        }
        if (node.getHandler() != null && JavaNode.isEmpty(node.getHandler().getBody())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (JavaNode.isEmpty(node.getBody())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getInitializer() != null && JavaNode.isEmpty(node.getInitializer())) {
            addViolation(data, node);
        }
        if (node.getBody() != null && JavaNode.isEmpty(node.getBody())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoWhileStatement node, Object data) {
        if (JavaNode.isEmpty(node.getBody())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import javax.annotation.processing.ProcessingEnvironment;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(CompilationUnit.class, Block.class, TryStatement.class, SwitchStatement.class, SynchronizedStatement.class, IfStatement.class, WhileStatement.class, ForStatement.class, DoWhileStatement.class, CatchClause.class, Initializer.class);
    }

    @Override
    public Object visit(CompilationUnit node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getBody() == null || node.getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        if (node.getTryBlock() != null && node.getTryBlock().getBody() == null || node.getTryBlock().getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        if (node.getFinallyBlock() != null && node.getFinallyBlock().getBody() == null || node.getFinallyBlock().getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (node.getSwitchBlock().getBody() == null || node.getSwitchBlock().getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (node.getBody() == null || node.getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getThenStatement() == null || node.getThenStatement().getBody() == null || node.getThenStatement().getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getBody() == null || node.getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getBody() == null || node.getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoWhileStatement node, Object data) {
        if (node.getBody() == null || node.getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(CatchClause node, Object data) {
        if (node.getBlock() == null || node.getBlock().getBody() == null || node.getBlock().getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Initializer node, Object data) {
        if (node.getBody() == null || node.getBody().isEmpty()) {
            addViolation(data, new RuleContext(node));
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMessage("Empty control statement.", "emptyControlStatement");
        addRulePriority(3);
    }

    @Override
    public Object visit(EmptyStatement node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(BlockOrDeclarationStatement node, Object data) {
        if (node.getBody().isEmpty() || node.getDeclaration() == null) {
            addRuleBrokenLocation(node, "emptyControlStatement");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyBlock node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyForStatement node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyWhileStatement node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyDoStatement node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptySwitchStatement node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyIfStatement node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(FinallyBlock node, Object data) {
        if (node.getBody().isEmpty()) {
            addRuleBrokenLocation(node, "emptyControlStatement");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyInitializer node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }

    @Override
    public Object visit(EmptyForStatementInitializer node, Object data) {
        addRuleBrokenLocation(node, "emptyControlStatement");
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 147.8408486843109 秒
