开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        String importName = node.getName().getImage();
        if (node.getKind() == ImportDeclarationKind.STATIC) {
            importName = "L" + importName + ";";
        } else {
            importName = "import " + importName + ";";
        }
        if (isUnused(node, data)) {
            addViolation(data, node);
        } else if (isDuplicate(node, data)) {
            addViolation(data, node);
        } else if (isImplicitlyImported(importName, data)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isUnused(ImportDeclaration node, Object data) {
        NodeStream<VariableDeclaration> variables = getDataStore(data).getVariables();
        if (!variables.stream().anyMatch(var -> var.getImage().equals(node.getName().getImage()))) {
            return true;
        }
        if (node.getKind() != ImportDeclarationKind.STATIC) {
            return false;
        }
        return !variables.stream().anyMatch(var -> var.getImage().startsWith(node.getName().getImage() + "."));
    }

    private boolean isDuplicate(ImportDeclaration node, Object data) {
        ImportDeclaration otherImport = getDataStore(data).getOtherImport(node);
        if (otherImport == null) {
            return false;
        }
        if (isImplicitlyImported(otherImport.getName().getImage(), data)) {
            return false;
        }
        return otherImport.getName().getImage().equals(node.getName().getImage());
    }

    private boolean isImplicitlyImported(String importName, Object data) {
        if (importName.startsWith("java.lang.")) {
            return true;
        }
        if (importName.startsWith(getCurrentPackageName(data) + ".")) {
            return true;
        }
        return false;
    }

    private String getCurrentPackageName(Object data) {
        String packageName = getDataStore(data).getPackageName();
        if (packageName == null) {
            return "";
        }
        return packageName;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        addRuleChainVisitor(new UnnecessaryImportRuleVisitor());
    }

    public static class UnnecessaryImportRuleVisitor extends PMDJavaVisitor {
        @Override
        public Object visit(ImportDeclaration n, Object data) {
            List<String> unusedImports = findUnusedImports(n);
            if (unusedImports.size() > 0) {
                addRuleViolation(data, n);
            }
            return super.visit(n, data);
        }

        @Override
        public Object visit(ClassOrInterfaceDeclaration n, Object data) {
            List<String> importedMembers = findImportedMembers(n);
            List<ImportDeclaration> importDeclarations = findImportDeclarations(n);
            for (ImportDeclaration importDeclaration : importDeclarations) {
                for (String member : importedMembers) {
                    if (member.equals(importDeclaration.getImportedName())) {
                        addRuleViolation(data, importDeclaration);
                        break;
                    }
                }
            }
            return super.visit(n, data);
        }

        private List<String> findUnusedImports(ImportDeclaration n) {
            List<String> unusedImports = new ArrayList<>();
            for (ImportDeclaration importDeclaration : n.getImports()) {
                if (!importDeclaration.getImports().contains(n.getPackage().getName())) {
                    unusedImports.add(importDeclaration.getImportedName());
                }
            }
            return unusedImports;
        }

        private List<String> findImportedMembers(ClassOrInterfaceDeclaration n) {
            List<String> importedMembers = new ArrayList<>();
            if (n.isInterface()) {
                importedMembers.addAll(n.getMethods());
                importedMembers.addAll(n.getFields());
            } else {
                importedMembers.addAll(n.getMethods());
                importedMembers.addAll(n.getFields());
                importedMembers.addAll(n.getConstructors());
            }
            return importedMembers;
        }

        private List<ImportDeclaration> findImportDeclarations(ClassOrInterfaceDeclaration n) {
            List<ImportDeclaration> importDeclarations = new ArrayList<>();
            for (ImportDeclaration importDeclaration : n.getImports()) {
                importDeclarations.add(importDeclaration);
            }
            return importDeclarations;
        }

        private void addRuleViolation(Object data, ImportDeclaration n) {
            Violation violation = new Violation(UnnecessaryImportRule.class.getName(), "Import of " + n.getImportedName() + " is unused.");
            data.add(violation);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toSet;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ClassImport.class, PackageImport.class);
    }

    @Override
    public Object visit(ClassImport node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(PackageImport node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(TypeDeclaration node, Object data) {
        Set<String> usedTypes = getUsedTypes(node);
        Set<String> importedTypes = getImportedTypes(node);

        importedTypes = importedTypes.stream()
                .filter(type -> !type.startsWith("java.lang.") && !type.startsWith(node.getScope().toString() + "."))
                .collect(Collectors.toSet());

        for (String importedType : importedTypes) {
            if (!usedTypes.contains(importedType)) {
                addRuleViolation(node, "Unnecessary import of " + importedType);
            }
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        Set<String> usedTypes = getUsedTypes(node);
        Set<String> importedTypes = getImportedTypes(node);

        importedTypes = importedTypes.stream()
                .filter(type -> !type.startsWith("java.lang.") && !type.startsWith(node.getScope().toString() + "."))
                .collect(Collectors.toSet());

        for (String importedType : importedTypes) {
            if (!usedTypes.contains(importedType)) {
                addRuleViolation(node, "Unnecessary import of " + importedType);
            }
        }

        return super.visit(node, data);
    }

    private Set<String> getUsedTypes(JavaNode node) {
        Set<String> usedTypes = new HashSet<>();
        Stream<JavaNode> stream = getNodes(node, UsedExpression.class);

        for (JavaNode expression : stream) {
            usedTypes.add(expression.getImage());
        }

        return usedTypes;
    }

    private Set<String> getImportedTypes(JavaNode node) {
        Set<String> importedTypes = new HashSet<>();
        Stream<JavaNode> stream = getNodes(node, ClassImport.class, PackageImport.class);

        for (JavaNode importNode : stream) {
            if (importNode instanceof ClassImport) {
                importedTypes.add(((ClassImport) importNode).getImage());
            } else if (importNode instanceof PackageImport) {
                importedTypes.addAll(getImportedTypesFromPackage(((PackageImport) importNode).getImage()));
            }
        }

        return importedTypes;
    }

    private Set<String> getImportedTypesFromPackage(String packageName) {
        Set<String> importedTypes = new HashSet<>();
        List<JavaNode> nodes = getNodes(AnonymousClassDeclaration.class, MethodDeclaration.class, TypeDeclaration.class, ClassOrInterfaceDeclaration.class);

        for (JavaNode node : nodes) {
            if (node instanceof AnonymousClassDeclaration) {
                importedTypes.addAll(getImportedTypesFromAnonymousClass((AnonymousClassDeclaration) node));
            } else if (node instanceof MethodDeclaration) {
                importedTypes.addAll(getImportedTypesFromMethod((MethodDeclaration) node));
            } else if (node instanceof TypeDeclaration) {
                importedTypes.addAll(getImportedTypesFromType((TypeDeclaration) node));
            } else if (node instanceof ClassOrInterfaceDeclaration) {
                importedTypes.addAll(getImportedTypesFromClassOrInterface((ClassOrInterfaceDeclaration) node));
            }
        }

        return importedTypes;
    }

    private Set<String> getImportedTypesFromAnonymousClass(AnonymousClassDeclaration node) {
        Set<String> importedTypes = new HashSet<>();
        Stream<JavaNode> stream = getNodes(node, UsedExpression.class);

        for (JavaNode expression : stream) {
            importedTypes.add(expression.getImage());
        }

        return importedTypes;
    }

    private Set<String> getImportedTypesFromMethod(MethodDeclaration node) {
        Set<String> importedTypes = new HashSet<>();
        Stream<JavaNode> stream = getNodes(node, UsedExpression.class);

        for (JavaNode expression : stream) {
            importedTypes.add(expression.getImage());
        }

        return importedTypes;
    }

    private Set<String> getImportedTypesFromType(TypeDeclaration node) {
        Set<String> importedTypes = new HashSet<>();
        Stream<JavaNode> stream = getNodes(node, UsedExpression.class);

        for (JavaNode expression : stream) {
            importedTypes.add(expression.getImage());
        }

        return importedTypes;
    }

    private Set<String> getImportedTypesFromClassOrInterface(ClassOrInterfaceDeclaration node) {
        Set<String> importedTypes = new HashSet<>();
        Stream<JavaNode> stream = getNodes(node, UsedExpression.class);

        for (JavaNode expression : stream) {
            importedTypes.add(expression.getImage());
        }

        return importedTypes;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainElement(new ImportStatementVisitor());
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        return super.visit(node, data);
    }

    private class ImportStatementVisitor extends AbstractJavaRuleChain {
        @Override
        public Object visit(ImportDeclaration node, Object data) {
            return visit(node.getImportedType(), data);
        }

        @Override
        public Object visit(ImportStatic node, Object data) {
            return visit(node.getImportedMember(), data);
        }

        @Override
        public Object visit(ImportType node, Object data) {
            return super.visit(node, data);
        }

        @Override
        public Object visit(ImportStatic node, Object data) {
            return super.visit(node, data);
        }

        private Object visit(Type node, Object data) {
            if (node == null) {
                return data;
            }

            if (node.getImage().startsWith("java.lang.")) {
                return data;
            }

            if (node.getImage().startsWith(getCurrentClass().getImage())) {
                return data;
            }

            Map<String, VariableSymbol> symbols = getCurrentClass().getVariableSymbols();
            if (symbols.containsKey(node.getImage())) {
                return data;
            }

            ClassSymbol classSymbol = getCurrentClass().getClassSymbol();
            if (classSymbol != null && classSymbol.isPresent()) {
                MethodSymbol methodSymbol = classSymbol.getMethod(node.getImage());
                if (methodSymbol != null && methodSymbol.isPresent()) {
                    return data;
                }
            }

            return Violation.buildViolation("Unused import: " + node.getImage(), node).asList();
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainElement(new ImportDeclarationVisitor());
    }

    private static class ImportDeclarationVisitor extends JavaRecursiveVisitor {
        @Override
        public Object visit(ImportDeclaration node, Object data) {
            if (visitImport(node)) {
                addViolation(data, node);
            }
            return super.visit(node, data);
        }
    }

    private boolean visitImport(ImportDeclaration node) {
        JavaCompilationUnit compilationUnit = (JavaCompilationUnit) node.getParent();
        // check for unused imports
        if (!compilationUnit.getImports().contains(node)) {
            return true;
        }

        // check for duplicate imports
        for (ImportDeclaration existingImport : compilationUnit.getImports()) {
            if (existingImport.getImportedPackage().equals(node.getImportedPackage())) {
                return true;
            }
        }

        // check if imported class is already in scope
        String className = node.getImportedClass();
        if (className.equals("java.lang." + className)) {
            return true;
        }
        if (compilationUnit.getTypes().contains(className)) {
            return true;
        }

        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 157.87280082702637 秒
