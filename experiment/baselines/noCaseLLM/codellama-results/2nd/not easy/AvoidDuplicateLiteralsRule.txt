开始

========================================== Rule AvoidDuplicateLiteralsRule ===========================================
一共 11 个测试用例
正例 3 个
反例 8 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        addRuleChainElement(new ASTCompilationUnit());
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Map<String, Integer> duplicateMap = new HashMap<>();
        Set<String> visited = new HashSet<>();
        int duplicateCount = 0;

        for (ASTNode child : node.jjtGetChildren()) {
            if (child instanceof ASTLiteralExpression) {
                ASTLiteralExpression literal = (ASTLiteralExpression) child;
                if (literal instanceof ASTStringLiteralExpression) {
                    String literalStr = literal.getImage();
                    if (literalStr.length() >= 3) {
                        if (visited.contains(literalStr)) {
                            duplicateMap.put(literalStr, duplicateMap.getOrDefault(literalStr, 0) + 1);
                            duplicateCount++;
                        } else {
                            visited.add(literalStr);
                        }
                    }
                }
            }
        }

        for (Map.Entry<String, Integer> entry : duplicateMap.entrySet()) {
            if (entry.getValue() >= 4) {
                addViolation(this, node, "Duplicate string literal '" + entry.getKey() + "' appears " + entry.getValue() + " times.");
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

出现语法错误，这一轮舍弃，直接重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super(Literal.class, ClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Literal node, Object data) {
        String value = node.getImage();
        if (value != null && value.getClass() == String.class && !value.isEmpty() && value.length() >= 3) {
            if (data instanceof Map) {
                ((Map<String, Integer>) data).put(value, ((Map<String, Integer>) data).getOrDefault(value, 0) + 1);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object endVisit(ClassOrInterfaceDeclaration node, Object data) {
        Map<String, Integer> literalCounts = (Map<String, Integer>) data;
        for (Map.Entry<String, Integer> entry : literalCounts.entrySet()) {
            if (entry.getValue() > 4) {
                addViolation(this, node, "Avoid duplicate string literals (" + entry.getValue() + " occurrences)");
            }
        }
        return super.endVisit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    public AvoidDuplicateLiteralsRule() {
        super(Node.class, MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(Node node, Object data) {
        Map<String, Integer> literalCounts = new HashMap<>();

        NodeStream stream = new NodeStream(node);
        while (stream.hasMoreNodes()) {
            Node currentNode = stream.nextNode();
            if (currentNode instanceof Literal) {
                String literalValue = currentNode.getImage();
                if (literalValue != null && literalValue.length() >= 3) {
                    literalCounts.put(literalValue, literalCounts.getOrDefault(literalValue, 0) + 1);
                }
            }
        }

        literalCounts.entrySet().stream()
                .filter(entry -> entry.getValue() >= 4)
                .forEach(entry -> addViolation(this, node, data, "Duplicate string literal '" + entry.getKey() + "' found " + entry.getValue() + " times."));

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.ArrayList;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> seenLiterals = new HashSet<>();
        int duplicateCount = 0;
        List<ASTLiteral> literalNodes = new ArrayList<>();
        for (JavaNode child : node.jjtGetChildren()) {
            if (child instanceof ASTLiteral) {
                ASTLiteral literalNode = (ASTLiteral) child;
                String literalValue = literalNode.getImage();
                if (literalValue.length() >= 3) {
                    if (seenLiterals.contains(literalValue)) {
                        duplicateCount++;
                        literalNodes.add(literalNode);
                    } else {
                        seenLiterals.add(literalValue);
                    }
                }
            }
        }

        if (duplicateCount >= 4) {
            for (ASTLiteral literalNode : literalNodes) {
                ASTMethodDeclaration classDeclaration = findMethodDeclaration(node, literalNode);
                if (classDeclaration != null) {
                    if (!hasFieldDeclaration(node, literalNode.getImage())) {
                        addViolation(this, node, "String literal '" + literalNode.getImage() + "' appears " + duplicateCount + " times, consider declaring a constant field instead.");
                    }
                }
            }
        }

        return super.visit(node, data);
    }

    private boolean hasFieldDeclaration(ASTCompilationUnit node, String literalValue) {
        for (JavaNode child : node.jjtGetChildren()) {
            if (child instanceof ASTClassOrInterfaceDeclaration) {
                ASTClassOrInterfaceDeclaration classDeclaration = (ASTClassOrInterfaceDeclaration) child;
                SymbolTable symbolTable = classDeclaration.getSymbolTable();
                ClassOrInterfaceType declaringType = symbolTable.getDeclaringType(classDeclaration);
                if (hasFieldDeclaration(declaringType, literalValue)) {
                    return true;
                }
            } else if (child instanceof ASTFieldDeclaration) {
                ASTFieldDeclaration fieldDeclaration = (ASTFieldDeclaration) child;
                String fieldTypeName = fieldDeclaration.getFieldTypeName();
                SymbolTable symbolTable = fieldDeclaration.getSymbolTable();
                if (fieldTypeName.equals("String") && symbolTable.getIdentifier(fieldDeclaration.getFieldName()).getImage().equals(literalValue)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean hasFieldDeclaration(ClassOrInterfaceType declaringType, String literalValue) {
        for (JavaNode child : declaringType.getDeclaration().jjtGetChildren()) {
            if (child instanceof ASTFieldDeclaration) {
                ASTFieldDeclaration fieldDeclaration = (ASTFieldDeclaration) child;
                String fieldTypeName = fieldDeclaration.getFieldTypeName();
                SymbolTable symbolTable = fieldDeclaration.getSymbolTable();
                if (fieldTypeName.equals("String") && symbolTable.getIdentifier(fieldDeclaration.getFieldName()).getImage().equals(literalValue)) {
                    return true;
                }
            }
        }
        return false;
    }

    private ASTMethodDeclaration findMethodDeclaration(ASTCompilationUnit node, ASTLiteral literalNode) {
        for (JavaNode child : node.jjtGetChildren()) {
            if (child instanceof ASTMethodDeclaration) {
                ASTMethodDeclaration methodDeclaration = (ASTMethodDeclaration) child;
                ASTCompilationUnit methodScope = methodDeclaration.getScope();
                if (methodScope != null && methodScope.containsNode(literalNode)) {
                    return methodDeclaration;
                }
            } else if (child instanceof ASTClassBody) {
                ASTClassBody classBody = (ASTClassBody) child;
                for (JavaNode grandchild : classBody.jjtGetChildren()) {
                    if (grandchild instanceof ASTMethodDeclaration) {
                        ASTMethodDeclaration methodDeclaration = (ASTMethodDeclaration) grandchild;
                        ASTCompilationUnit methodScope = methodDeclaration.getScope();
                        if (methodScope != null && methodScope.containsNode(literalNode)) {
                            return methodDeclaration;
                        }
                    }
                }
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 114.78737330436707 秒
