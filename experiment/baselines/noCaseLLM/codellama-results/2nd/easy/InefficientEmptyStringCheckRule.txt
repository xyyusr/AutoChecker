开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        addRuleMatch("callsToTrimLength() | callsToTrimIsEmpty()", this::callsToTrimLength);
    }

    private Object callsToTrimLength(Node node, Object data) {
        if (node instanceof MethodCallExpr) {
            MethodCallExpr methodCall = (MethodCallExpr) node;
            if (methodCall.getTarget() instanceof FieldAccessExpr &&
                    ((FieldAccessExpr) methodCall.getTarget()).getField() instanceof Field) {
                Field field = (Field) ((FieldAccessExpr) methodCall.getTarget()).getField();
                if (field.getImage().equals("trim") && ((MethodCallExpr) methodCall).getArguments().size() == 1 &&
                        ((MethodCallExpr) methodCall).getArguments().get(0) instanceof MethodCallExpr &&
                        ((MethodCallExpr) ((MethodCallExpr) methodCall).getArguments().get(0)).getImage().equals("length") ||
                        ((MethodCallExpr) methodCall).getArguments().size() == 1 &&
                                ((MethodCallExpr) methodCall).getArguments().get(0) instanceof MethodCallExpr &&
                                ((MethodCallExpr) ((MethodCallExpr) methodCall).getArguments().get(0)).getImage().equals("isEmpty")) {
                    return RuleViolation.create(node, "Use isEmpty() instead of trim().length() or trim().isEmpty()");
                }
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.Iterator;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        addRuleMatch(ASTCallExpression.class);
        addRuleMatch(ASTStringLiteralExpression.class);
    }

    @Override
    public Object visit(ASTCallExpression node, Object data) {
        String methodName = node.getImage();
        if (methodName.equals("length") || methodName.equals("isEmpty")) {
            ASTPrimaryPrefix methodOwner = node.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (methodOwner != null && methodOwner.getImage().equals("trim")) {
                addViolation(data, this, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStringLiteralExpression node, Object data) {
        // this is the most common way to create an empty string, so we don't care about it
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTClassOrInterfaceDeclaration.class, ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodContents = node.toSourceString();
        Pattern pattern = Pattern.compile("\\b(String)\\.[\\w\\.]+\\(\\)\\.isEmpty\\(\\)\\s*==\\s*0\\b|\\b(String)\\.[\\w\\.]+\\(\\)\\.length\\(\\)\\s*==\\s*0\\b", Pattern.DOTALL);
        if (pattern.matcher(methodContents).find()) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {

    public InefficientEmptyStringCheckRule() {
        addRuleChainVisibilityRule(JavaClass.class, JavaMethodDeclaration.class);
    }

    @Override
    public Object visit(JavaMethodDeclaration node, Object data) {
        List<JavaExpression> stringTrimLengthCalls = findStringTrimLengthCalls(node);
        List<JavaMethodInvocation> stringTrimIsEmptyCalls = findStringTrimIsEmptyCalls(node);
        for (JavaExpression stringTrimLengthCall : stringTrimLengthCalls) {
            addViolation(data, this, stringTrimLengthCall);
        }
        for (JavaMethodInvocation stringTrimIsEmptyCall : stringTrimIsEmptyCalls) {
            addViolation(data, this, stringTrimIsEmptyCall);
        }
        return super.visit(node, data);
    }

    private List<JavaExpression> findStringTrimLengthCalls(JavaMethodDeclaration node) {
        List<JavaExpression> stringTrimLengthCalls = new ArrayList<>();
        for (JavaStatement statement : node.getBody().getStatements()) {
            if (statement instanceof JavaExpressionStatement) {
                JavaExpression expression = ((JavaExpressionStatement) statement).getExpression();
                if (expression instanceof JavaMethodInvocation) {
                    JavaMethodInvocation methodInvocation = (JavaMethodInvocation) expression;
                    if (methodInvocation.getMethodName().equals("length") && methodInvocation.getTarget() instanceof JavaMethodInvocation) {
                        JavaMethodInvocation stringTrimMethodInvocation = (JavaMethodInvocation) methodInvocation.getTarget();
                        if (stringTrimMethodInvocation.getMethodName().equals("trim")) {
                            stringTrimLengthCalls.add(expression);
                        }
                    }
                }
            }
        }
        return stringTrimLengthCalls;
    }

    private List<JavaMethodInvocation> findStringTrimIsEmptyCalls(JavaMethodDeclaration node) {
        List<JavaMethodInvocation> stringTrimIsEmptyCalls = new ArrayList<>();
        for (JavaStatement statement : node.getBody().getStatements()) {
            if (statement instanceof JavaExpressionStatement) {
                JavaExpression expression = ((JavaExpressionStatement) statement).getExpression();
                if (expression instanceof JavaMethodInvocation) {
                    JavaMethodInvocation methodInvocation = (JavaMethodInvocation) expression;
                    if (methodInvocation.getMethodName().equals("isEmpty") && methodInvocation.getTarget() instanceof JavaMethodInvocation) {
                        JavaMethodInvocation stringTrimMethodInvocation = (JavaMethodInvocation) methodInvocation.getTarget();
                        if (stringTrimMethodInvocation.getMethodName().equals("trim")) {
                            stringTrimIsEmptyCalls.add(methodInvocation);
                        }
                    }
                }
            }
        }
        return stringTrimIsEmptyCalls;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        addRuleChainElement(new MethodCallRuleChainElement("trim", 1));
        addRuleChainElement(new MethodCallRuleChainElement("isEmpty", 1));
        addRuleChainElement(new MethodCallRuleChainElement("length", 1));
    }

    @Override
    public Object visit(ASTReturnStatement node, Object data) {
        if (node.getImage().contains("String.trim().length() == 0") || node.getImage().contains("String.trim().isEmpty()")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        ASTPrimaryPrefix methodCall = (ASTPrimaryPrefix) node.getFirstChildByType(ASTPrimaryPrefix.class);
        if (methodCall == null) {
            return super.visit(node, data);
        }
        ASTStringLiteralExpression stringLiteral = (ASTStringLiteralExpression) methodCall.getFirstChildByType(ASTStringLiteralExpression.class);
        if (stringLiteral == null || !stringLiteral.getType().equals("java.lang.String")) {
            return super.visit(node, data);
        }
        if (methodCall.getImage().equals("trim") || methodCall.getImage().equals("isEmpty") || methodCall.getImage().equals("length")) {
            if (node.getFirstChildByType(ASTMethodCall.class) != null) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 130.85565209388733 秒
