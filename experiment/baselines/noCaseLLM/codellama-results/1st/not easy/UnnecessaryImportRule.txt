开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration n, Object data) {
        Set<String> currentPackage = new HashSet<>();
        Set<String> usedTypes = new HashSet<>();

        for (ImportReference ref : n.getImportReferences()) {
            if (ref.getImportedIdentifier().getFullyQualifiedName().startsWith("java.")) {
                continue;
            }

            if (ref.getImportedIdentifier().getFullyQualifiedName().startsWith(n.getCompilationUnit().getPackageName() + ".")) {
                currentPackage.add(ref.getImportedIdentifier().getFullyQualifiedName());
                continue;
            }

            if (usedTypes.contains(ref.getImportedIdentifier().getFullyQualifiedName())) {
                addViolation(this, data, n);
                continue;
            }

            usedTypes.add(ref.getImportedIdentifier().getFullyQualifiedName());
        }

        for (ImportReference ref : n.getImportReferences()) {
            if (usedTypes.contains(ref.getImportedIdentifier().getFullyQualifiedName()) && currentPackage.contains(ref.getImportedIdentifier().getFullyQualifiedName())) {
                addViolation(this, data, n);
            }
        }

        return super.visit(n, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainClass(ImportDeclaration.class);
        addRuleChainClass(UnaryExpression.class, ImportDeclaration.class);
        addRuleChainClass(PrimitiveType.class, ImportDeclaration.class);
        addRuleChainClass(ReferenceType.class, ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        List<String> importNames = new ArrayList<>();
        List<String> definedNames = new ArrayList<>();

        for (ImportImportClause importClause : node.getImportClauses()) {
            importNames.add(importClause.getName());
        }

        for (ImportImportClause importClause : node.getImportClauses()) {
            for (ImportTypeSpecification type : importClause.getTypes()) {
                if (type instanceof PrimitiveType) {
                    definedNames.add(((PrimitiveType) type).getImage());
                } else if (type instanceof ReferenceType) {
                    definedNames.add(((ReferenceType) type).getImage());
                }
            }
        }

        for (ImportImportClause importClause : node.getImportClauses()) {
            for (ImportTypeSpecification type : importClause.getTypes()) {
                if (type instanceof PrimitiveType) {
                    if (((PrimitiveType) type).getImage().equals("boolean") || ((PrimitiveType) type).getImage().equals("byte") || ((PrimitiveType) type).getImage().equals("char") || ((PrimitiveType) type).getImage().equals("double") || ((PrimitiveType) type).getImage().equals("float") || ((PrimitiveType) type).getImage().equals("int") || ((PrimitiveType) type).getImage().equals("long") || ((PrimitiveType) type).getImage().equals("short")) {
                        importNames.remove(importClause.getName());
                    }
                } else if (type instanceof ReferenceType) {
                    boolean isImplicitlyImported = ((ReferenceType) type).getImage().startsWith("java.lang.") || ((ReferenceType) type).getImage().startsWith(((PackageDeclaration) node.getParentNode()).getImage());
                    if (isImplicitlyImported) {
                        importNames.remove(importClause.getName());
                    }
                }
            }
        }

        for (ImportImportClause importClause : node.getImportClauses()) {
            for (ImportTypeSpecification type : importClause.getTypes()) {
                if (type instanceof PrimitiveType) {
                    if (!((PrimitiveType) type).getImage().equals("boolean") || !((PrimitiveType) type).getImage().equals("byte") || !((PrimitiveType) type).getImage().equals("char") || !((PrimitiveType) type).getImage().equals("double") || !((PrimitiveType) type).getImage().equals("float") || !((PrimitiveType) type).getImage().equals("int") || !((PrimitiveType) type).getImage().equals("long") || !((PrimitiveType) type).getImage().equals("short")) {
                        importNames.remove(importClause.getName());
                    }
                } else if (type instanceof ReferenceType) {
                    if (!((ReferenceType) type).getImage().startsWith("java.lang.") && !((ReferenceType) type).getImage().startsWith(((PackageDeclaration) node.getParentNode()).getImage())) {
                        importNames.remove(importClause.getName());
                    }
                }
            }
        }

        if (importNames.isEmpty() && definedNames.isEmpty()) {
            return-violation(node, "Unused import");
        } else if (importNames.isEmpty()) {
            return-violation(node, "Redundant import");
        } else {
            return super.visit(node, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainElement(new ImportStatementVisitor());
    }

    private class ImportStatementVisitor extends RuleChainVisitor {
        @Override
        public boolean shouldVisit(ASTNode node, RuleChainVisitorData data) {
            return node instanceof ImportDeclaration;
        }

        @Override
        public Object visit(ImportDeclaration node, Object data) {
            Set<String> referencedTypes = new HashSet<>();
            Set<String> importedTypes = new HashSet<>();

            for (ImportDeclaration imp : getEnclosingNode(node).getImportDeclarations()) {
                importedTypes.add(imp.getName());
            }

            for (ClassOrInterfaceDeclaration classDeclaration : getEnclosingNode(node).getClassDeclarations()) {
                referencedTypes.addAll(classDeclaration.getFullyQualifiedName().split("\\."));

                for (MethodDeclaration methodDeclaration : classDeclaration.getMethods()) {
                    referencedTypes.addAll(methodDeclaration.getFullyQualifiedName().split("\\."));
                }
            }

            if (importedTypes.containsAll(referencedTypes)) {
                reportViolation(node);
            }

            for (ImportDeclaration imp : getEnclosingNode(node).getImportDeclarations()) {
                for (SymbolReference ref : imp.getSymbolTable().getSymbolReferences()) {
                    if (ref instanceof ImportDeclarationSymbol) {
                        ImportDeclarationSymbol id = (ImportDeclarationSymbol) ref;
                        if (importedTypes.contains(id.getName())) {
                            reportViolation(imp);
                        }
                    }
                }
            }

            for (ImportDeclaration imp : getEnclosingNode(node).getImportDeclarations()) {
                if (imp.equals(node)) {
                    continue;
                }

                if (imp.getImportedNames().equals(node.getImportedNames())) {
                    reportViolation(imp);
                }
            }

            return null;
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

出现语法错误，这一轮舍弃，直接重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ClassImport.class, ImportDeclaration.class, PackageDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        NodeStream<ClassOrInterfaceDeclaration> classes = findReachableNonStaticClasses(node);
        if (classes == null) {
            addViolation(data, node);
        } else {
            for (ClassOrInterfaceDeclaration classDecl : classes) {
                for (ImportDeclaration imp : findImports(classDecl)) {
                    if (imp == node) {
                        addViolation(data, node);
                        return data;
                    }
                }
            }
        }
        return data;
    }

    private NodeStream<ClassOrInterfaceDeclaration> findReachableNonStaticClasses(ImportDeclaration node) {
        if (node == null) {
            return null;
        }
        NodeStream<ClassOrInterfaceDeclaration> classes = node.findReachableNonStaticClasses();
        if (classes == null) {
            classes = node.findReachableNonStaticClasses();
        }
        return classes;
    }

    private List<ImportDeclaration> findImports(ClassOrInterfaceDeclaration classDecl) {
        List<ImportDeclaration> imports = new ArrayList<>();
        for (ImportDeclaration imp : classDecl.findDescendants(ImportDeclaration.class)) {
            imports.add(imp);
        }
        return imports;
    }

    @Override
    public Object visit(PackageDeclaration node, Object data) {
        NodeStream<ClassOrInterfaceDeclaration> classes = node.findReachableNonStaticClasses();
        if (classes != null) {
            for (ClassOrInterfaceDeclaration classDecl : classes) {
                for (ImportDeclaration imp : findImports(classDecl)) {
                    if (imp.getImportedTypeName().equals(node.getName())) {
                        addViolation(data, imp);
                    }
                }
            }
        }
        return data;
    }

    @Override
    public Object visit(ClassImport node, Object data) {
        if (node.isStatic()) {
            return data;
        }
        if (node.getImportedTypeName().equals("java.lang." + node.getSimpleName())) {
            return data;
        }
        if (node.getImportedTypeName().equals(node.getScope().getName() + "." + node.getSimpleName())) {
            return data;
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 101.27547264099121 秒
