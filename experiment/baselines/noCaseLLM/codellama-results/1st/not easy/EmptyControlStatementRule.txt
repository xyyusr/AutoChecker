开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(
                ClassOrInterfaceDeclaration.class,
                TryStatement.class,
                FinallyStatement.class,
                SwitchStatement.class,
                SynchronizedStatement.class,
                IfStatement.class,
                WhileStatement.class,
                ForStatement.class,
                DoWhileStatement.class,
                Block.class,
                Initializer.class,
                Statement.class
        );
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(FinallyStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getThenStatement().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoWhileStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Initializer node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Statement node, Object data) {
        if (node instanceof Block && ((Block) node).getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(
            TryStatement.class,
            FinallyStatement.class,
            SwitchStatement.class,
            SynchronizedStatement.class,
            IfStatement.class,
            WhileStatement.class,
            ForStatement.class,
            DoStatement.class,
            Block.class,
            Initializer.class
        );
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        List<ASTNode> statements = node.getStatements();
        if (statements.size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(FinallyStatement node, Object data) {
        if (node.getStatement() == null) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (node.getStatements().size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (node.getStatement() == null) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.getElseStatement() == null && node.getThenStatement().getStatements().size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (node.getStatement().getStatements().size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (node.getStatement().getStatements().size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(DoStatement node, Object data) {
        if (node.getStatement().getStatements().size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getStatements().size() == 0) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(Initializer node, Object data) {
        if (node.getExpression() == null) {
            addViolation(data, node);
        }
        super.visit(node, data);
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(JavaNode.BLOCK, JavaNode.FOR_STATEMENT, JavaNode.SWITCH_STATEMENT, JavaNode.SYNCHRONIZED_STATEMENT, JavaNode.IF_STATEMENT, JavaNode.WHILE_STATEMENT, JavaNode.DO_STATEMENT, JavaNode.TRY_STATEMENT, JavaNode.FOR_INIT);
    }

    @Override
    public Object visit(BLOCK node, Object data) {
        if (isBlank(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FOR_STATEMENT node, Object data) {
        if (isBlank((Block) node.getBody())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SWITCH_STATEMENT node, Object data) {
        if (isBlank((Block) node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SYNCHRONIZED_STATEMENT node, Object data) {
        if (isBlank((Block) node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IF_STATEMENT node, Object data) {
        if (isBlank(node.getThenStatement())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WHILE_STATEMENT node, Object data) {
        if (isBlank(node.getStatement())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DO_STATEMENT node, Object data) {
        if (isBlank(node.getStatement())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(TRY_STATEMENT node, Object data) {
        if (isBlank(node.getBody()) && isBlank(node.getFinallyStatement())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(FOR_INIT node, Object data) {
        if (isBlank(node.getExpression())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isBlank(Block node) {
        return node == null || node.getStatements().isEmpty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleChainElement(new BlockStatementRule());
        addRuleChainElement(new IfStatementRule());
        addRuleChainElement(new SwitchStatementRule());
        addRuleChainElement(new SynchronizedStatementRule());
        addRuleChainElement(new TryStatementRule());
        addRuleChainElement(new FinallyStatementRule());
        addRuleChainElement(new LoopStatementRule());
        addRuleChainElement(new InitializerRule());
    }

    private class BlockStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTBlock block, Object data) {
            if (isBlockEmpty(block)) {
                addViolation(data, new RuleContext(block));
            }
            return super.visit(block, data);
        }
    }

    private class IfStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTIf ifNode, Object data) {
            if (isBlockEmpty(ifNode.getBody())) {
                addViolation(data, new RuleContext(ifNode));
            }
            return super.visit(ifNode, data);
        }
    }

    private class SwitchStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTSwitch switchNode, Object data) {
            if (isBlockEmpty(switchNode.getBody())) {
                addViolation(data, new RuleContext(switchNode));
            }
            return super.visit(switchNode, data);
        }
    }

    private class SynchronizedStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTSynchronized synchronizedNode, Object data) {
            if (isBlockEmpty(synchronizedNode.getBody())) {
                addViolation(data, new RuleContext(synchronizedNode));
            }
            return super.visit(synchronizedNode, data);
        }
    }

    private class TryStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTTry tryNode, Object data) {
            if (isBlockEmpty(tryNode.getBody())) {
                addViolation(data, new RuleContext(tryNode));
            }
            if (tryNode.getFinally() != null && isBlockEmpty(tryNode.getFinally())) {
                addViolation(data, new RuleContext(tryNode.getFinally()));
            }
            return super.visit(tryNode, data);
        }
    }

    private class FinallyStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTFinally finallyNode, Object data) {
            if (isBlockEmpty(finallyNode.getStatement())) {
                addViolation(data, new RuleContext(finallyNode));
            }
            return super.visit(finallyNode, data);
        }
    }

    private class LoopStatementRule extends AbstractRule {
        @Override
        public Object visit(ASTWhile whileNode, Object data) {
            if (isBlockEmpty(whileNode.getBody())) {
                addViolation(data, new RuleContext(whileNode));
            }
            return super.visit(whileNode, data);
        }

        @Override
        public Object visit(ASTFor forNode, Object data) {
            if (isBlockEmpty(forNode.getBody())) {
                addViolation(data, new RuleContext(forNode));
            }
            return super.visit(forNode, data);
        }

        @Override
        public Object visit(ASTDoWhile doWhileNode, Object data) {
            if (isBlockEmpty(doWhileNode.getBody())) {
                addViolation(data, new RuleContext(doWhileNode));
            }
            return super.visit(doWhileNode, data);
        }
    }

    private class InitializerRule extends AbstractRule {
        @Override
        public Object visit(ASTInitializer initializer, Object data) {
            if (isBlockEmpty(initializer.getInitializerBlock())) {
                addViolation(data, new RuleContext(initializer));
            }
            return super.visit(initializer, data);
        }
    }

    private boolean isBlockEmpty(ASTBlock block) {
        return block.getBody().isEmpty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMatch(ASTTryStmt.class, "Empty body in try statement");
        addRuleMatch(ASTFinallyStmt.class, "Empty finally clause in try statement");
        addRuleMatch(ASTSwitchStmt.class, "Empty switch statement");
        addRuleMatch(ASTSynchronizedStmt.class, "Empty synchronized statement");
        addRuleMatch(ASTIfStmt.class, "Empty if statement");
        addRuleMatch(ASTWhileStmt.class, "Empty while statement");
        addRuleMatch(ASTForStmt.class, "Empty for statement");
        addRuleMatch(ASTDowhileStmt.class, "Empty do-while statement");
        addRuleMatch(ASTBlock.class, "Empty block used as statement");
        addRuleMatch(ASTClassOrInterfaceBodyDeclaration.class, "Empty initializer");
    }

    @Override
    public Object visit(ASTTryStmt node, Object data) {
        if (node.getBody() == null || node.getBody().getChildren().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFinallyStmt node, Object data) {
        if (node.getStatement() == null || (node.getStatement() instanceof ASTBlock && ((ASTBlock) node.getStatement()).getChildren().isEmpty())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStmt node, Object data) {
        if (node.getStatements() == null || node.getStatements().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStmt node, Object data) {
        if (node.getStatement() == null || (node.getStatement() instanceof ASTBlock && ((ASTBlock) node.getStatement()).getChildren().isEmpty())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStmt node, Object data) {
        if (node.getThenStatement() == null || (node.getThenStatement() instanceof ASTBlock && ((ASTBlock) node.getThenStatement()).getChildren().isEmpty())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStmt node, Object data) {
        if (node.getExpression() == null || node.getBody() == null || node.getBody().getChildren().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStmt node, Object data) {
        if (node.getIdentifier() == null || node.getInitStatement() == null || (node.getInitStatement() instanceof ASTBlock && ((ASTBlock) node.getInitStatement()).getChildren().isEmpty()) || (node.getExpression() == null || node.getBody() == null || node.getBody().getChildren().isEmpty())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDowhileStmt node, Object data) {
        if (node.getExpression() == null || node.getBody() == null || node.getBody().getChildren().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.getChildren().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceBodyDeclaration node, Object data) {
        if (node.getInitializers() == null || node.getInitializers().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 135.43560457229614 秒
