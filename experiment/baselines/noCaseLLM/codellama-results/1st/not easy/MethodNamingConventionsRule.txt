开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        addRuleChainVisitor(new JavaLanguageRuleChainVisitor() {
            @Override
            public Object visit(MethodDeclaration node, Object data) {
                return checkMethodDeclaration(node, data);
            }
        });
    }

    private Object checkMethodDeclaration(MethodDeclaration node, Object data) {
        String methodName = node.getImage();

        if (node.isStatic()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                return report(node, "Method name " + methodName + " does not match the convention for static methods");
            }
        } else if (node.isNative()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                return report(node, "Method name " + methodName + " does not match the convention for native methods");
            }
        } else if (node.isConstructor()) {
            // do not report constructor methods
        } else {
            String className = node.getEnclosingType().getImage();

            if (className.contains("Test")) {
                if (className.contains("Test4")) {
                    if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                        return report(node, "Method name " + methodName + " does not match the convention for JUnit 4 test methods");
                    }
                } else if (className.contains("Test5")) {
                    if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                        return report(node, "Method name " + methodName + " does not match the convention for JUnit 5 test methods");
                    }
                } else if (className.contains("Test")) {
                    if (!methodName.matches("test[A-Z0-9][a-zA-Z0-9]*")) {
                        return report(node, "Method name " + methodName + " does not match the convention for JUnit 3 test methods");
                    }
                } else {
                    if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                        return report(node, "Method name " + methodName + " does not match the convention for instance methods");
                    }
                }
            } else {
                if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                    return report(node, "Method name " + methodName + " does not match the convention for instance methods");
                }
            }
        }

        return null;
    }

    private Object report(MethodDeclaration node, String message) {
        return new RuleViolation(node, this.getClass().getName(), message);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import org.junit.Test;
import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    private static final String INSTANCE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT_3_TEST_METHOD_REGEX = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT_4_TEST_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT_5_TEST_METHOD_REGEX = "[a-z][a-zA-Z0-9]*";

    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class, ASTMethodInvocation.class, ASTMethodReference.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getImage();
        String className = ((ASTClassOrInterfaceDeclaration) node.getParent()).getImage();

        if (JUnitUtil.isJUnit3Test(node, data)) {
            if (!methodName.matches(JUNIT_3_TEST_METHOD_REGEX)) {
                addRuleViolation(this, node, "JUnit 3 test method " + methodName + " in class " + className + " does not match the naming convention.");
            }
        } else if (JUnitUtil.isJUnit4Test(node, data)) {
            if (!methodName.matches(JUNIT_4_TEST_METHOD_REGEX)) {
                addRuleViolation(this, node, "JUnit 4 test method " + methodName + " in class " + className + " does not match the naming convention.");
            }
        } else if (JUnitUtil.isJUnit5Test(node, data)) {
            if (!methodName.matches(JUNIT_5_TEST_METHOD_REGEX)) {
                addRuleViolation(this, node, "JUnit 5 test method " + methodName + " in class " + className + " does not match the naming convention.");
            }
        } else {
            if (JavaTypes.isNativeMethod(node)) {
                if (!methodName.matches(NATIVE_METHOD_REGEX)) {
                    addRuleViolation(this, node, "Native method " + methodName + " in class " + className + " does not match the naming convention.");
                }
            } else {
                if (!methodName.matches(INSTANCE_METHOD_REGEX)) {
                    addRuleViolation(this, node, "Instance method " + methodName + " in class " + className + " does not match the naming convention.");
                } else if (JavaTypes.isStaticMethod(node)) {
                    if (!methodName.matches(STATIC_METHOD_REGEX)) {
                        addRuleViolation(this, node, "Static method " + methodName + " in class " + className + " does not match the naming convention.");
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodReference node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import org.junit.internal.builders.JUnit4;
import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public MethodNamingConventionsRule() {
        super(MethodDeclaration.class, MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        String methodName = node.getImage();

        if (node.isStatic()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else if (node.isNative()) {
            if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                addViolation(data, node);
            }
        } else {
            if (node.isTest()) {
                if (node.isJUnit3Test()) {
                    if (!methodName.matches("test[A-Z0-9][a-zA-Z0-9]*")) {
                        addViolation(data, node);
                    }
                } else if (node.isJUnit4Test()) {
                    if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                        addViolation(data, node);
                    }
                } else if (node.isJUnit5Test()) {
                    if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                        addViolation(data, node);
                    }
                } else {
                    if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                        addViolation(data, node);
                    }
                }
            } else {
                if (!methodName.matches("[a-z][a-zA-Z0-9]*")) {
                    addViolation(data, node);
                }
            }
        }
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final String INSTANCE_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String STATIC_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String NATIVE_METHOD_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT3_TEST_PATTERN = "test[A-Z0-9][a-zA-Z0-9]*";
    private static final String JUNIT4_TEST_PATTERN = "[a-z][a-zA-Z0-9]*";
    private static final String JUNIT5_TEST_PATTERN = "[a-z][a-zA-Z0-9]*";

    public MethodNamingConventionsRule() {
        addRuleChainVisitorClass(this);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isStatic()) {
            if (!matchesPattern(STATIC_METHOD_PATTERN, node.getName())) {
                addViolation(this, data, node);
            }
        } else if (node.isNative()) {
            if (!matchesPattern(NATIVE_METHOD_PATTERN, node.getName())) {
                addViolation(this, data, node);
            }
        } else if (isJUnit3Test(node)) {
            if (!matchesPattern(JUNIT3_TEST_PATTERN, node.getName())) {
                addViolation(this, data, node);
            }
        } else if (isJUnit4Test(node)) {
            if (!matchesPattern(JUNIT4_TEST_PATTERN, node.getName())) {
                addViolation(this, data, node);
            }
        } else if (isJUnit5Test(node)) {
            if (!matchesPattern(JUNIT5_TEST_PATTERN, node.getName())) {
                addViolation(this, data, node);
            }
        } else {
            if (!matchesPattern(INSTANCE_METHOD_PATTERN, node.getName())) {
                addViolation(this, data, node);
            }
        }
        return data;
    }

    private boolean isJUnit3Test(MethodDeclaration node) {
        return node.getAnnotation("org.junit.Test") != null || node.getAnnotation("junit.framework.TestCase") != null;
    }

    private boolean isJUnit4Test(MethodDeclaration node) {
        return node.getAnnotation("org.junit.Test") != null;
    }

    private boolean isJUnit5Test(MethodDeclaration node) {
        return node.getAnnotation("org.junit.jupiter.api.Test") != null;
    }

    private boolean matchesPattern(String pattern, String name) {
        try {
            return Pattern.matches(pattern, name);
        } catch (PatternSyntaxException e) {
            return false;
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    public MethodNamingConventionsRule() {
        super(JavaMethodDeclaration.class);
    }

    @Override
    public Object visit(JavaMethodDeclaration node, Object data) {
        String name = node.getImage();
        JavaClassOrInterfaceDeclaration methodOwner = (JavaClassOrInterfaceDeclaration) node.getParent();

        if (isJUnit3TestMethod(methodOwner)) {
            if (!Pattern.matches("test[A-Z0-9][a-zA-Z0-9]*", name)) {
                addRuleViolation(node, "JUnit 3 test method name does not match the convention.");
            }
        } else if (isJUnit4TestMethod(methodOwner)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", name)) {
                addRuleViolation(node, "JUnit 4 test method name does not match the convention.");
            }
        } else if (isJUnit5TestMethod(methodOwner)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", name)) {
                addRuleViolation(node, "JUnit 5 test method name does not match the convention.");
            }
        } else if (isNativeMethod(methodOwner)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", name)) {
                addRuleViolation(node, "Native method name does not match the convention.");
            }
        } else if (isStaticMethod(node)) {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", name)) {
                addRuleViolation(node, "Static method name does not match the convention.");
            }
        } else {
            if (!Pattern.matches("[a-z][a-zA-Z0-9]*", name)) {
                addRuleViolation(node, "Instance method name does not match the convention.");
            }
        }
        return super.visit(node, data);
    }

    private boolean isJUnit3TestMethod(JavaClassOrInterfaceDeclaration methodOwner) {
        return methodOwner.findDescendant(ASTInterfaceDeclaration.class).isPresent() &&
                methodOwner.findDescendant(ASTImportDeclaration.class)
                        .map(JavaImportDeclaration.class::cast)
                        .map(imp -> imp.getImage().startsWith("org.junit"))
                        .orElse(false);
    }

    private boolean isJUnit4TestMethod(JavaClassOrInterfaceDeclaration methodOwner) {
        return methodOwner.findDescendant(ASTClassDeclaration.class).isPresent() &&
                methodOwner.findDescendant(ASTImportDeclaration.class)
                        .map(JavaImportDeclaration.class::cast)
                        .map(imp -> imp.getImage().startsWith("org.junit"))
                        .orElse(false) &&
                !methodOwner.findDescendant(ASTInterfaceDeclaration.class).isPresent();
    }

    private boolean isJUnit5TestMethod(JavaClassOrInterfaceDeclaration methodOwner) {
        return methodOwner.findDescendant(ASTClassDeclaration.class).isPresent() &&
                methodOwner.findDescendant(ASTImportDeclaration.class)
                        .map(JavaImportDeclaration.class::cast)
                        .map(imp -> imp.getImage().startsWith("org.junit.jupiter"))
                        .orElse(false) &&
                !methodOwner.findDescendant(ASTInterfaceDeclaration.class).isPresent();
    }

    private boolean isNativeMethod(JavaClassOrInterfaceDeclaration methodOwner) {
        return methodOwner.findDescendant(JavaModifiers.class)
                .map(mod -> mod.getImage().contains("native"))
                .orElse(false);
    }

    private boolean isStaticMethod(JavaMethodDeclaration node) {
        return node.findAncestor(JavaModifiers.class)
                .map(mod -> mod.getImage().contains("static"))
                .orElse(false);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 129.44337248802185 秒
