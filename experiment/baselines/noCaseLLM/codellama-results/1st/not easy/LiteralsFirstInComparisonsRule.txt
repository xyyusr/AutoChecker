开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(MethodCallExpr.class, MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        if (node.getImage().equals("equals") || node.getImage().equals("equalsIgnoreCase") ||
                node.getImage().equals("compareTo") || node.getImage().equals("compareToIgnoreCase") ||
                node.getImage().equals("contentEquals")) {
            if (node.getLastChild().isPresent() && node.getLastChild().get().getImage().equals("null")) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.getName().equals("equals") || node.getName().equals("equalsIgnoreCase") ||
                node.getName().equals("compareTo") || node.getName().equals("compareToIgnoreCase") ||
                node.getName().equals("contentEquals")) {
            if (node.getBody().isPresent() && node.getBody().get().getFirstChild().isPresent() &&
                    node.getBody().get().getFirstChild().get().getImage().equals("Object")) {
                MethodCallExpr call = null;
                for (MethodCallExpr expr : node.getBody().get().getFirstChild().get().getDescendants(MethodCallExpr.class)) {
                    if (expr.getImage().equals("null")) {
                        call = expr;
                        break;
                    }
                }
                if (call != null) {
                    addViolation(data, call);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.isMethod()) {
            String methodName = node.getImage();

            if ((methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals"))) {
                Integer methodParamSize = node.getMethodParameters().size();

                if (methodParamSize == 1) {
                    ASTNode methodParam = node.getMethodParameters().get(0);
                    if (methodParam instanceof ASTArgumentList) {
                        ASTArgumentList argList = (ASTArgumentList) methodParam;
                        if (argList.getArguments().size() == 1) {
                            ASTNode arg = argList.getArguments().get(0);
                            if (arg instanceof ASTLiteralExpression || arg instanceof ASTNullLiteral || arg instanceof ASTCharLiteralExpression) {
                                // Check if the second argument is a method invocation
                                if (!arg.getImage().equals("true") && !arg.getImage().equals("false") && !arg.getImage().equals("null")) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(EqualsMethodCallNode.class, EqualsIgnoreCaseMethodCallNode.class, CompareToMethodCallNode.class, CompareToIgnoreCaseMethodCallNode.class, ContentEqualsMethodCallNode.class);
    }

    @Override
    public Object visit(EqualsMethodCallNode equalsMethodCallNode, Object data) {
        if (equalsMethodCallNode.getMethodName().equals("equals")) {
            List<MethodCallExpr> args = equalsMethodCallNode.getMethodCall().getArguments();
            if (args != null && args.size() == 1 && args.get(0) instanceof LiteralStringExpr) {
                return super.visit(equalsMethodCallNode, data);
            } else if (args != null && args.size() == 1 && args.get(0) instanceof MethodCallExpr) {
                MethodCallExpr arg = (MethodCallExpr) args.get(0);
                if (arg.getMethodName().equals("toString")) {
                    return super.visit(equalsMethodCallNode, data);
                }
            }
        }
        addViolation(this, equalsMethodCallNode);
        return data;
    }

    @Override
    public Object visit(EqualsIgnoreCaseMethodCallNode equalsIgnoreCaseMethodCallNode, Object data) {
        if (equalsIgnoreCaseMethodCallNode.getMethodName().equals("equalsIgnoreCase")) {
            List<MethodCallExpr> args = equalsIgnoreCaseMethodCallNode.getMethodCall().getArguments();
            if (args != null && args.size() == 1 && args.get(0) instanceof LiteralStringExpr) {
                return super.visit(equalsIgnoreCaseMethodCallNode, data);
            } else if (args != null && args.size() == 1 && args.get(0) instanceof MethodCallExpr) {
                MethodCallExpr arg = (MethodCallExpr) args.get(0);
                if (arg.getMethodName().equals("toString")) {
                    return super.visit(equalsIgnoreCaseMethodCallNode, data);
                }
            }
        }
        addViolation(this, equalsIgnoreCaseMethodCallNode);
        return data;
    }

    @Override
    public Object visit(CompareToMethodCallNode compareToMethodCallNode, Object data) {
        if (compareToMethodCallNode.getMethodName().equals("compareTo")) {
            List<MethodCallExpr> args = compareToMethodCallNode.getMethodCall().getArguments();
            if (args != null && args.size() == 1 && args.get(0) instanceof LiteralStringExpr) {
                return super.visit(compareToMethodCallNode, data);
            } else if (args != null && args.size() == 1 && args.get(0) instanceof MethodCallExpr) {
                MethodCallExpr arg = (MethodCallExpr) args.get(0);
                if (arg.getMethodName().equals("toString")) {
                    return super.visit(compareToMethodCallNode, data);
                }
            }
        }
        addViolation(this, compareToMethodCallNode);
        return data;
    }

    @Override
    public Object visit(CompareToIgnoreCaseMethodCallNode compareToIgnoreCaseMethodCallNode, Object data) {
        if (compareToIgnoreCaseMethodCallNode.getMethodName().equals("compareToIgnoreCase")) {
            List<MethodCallExpr> args = compareToIgnoreCaseMethodCallNode.getMethodCall().getArguments();
            if (args != null && args.size() == 1 && args.get(0) instanceof LiteralStringExpr) {
                return super.visit(compareToIgnoreCaseMethodCallNode, data);
            } else if (args != null && args.size() == 1 && args.get(0) instanceof MethodCallExpr) {
                MethodCallExpr arg = (MethodCallExpr) args.get(0);
                if (arg.getMethodName().equals("toString")) {
                    return super.visit(compareToIgnoreCaseMethodCallNode, data);
                }
            }
        }
        addViolation(this, compareToIgnoreCaseMethodCallNode);
        return data;
    }

    @Override
    public Object visit(ContentEqualsMethodCallNode contentEqualsMethodCallNode, Object data) {
        if (contentEqualsMethodCallNode.getMethodName().equals("contentEquals")) {
            List<MethodCallExpr> args = contentEqualsMethodCallNode.getMethodCall().getArguments();
            if (args != null && args.size() == 1 && args.get(0) instanceof LiteralStringExpr) {
                return super.visit(contentEqualsMethodCallNode, data);
            } else if (args != null && args.size() == 1 && args.get(0) instanceof MethodCallExpr) {
                MethodCallExpr arg = (MethodCallExpr) args.get(0);
                if (arg.getMethodName().equals("toString")) {
                    return super.visit(contentEqualsMethodCallNode, data);
                }
            }
        }
        addViolation(this, contentEqualsMethodCallNode);
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isInherited() || node.isPrivate() || node.isDefault())
            return super.visit(node, data);

        if (node.getName().getImage().equals("equals") && !(node.getParameters().getParameters().get(0).getType().getImage().equals("String"))) {
            return super.visit(node, data);
        }

        if (node.getName().getImage().equals("compareTo")) {
            if (node.getParameters().getParameters().get(0).getType().getImage().equals("String")) {
                if (node.getParameters().getParameters().get(1).getImage() != null)
                    return super.visit(node, data);
                else {
                    addViolation(data, node);
                    return null;
                }
            }
        }

        if (node.getName().getImage().equals("compareToIgnoreCase")) {
            if (node.getParameters().getParameters().get(0).getType().getImage().equals("String")) {
                if (node.getParameters().getParameters().get(1).getImage() != null)
                    return super.visit(node, data);
                else {
                    addViolation(data, node);
                    return null;
                }
            }
        }

        if (node.getName().getImage().equals("contentEquals")) {
            if (node.getParameters().getParameters().get(0).getType().getImage().equals("StringReader") || node.getParameters().getParameters().get(0).getType().getImage().equals("StringBuffer") || node.getParameters().getParameters().get(0).getType().getImage().equals("StringBuilder")) {
                if (node.getParameters().getParameters().get(1).getImage() != null)
                    return super.visit(node, data);
                else {
                    addViolation(data, node);
                    return null;
                }
            }
        }

        if (node.getName().getImage().equals("equalsIgnoreCase")) {
            if (node.getParameters().getParameters().get(0).getType().getImage().equals("String")) {
                if (node.getParameters().getParameters().get(1).getImage() != null)
                    return super.visit(node, data);
                else {
                    addViolation(data, node);
                    return null;
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        addRuleChainElement(new MethodCallExpression(
                "java.lang.String.equals(java.lang.Object)",
                new MethodCallExpression(
                        "java.lang.String.equalsIgnoreCase(java.lang.String)",
                        new MethodCallExpression(
                                "java.lang.String.compareTo(java.lang.String)",
                                new MethodCallExpression(
                                        "java.lang.String.compareToIgnoreCase(java.lang.String)",
                                        new MethodCallExpression(
                                                "java.lang.String.contentEquals(java.lang.CharSequence)"))))));
    }

    @Override
    public Object visit(MethodCallExpression node, Object data) {
        if (node.getImage().startsWith("equals") || node.getImage().startsWith("equalsIgnoreCase")
                || node.getImage().startsWith("compareTo") || node.getImage().startsWith("compareToIgnoreCase")
                || node.getImage().startsWith("contentEquals")) {
            Expression arg = node.getFirstChild();
            if (arg instanceof LiteralExpression) {
                return data;
            } else if (arg instanceof MethodCallExpression) {
                MethodCallExpression method = (MethodCallExpression) arg;
                if (method.getImage().startsWith("get") && method.getImage().endsWith("Value")) {
                    return data;
                }
            }
            addViolation(data, this, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 115.26963067054749 秒
