开始

========================================== Rule ExcessivePublicCountRule ===========================================
一共 7 个测试用例
正例 4 个
反例 3 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    private static final int MAX_PUBLIC_METHODS = 2;
    private static final int MAX_PUBLIC_FIELDS = 2;

    public ExcessivePublicCountRule() {
        addRuleChainVisitorClass(this.getClass());
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        List<Node> classMembers = findClassMembers(node);

        int publicMethods = classMembers.stream()
                .filter(n -> n instanceof ASTMethodDeclaration && ((ASTMethodDeclaration) n).isPublic())
                .collect(Collectors.toList())
                .size();

        int publicFields = classMembers.stream()
                .filter(n -> n instanceof ASTFieldDeclaration && ((ASTFieldDeclaration) n).isPublic())
                .collect(Collectors.toList())
                .size();

        if (publicMethods > MAX_PUBLIC_METHODS || publicFields > MAX_PUBLIC_FIELDS) {
            addViolation(this, data, node);
        }

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        return super.visit(node, data);
    }

    private List<Node> findClassMembers(ASTClassOrInterfaceDeclaration node) {
        List<Node> classMembers = new ArrayList<>();

        for (Object member : node.jjtGetChildren()) {
            if (member instanceof ASTFieldDeclaration || member instanceof ASTMethodDeclaration) {
                classMembers.add(member);
            } else if (member instanceof ASTClassOrInterfaceDeclaration) {
                classMembers.addAll(findClassMembers((ASTClassOrInterfaceDeclaration) member));
            }
        }

        return classMembers;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    private static final int DEFAULT_THRESHOLD = 2;

    public ExcessivePublicCountRule() {
        addRuleChainVisitorClass(this.getClass());
    }

    @Override
    public Object visit(JavaClassOrInterfaceDeclaration n, Object data) {
        int publicMethods = 0;
        int publicFields = 0;

        for (JavaMethodDeclaration method : n.getMethods()) {
            if (method.isPublic()) {
                publicMethods++;
            }
        }

        for (JavaFieldDeclaration field : n.getFields()) {
            if (field.isPublic()) {
                publicFields++;
            }
        }

        if (publicMethods > DEFAULT_THRESHOLD || publicFields > DEFAULT_THRESHOLD) {
            addViolation(data, n);
        }

        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    public ExcessivePublicCountRule() {
        super(CompilationUnit.class, ClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(CompilationUnit unit, Object data) {
        return super.visit(unit, data);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        int publicMethods = countPublicMethods(node);
        int publicFields = countPublicFields(node);

        if (publicMethods > 2 || publicFields > 2) {
            addRuleViolation(node, "Class " + node.getName() + " has excessive public methods and fields");
        }

        return super.visit(node, data);
    }

    private int countPublicMethods(ClassOrInterfaceDeclaration node) {
        int count = 0;
        for (MethodDeclaration method : node.getMethods()) {
            if (method.isPublic()) {
                count++;
            }
        }
        return count;
    }

    private int countPublicFields(ClassOrInterfaceDeclaration node) {
        int count = 0;
        for (VariableDeclaratorId field : node.getFields()) {
            if (field.isPublic()) {
                count++;
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    private static final int DEFAULT_THRESHOLD = 2;

    public ExcessivePublicCountRule() {
        addRuleChainVisitorClass(Clazz.class);
    }

    @Override
    public Object visit(Clazz clazz, Object data) {
        int publicMethodCount = getPublicMethodCount(clazz);
        int publicFieldCount = getPublicFieldCount(clazz);
        int totalCount = publicMethodCount + publicFieldCount;
        if (totalCount > DEFAULT_THRESHOLD) {
            addViolation(this, data, "Class " + clazz.getName() + " has excessive public count: " + totalCount);
        }
        return data;
    }

    private int getPublicMethodCount(Clazz clazz) {
        int count = 0;
        for (MethodDeclaration method : clazz.getMethods()) {
            if (MethodDeclaration.isPublic(method)) {
                count++;
            }
        }
        return count;
    }

    private int getPublicFieldCount(Clazz clazz) {
        int count = 0;
        for (FieldDeclaration field : clazz.getFields()) {
            if (FieldDeclaration.isPublic(field)) {
                count++;
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessivePublicCountRule extends AbstractJavaRulechainRule {

    public ExcessivePublicCountRule() {
        super(new XPathRuleChainBuilder()
            .addRule(new ExcessivePublicMethodsCountRule())
            .addRule(new ExcessivePublicFieldsCountRule())
        );
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    public static class ExcessivePublicMethodsCountRule extends Rule {

        public ExcessivePublicMethodsCountRule() {
            addProperty("name", "Excessive public methods");
            addProperty("description", "Classes with large numbers of public methods require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
            addProperty("priority", 3);
            addProperty("threshold", 2);
        }

        @Override
        public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
            int publicMethodCount = 0;
            for (ASTMethodDeclaration method : node.getMethods()) {
                if (method.isPublic()) {
                    publicMethodCount++;
                }
            }
            if (publicMethodCount > (Integer) getProperties().get("threshold")) {
                addViolation(data, node);
            }
            return super.visit(node, data);
        }
    }

    public static class ExcessivePublicFieldsCountRule extends Rule {

        public ExcessivePublicFieldsCountRule() {
            addProperty("name", "Excessive public fields");
            addProperty("description", "Classes with large numbers of public fields require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.");
            addProperty("priority", 3);
            addProperty("threshold", 2);
        }

        @Override
        public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
            int publicFieldCount = 0;
            for (ASTFieldDeclaration field : node.getFields()) {
                if (field.isPublic()) {
                    publicFieldCount++;
                }
            }
            if (publicFieldCount > (Integer) getProperties().get("threshold")) {
                addViolation(data, node);
            }
            return super.visit(node, data);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 100.54355025291443 秒
