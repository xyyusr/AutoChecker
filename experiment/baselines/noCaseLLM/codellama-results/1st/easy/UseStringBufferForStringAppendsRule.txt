开始

========================================== Rule UseStringBufferForStringAppendsRule ===========================================
一共 28 个测试用例
正例 17 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        addRuleMatch("expression", "methodCalls", "methodCall", "methodName", "'+='", "expression");
    }

    @Override
    public Object visitMethodCall(MethodCall node, Object data) {
        String methodName = node.getImage();
        if (methodName.startsWith("append") || methodName.startsWith("concat")) {
            Object[] methodCalls = (Object[]) data;
            List<MethodCall> appendCalls = new ArrayList<>();
            List<MethodCall> concatCalls = new ArrayList<>();

            for (Object call : methodCalls) {
                if (((MethodCall) call).getImage().startsWith("append") && ((MethodCall) call).getImage().equals(methodName)) {
                    appendCalls.add((MethodCall) call);
                } else if (((MethodCall) call).getImage().startsWith("concat") && ((MethodCall) call).getImage().equals(methodName)) {
                    concatCalls.add((MethodCall) call);
                }
            }

            if (appendCalls.size() > 1 || concatCalls.size() > 1) {
                addViolation(this, node);
            }
        }
        return super.visitMethodCall(node, data);
    }

    @Override
    public Object visitNode(ASTNode node, Object data) {
        if (node instanceof MethodCall) {
            Object[] methodCalls = (Object[]) data;
            if (methodCalls == null) {
                methodCalls = new Object[]{node};
                data = methodCalls;
            } else {
                ((Object[]) data)[0] = node;
            }
        } else if (node.getOtherNodes().iterator().hasNext()) {
            Object[] methodCalls = (Object[]) data;
            if (methodCalls == null) {
                methodCalls = new Object[]{node.getOtherNodes().iterator().next()};
                data = methodCalls;
            } else {
                ((Object[]) data)[0] = node.getOtherNodes().iterator().next();
            }
        }
        return super.visitNode(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;
import org.eclipse.jdt.core.dom.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        addRuleChainVisitor(this);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        String methodName = node.getMethodName();
        if (methodName.equals("+=")) {
            Expression target = node.getExpression();
            if (target instanceof VariableDeclarationFragment) {
                VariableDeclarationFragment var = (VariableDeclarationFragment) target;
                if (var.getType() instanceof PrimitiveType) {
                    PrimitiveType primType = (PrimitiveType) var.getType();
                    if (primType.isStringType()) {
                        return visitStringAppends(node, data);
                    }
                } else if (var.getType() instanceof Type) {
                    Type classType = (Type) var.getType();
                    if (classType.isAssignableTo("java.lang.StringBuffer") || classType.isAssignableTo("java.lang.StringBuilder")) {
                        return visitStringAppends(node, data);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(StringLiteral node, Object data) {
        if (data instanceof List) {
            List<String> context = (List<String>) data;
            context.add("String literal");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(StringConcatenation node, Object data) {
        if (data instanceof List) {
            List<String> context = (List<String>) data;
            context.add("String concatenation");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Identifier node, Object data) {
        if (data instanceof List) {
            List<String> context = (List<String>) data;
            context.add("Identifier: " + node.getImage());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(PrimitiveType node, Object data) {
        if (data instanceof List) {
            List<String> context = (List<String>) data;
            context.add("Primitive type: " + node.getImage());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Type node, Object data) {
        if (data instanceof List) {
            List<String> context = (List<String>) data;
            context.add("Type: " + node.getImage());
        }
        return super.visit(node, data);
    }

    private Object visitStringAppends(Node node, Object data) {
        if (data instanceof List) {
            List<String> context = (List<String>) data;
            context.add("Potential performance issue: using += for string appends");
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        super(MethodCallExpr.class);
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        if (node.getImage().equals("append") || node.getImage().equals("concat")) {
            MethodCallExpr target = (MethodCallExpr) node.getTarget();
            if (target.getImage().equals("toString") || target.getImage().equals("append") || target.getImage().equals("concat")) {
                if (target.getTarget() != null && target.getTarget() instanceof FieldAccessExpr) {
                    FieldAccessExpr fieldAccess = (FieldAccessExpr) target.getTarget();
                    if (fieldAccess.getImage().equals("value") && fieldAccess.getTarget().getImage().equals("toString")) {
                        if (fieldAccess.getTarget() instanceof MethodCallExpr) {
                            MethodCallExpr valueMethodCall = (MethodCallExpr) fieldAccess.getTarget();
                            if (valueMethodCall.getImage().equals("toString")) {
                                if (valueMethodCall.getTarget() != null && valueMethodCall.getTarget() instanceof FieldAccessExpr) {
                                    FieldAccessExpr valueFieldAccess = (FieldAccessExpr) valueMethodCall.getTarget();
                                    if (valueFieldAccess.getImage().equals("value") && valueFieldAccess.getTarget() instanceof ClassOrInterfaceDeclaration) {
                                        ClassOrInterfaceDeclaration clazz = (ClassOrInterfaceDeclaration) valueFieldAccess.getTarget();
                                        if (clazz.getName().getImage().equals("StringBuffer") || clazz.getName().getImage().equals("String")) {
                                            return null;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    @Override
    public Object visit(ASTAssignmentExprNode node, Object data) {
        if (node.getOperator() == AssignmentOperator.PLUS_ASSIGN) {
            Object leftChild = node.getFirstChild();
            Object rightChild = node.getLastChild();
            if (leftChild instanceof ASTFieldAccessExprNode) {
                if (((ASTFieldAccessExprNode) leftChild).getImage().equals("append") || ((ASTFieldAccessExprNode) leftChild).getImage().equals("concat")) {
                    if (rightChild instanceof ASTStringLiteralNode) {
                        return node; // report this as a potential problem
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCallExprNode node, Object data) {
        if (node.getImage().equals("append") || node.getImage().equals("concat")) {
            Object arg = node.getFirstArgument();
            if (arg instanceof ASTStringLiteralNode) {
                return node; // report this as a potential problem
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.TreeSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    private Set<String> seenMethods = new TreeSet<String>();

    public UseStringBufferForStringAppendsRule() {
        addRuleMatch("method(java.util.StringBuffer append(String))");
        addRuleMatch("method(java.util.StringBuilder append(String))");
    }

    @Override
    public Object visit(ASTBinaryExpression node, Object data) {
        if (node.getOperator().isKindOf(ASTPlusOperator.class)) {
            ASTExpression left = node.getLeft();
            ASTExpression right = node.getRight();
            if (left.isKindOf(ASTStringLiteral.class) && right.isKindOf(ASTStringLiteral.class)) {
                Object result = super.visit(node, data);
                if (result == null) {
                    return report("Use of '+' operator for string concatenation may cause performance issues.");
                }
            } else if (seenMethods.contains("append") && left.isKindOf(ASTName.class) && left.getFirstSon().isKindOf(ASTIdentifier.class) && right.isKindOf(ASTStringLiteral.class)) {
                report("Use of '+' operator for string concatenation may cause performance issues in append method.");
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        seenMethods.add(node.getImage());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIdentifier node, Object data) {
        seenMethods.remove(node.getImage());
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 116.36728525161743 秒
