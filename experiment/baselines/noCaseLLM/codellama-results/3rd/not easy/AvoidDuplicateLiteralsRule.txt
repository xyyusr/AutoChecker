开始

========================================== Rule AvoidDuplicateLiteralsRule ===========================================
一共 11 个测试用例
正例 3 个
反例 8 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    public AvoidDuplicateLiteralsRule() {
        super(StringLiteral.class);
    }

    @Override
    public Object visit(StringLiteral node, Object data) {
        String text = node.getImage();
        if (text.length() >= 3) {
            int count = 0;
            for (StringLiteral other : getAllDuplicateLiterals(text)) {
                if (!other.equals(node)) {
                    count++;
                }
            }
            if (count >= 4) {
                addRuleViolation(node, "Duplicate string literal '" + text + "' found more than 3 times");
            }
        }
        return super.visit(node, data);
    }

    private List<StringLiteral> getAllDuplicateLiterals(String text) {
        Pattern pattern = Pattern.compile(Pattern.quote(text));
        Matcher matcher = pattern.matcher(new NodeStream(this).getNodeText());
        List<StringLiteral> result = new ArrayList<>();
        while (matcher.find()) {
            StringLiteral node = (StringLiteral) getTreeNode(matcher.group(0), StringLiteral.class);
            if (node != null) {
                result.add(node);
            }
        }
        return result;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    public AvoidDuplicateLiteralsRule() {
        super(LiteralString.class);
    }

    @Override
    public Object visit(LiteralString node, Object data) {
        Object result = super.visit(node, data);
        if (result == null) {
            String text = node.getImage();
            if (text.length() >= 3 && findDuplicateLiterals(text)) {
                addViolation(data, this, node);
            }
        }
        return result;
    }

    private boolean findDuplicateLiterals(String text) {
        int count = 0;
        Set<String> seen = new HashSet<>();
        for (String s : findLiterals(text)) {
            if (seen.contains(s)) {
                count++;
            } else {
                seen.add(s);
            }
        }
        return count >= 4;
    }

    private Set<String> findLiterals(String text) {
        Pattern pattern = Pattern.compile("[\\s\\S]+");
        Matcher matcher = pattern.matcher(text);
        Set<String> literals = new HashSet<>();
        while (matcher.find()) {
            String s = matcher.group();
            if (s.length() < 3) {
                continue;
            }
            literals.add(s);
        }
        return literals;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    public AvoidDuplicateLiteralsRule() {
        super(ASTLiteralExpression.class, ASTStringLiteralExpression.class);
    }

    @Override
    public Object visit(ASTLiteralExpression node, Object data) {
        return super.visit(node, data);
    }

    private static final int DUPLICATE_THRESHOLD = 4;
    private static final int MIN_STRING_LENGTH = 3;

    @Override
    public Object visit(ASTStringLiteralExpression node, Object data) {
        String literal = node.Image;
        if (literal == null || literal.length() < MIN_STRING_LENGTH) {
            return super.visit(node, data);
        }

        Map<String, Integer> literalCounts = (Map<String, Integer>) data;
        if (literalCounts == null) {
            literalCounts = new HashMap<>();
            data = literalCounts;
        }
        literalCounts.put(literal, literalCounts.getOrDefault(literal, 0) + 1);
        if (literalCounts.get(literal) >= DUPLICATE_THRESHOLD) {
            addViolation(this, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {

    private static final int DUPLICATE_LITERAL_THRESHOLD = 4;
    private static final int IGNORE_STRING_LENGTH = 2;
    private static final Set<String> visitedStrings = new HashSet<>();

    public AvoidDuplicateLiteralsRule() {
        super(CompilationUnit.class, LiteralString.class);
    }

    @Override
    public Object visit(CompilationUnit node, Object data) {
        visitedStrings.clear();
        for (MethodDeclaration method : node.getMethods()) {
            visit(method, data);
        }
        for (ClassOrInterfaceDeclaration clazz : node.getClasses()) {
            visit(clazz, data);
        }
        return data;
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        return visit(node.getBody(), data);
    }

    @Override
    public Object visit(Block node, Object data) {
        for (Statement statement : node.getStatements()) {
            visit(statement, data);
        }
        return data;
    }

    @Override
    public Object visit(Assignment node, Object data) {
        if (node.getLeftHandSide() instanceof VariableDeclaratorId) {
            String literal = node.getRightHandSide().toString();
            if (literal.length() >= IGNORE_STRING_LENGTH && !isVisited(literal)) {
                int count = visit(node.getRightHandSide(), data);
                if (count >= DUPLICATE_LITERAL_THRESHOLD) {
                    addViolation(this, node, "Duplicate string literal '" + literal + "' is used more than " + (DUPLICATE_LITERAL_THRESHOLD - 1) + " times in this method.");
                }
                markVisited(literal);
            }
        }
        return data;
    }

    @Override
    public Object visit(LiteralString node, Object data) {
        String literal = node.toString();
        if (literal.length() >= IGNORE_STRING_LENGTH && !isVisited(literal)) {
            markVisited(literal);
        }
        return data;
    }

    private int visit(Node node, Object data) {
        if (node instanceof LiteralString) {
            String literal = ((LiteralString) node).toString();
            if (literal.length() >= IGNORE_STRING_LENGTH) {
                return getDataMap(data).getOrDefault(literal, 0) + 1;
            }
        }
        return 0;
    }

    private void markVisited(String literal) {
        visitedStrings.add(literal);
    }

    private boolean isVisited(String literal) {
        return visitedStrings.contains(literal);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule {
    public AvoidDuplicateLiteralsRule() {
        super.addRuleSet(new RuleSet("Avoid Duplicate Literals Rule", new Rule[] {
            new Rule("AvoidDuplicateLiteralsRule", this, "java.lang.String") {
                public Object apply(ASTClassOrInterfaceDeclaration node, Object data) {
                    return apply(node.getBody().getNodesByType(ASTLiteral), data);
                }
            }
        }));
    }

    public Object apply(List<ASTLiteral> literals, Object data) {
        int countMap = new HashMap<>();
        for (ASTLiteral literal : literals) {
            if (literal.getImage().length() < 3) {
                continue;
            }
            countMap.put(literal.getImage(), (int)countMap.getOrDefault(literal.getImage(), 0) + 1);
        }

        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {
            if (entry.getValue() > 3) {
                addRuleViolation(this, literal.getBeginLine(), literal.getBeginColumn(), "Avoid duplicate string literal '" + entry.getKey() + "' (found " + entry.getValue() + " times)");
            }
        }

        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 150.14123249053955 秒
