开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ImportDeclaration.class);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        Set<String> importedNames = new HashSet<>();
        int lineNumber = node.getLineNumber();
        String packageName = node.getPackageName();
        for (ImportDeclaration sibling : node.getParent().getChildrenOfType(ImportDeclaration.class)) {
            if (sibling != node) {
                importedNames.addAll(getImportedNames(sibling));
            }
        }

        Set<String> usedNames = new HashSet<>();
        visited(node, data, usedNames);
        if (usedNames.isEmpty()) {
            reportIssue(node, "Unused import: " + node.getPackageName() + "." + node.getImportedName());
        } else if (usedNames.equals(importedNames)) {
            reportIssue(node, "Duplicated import: " + node.getPackageName() + "." + node.getImportedName());
        } else {
            if (isImplicitlyImported(usedNames, importedNames)) {
                reportIssue(node, "Implicitly imported: " + node.getPackageName() + "." + node.getImportedName());
            }
        }
        return super.visit(node, data);
    }

    private void visited(JavaNode node, Object data, Set<String> usedNames) {
        if (node instanceof VariableDeclarationFragment || node instanceof MethodInvocation || node instanceof FieldAccess) {
            usedNames.add(node.getImage());
        }
        for (JavaNode child : node.getChildren()) {
            visited(child, data, usedNames);
        }
    }

    private Set<String> getImportedNames(ImportDeclaration node) {
        return Stream.of(node.getStaticImports())
                .map(staticImport -> staticImport.getImage())
                .collect(Collectors.toSet());
    }

    private boolean isImplicitlyImported(Set<String> usedNames, Set<String> importedNames) {
        return usedNames.stream().allMatch(usedName -> isImplicitlyImported(usedName, importedNames));
    }

    private boolean isImplicitlyImported(String usedName, Set<String> importedNames) {
        return usedName.startsWith("java.lang.") || (usedName.contains(".") && usedName.substring(0, usedName.indexOf('.')).equals(System.getProperty("java.class.path").split("/")[System.getProperty("java.class.path").split("/").length - 1].split("\\.")[0]));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleChainElement(new ImportVisitor());
        addRuleChainElement(new ImportStatementVisitor());
    }

    private class ImportVisitor extends AbstractJavaVisitor {
        @Override
        public Object visit(ImportDeclaration node, Object data) {
            return super.visit(node, data);
        }

        @Override
        public Object visit(ImportStaticDeclaration node, Object data) {
            return super.visit(node, data);
        }
    }

    private class ImportStatementVisitor extends AbstractJavaVisitor {
        private Set<String> usedNames = new HashSet<>();
        private NodeStream nodeStream;
        private Set<String> currentPackageMembers = new HashSet<>();

        @Override
        public Object visit(ImportDeclaration node, Object data) {
            usedNames.addAll(getUsedNames(node));
            currentPackageMembers.addAll(nodeStream.getCurrentPackage().getMembers());
            return super.visit(node, data);
        }

        @Override
        public Object visit(ImportStaticDeclaration node, Object data) {
            usedNames.addAll(getUsedNames(node));
            currentPackageMembers.addAll(nodeStream.getCurrentPackage().getMembers());
            return super.visit(node, data);
        }

        @Override
        public Object visit(ClassOrInterfaceDeclaration node, Object data) {
            currentPackageMembers.add(node.getNameAsString());
            return super.visit(node, data);
        }

        @Override
        public Object visit(MethodInvocation node, Object data) {
            usedNames.add(node.getNameAsString());
            return super.visit(node, data);
        }

        @Override
        public Object visit(ClassLiteral node, Object data) {
            usedNames.add(node.getExpression().getImage());
            return super.visit(node, data);
        }

        @Override
        public Object visit(FieldAccess node, Object data) {
            usedNames.add(node.getExpression().getImage());
            return super.visit(node, data);
        }

        private Set<String> getUsedNames(ImportDeclaration node) {
            Set<String> usedNames = new HashSet<>();
            if (node.isStatic()) {
                usedNames.addAll(getStaticUsedNames(node));
            } else {
                usedNames.addAll(getNonStaticUsedNames(node));
            }
            return usedNames;
        }

        private Set<String> getStaticUsedNames(ImportStaticDeclaration node) {
            Set<String> usedNames = new HashSet<>();
            for (ImportStaticElement element : node.getElements()) {
                usedNames.add(element.getStaticMethodNameAsString());
            }
            return usedNames;
        }

        private Set<String> getNonStaticUsedNames(ImportDeclaration node) {
            Set<String> usedNames = new HashSet<>();
            for (ImportElement element : node.getElements()) {
                usedNames.add(element.getNameAsString());
            }
            return usedNames;
        }

        @Override
        public Object visit(CompilationUnit node, Object data) {
            nodeStream = node.getNodes();
            return super.visit(node, data);
        }

        @Override
        public Object endVisit(CompilationUnit node, Object data) {
            if (nodeStream != null) {
                nodeStream = null;
                for (ImportDeclaration importDeclaration : node.getImports()) {
                    if (hasNoImportPurpose(importDeclaration)) {
                        addViolation(data, importDeclaration);
                    }
                }
            }
            return super.endVisit(node, data);
        }

        private boolean hasNoImportPurpose(ImportDeclaration importDeclaration) {
            if (importDeclaration.getElements().isEmpty()) {
                return true;
            }
            if (isDuplicateImport(importDeclaration)) {
                return true;
            }
            for (String name : usedNames) {
                if (name.startsWith("java.lang.")) {
                    return true;
                }
            }
            for (String name : currentPackageMembers) {
                if (usedNames.contains(name)) {
                    return false;
                }
            }
            return true;
        }

        private boolean isDuplicateImport(ImportDeclaration importDeclaration) {
            for (ImportDeclaration existingImport : importDeclaration.getCompilationUnit().getImports()) {
                if (importDeclaration.equals(existingImport)) {
                    return true;
                }
            }
            return false;
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        addRuleMessageKey("import.unused");
        addRuleMessageKey("import.duplicated");
        addRuleMessageKey("import.already.in.scope");
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ImportStaticDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(TypeDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        SymbolTable symbolTable = getSymbolTable(data);
        Set<String> importedClasses = new HashSet<>();
        Set<String> importedStaticMembers = new HashSet<>();
        for (ImportDeclaration parent : node.findAncestorByType(ImportDeclaration.class)) {
            for (ImportEntry importEntry : parent.getImportEntries()) {
                if (importEntry.getKind() == ImportEntry.ImportKind.STATIC) {
                    importedStaticMembers.add(importEntry.getName());
                } else {
                    importedClasses.add(importEntry.getName());
                }
            }
        }

        // Check if the imported classes or static members are already in scope
        for (ImportEntry importEntry : node.getImportEntries()) {
            if (importEntry.getKind() == ImportEntry.ImportKind.STATIC) {
                if (importedStaticMembers.contains(importEntry.getName())) {
                    addRuleViolation(data, node, "import.already.in.scope");
                }
            } else {
                if (importedClasses.contains(importEntry.getName())) {
                    addRuleViolation(data, node, "import.already.in.scope");
                }
            }
        }

        // Check if the import is duplicated
        Set<String> seenImports = new HashSet<>();
        for (ImportDeclaration parent : node.findAncestorByType(ImportDeclaration.class)) {
            for (ImportEntry importEntry : parent.getImportEntries()) {
                if (importEntry.getKind() == ImportEntry.ImportKind.STATIC) {
                    if (seenImports.contains(importEntry.getName()) && importedStaticMembers.contains(importEntry.getName())) {
                        addRuleViolation(data, node, "import.duplicated");
                    }
                } else {
                    if (seenImports.contains(importEntry.getName()) && importedClasses.contains(importEntry.getName())) {
                        addRuleViolation(data, node, "import.duplicated");
                    }
                }
            }
        }

        // Check if the import is unused
        Set<String> usedClasses = new HashSet<>();
        Set<String> usedStaticMembers = new HashSet<>();
        for (Reference reference : node.findReferences()) {
            if (reference.getKind() == Reference.ReferenceKind.USAGE) {
                if (reference.getSymbol().getKind() == SymbolTable.SymbolKind.CLASS) {
                    usedClasses.add(reference.getSymbol().getName());
                } else if (reference.getSymbol().getKind() == SymbolTable.SymbolKind.METHOD) {
                    usedStaticMembers.add(reference.getSymbol().getName());
                }
            }
        }
        for (ImportEntry importEntry : node.getImportEntries()) {
            if (importEntry.getKind() == ImportEntry.ImportKind.STATIC) {
                if (!usedStaticMembers.contains(importEntry.getName())) {
                    addRuleViolation(data, node, "import.unused");
                }
            } else {
                if (!usedClasses.contains(importEntry.getName())) {
                    addRuleViolation(data, node, "import.unused");
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {

    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class);
    }

    @Override
    public Object visitImportDeclaration(ASTImportDeclaration node, Object data) {
        SymbolTable symbolTable = (SymbolTable) data;
        List<ASTImportStaticMember> staticMembers = node.findDescendants(ASTImportStaticMember.class);
        List<ASTImportSingleMember> singleMembers = node.findDescendants(ASTImportSingleMember.class);
        Set<String> importedSymbols = new HashSet<>();

        for (ASTImportStaticMember staticMember : staticMembers) {
            importedSymbols.add(staticMember.getImage());
        }

        for (ASTImportSingleMember singleMember : singleMembers) {
            importedSymbols.add(singleMember.getImage());
        }

        node.findAncestors(ASTPackageDeclaration.class).forEach(pkg -> importedSymbols.addAll(pkg.getImage().split("\\.")));

        ASTTypeDeclaration typeDecl = node.findAncestor(ASTTypeDeclaration.class);
        if (typeDecl == null) {
            return data;
        }

        Set<String> currentPackageSymbols = new HashSet<>();
        symbolTable.getPackageSymbol(typeDecl.getImage()).getMembers().forEach(member -> {
            if (member instanceof SymbolClass || member instanceof SymbolInterface) {
                member.getMembers().forEach(child -> {
                    if (child instanceof SymbolField || child instanceof SymbolVariable || child instanceof SymbolMethod) {
                        currentPackageSymbols.add(child.getImage());
                    }
                });
            }
        });

        currentPackageSymbols.addAll(Arrays.asList("java.lang", "java.util", "java.text"));

        for (String symbol : importedSymbols) {
            if (symbol.startsWith("java.lang.") || currentPackageSymbols.contains(symbol)) {
                return data;
            }
        }

        for (ASTMethodDeclaration methodDecl : typeDecl.findDescendants(ASTMethodDeclaration.class)) {
            SymbolTable methodSymbolTable = new SymbolTable(typeDecl.getImage());
            methodSymbolTable.put(methodDecl.getImage(), methodDecl.getImage());
            for (ASTMemberValuePair pair : methodDecl.getBody().findDescendants(ASTMemberValuePair.class)) {
                SymbolTable methodBodySymbolTable = new SymbolTable(methodDecl.getImage());
                methodBodySymbolTable.put(pair.getImage(), pair.getImage());
                for (Symbol member : symbolTable.getPackageSymbol(typeDecl.getImage()).getMembers()) {
                    if (member instanceof SymbolClass || member instanceof SymbolInterface) {
                        methodBodySymbolTable.put(member.getImage(), member.getImage());
                        for (Symbol child : member.getMembers()) {
                            if (child instanceof SymbolField || child instanceof SymbolVariable || child instanceof SymbolMethod) {
                                methodBodySymbolTable.put(child.getImage(), child.getImage());
                            }
                        }
                    }
                }
                if (methodBodySymbolTable.contains(symbol)) {
                    return data;
                }
            }
        }

        addViolation(this, data, node);
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    
    public UnnecessaryImportRule() {
        addRuleChainVisitor(this, 
            ImportDeclaration.class, 
            MethodDeclaration.class, 
            ClassOrInterfaceDeclaration.class, 
            PackageDeclaration.class);
    }
    
    @Override
    public Object visit(ImportDeclaration node, Object data) {
        Set<String> importedTypes = new HashSet<>();
        Set<String> localTypes = new HashSet<>();
        
        ClassOrInterfaceDeclaration currentNode = (ClassOrInterfaceDeclaration) data;
        String currentNodePackage = currentNode.getImage();
        
        // Collect local types
        collectLocalTypes(currentNode, localTypes);
        
        // Collect imported types
        collectImportedTypes(node, importedTypes);
        
        // Check for unused imports
        if (!importedTypes.isEmpty() && !localTypes.containsAll(importedTypes)) {
            addViolation(data, this, node.getImage());
        }
        
        // Check for duplicate imports
        if (ImportUtil.hasDuplicateImports(node)) {
            addViolation(data, this, node.getImage());
        }
        
        // Check for imports of implicitly in-scope types
        if (ImportUtil.hasImplicitlyInScopeImports(node, currentNodePackage)) {
            addViolation(data, this, node.getImage());
        }
        
        return super.visit(node, data);
    }
    
    @Override
    public Object visit(MethodDeclaration node, Object data) {
        return super.visit(node, data);
    }
    
    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        return visit((ImportDeclaration) data, data);
    }
    
    @Override
    public Object visit(PackageDeclaration node, Object data) {
        return super.visit(node, data);
    }
    
    private void collectLocalTypes(ClassOrInterfaceDeclaration node, Set<String> localTypes) {
        if (node.getTypeParameters() != null) {
            for (TypeParameter parameter : node.getTypeParameters()) {
                localTypes.add(parameter.getNameAsString());
            }
        }
        
        if (node.getMembers() != null) {
            for (JavaNode member : node.getMembers()) {
                collectLocalTypes((ClassOrInterfaceDeclaration) member, localTypes);
            }
        }
    }
    
    private void collectImportedTypes(ImportDeclaration node, Set<String> importedTypes) {
        for (ImportEntry entry : node.getImportEntries()) {
            importedTypes.add(entry.getNameAsString());
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 172.44179582595825 秒
