开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        addRuleChainVisitor(this, 
            MethodDeclaration.class,
            ConstructorDeclaration.class
        );
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isStatic() || node.isPrivate() || node.isPackagePrivate()) {
            return super.visit(node, data);
        }
        
        List<MethodCallExpression> methodCalls = getMethodCalls(node, 
            "equals", "equalsIgnoreCase", "compareTo", "compareToIgnoreCase", "contentEquals");
        
        for (MethodCallExpression call : methodCalls) {
            Expression target = call.getTarget();
            if (target instanceof CastExpression) {
                target = ((CastExpression) target).getExpression();
            }
            
            if (target instanceof AssignmentExpression) {
                target = ((AssignmentExpression) target).getLeftExpression();
            }
            
            if (!(target instanceof LiteralExpression)) {
                addViolation(data, node, "Position literals first in string comparison method '" + call.getImage() + "'");
            }
        }
        
        return super.visit(node, data);
    }

    private List<MethodCallExpression> getMethodCalls(MethodDeclaration node, String... methodNames) {
        List<MethodCallExpression> calls = new ArrayList<>();
        for (String methodName : methodNames) {
            for ( NodeList<MethodCallExpression> methodCallList : (List<NodeList<MethodCallExpression>>) node.findDescendants(MethodCallExpression.class) ) {
                for (MethodCallExpression methodCall : methodCallList) {
                    if (methodCall.getImage().equals(methodName)) {
                        calls.add(methodCall);
                    }
                }
            }
        }
        return calls;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        addRuleMatch("method_declaration", "METHOD_LITERAL_FIRST_IN_COMPARE");
        addRuleMatch("method_declaration", "METHOD_LITERAL_FIRST_IN_COMPARE_EQUAL_IGNORE");
        addRuleMatch("method_declaration", "METHOD_LITERAL_FIRST_IN_COMPARE_TO_IGNORE");
    }

    @Override
    public Object visitMethodDeclaration(ASTMethodDeclaration node, Object data) {
        SymbolTable symbolTable = node.getSymbolTable();
        if (symbolTable.isMethod("equals(Object)") || symbolTable.isMethod("equalsIgnoreCase") || symbolTable.isMethod("compareTo") || symbolTable.isMethod("compareToIgnoreCase") || symbolTable.isMethod("contentEquals")) {
            ASTParameter[] parameters = node.getParameters();
            for (ASTParameter parameter : parameters) {
                JavaNode methodInvocation = parameter.getLastChild();
                if (methodInvocation instanceof ASTMethodInvocation) {
                    ASTMethodInvocation invocation = (ASTMethodInvocation) methodInvocation;
                    if (invocation.getMethodName().equals("equals") || invocation.getMethodName().equals("equalsIgnoreCase") || invocation.getMethodName().equals("compareTo") || invocation.getMethodName().equals("compareToIgnoreCase") || invocation.getMethodName().equals("contentEquals")) {
                        ASTExpression value = invocation.getFirstChild();
                        if (value instanceof ASTStringLiteralExpression) {
                            ASTStringLiteralExpression literal = (ASTStringLiteralExpression) value;
                            ASTExpression secondArgument = invocation.getLastChild();
                            if (secondArgument instanceof ASTVariableDeclarator) {
                                ASTVariableDeclarator declarator = (ASTVariableDeclarator) secondArgument;
                                if (JavaTypes.isAnyOf(declarator.getType(), JavaTypes.NULL, JavaTypes.OBJECT)) {
                                    addRuleViolation(this, node, "Place literal first in " + invocation.getMethodName() + " method call for null argument");
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(MethodCallExpr.class);
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        if (isComparisonMethod(node)) {
            MethodDecl declaration = node.getImage().getMethodDecl();
            if (declaration instanceof ConstructorDecl || declaration.getParameterCount() != 1) {
                return super.visit(node, data);
            }
            if (node.getArgumentList().getArgumentCount() < 1) {
                return super.visit(node, data);
            }
            Object arg0 = node.getArgumentList().getArgument(0);
            if (!(arg0 instanceof Literal)) {
                return super.visit(node, data);
            }
            Object arg1 = node.getArgumentList().getArgument(1);
            if (arg1 instanceof NullLiteral) {
                return super.visit(node, data);
            }
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    private boolean isComparisonMethod(MethodCallExpr node) {
        String methodName = node.getImage().getImage();
        return methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        addRuleChainElement(new MethodCallExpressionNode());
        addRuleChainElement(new MethodCallExpressionNode());
        addRuleChainElement(new MethodCallExpressionNode());
        addRuleChainElement(new MethodCallExpressionNode());
        addRuleChainElement(new MethodCallExpressionNode());
    }

    @Override
    public Object visit(MethodCallExpressionNode node, Object data) {
        String methodName = node.getImage();
        if (methodName.equals("equals") || methodName.equals("equalsIgnoreCase") || methodName.equals("compareTo") || methodName.equals("compareToIgnoreCase") || methodName.equals("contentEquals")) {
            Object argument = node.getFirstArgument();
            if (argument instanceof LiteralStringNode || argument instanceof NullLiteralNode) {
                return super.visit(node, data);
            } else {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;

import java.util.*;
import java.lang.*;
import java.util.function.Predicate;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public LiteralsFirstInComparisonsRule() {
        super(MethodDeclaration.class, MethodDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        if (node.isNameEquals("equals") || node.isNameEquals("equalsIgnoreCase") ||
                node.isNameEquals("compareTo") || node.isNameEquals("compareToIgnoreCase") ||
                node.isNameEquals("contentEquals")) {
            for (MethodInvocation methodInvocation : node.getMethodsInvoked()) {
                if (methodInvocation.getTarget() instanceof LiteralExpression) {
                    continue;
                }
                if (methodInvocation.getArguments().size() == 1) {
                    Object arg = methodInvocation.getArguments().get(0);
                    if (arg instanceof NullLiteral) {
                        continue;
                    }
                    if (!(arg instanceof ClassOrInterfaceType) && !(arg instanceof StringLiteral)) {
                        addViolation(data, this, node);
                        return data;
                    }
                }
                for (MethodInvocation innerMethodInvocation : methodInvocation.getMethodsInvoked()) {
                    if (innerMethodInvocation.getTarget() instanceof LiteralExpression) {
                        continue;
                    }
                    if (innerMethodInvocation.getArguments().size() == 1) {
                        Object arg = innerMethodInvocation.getArguments().get(0);
                        if (arg instanceof NullLiteral) {
                            continue;
                        }
                        if (!(arg instanceof ClassOrInterfaceType) && !(arg instanceof StringLiteral)) {
                            addViolation(data, this, node);
                            return data;
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 140.91040444374084 秒
