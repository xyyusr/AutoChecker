开始

========================================== Rule AssignmentToNonFinalStaticRule ===========================================
一共 6 个测试用例
正例 2 个
反例 4 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        super(MethodDeclaration.class, ClassDeclaration.class);
    }

    @Override
    public Object visit(MethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassDeclaration node, Object data) {
        MethodDeclaration[] methods = node.findDescendants(MethodDeclaration.class);
        for (MethodDeclaration method : methods) {
            Assign node = method.findDescendants(Assign.class);
            if (node != null) {
                VariableDeclaratorId variable = (VariableDeclaratorId) node.getLeftHandSide();
                FieldAccess fa = variable.resolveFieldAccess();
                if (fa != null && fa.resolve() instanceof FieldAccess) {
                    FieldAccess fieldAccess = (FieldAccess) fa.resolve();
                    VariableDeclarator varDecl = (VariableDeclarator) fieldAccess.resolve();
                    FieldAccess fieldAccessInDecl = (FieldAccess) varDecl.getName();
                    if (fieldAccessInDecl.resolve() instanceof FieldAccess) {
                        FieldAccess fieldAccessInDecl2 = (FieldAccess) fieldAccessInDecl.resolve();
                        if (fieldAccessInDecl2.getName().getImage().equals(variable.getImage()) && fieldAccessInDecl2.resolve() == node.getContainer()) {
                            if (!((FieldAccess) variable.resolve()).isStatic()) {
                                addViolation(data, node);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleChainVisitor(new RuleChainVisitor() {
            @Override
            public Object visit(ASTConstructorDeclarator n, Object data) {
                return visitClassBody(n, data);
            }
        });
    }

    @Override
    public Object visit(ASTClassOrInterfaceBody n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(ASTFieldAccess n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(ASTNewArray n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceType n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(ASTPrimaryPrefix n, Object data) {
        return super.visit(n, data);
    }

    @Override
    public Object visit(ASTField n, Object data) {
        ASTClassOrInterfaceType cst = n.findFirstUpToken(ASTClassOrInterfaceType.class);
        if (cst != null && cst.isStatic()) {
            ASTAssignmentExpression ae = n.findFirstUpToken(ASTAssignmentExpression.class);
            if (ae != null && ae.findFirstUpToken(ASTVariableDeclaratorId.class) != null) {
                addViolation(data, n);
            }
        }
        return super.visit(n, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super(
                AssignmentExpression.class,
                ConstructorDeclaration.class,
                AssignmentExpression.class
        );
    }

    @Override
    public Object visit(AssignmentExpression node, Object data) {
        if (node.getProperty("isStatic").equals(true) && !node.getProperty("isFinal").equals(true)) {
            if (node.jjtGetParent().jjtGetParent() instanceof ConstructorDeclaration) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ConstructorDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignmentExpression node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;
import java.lang.*;
import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public AssignmentToNonFinalStaticRule() {
        super.addRuleElement(new RuleElementBuilders.MethodCallRuleElementBuilder()
                .name("Assignment to non-final static fields in constructor is unsafe.")
                .description("Prevent assignment to non-final static fields in constructor.")
                .addExample("public class MyClass { public static final int x = 1; public MyClass() { x = 2; } }")
                .build());
    }

    @Override
    public Object visit(JavaClass node, Object data) {
        for (JavaField field : node.getFields()) {
            if (field.isStatic() && !field.isFinal()) {
                for (JavaFieldAccess fa : node.getFieldsAccess(field)) {
                    if (fa.getExpression() instanceof JavaConstructorCall) {
                        addViolation(data, fa);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Assignment to non-final static fields in constructor is unsafe. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule {

    public AssignmentToNonFinalStaticRule() {
        addRuleMatch(ASTClassDeclaration.class);
    }

    @Override
    public Object visit(ASTClassDeclaration node, Object data) {
        if (node.isInterface() || node.isAbstract()) {
            return super.visit(node, data);
        }

        boolean hasConstructor = false;
        boolean hasNonFinalStaticField = false;

        for (ASTMethodDeclaration method : getDeclaredMethods(node)) {
            if (method.getName().equals("<init>")) {
                hasConstructor = true;
                break;
            }
        }

        for (ASTFieldDeclaration field : node.getDeclaredFields()) {
            if (!field.isFinal() && ASTUtil.isStatic(field)) {
                hasNonFinalStaticField = true;
                break;
            }
        }

        if (hasConstructor && hasNonFinalStaticField) {
            addViolation(this, data, node);
        }

        return super.visit(node, data);
    }

    private List<ASTMethodDeclaration> getDeclaredMethods(ASTClassDeclaration node) {
        List<ASTMethodDeclaration> methods = new ArrayList<>();
        for (ASTBodyDeclaration body : node.getMembers()) {
            if (body instanceof ASTMethodDeclaration) {
                methods.add((ASTMethodDeclaration) body);
            }
        }
        return methods;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 147.65430426597595 秒
