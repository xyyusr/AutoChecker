开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(Stmt.class, ASTTryStatement.class, ASTTryFinallyBlock.class, ASTSwitchStatement.class, ASTSyncStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTBlock.class, ASTInitializer.class, ASTMethodDeclaration.class, Block.class);
    }

    @Override
    public Object visit(Stmt node, Object data) {
        if (node.jjtGetChild(0) instanceof ASTBlock) {
            if (((ASTBlock) node.jjtGetChild(0)).size() == 0) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getTryBlock() != null && node.getTryBlock().size() == 0) {
            addViolation(data, node);
        }
        if (node.getFinallyBlock() != null && node.getFinallyBlock().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTryFinallyBlock node, Object data) {
        if (node.size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getSwitchBlock().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchBlock node, Object data) {
        if (node.size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSyncStatement node, Object data) {
        if (node.getBlock().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getThenStatement() instanceof ASTBlock) {
            if (((ASTBlock) node.getThenStatement()).size() == 0) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBody().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBody().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBody().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        if (node instanceof ASTBlockStatement) {
            if (((ASTBlockStatement) node).size() == 0) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        if (node.getBody() != null && node.getBody().size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.size() == 0) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    private static final String MSG_EMPTY_CONTROL_STATEMENT = "Empty control statement";

    public EmptyControlStatementRule() {
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaTryStatement.class),
                        new ASTNodeTraversal(JavaTryStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaFinallyClause.class),
                        new ASTNodeTraversal(JavaFinallyClause.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaSwitchStatement.class),
                        new ASTNodeTraversal(JavaSwitchStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaSynchronizedStatement.class),
                        new ASTNodeTraversal(JavaSynchronizedStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaIfStatement.class),
                        new ASTNodeTraversal(JavaIfStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaWhileStatement.class),
                        new ASTNodeTraversal(JavaWhileStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaForStatement.class),
                        new ASTNodeTraversal(JavaForStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaDoStatement.class),
                        new ASTNodeTraversal(JavaDoStatement.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
        addRuleChainElement(new ASTSimpleRuleChainElement(
            new ASTMatchRule(
                new ASTNodeExists(
                    new ASTNodeFilter(
                        new ASTNodePredicate(JavaInitializer.class),
                        new ASTNodeTraversal(JavaInitializer.class, true, false)
                    )
                ),
                MSG_EMPTY_CONTROL_STATEMENT,
                new RuleChainElementFilter(-1, 0)
            )
        ));
    }

    @Override
    public Object visit(JavaTryStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaFinallyClause node, Object data) {
        if (node.getBody() == null || node.getBody().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaSwitchStatement node, Object data) {
        if (node.getStatements() == null || node.getStatements().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaSynchronizedStatement node, Object data) {
        if (node.getStatement() == null || node.getStatement().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaIfStatement node, Object data) {
        if (node.getThenStatement() == null || node.getThenStatement().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaWhileStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaForStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaDoStatement node, Object data) {
        if (node.getBody() == null || node.getBody().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(JavaInitializer node, Object data) {
        if (node.getExpression() == null || node.getExpression().getChildCount() == 0) {
            addViolation(this, data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        super(ForStatement.class, WhileStatement.class, DoStatement.class, IfStatement.class, SwitchStatement.class, TryStatement.class, SynchronizedStatement.class);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        if (ASTUtil.isEmptyBlock(node.getLoopBody())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        if (ASTUtil.isEmptyBlock(node.getBody())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(DoStatement node, Object data) {
        if (ASTUtil.isEmptyBlock(node.getBody())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(IfStatement node, Object data) {
        if (node.isElseIf() && ASTUtil.isEmptyBlock(node.getElseIfBody())) {
            addViolation(data, new Object[]{node});
        }
        if (ASTUtil.isEmptyBlock(node.getThenStatement())) {
            addViolation(data, new Object[]{node});
        }
        if (node.isElse() && ASTUtil.isEmptyBlock(node.getElseStatement())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(SwitchStatement node, Object data) {
        if (ASTUtil.isEmptyBlock(node.getBody())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(TryStatement node, Object data) {
        if (ASTUtil.isEmptyBlock(node.getTryBlock())) {
            addViolation(data, new Object[]{node});
        }
        if (ASTUtil.isEmptyBlock(node.getFinallyBlock())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(SynchronizedStatement node, Object data) {
        if (ASTUtil.isEmptyBlock(node.getBody())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(Block node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        if (node.getInit() != null && ASTUtil.isEmptyBlock(node.getInit())) {
            addViolation(data, new Object[]{node});
        }
        super.visit(node, data);
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMessage(getRuleName(), "Empty control statement body");
        addRulePriority(getRuleName(), RulePriority.NORMAL);
    }

    @Override
    public Object visit(TRYStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildren().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(TRY_FINALLYStatement node, Object data) {
        if (node.getFinallyBlock() != null && node.getFinallyBlock().getBody().getChildren().isEmpty()) {
            addViolation(data, node);
        }
        JavaBlock block = node.getBlock();
        if (block != null && block.getChildren().isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SWITCHStatement node, Object data) {
        List<Statement> statements = node.getStatements();
        if (statements != null && statements.isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(SYNCHRONIZEDStatement node, Object data) {
        JavaBlock block = node.getBlock();
        if (block != null && block.getChildren().isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(IFStatement node, Object data) {
        JavaBlock block = node.getThenStatement();
        if (block != null && block.getChildren().isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(WhileStatement node, Object data) {
        JavaStatement statement = node.getStatement();
        if (statement != null && statement.getChildren().isEmpty()) {
            addViolation(data, statement);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ForStatement node, Object data) {
        JavaStatement statement = node.getStatement();
        if (statement != null && statement.getChildren().isEmpty()) {
            addViolation(data, statement);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(DoStatement node, Object data) {
        JavaStatement statement = node.getStatement();
        if (statement != null && statement.getChildren().isEmpty()) {
            addViolation(data, statement);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(VariableDeclarator node, Object data) {
        if (node.getInitializer() != null && node.getInitializer().getChildren().isEmpty()) {
            addViolation(data, node.getInitializer());
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {

    public EmptyControlStatementRule() {
        addRuleMessage("Empty control statement");
        addRulePriority(PMDRulePriority.NORMAL);
        addRuleCategory(PMDRuleCategory.CODESTYLE);
        addRulePattern(".*");
    }

    @Override
    public Object visitTryStatement(TryStatement node, Object data) {
        if (node.getBody() != null && node.getBody().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitTryStatement(node, data);
    }

    @Override
    public Object visitFinallyBlock(FinallyBlock node, Object data) {
        if (node.getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitFinallyBlock(node, data);
    }

    @Override
    public Object visitSwitchStatement(SwitchStatement node, Object data) {
        if (node.getStatementList() != null && node.getStatementList().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitSwitchStatement(node, data);
    }

    @Override
    public Object visitSynchronizedStatement(SynchronizedStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitSynchronizedStatement(node, data);
    }

    @Override
    public Object visitIfStatement(IfStatement node, Object data) {
        if (node.getThenStatement() != null && node.getThenStatement().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitIfStatement(node, data);
    }

    @Override
    public Object visitWhileStatement(WhileStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitWhileStatement(node, data);
    }

    @Override
    public Object visitForStatement(ForStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitForStatement(node, data);
    }

    @Override
    public Object visitDoWhileStatement(DoWhileStatement node, Object data) {
        if (node.getStatement() != null && node.getStatement().getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitDoWhileStatement(node, data);
    }

    @Override
    public Object visitBlock(Block node, Object data) {
        if (node.getChildCount() == 0) {
            addViolation(data, new Location(node.getBeginLine(), node.getBeginColumn()));
        }
        return super.visitBlock(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 194.99516344070435 秒
