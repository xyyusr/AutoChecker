开始

========================================== Rule UseStringBufferForStringAppendsRule ===========================================
一共 28 个测试用例
正例 17 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        addRuleChainElement(new node1_Of_AST_to_visit());
        addRuleChainElement(new node2_Of_AST_to_visit());
    }

    @Override
    public Object visit(AssignNode node, Object data) {
        if (node.getExpression() instanceof BinaryExprNode) {
            BinaryExprNode binExpr = (BinaryExprNode) node.getExpression();
            if (binExpr.getOperator().getImage().equals("+=")) {
                if (binExpr.getLeftOperand() instanceof MethodCallExprNode) {
                    MethodCallExprNode methodCall = (MethodCallExprNode) binExpr.getLeftOperand();
                    if (methodCall.getImage().equals("append") || methodCall.getImage().equals("concat")) {
                        // Check if the method is called on a string or an object that implements CharSequence
                        if (methodCall.getScope().getImage().matches("String|java\\.lang\\.CharSequence")) {
                            addViolation(this, data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodCallExprNode node, Object data) {
        if (node.getImage().equals("append") || node.getImage().equals("concat")) {
            // Check if the method is called on a string or an object that implements CharSequence
            if (node.getScope().getImage().matches("String|java\\.lang\\.CharSequence")) {
                addViolation(this, data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        addRuleMatch("methodCall", "java.lang.String.concat(String)");
        addRuleMatch("methodCall", "java.lang.String.valueOf(Object)");
        addRuleMatch("methodCall", "java.lang.String.valueOf(char)");
        addRuleMatch("methodCall", "java.lang.String.valueOf(int)");
        addRuleMatch("methodCall", "java.lang.String.valueOf(long)");
        addRuleMatch("methodCall", "java.lang.String.valueOf(float)");
        addRuleMatch("methodCall", "java.lang.String.valueOf(double)");
    }

    @Override
    public Object visit(MethodCallNode node, Object data) {
        if (isStringAppend(node)) {
            Object[] params = node.getParameters();
            if (isStringAppendTo(node, params)) {
                return ruleViolated(node, "Use of '+=', 'concat', 'valueOf' and string concatenation can lead to creation of StringBuffer, use StringBuilder or threadsafe StringBuffer instead.");
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringAppend(MethodCallNode node) {
        String methodName = node.getImage();
        return (methodName.equals("concat") || methodName.equals("valueOf") || methodName.equals("toString"));
    }

    private boolean isStringAppendTo(MethodCallNode node, Object[] params) {
        if (node.getImage().equals("concat")) {
            return params.length == 1;
        } else if (node.getImage().equals("valueOf")) {
            return params.length == 1 && params[0] instanceof String;
        } else if (node.getImage().equals("toString")) {
            return false;
        } else {
            return false;
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;
import java.util.regex.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        super(MethodCallExpr.class, Assignment.class);
    }

    @Override
    public Object visit(MethodCallExpr node, Object data) {
        String methodName = node.getImage();
        if (methodName.equals("concat") || methodName.equals("append")) {
            if (node.getImage().startsWith("String")) {
                String[] args = new String[node.getArguments().size()];
                int i = 0;
                for (Object arg : node.getArguments()) {
                    args[i++] = arg.toString();
                }
                if (args.length > 1) {
                    addViolation(this, data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(Assignment node, Object data) {
        if (node.getLeftOp() instanceof BinaryExpression) {
            BinaryExpression binOp = (BinaryExpression) node.getLeftOp();
            if (binOp.getLeftOperand() instanceof InstanceofExpr) {
                InstanceofExpr instanceofExpr = (InstanceofExpr) binOp.getLeftOperand();
                if (instanceofExpr.getRightOperand() instanceof ClassOrInterfaceType) {
                    ClassOrInterfaceType classType = (ClassOrInterfaceType) instanceofExpr.getRightOperand();
                    if (classType.getImage().equals("StringBuffer") || classType.getImage().equals("StringBuilder")) {
                        return super.visit(node, data);
                    }
                }
            } else if (binOp.getLeftOperand() instanceof FieldAccessExpr) {
                FieldAccessExpr fieldAccess = (FieldAccessExpr) binOp.getLeftOperand();
                if (fieldAccess.getScope() instanceof FieldAccessExpr) {
                    FieldAccessExpr targetFieldAccess = (FieldAccessExpr) fieldAccess.getScope();
                    if (targetFieldAccess.getTarget() instanceof ClassOrInterfaceType) {
                        ClassOrInterfaceType classType = (ClassOrInterfaceType) targetFieldAccess.getTarget();
                        if (classType.getImage().equals("StringBuffer") || classType.getImage().equals("StringBuilder")) {
                            return super.visit(node, data);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        super(
                AssignExpr.class, // node1: += operator
                MethodInvocation.class, // node2: StringBuilder or StringBuffer constructor
                NewClassExpr.class // node3: String class
        );
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        if (node.isAssignmentOp() && node.getAssignmentOperator() == AssignExpr.Operator.ADD_ASSIGN) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(MethodInvocation node, Object data) {
        if (node.getTarget().getImage().equals("append") || node.getTarget().getImage().equals("insert") || node.getTarget().getImage().equals("delete")) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(NewClassExpr node, Object data) {
        if (node.getType().getImage().equals("java.lang.StringBuilder") || node.getType().getImage().equals("java.util.StringBuffer")) {
            return super.visit(node, data);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(AssignExpr node, Object data) {
        List<MethodInvocation> appendNodes = new ArrayList<>();
        List<MethodInvocation> insertNodes = new ArrayList<>();
        List<MethodInvocation> deleteNodes = new ArrayList<>();

        for (JavaNode child : node.getChildren()) {
            if (child instanceof MethodInvocation && ((MethodInvocation) child).getTarget().getImage().equals("append")) {
                appendNodes.add((MethodInvocation) child);
            } else if (child instanceof MethodInvocation && ((MethodInvocation) child).getTarget().getImage().equals("insert")) {
                insertNodes.add((MethodInvocation) child);
            } else if (child instanceof MethodInvocation && ((MethodInvocation) child).getTarget().getImage().equals("delete")) {
                deleteNodes.add((MethodInvocation) child);
            }
        }

        if (appendNodes.size() > 0 || insertNodes.size() > 0 || deleteNodes.size() > 0) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {

    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class, ASTMethodInvocation.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodInvocation node, Object data) {
        ASTExpression target = node.getTarget();
        if (target instanceof ASTBinaryExpression) {
            ASTBinaryExpression binaryExpression = (ASTBinaryExpression) target;
            if (binaryExpression.getOperator() instanceof ASTBinaryOperator) {
                ASTBinaryOperator operator = (ASTBinaryOperator) binaryExpression.getOperator();
                if (operator.getKind() == ASTBinaryOperatorKind.PLUS_ASSIGN) {
                    ASTExpression left = binaryExpression.getLeftOp();
                    ASTExpression right = binaryExpression.getRightOp();
                    if (left instanceof ASTMethodCallExpression && right instanceof ASTStringLiteralExpression) {
                        ASTMethodCallExpression methodCall = (ASTMethodCallExpression) left;
                        String methodName = methodCall.getImage();
                        if (methodName.equals("append") || methodName.equals("concat")) {
                            SymbolTable symbolTable = node.getSymbolTable();
                            Type type = symbolTable.resolveType(methodCall.getTarget());
                            if (type == null || !type.getName().equals("java.lang.String")) {
                                addRuleViolation(node);
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 149.26952600479126 秒
