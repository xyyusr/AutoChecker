开始

========================================== Rule ExcessiveImportsRule ===========================================
一共 2 个测试用例
正例 1 个
反例 1 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    public ExcessiveImportsRule() {
        setSeverity(DesignJavaRule.SEVERITY_MEDIUM);
        addRuleMatch("importedPackageCount()", "excessiveImportsThreshold");
    }

    @Override
    public Object importedPackageCount(ASTImport node, Object data) {
        int count = 1;
        for (ASTImport imp : node.getFirstChild().getChildrenByType(ASTImport.class)) {
            count++;
        }
        if (count > excessiveImportsThreshold) {
            addViolation(this, node, getRuleDescription());
        }
        return data;
    }

    private int excessiveImportsThreshold = 3;

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        if (node.hasDescendantOfType(ASTImport.class)) {
            for (ASTImport imp : node.getDescendantsOfType(ASTImport.class)) {
                importedPackageCount(imp, data);
            }
        }
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    public ExcessiveImportsRule() {
        setLanguage("java");
        addRuleMatch("node.imperative.java.importDeclaration");
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        int excessiveImports = (int) data.get("excessiveImports");
        if (excessiveImports == 0) {
            excessiveImports = 1;
        }
        excessiveImports++;
        data.put("excessiveImports", excessiveImports);
        if (excessiveImports > 3) {
            addViolation(this, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        int excessiveImports = 0;
        if (data instanceof HashMap) {
            excessiveImports = (int) ((HashMap<String, Object>) data).get("excessiveImports");
        }
        data.put("excessiveImports", excessiveImports);
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    private static final int DEFAULT_THRESHOLD = 3;

    public ExcessiveImportsRule() {
        addRuleChainElement(new ExcessiveImportsRule.DummyNode());
    }

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        int importCount = (int) data;
        importCount++;
        data = importCount;
        return null;
    }

    @Override
    public Object visit(TypeDeclaration node, Object data) {
        int importCount = (int) data;
        if (importCount > DEFAULT_THRESHOLD) {
            addViolation(this, data, node.getImage());
        }
        return null;
    }

    private static class DummyNode {
        @Override
        public void apply(AbstractRule ruleInstance, Node node, SourceCodeAnalysis sourceCodeAnalysis, RuleChainVisitor visitor) {
            visitor.setRuleInstance(ruleInstance);
            visitor.apply(node, sourceCodeAnalysis);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    private static final int DEFAULT_THRESHOLD = 3;

    public ExcessiveImportsRule() {
        addRuleChainElement(new NodeStoreRuleChainElement());
        addRuleChainElement(new ImportDeclarationExtractorRuleChainElement());
        addRuleChainElement(this);
    }

    @Override
    public void visit(ASTCompilationUnit compilationUnit, Object data) {
        int importCount = ((ImportDeclarationExtractorRuleChainElement)data).getImportCount();
        if (importCount > DEFAULT_THRESHOLD) {
            addViolation(this, compilationUnit, "Too many imports (" + importCount + " > " + DEFAULT_THRESHOLD + ")");
        }
    }
}

class ImportDeclarationExtractorRuleChainElement extends AbstractRuleChainElement {
    private int importCount = 0;

    @Override
    public boolean hasEndNode() {
        return true;
    }

    public int getImportCount() {
        return importCount;
    }

    @Override
    public Object beginNode(ASTCompilationUnit compilationUnit, Object data) {
        return data;
    }

    @Override
    public Object endNode(ASTCompilationUnit compilationUnit, Object data) {
        return null;
    }

    @Override
    public Object visit(ASTImportDeclaration importDeclaration, Object data) {
        importCount++;
        return null;
    }
}

class NodeStoreRuleChainElement extends AbstractRuleChainElement {
    @Override
    public boolean hasEndNode() {
        return true;
    }

    @Override
    public Object beginNode(ASTCompilationUnit compilationUnit, Object data) {
        return new NodeStore(compilationUnit);
    }

    @Override
    public Object endNode(ASTCompilationUnit compilationUnit, Object data) {
        return null;
    }
}

class NodeStore {
    private ASTCompilationUnit compilationUnit;

    public NodeStore(ASTCompilationUnit compilationUnit) {
        this.compilationUnit = compilationUnit;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    private static final int DEFAULT_THRESHOLD = 3;

    @Override
    public Object visit(ImportDeclaration node, Object data) {
        int importCount = (int) data;
        importCount++;
        data = importCount;
        return super.visit(node, data);
    }

    @Override
    public Object visit(ClassOrInterfaceDeclaration node, Object data) {
        if (node.getImports().size() > DEFAULT_THRESHOLD) {
            addViolation(this, data, node.getImage());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(TypeDeclaration node, Object data) {
        if (node.getImports().size() > DEFAULT_THRESHOLD) {
            addViolation(this, data, node.getImage());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(EnumDeclaration node, Object data) {
        if (node.getImports().size() > DEFAULT_THRESHOLD) {
            addViolation(this, data, node.getImage());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(CompilationUnitJava node, Object data) {
        int importCount = 0;
        data = importCount;
        return super.visit(node, data);
    }

    @Override
    public Object endCompilationUnitJava(CompilationUnitJava node, Object data) {
        int importCount = (int) data;
        if (importCount > DEFAULT_THRESHOLD) {
            addRuleMessage(this, node.getImage(), "High number of imports. Import count: " + importCount);
        }
        return super.endCompilationUnitJava(node, data);
    }

    public ExcessiveImportsRule() {
        addRuleChainElement(new ImportDeclaration());
        addRuleChainElement(new ClassOrInterfaceDeclaration());
        addRuleChainElement(new TypeDeclaration());
        addRuleChainElement(new EnumDeclaration());
        addRuleChainElement(new CompilationUnitJava());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 133.4416708946228 秒
