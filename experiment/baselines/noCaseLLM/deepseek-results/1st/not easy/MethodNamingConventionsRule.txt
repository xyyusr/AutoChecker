开始

========================================== Rule MethodNamingConventionsRule ===========================================
一共 12 个测试用例
正例 5 个
反例 7 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is "[a-z][a-zA-Z0-9]*". Regex which applies to static method names is "[a-z][a-zA-Z0-9]*". Regex which applies to native method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 3 test method names is "test[A-Z0-9][a-zA-Z0-9]*". Regex which applies to JUnit 4 test method names is "[a-z][a-zA-Z0-9]*". Regex which applies to JUnit 5 test method names is "[a-z][a-zA-Z0-9]*".;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.regex.Pattern;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class MethodNamingConventionsRule extends AbstractJavaRulechainRule {

    private static final Pattern INSTANCE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern STATIC_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern NATIVE_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT3_TEST_METHOD_PATTERN = Pattern.compile("test[A-Z0-9][a-zA-Z0-9]*");
    private static final Pattern JUNIT4_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");
    private static final Pattern JUNIT5_TEST_METHOD_PATTERN = Pattern.compile("[a-z][a-zA-Z0-9]*");

    public MethodNamingConventionsRule() {
        super(ASTMethodDeclaration.class);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        String methodName = node.getName();
        boolean isStatic = node.isStatic();
        boolean isNative = node.isNative();
        boolean isJUnit3Test = isJUnit3TestMethod(node);
        boolean isJUnit4Test = isJUnit4TestMethod(node);
        boolean isJUnit5Test = isJUnit5TestMethod(node);

        if (isJUnit3Test && !JUNIT3_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node, "JUnit 3 test method name does not match the required pattern: " + JUNIT3_TEST_METHOD_PATTERN);
        } else if (isJUnit4Test && !JUNIT4_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node, "JUnit 4 test method name does not match the required pattern: " + JUNIT4_TEST_METHOD_PATTERN);
        } else if (isJUnit5Test && !JUNIT5_TEST_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node, "JUnit 5 test method name does not match the required pattern: " + JUNIT5_TEST_METHOD_PATTERN);
        } else if (isNative && !NATIVE_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node, "Native method name does not match the required pattern: " + NATIVE_METHOD_PATTERN);
        } else if (isStatic && !STATIC_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node, "Static method name does not match the required pattern: " + STATIC_METHOD_PATTERN);
        } else if (!isStatic && !isNative && !isJUnit3Test && !isJUnit4Test && !isJUnit5Test && !INSTANCE_METHOD_PATTERN.matcher(methodName).matches()) {
            addViolation(data, node, "Instance method name does not match the required pattern: " + INSTANCE_METHOD_PATTERN);
        }

        return super.visit(node, data);
    }

    private boolean isJUnit3TestMethod(ASTMethodDeclaration node) {
        return node.getEnclosingType().isAnnotationPresent("junit.framework.TestCase") && node.getName().startsWith("test");
    }

    private boolean isJUnit4TestMethod(ASTMethodDeclaration node) {
        return node.getEnclosingType().isAnnotationPresent("org.junit.Test");
    }

    private boolean isJUnit5TestMethod(ASTMethodDeclaration node) {
        return node.getEnclosingType().isAnnotationPresent("org.junit.jupiter.api.Test");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 31.514373779296875 秒
