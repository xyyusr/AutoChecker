开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }
    @Override
    public Object visit(ASTMethodCall node, Object data) {
        JMethodSymbol methodSymbol = node.getMethodSymbol();
        if (methodSymbol != null && methodSymbol.getName().equals("length") && methodSymbol.getOwnerType().isSubtypeOf(String.class)) {
            ASTPrimaryExpression primaryExpression = node.getFirstParentOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTMethodCall trimCall = primaryExpression.getFirstDescendantOfType(ASTMethodCall.class);
                if (trimCall != null && trimCall.getMethodSymbol().getName().equals("trim") && trimCall.getMethodSymbol().getOwnerType().isSubtypeOf(String.class)) {
                    addViolation(data, node);
                }
            }
        } else if (methodSymbol != null && methodSymbol.getName().equals("isEmpty") && methodSymbol.getOwnerType().isSubtypeOf(String.class)) {
            ASTPrimaryExpression primaryExpression = node.getFirstParentOfType(ASTPrimaryExpression.class);
            if (primaryExpression != null) {
                ASTMethodCall trimCall = primaryExpression.getFirstDescendantOfType(ASTMethodCall.class);
                if (trimCall != null && trimCall.getMethodSymbol().getName().equals("trim") && trimCall.getMethodSymbol().getOwnerType().isSubtypeOf(String.class)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.Optional;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class, ASTMethodCall.class);
    }
    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getOperator() != ASTEqualityExpression.EQUAL) {
            return super.visit(node, data);
        }
        Optional<ASTMethodCall> leftMethodCall = findTrimMethodCall(node.getLeftOperand());
        Optional<ASTLiteral> rightLiteral = findLiteral(node.getRightOperand());
        if (leftMethodCall.isPresent() && rightLiteral.isPresent() && rightLiteral.get().getValue().equals("0")) {
            addViolation(data, node);
        }
        Optional<ASTMethodCall> rightMethodCall = findTrimMethodCall(node.getRightOperand());
        Optional<ASTLiteral> leftLiteral = findLiteral(node.getLeftOperand());
        if (rightMethodCall.isPresent() && leftLiteral.isPresent() && leftLiteral.get().getValue().equals("0")) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimMethodCall(node)) {
            JavaNode parent = node.getParent();
            if (parent instanceof ASTPrimaryExpression && ((ASTPrimaryExpression) parent).getNextSibling() instanceof ASTMethodCall) {
                ASTMethodCall nextMethodCall = (ASTMethodCall) ((ASTPrimaryExpression) parent).getNextSibling();
                if (isMethodCall(nextMethodCall, "isEmpty", 0)) {
                    addViolation(data, nextMethodCall);
                }
            }
        }
        return super.visit(node, data);
    }
    private Optional<ASTMethodCall> findTrimMethodCall(JavaNode node) {
        if (node instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression) node;
            if (primaryExpression.getChild(0) instanceof ASTMethodCall) {
                ASTMethodCall methodCall = (ASTMethodCall) primaryExpression.getChild(0);
                if (isTrimMethodCall(methodCall)) {
                    return Optional.of(methodCall);
                }
            }
        }
        return Optional.empty();
    }
    private boolean isTrimMethodCall(ASTMethodCall node) {
        return isMethodCall(node, "trim", 0);
    }
    private boolean isMethodCall(ASTMethodCall node, String methodName, int argumentCount) {
        if (node.getName().equals(methodName) && node.getArgumentCount() == argumentCount) {
            JavaNode parent = node.getParent();
            if (parent instanceof ASTPrimaryExpression && ((ASTPrimaryExpression) parent).getNextSibling() instanceof ASTMethodCall) {
                return true;
            }
        }
        return false;
    }
    private Optional<ASTLiteral> findLiteral(JavaNode node) {
        if (node instanceof ASTLiteral) {
            return Optional.of((ASTLiteral) node);
        }
        return Optional.empty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.isComparisonOp() && node.getLeftOperand() instanceof ASTPrimaryExpression && node.getRightOperand() instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression leftOperand = (ASTPrimaryExpression) node.getLeftOperand();
            ASTPrimaryExpression rightOperand = (ASTPrimaryExpression) node.getRightOperand();

            if (isTrimLengthCheck(leftOperand, rightOperand) || isTrimLengthCheck(rightOperand, leftOperand)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthCheck(ASTPrimaryExpression operand1, ASTPrimaryExpression operand2) {
        NodeStream<ASTMethodCall> methodCalls = operand1.findDescendantsOfType(ASTMethodCall.class);
        if (methodCalls.size() != 2) {
            return false;
        }
        List<ASTMethodCall> methodCallList = methodCalls.toList();
        ASTMethodCall trimCall = methodCallList.get(0);
        ASTMethodCall lengthCall = methodCallList.get(1);

        if (!trimCall.getMethodName().equals("trim")) {
            return false;
        }
        JMethodSymbol trimMethodSymbol = trimCall.getInvokedMethodSymbol();
        if (trimMethodSymbol == null || !trimMethodSymbol.getDeclaringType().equals(TypeSystem.STRING)) {
            return false;
        }

        if (!lengthCall.getMethodName().equals("length")) {
            return false;
        }
        JMethodSymbol lengthMethodSymbol = lengthCall.getInvokedMethodSymbol();
        if (lengthMethodSymbol == null || !lengthMethodSymbol.getDeclaringType().equals(TypeSystem.STRING)) {
            return false;
        }

        JType leftOperandType = operand1.getType();
        if (leftOperandType == null || !leftOperandType.equals(TypeSystem.INT)) {
            return false;
        }

        return operand2.isConstantExpr() && operand2.getConstantValue() instanceof Integer && ((Integer) operand2.getConstantValue()) == 0;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.isComparison()) {
            List<ASTExpression> operands = node.getOperands();
            if (operands.size() == 2) {
                ASTExpression leftOperand = operands.get(0);
                ASTExpression rightOperand = operands.get(1);

                if (isTrimLengthZero(leftOperand, rightOperand) || isTrimLengthZero(rightOperand, leftOperand) ||
                    isTrimEmpty(leftOperand, rightOperand) || isTrimEmpty(rightOperand, leftOperand)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthZero(ASTExpression expr1, ASTExpression expr2) {
        return expr1 instanceof ASTMethodCall && expr2 instanceof ASTLiteral &&
               ((ASTLiteral) expr2).getLiteralValue().equals(0) &&
               isTrimMethodCall((ASTMethodCall) expr1);
    }

    private boolean isTrimEmpty(ASTExpression expr1, ASTExpression expr2) {
        return expr1 instanceof ASTMethodCall && expr2 instanceof ASTLiteral &&
               ((ASTLiteral) expr2).getLiteralValue().equals(true) &&
               isTrimMethodCall((ASTMethodCall) expr1) &&
               "isEmpty".equals(((ASTMethodCall) expr1).getName());
    }

    private boolean isTrimMethodCall(ASTMethodCall methodCall) {
        return "trim".equals(methodCall.getName()) &&
               methodCall.getQualifier().getType() instanceof JClassType &&
               TypeSystem.getInstance().findClass("java.lang.String").equals(((JClassType) methodCall.getQualifier().getType()).getErasedType());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.Optional;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getOperator() == ASTEqualityExpression.Operator.EQUAL || node.getOperator() == ASTEqualityExpression.Operator.NOT_EQUAL) {
            ASTExpression leftOperand = node.getLeftOperand();
            ASTExpression rightOperand = node.getRightOperand();

            if (rightOperand instanceof ASTLiteral && ((ASTLiteral) rightOperand).getValue().equals(0)) {
                Optional<JMethodSymbol> methodSymbol = getTrimLengthMethod(leftOperand);
                if (methodSymbol.isPresent()) {
                    addViolation(data, node);
                }
            } else if (rightOperand instanceof ASTMethodCall && "isEmpty".equals(((ASTMethodCall) rightOperand).getName())) {
                Optional<JMethodSymbol> methodSymbol = getTrimMethod(leftOperand);
                if (methodSymbol.isPresent()) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private Optional<JMethodSymbol> getTrimLengthMethod(ASTExpression expression) {
        if (expression instanceof ASTMethodCall) {
            ASTMethodCall methodCall = (ASTMethodCall) expression;
            if ("length".equals(methodCall.getName())) {
                ASTExpression target = methodCall.getTarget();
                if (target instanceof ASTMethodCall) {
                    ASTMethodCall trimCall = (ASTMethodCall) target;
                    if ("trim".equals(trimCall.getName())) {
                        JType targetType = trimCall.getType();
                        if (targetType instanceof JPrimitiveType && ((JPrimitiveType) targetType).isIntegral()) {
                            return Optional.of(trimCall.getMethodSymbol());
                        }
                    }
                }
            }
        }
        return Optional.empty();
    }

    private Optional<JMethodSymbol> getTrimMethod(ASTExpression expression) {
        if (expression instanceof ASTMethodCall) {
            ASTMethodCall methodCall = (ASTMethodCall) expression;
            if ("trim".equals(methodCall.getName())) {
                JType targetType = methodCall.getType();
                if (TypeSystem.OBJECT.equals(targetType) || TypeSystem.STRING.equals(targetType)) {
                    return Optional.of(methodCall.getMethodSymbol());
                }
            }
        }
        return Optional.empty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 159.97820472717285 秒
