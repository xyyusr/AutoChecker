开始

========================================== Rule UseStringBufferForStringAppendsRule ===========================================
一共 28 个测试用例
正例 17 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    private final Set<JVariableSymbol> stringVariables = new HashSet<>();

    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class, ASTAdditiveExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getOperator() == ASTAssignmentExpression.Operator.PLUS_ASSIGN) {
            JavaNode leftOperand = node.getLeftOperand();
            if (leftOperand instanceof ASTPrimaryExpression) {
                JavaNode child = leftOperand.getFirstChildOfType(ASTVariableAccess.class);
                if (child != null) {
                    JVariableSymbol symbol = child.getSymbol();
                    JavaNode parent = leftOperand.getParent();
                    if (parent instanceof ASTExpression && ((ASTExpression) parent).getType() == JType.STRING_TYPE) {
                        stringVariables.add(symbol);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        if (node.getOperator() == ASTAdditiveExpression.Operator.PLUS && node.getChildCount() > 1) {
            boolean isStringAppend = false;
            for (int i = 0; i < node.getChildCount(); i++) {
                JavaNode child = node.getChild(i);
                if (child instanceof ASTPrimaryExpression) {
                    JavaNode variableAccess = child.getFirstChildOfType(ASTVariableAccess.class);
                    if (variableAccess != null && stringVariables.contains(variableAccess.getSymbol())) {
                        isStringAppend = true;
                    } else if (child.getFirstChildOfType(ASTStringLiteral.class) != null) {
                        isStringAppend = true;
                    }
                }
            }
            if (isStringAppend) {
                JVariableSymbol symbol = node.getFirstChildOfType(ASTVariableAccess.class).getSymbol();
                if (Collections.frequency(stringVariables, symbol) > 1) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound()) {
            ASTExpression leftOperand = node.getLeftOperand();
            ASTExpression rightOperand = node.getRightOperand();

            if (leftOperand instanceof ASTPrimaryExpression) {
                ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression) leftOperand;
                List<ASTPrimarySuffix> suffixes = primaryExpression.getSuffixes();

                if (!suffixes.isEmpty() && suffixes.get(0) instanceof ASTPrimarySuffix && suffixes.get(0).isIdentifier() && "toString".equals(suffixes.get(0).getImage())) {
                    return super.visit(node, data);
                }

                JType leftType = primaryExpression.getType();
                if (leftType != null && leftType.equals(TypeSystem.getInstance().STRING_TYPE)) {
                    if (rightOperand instanceof ASTAdditiveExpression) {
                        int count = countStringLiterals((ASTAdditiveExpression) rightOperand);
                        if (count > 1) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private int countStringLiterals(ASTAdditiveExpression node) {
        int count = 0;
        for (ASTExpression child : node.children()) {
            if (child instanceof ASTStringLiteral) {
                count++;
            } else if (child instanceof ASTAdditiveExpression) {
                count += countStringLiterals((ASTAdditiveExpression) child);
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTCompilationUnit.class, ASTClassOrInterfaceDeclaration.class, ASTMethodDeclaration.class, ASTBlock.class, ASTAssignmentExpression.class, ASTAdditiveExpression.class, ASTPrimaryExpression.class, ASTPrimaryPrefix.class, ASTStringLiteral.class, ASTSemicolon.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAssignmentExpression.Operator.PLUS_ASSIGN) {
            ASTExpression leftOperand = node.getLeftOperand();
            if (leftOperand instanceof ASTPrimaryExpression) {
                ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression) leftOperand;
                ASTPrimaryPrefix primaryPrefix = primaryExpression.getFirstPrimaryPrefix();
                if (primaryPrefix instanceof ASTName && ((ASTName) primaryPrefix).getType() == JavaType.STRING) {
                    int count = 0;
                    NodeStream<ASTAssignmentExpression> assignments = node.getAncestorsOfType(ASTBlock.class).findFirst().getDescendantsOfType(ASTAssignmentExpression.class);
                    for (ASTAssignmentExpression assignment : assignments) {
                        if (assignment.isCompound() && assignment.getOperator() == ASTAssignmentExpression.Operator.PLUS_ASSIGN && assignment.getLeftOperand() instanceof ASTPrimaryExpression) {
                            ASTPrimaryExpression pe = (ASTPrimaryExpression) assignment.getLeftOperand();
                            ASTPrimaryPrefix pp = pe.getFirstPrimaryPrefix();
                            if (pp instanceof ASTName && ((ASTName) pp).getType() == JavaType.STRING) {
                                count++;
                            }
                        }
                    }
                    if (count > 1) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryPrefix node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStringLiteral node, Object data) {
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSemicolon node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAssignmentExpression.Operator.PLUS) {
            ASTExpression leftOperand = node.getLeftOperand();
            if (leftOperand instanceof ASTPrimaryExpression) {
                ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression) leftOperand;
                List<ASTPrimarySuffix> suffixes = primaryExpression.findDescendantsOfType(ASTPrimarySuffix.class);
                if (!suffixes.isEmpty() && suffixes.get(suffixes.size() - 1).isIdentifier() && suffixes.get(suffixes.size() - 1).getIdentifier().equals("append")) {
                    return super.visit(node, data);
                }
                ASTPrimaryPrefix prefix = primaryExpression.getFirstChildOfType(ASTPrimaryPrefix.class);
                if (prefix != null && prefix.getType() instanceof JType) {
                    JType type = prefix.getType();
                    if (type.isArray() || TypeSystem.STRING.equals(type)) {
                        NodeStream<ASTAdditiveExpression> additiveExpressions = node.getRightOperand().findDescendantsOfType(ASTAdditiveExpression.class);
                        if (additiveExpressions.count() > 1) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;
import java.util.stream.Collectors;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAdditiveExpression.class);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAssignmentOperator.Type.PLUS) {
            List<ASTLiteral> literals = node.findDescendantsOfType(ASTLiteral.class).stream()
                .filter(ASTLiteral::isStringLiteral)
                .collect(Collectors.toList());
            if (literals.size() > 1) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 156.86022329330444 秒
