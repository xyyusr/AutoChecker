开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<String> usedTypes;
    private Set<String> currentPackageClasses;
    private Set<String> implicitImports;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedTypes = new HashSet<>();
        currentPackageClasses = new HashSet<>();
        implicitImports = new HashSet<>(Arrays.asList("java.lang.Boolean", "java.lang.Byte", "java.lang.Character", "java.lang.Class", "java.lang.Cloneable", "java.lang.Double", "java.lang.Float", "java.lang.Integer", "java.lang.Long", "java.lang.Number", "java.lang.Object", "java.lang.Short", "java.lang.String", "java.lang.StringBuffer", "java.lang.Throwable"));
        
        ASTPackageDeclaration packageDeclaration = node.getFirstDescendantOfType(ASTPackageDeclaration.class);
        if (packageDeclaration != null) {
            implicitImports.add(packageDeclaration.getPackageName() + ".*");
            currentPackageClasses.addAll(getClassNamesInPackage(packageDeclaration.getPackageName()));
        }
        
        SymbolTable symbolTable = node.getSymbolTable();
        for (List<NameOccurrence> nameOccurrences : symbolTable.values()) {
            for (NameOccurrence nameOccurrence : nameOccurrences) {
                JType type = nameOccurrence.getType();
                if (type != null && !type.isUnknown()) {
                    usedTypes.add(type.getQualifiedName());
                }
            }
        }
        
        return super.visit(node, data);
    }

    private Set<String> getClassNamesInPackage(String packageName) {
        Set<String> classNames = new HashSet<>();
        UsableTypeSystem typeSystem = TypeSystem.current();
        for (JType type : typeSystem.getAllClasses()) {
            if (type.getPackageName().equals(packageName)) {
                classNames.add(type.getQualifiedName());
            }
        }
        return classNames;
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName name = node.getFirstDescendantOfType(ASTName.class);
        if (name != null) {
            String importName = name.getImage();
            if (importName.endsWith(".*")) {
                String packageName = importName.substring(0, importName.length() - 2);
                if (packageAlreadyInScope(packageName)) {
                    addViolation(data, node);
                }
            } else {
                if (!usedTypes.contains(importName) || implicitImports.contains(importName) || currentPackageClasses.contains(importName)) {
                    addViolation(data, node);
                }
            }
        }
        return data;
    }

    private boolean packageAlreadyInScope(String packageName) {
        for (String currentPackageClass : currentPackageClasses) {
            if (currentPackageClass.startsWith(packageName + ".")) {
                return true;
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private Set<String> usedImports = new HashSet<>();
    private Set<String> implicitImports = new HashSet<>(Arrays.asList("java.lang.", "java.util."));

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedImports.clear();
        NodeStream<ASTImportDeclaration> imports = node.findDescendantsOfType(ASTImportDeclaration.class);
        for (ASTImportDeclaration imp : imports) {
            String importName = imp.getImportedName();
            if (imp.isImportOnDemand()) {
                implicitImports.add(importName + ".");
            } else {
                usedImports.add(importName);
            }
        }

        node.findDescendantsOfType(ASTPrimaryExpression.class).forEach(this::checkUsage);
        node.findDescendantsOfType(ASTType.class).forEach(this::checkUsage);

        for (ASTImportDeclaration imp : imports) {
            String importName = imp.getImportedName();
            String packageName = imp.getPackageName();
            boolean isOnDemand = imp.isImportOnDemand();
            if (isOnDemand && !hasUsageInPackage(packageName)) {
                addViolation(data, imp);
            } else if (!isOnDemand && !usedImports.contains(importName)) {
                addViolation(data, imp);
            }
        }

        return super.visit(node, data);
    }

    private void checkUsage(ASTPrimaryExpression node) {
        node.findDescendantsOfType(ASTPrimaryPrefix.class).forEach(prefix -> {
            if (prefix.findDescendantsOfType(ASTPrimarySuffix.class).isEmpty()) {
                String name = prefix.getFirstChildOfType(ASTName.class).getImage();
                usedImports.add(name);
            }
        });
    }

    private void checkUsage(ASTType node) {
        JType type = node.getType();
        if (type != null) {
            JClassSymbol sym = type.getSymbol();
            if (sym != null) {
                usedImports.add(sym.getQualifiedName());
            }
        }
    }

    private boolean hasUsageInPackage(String packageName) {
        return usedImports.stream().anyMatch(name -> name.startsWith(packageName + "."));
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class, ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        List<ASTImportDeclaration> imports = node.findDescendantsOfType(ASTImportDeclaration.class);
        Set<JClassSymbol> usedTypes = new HashSet<>();
        node.getTypeDeclarations().forEach(type -> {
            type.findDescendantsOfType(ASTPrimaryExpression.class).forEach(expr -> {
                JType typeReference = expr.getTypeReference();
                if (typeReference instanceof JClassSymbol) {
                    usedTypes.add((JClassSymbol) typeReference);
                }
            });
        });

        imports.forEach(importDecl -> {
            JClassSymbol importSymbol = importDecl.getImportedSymbol();
            JPackageSymbol packageSymbol = importDecl.getImportedPackageSymbol();
            if (importSymbol != null) {
                if (usedTypes.stream().noneMatch(symbol -> symbol.getQualifiedName().equals(importSymbol.getQualifiedName()))) {
                    addViolation(data, importDecl);
                }
            } else if (packageSymbol != null) {
                if (usedTypes.stream().noneMatch(symbol -> symbol.getPackageName().equals(packageSymbol.getQualifiedName()))) {
                    addViolation(data, importDecl);
                }
            }
        });

        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        TypeSystem typeSystem = node.getTypeSystem();
        JClassSymbol importSymbol = node.getImportedSymbol();
        JPackageSymbol packageSymbol = node.getImportedPackageSymbol();

        if (importSymbol != null) {
            if (typeSystem.isImplicitlyImported(importSymbol)) {
                addViolation(data, node);
            }
        } else if (packageSymbol != null) {
            if (packageSymbol.getQualifiedName().equals(node.getPackageName())) {
                addViolation(data, node);
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private Set<String> usedClasses = new HashSet<>();

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedClasses.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        if (isUnnecessaryImport(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        trackUsedClasses(node);
        return super.visit(node, data);
    }

    private boolean isUnnecessaryImport(ASTImportDeclaration importDeclaration) {
        String importedName = importDeclaration.getImportedName();
        if (isJavaLangImport(importedName) || isCurrentPackageImport(importDeclaration)) {
            return true;
        }
        if (importDeclaration.isImportOnDemand()) {
            return !usedClasses.stream().anyMatch(usedClass -> usedClass.startsWith(importedName + "."));
        } else {
            return !usedClasses.contains(importedName);
        }
    }

    private boolean isJavaLangImport(String importedName) {
        return importedName.startsWith("java.lang.");
    }

    private boolean isCurrentPackageImport(ASTImportDeclaration importDeclaration) {
        ASTCompilationUnit compilationUnit = importDeclaration.getFirstParentOfType(ASTCompilationUnit.class);
        String packageName = compilationUnit.getPackageName();
        String importedName = importDeclaration.getImportedName();
        return packageName != null && importedName.startsWith(packageName + ".");
    }

    private void trackUsedClasses(ASTPrimaryExpression primaryExpression) {
        NodeStream<ASTName> names = primaryExpression.childrenOfType(ASTName.class);
        for (ASTName name : names) {
            JType type = name.getType();
            if (type != null && type instanceof JClassSymbol) {
                JClassSymbol classSymbol = (JClassSymbol) type;
                String className = classSymbol.getQualifiedName();
                usedClasses.add(className);
            }
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedClasses = new HashSet<>();
        node.descendants(ASTName.class)
            .filter(n -> !n.isQualifiedName() && !n.isSimpleNameInDeclaration())
            .forEach(n -> usedClasses.add(n.getImage()));

        return super.visit(node, usedClasses);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        Set<String> usedClasses = (Set<String>) data;
        String importName = node.getImportedName();
        if (importName.startsWith("java.lang.") || importName.equals(node.getPackageName() + ".")) {
            addViolation(data, node);
        } else if (!node.isStarImport() && !usedClasses.contains(importName.substring(importName.lastIndexOf('.') + 1))) {
            addViolation(data, node);
        } else if (node.isStarImport()) {
            String packageName = importName.substring(0, importName.length() - 1);
            boolean isNecessary = false;
            for (String usedClass : usedClasses) {
                if (TypeTestUtil.findClassInPackage(node.getCompilationUnit().getTypeSystem(), packageName, usedClass) != null) {
                    isNecessary = true;
                    break;
                }
            }
            if (!isNecessary) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 178.0640366077423 秒
