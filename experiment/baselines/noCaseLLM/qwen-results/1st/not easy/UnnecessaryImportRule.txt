开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTType.class, ASTPrimaryExpression.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        node.findDescendantsOfType(ASTType.class).forEach(type -> usedImports.add(type.getPackageName()));
        node.findDescendantsOfType(ASTPrimaryExpression.class).forEach(expr -> usedImports.addAll(getUsedClasses(expr)));
        node.findDescendantsOfType(ASTImportDeclaration.class).forEach(imp -> checkImport(imp, usedImports));
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        // Handled in visit(ASTCompilationUnit node, Object data)
        return data;
    }

    @Override
    public Object visit(ASTType node, Object data) {
        // Handled in visit(ASTCompilationUnit node, Object data)
        return data;
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        // Handled in visit(ASTCompilationUnit node, Object data)
        return data;
    }

    private void checkImport(ASTImportDeclaration imp, Set<String> usedImports) {
        String importName = imp.getImportedName();
        if (imp.isJavaLang() || imp.isOnDemand() && isPartiallyUsed(imp, usedImports) || !usedImports.contains(importName)) {
            addViolation(imp);
        }
    }

    private boolean isPartiallyUsed(ASTImportDeclaration imp, Set<String> usedImports) {
        String packageName = imp.getPackageName();
        return usedImports.stream().anyMatch(name -> name.startsWith(packageName + "."));
    }

    private Set<String> getUsedClasses(ASTPrimaryExpression expr) {
        Set<String> usedClasses = new HashSet<>();
        expr.findDescendantsOfType(ASTPrimaryPrefix.class).stream()
            .filter(prefix -> prefix.getFirstChildOfType(ASTPrimarySuffix.class) != null)
            .map(ASTPrimaryPrefix::getFirstChildOfType)
            .map(ASTPrimarySuffix.class::cast)
            .filter(suffix -> suffix.firstChildOfType(ASTName.class) != null)
            .map(suffix -> suffix.getFirstChildOfType(ASTName.class).getPackageName())
            .forEach(usedClasses::add);
        return usedClasses;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        String currentPackageName = getCurrentPackageName(node);

        for (NameOccurrence nameOccurrence : node.getReportedUsages()) {
            if (nameOccurrence.getLocation().getPackageName() != null) {
                usedImports.add(nameOccurrence.getLocation().getPackageName());
            }
        }

        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            ASTName importName = importDeclaration.getFirstChildOfType(ASTName.class);
            String importPackageName = importName.getImage();

            if (importDeclaration.isStarImport()) {
                JImport jImport = importDeclaration.getImport();
                jImport.getImportedClasses().stream()
                        .filter(classType -> classType.getPackageName() != null)
                        .forEach(classType -> usedImports.add(classType.getName()));
            } else {
                if (isImplicitImport(importPackageName) || isCurrentPackageImport(importPackageName, currentPackageName) || isDuplicateImport(importDeclaration, node) || !isUsedImport(importPackageName, usedImports)) {
                    addViolation(data, importDeclaration);
                }
            }
        }

        return data;
    }

    private String getCurrentPackageName(ASTCompilationUnit node) {
        ASTPackageDeclaration packageDeclaration = node.getFirstChildOfType(ASTPackageDeclaration.class);
        return packageDeclaration != null ? packageDeclaration.getPackageName() : "";
    }

    private boolean isImplicitImport(String packageName) {
        return packageName.startsWith("java.lang");
    }

    private boolean isCurrentPackageImport(String importPackageName, String currentPackageName) {
        return currentPackageName.equals(importPackageName);
    }

    private boolean isDuplicateImport(ASTImportDeclaration importDeclaration, ASTCompilationUnit node) {
        String importImage = importDeclaration.getImage();
        List<ASTImportDeclaration> imports = node.findDescendantsOfType(ASTImportDeclaration.class);
        return imports.stream().filter(importDecl -> !importDecl.equals(importDeclaration) && importDecl.getImage().equals(importImage)).count() > 1;
    }

    private boolean isUsedImport(String importPackageName, Set<String> usedImports) {
        return usedImports.stream().anyMatch(usedImport -> usedImport.equals(importPackageName) || usedImport.startsWith(importPackageName + "."));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class, ASTPrimaryExpression.class);
    }

    private Set<String> usedClasses = new HashSet<>();
    private Set<String> implicitClasses = new HashSet<>(Arrays.asList("Object", "String", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double", "Void", "Thread", "Runnable", "System", "Exception", "Throwable", "Error", "Runtime"));

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedClasses.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName nameNode = node.getFirstChildOfType(ASTName.class);
        String importName = nameNode.getImage();
        if (importName.startsWith("java.lang")) {
            implicitClasses.add(importName.substring("java.lang.".length()));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        ASTPrimaryPrefix prefix = node.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix != null) {
            JClassSymbol symbol = prefix.getEnclosingClassSymbol();
            if (symbol != null) {
                JClassType type = symbol.getType();
                if (type != null) {
                    usedClasses.add(type.getName());
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        String packageName = node.getPackageName();
        usedClasses.add(packageName + "."); // Mark all classes from the current package as used

        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            ASTName nameNode = importDecl.getFirstChildOfType(ASTName.class);
            String importName = nameNode.getImage();
            String className = importDecl.isStarImport() ? nameNode.getLastImage() : nameNode.getImage();

            if (implicitClasses.contains(className) || !usedClasses.stream().anyMatch(s -> s.endsWith(className))) {
                addViolation(data, importDecl);
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    private Set<String> usedClasses = new HashSet<>();

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedClasses.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        String importName = node.getImportedName();
        if (isImplicitlyImported(importName) || !usedClasses.contains(importName)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        trackUsage(node.getName());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        trackUsage(node.getName());
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        for (ASTVariableDeclarator declarator : node.findDescendantsOfType(ASTVariableDeclarator.class)) {
            trackUsage(declarator.getName());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTPrimaryExpression node, Object data) {
        ASTPrimaryPrefix prefix = node.getFirstChildOfType(ASTPrimaryPrefix.class);
        if (prefix != null) {
            ASTName name = prefix.getFirstChildOfType(ASTName.class);
            if (name != null) {
                trackUsage(name.getImage());
            }
        }
        return super.visit(node, data);
    }

    private void trackUsage(String name) {
        if (name.contains(".")) {
            String className = name.substring(0, name.lastIndexOf('.'));
            usedClasses.add(className);
        }
    }

    private boolean isImplicitlyImported(String importName) {
        return importName.startsWith("java.lang") || importName.startsWith(node.getPackageName());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<JClassSymbol> usedClasses = new HashSet<>();
        node.getDescendantsOfType(ASTName.class).forEach(name -> {
            JType type = name.getReferenceType();
            if (type != null && type.getTypeKind().isClassOrInterface()) {
                usedClasses.add((JClassSymbol) type.getSymbol());
            }
        });

        Set<String> packagesInScope = getImplicitPackagesInScope(node);
        node.getDescendantsOfType(ASTImportDeclaration.class).forEach(importDecl -> {
            JClassSymbol symbol = importDecl.getImportedSymbol();
            if (symbol != null) {
                if (!usedClasses.contains(symbol) || isImplicitlyInScope(symbol, packagesInScope) || isDuplicateImport(importDecl, node)) {
                    addViolation(data, importDecl);
                }
            }
        });

        return super.visit(node, data);
    }

    private Set<String> getImplicitPackagesInScope(ASTCompilationUnit node) {
        Set<String> packages = new HashSet<>();
        packages.add("java.lang");
        JPackageSymbol currentPackage = node.getPackageName();
        if (currentPackage != null) {
            packages.add(currentPackage.getName().getFullyQualifiedName());
        }
        return packages;
    }

    private boolean isImplicitlyInScope(JClassSymbol symbol, Set<String> packagesInScope) {
        return packagesInScope.contains(symbol.getPackageName());
    }

    private boolean isDuplicateImport(ASTImportDeclaration importDecl, ASTCompilationUnit node) {
        String importName = importDecl.getImportedName().getFullyQualifiedName();
        return node.getDescendantsOfType(ASTImportDeclaration.class)
                   .filter(importNode -> !importNode.equals(importDecl))
                   .anyMatch(importNode -> importName.equals(importNode.getImportedName().getFullyQualifiedName()));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 138.64565324783325 秒
