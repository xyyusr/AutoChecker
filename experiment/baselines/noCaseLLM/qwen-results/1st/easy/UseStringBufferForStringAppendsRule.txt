开始

========================================== Rule UseStringBufferForStringAppendsRule ===========================================
一共 28 个测试用例
正例 17 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class, ASTAdditiveExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound() && node.getOperator().getImage().equals("+=")) {
            ASTPrimaryExpression lhs = node.getLeftOperand().getFirstDescendantOfType(ASTPrimaryExpression.class);
            if (lhs != null && isStringType(lhs.getType())) {
                String lhsImage = lhs.getImage();
                if (lhsImage != null) {
                    Set<ASTPrimaryExpression> stringAppends = new HashSet<>();
                    NodeStream<ASTAssignmentExpression> assignments = node.getRoot().findDescendantsOfType(ASTAssignmentExpression.class);
                    for (ASTAssignmentExpression assignment : assignments) {
                        if (assignment.isCompound() && assignment.getOperator().getImage().equals("+=")) {
                            ASTPrimaryExpression leftOperand = assignment.getLeftOperand().getFirstDescendantOfType(ASTPrimaryExpression.class);
                            if (leftOperand != null && leftOperand.getImage() != null && leftOperand.getImage().equals(lhsImage)) {
                                stringAppends.add(leftOperand);
                            }
                        }
                    }
                    if (stringAppends.size() > 1) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        if (node.hasImageEqualTo("+")) {
            ASTPrimaryExpression left = node.getLeftOperand().getFirstDescendantOfType(ASTPrimaryExpression.class);
            ASTPrimaryExpression right = node.getRightOperand().getFirstDescendantOfType(ASTPrimaryExpression.class);
            if (isStringType(left.getType()) || isStringType(right.getType())) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringType(JType type) {
        TypeSystem ts = type.getTypeSystem();
        return ts.isA(type, ts.forName(String.class.getName()));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAdditiveExpression.class, ASTAssignmentOperator.class, ASTBlock.class, ASTMethodDeclaration.class, ASTVariableDeclaratorId.class);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        if (node instanceof ASTAdditiveExpression) {
            ASTAdditiveExpression additiveExpression = (ASTAdditiveExpression) node;
            if (additiveExpression.isStringConcatenation() && additiveExpression.hasDescendantOfType(ASTAssignmentOperator.class)) {
                List<ASTAdditiveExpression> concatenations = additiveExpression.findDescendantsOfType(ASTAdditiveExpression.class);
                int count = 0;
                for (ASTAdditiveExpression expression : concatenations) {
                    if (expression.getParent() instanceof ASTAssignmentOperator && expression.isStringConcatenation()) {
                        count++;
                    }
                }
                if (count > 1) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.isCompoundAssignment() && node.getOperator() == ASTAssignmentOperator.PLUS_EQUAL) {
            ASTExpression leftOperand = node.getLeftOperand();
            if (leftOperand.getType() == TypeSystem.STRING_TYPE) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        NodeStream<ASTAdditiveExpression> expressions = node.findDescendantsOfType(ASTAdditiveExpression.class);
        int count = 0;
        for (ASTAdditiveExpression expression : expressions) {
            if (expression.isStringConcatenation() && expression.hasDescendantOfType(ASTAssignmentOperator.class)) {
                count++;
            }
        }
        if (count > 1) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodDeclaration node, Object data) {
        NodeStream<ASTAdditiveExpression> expressions = node.findDescendantsOfType(ASTAdditiveExpression.class);
        int count = 0;
        for (ASTAdditiveExpression expression : expressions) {
            if (expression.isStringConcatenation() && expression.hasDescendantOfType(ASTAssignmentOperator.class)) {
                count++;
            }
        }
        if (count > 1) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTVariableDeclaratorId node, Object data) {
        if (node.getType() == TypeSystem.STRING_TYPE) {
            NodeStream<ASTAssignmentOperator> assignments = node.findDescendantsOfType(ASTAssignmentOperator.class);
            int count = 0;
            for (ASTAssignmentOperator assignment : assignments) {
                if (assignment.isCompoundAssignment() && assignment.getOperator() == ASTAssignmentOperator.PLUS_EQUAL) {
                    count++;
                }
            }
            if (count > 1) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAdditiveExpression.class);
    }
    
    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        if (node.isCompoundOperation() && node.getOperator().equals("+=")) {
            List<ASTExpression> operands = node.findDescendantsOfType(ASTExpression.class);
            if (operands.size() == 2) {
                JType leftType = operands.get(0).getType();
                JType rightType = operands.get(1).getType();
                TypeSystem typeSystem = node.getTypeSystem();
                if (typeSystem.isA(leftType, typeSystem.STRING) || typeSystem.isA(rightType, typeSystem.STRING)) {
                    if (isStringBeingAppendedMultipleTimes(node, operands.get(0))) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringBeingAppendedMultipleTimes(ASTAdditiveExpression node, ASTExpression leftOperand) {
        JVariableSymbol variable = leftOperand.getVariableSymbol();
        if (variable != null) {
            NodeStream<ASTExpression> expressions = node.getRoot().findDescendantsOfType(ASTExpression.class).filter(expr -> {
                JVariableSymbol sym = expr.getVariableSymbol();
                return sym != null && sym.equals(variable);
            });
            int count = 0;
            for (ASTExpression expr : expressions) {
                if (expr.getParent() instanceof ASTAdditiveExpression) {
                    ASTAdditiveExpression parent = (ASTAdditiveExpression) expr.getParent();
                    if (parent.isCompoundOperation() && parent.getOperator().equals("+=")) {
                        count++;
                    }
                }
            }
            return count > 1;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAssignmentExpression.Operator.PLUS_ASSIGN) {
            ASTPrimaryExpression left = node.getLeftOperand();
            if (left != null && left.getFirstChildOfType(ASTPrimaryPrefix.class) != null) {
                ASTExpression right = node.getRightOperand();
                if (right != null && right.getFirstDescendantOfType(ASTAdditiveExpression.class) != null) {
                    Set<String> variables = new HashSet<>();
                    left.findDescendantsOfType(ASTName.class).forEach(name -> variables.add(name.getImage()));
                    if (countStringAppends(right, variables) > 1) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private int countStringAppends(ASTExpression expression, Set<String> variables) {
        int count = 0;
        if (expression instanceof ASTAdditiveExpression) {
            ASTAdditiveExpression additiveExpression = (ASTAdditiveExpression) expression;
            if (additiveExpression.getOperator() == ASTAdditiveExpression.Operator.PLUS) {
                count += countStringAppends(additiveExpression.getLeftOperand(), variables);
                count += countStringAppends(additiveExpression.getRightOperand(), variables);
            }
        } else if (expression instanceof ASTPrimaryExpression) {
            ASTPrimaryPrefix prefix = expression.getFirstChildOfType(ASTPrimaryPrefix.class);
            if (prefix != null && prefix.getFirstDescendantOfType(ASTName.class) != null) {
                String variableName = prefix.getFirstDescendantOfType(ASTName.class).getImage();
                if (variables.contains(variableName)) {
                    JType type = prefix.getType();
                    if (type != null && type.toString().equals("java.lang.String")) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getOperator() == ASTAssignmentExpression.Operator.PLUS_ASSIGN) {
            NodeStream<ASTAdditiveExpression> additiveExpressions = node.findDescendantsOfType(ASTAdditiveExpression.class);
            if (additiveExpressions.count() > 0) {
                List<ASTStringLiteral> stringLiterals = node.findDescendantsOfType(ASTStringLiteral.class);
                if (stringLiterals.size() > 1) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 127.61307525634766 秒
