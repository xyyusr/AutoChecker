开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getType() == ASTEqualityExpression.Type.EQUAL && node.getImage().equals("==")) {
            NodeStream<ASTMethodCall> methodCalls = node.children(ASTPrimaryExpression.class)
                    .flatMap(ASTPrimaryExpression::children)
                    .filter(ASTMethodCall.class::isInstance)
                    .map(ASTMethodCall.class::cast);

            Optional<ASTMethodCall> trimCall = methodCalls.filter(mc -> {
                ASTPrimarySuffix suffix = mc.getFirstChildOfType(ASTPrimarySuffix.class);
                return suffix != null && suffix.getImage().equals("trim");
            }).findFirst();

            if (trimCall.isPresent()) {
                JavaNode parent = node.jjtGetParent();
                if (parent instanceof ASTPrimaryExpression) {
                    ASTPrimaryExpression parentExpr = (ASTPrimaryExpression) parent;
                    NodeStream<ASTMethodCall> parentMethodCalls = parentExpr.children(ASTPrimaryExpression.class)
                            .flatMap(ASTPrimaryExpression::children)
                            .filter(ASTMethodCall.class::isInstance)
                            .map(ASTMethodCall.class::cast);

                    Optional<ASTMethodCall> isEmptyCall = parentMethodCalls.filter(mc -> {
                        ASTPrimarySuffix suffix = mc.getFirstChildOfType(ASTPrimarySuffix.class);
                        return suffix != null && suffix.getImage().equals("isEmpty");
                    }).findFirst();

                    if (isEmptyCall.isPresent()) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getOperator() != ASTEqualityExpression.EQUAL) {
            return super.visit(node, data);
        }

        NodeStream<ASTPrimaryExpression> primaryExpressions = node.children(ASTPrimaryExpression.class);
        List<ASTPrimaryExpression> expressions = primaryExpressions.toList();

        if (expressions.size() != 2) {
            return super.visit(node, data);
        }

        ASTPrimaryExpression left = expressions.get(0);
        ASTPrimaryExpression right = expressions.get(1);

        if (isInefficientEmptyCheck(left) || isInefficientEmptyCheck(right)) {
            addViolation(data, node);
        }

        return super.visit(node, data);
    }

    private boolean isInefficientEmptyCheck(ASTPrimaryExpression expression) {
        if (expression == null || expression.jjtGetNumChildren() != 2) {
            return false;
        }

        ASTPrimarySuffix suffix1 = expression.jjtGetChild(1).jjtGetChild(0).jjtGetChild(0);
        ASTPrimarySuffix suffix2 = expression.jjtGetChild(1).jjtGetChild(0).jjtGetChild(1);

        if (suffix1 instanceof ASTPrimarySuffix && suffix2 instanceof ASTPrimarySuffix) {
            JMethodSymbol method1 = suffix1.getMethodSymbol();
            JMethodSymbol method2 = suffix2.getMethodSymbol();

            if (method1 != null && method2 != null) {
                JType type = method1.getDeclaringType();
                TypeSystem ts = getSymbolTable().getTypeSystem();
                JType stringType = ts.forName("java.lang.String");

                if (type.equals(stringType)) {
                    String methodName1 = method1.getSimpleName();
                    String methodName2 = method2.getSimpleName();

                    if ("trim".equals(methodName1) && ("length".equals(methodName2) || "isEmpty".equals(methodName2))) {
                        return true;
                    }
                }
            }
        }

        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.Set;
import java.util.HashSet;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    private static final Set<String> TRIM_METHOD_NAMES = new HashSet<>(Arrays.asList("trim"));
    private static final Set<String> LENGTH_METHOD_NAMES = new HashSet<>(Arrays.asList("length"));
    private static final Set<String> IS_EMPTY_METHOD_NAMES = new HashSet<>(Arrays.asList("isEmpty"));

    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (node.getImage().equals("trim")) {
            JavaNode parent = node.getParent();
            if (parent instanceof ASTMethodCall) {
                ASTMethodCall parentCall = (ASTMethodCall) parent;
                if (parentCall.getImage().equals("length")) {
                    ASTExpression grandParent = (ASTExpression) parentCall.getParent();
                    if (grandParent instanceof ASTEqualityExpression) {
                        ASTEqualityExpression equalityExpression = (ASTEqualityExpression) grandParent;
                        NodeStream<ASTLiteral> literals = equalityExpression.findDescendantsOfType(ASTLiteral.class);
                        if (literals.anyMatch(lit -> "0".equals(lit.getImage()))) {
                            addViolation(data, equalityExpression);
                        }
                    }
                } else if (parentCall.getImage().equals("isEmpty")) {
                    addViolation(data, parentCall);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getType() == ASTEqualityExpression.Type.EQUALS || node.getType() == ASTEqualityExpression.Type.NOT_EQUALS) {
            NodeStream<ASTMethodCall> methodCalls = node.children(ASTPrimaryExpression.class).flatMap(ASTPrimaryExpression::children).filter(ASTMethodCall.class::isInstance);

            if (methodCalls.count() == 2) {
                ASTMethodCall call1 = (ASTMethodCall) methodCalls.get(0);
                ASTMethodCall call2 = (ASTMethodCall) methodCalls.get(1);

                if (isTrimLengthCall(call1) && isZeroLiteral(call2) || isTrimLengthCall(call2) && isZeroLiteral(call1)) {
                    addViolation(data, node);
                } else if (isTrimIsEmptyCall(call1) && isBooleanLiteral(call2, false) || isTrimIsEmptyCall(call2) && isBooleanLiteral(call1, false)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthCall(ASTMethodCall call) {
        return call.getImage().equals("length") && isTrimCall(call.getFirstChildOfType(ASTPrimaryExpression.class));
    }

    private boolean isTrimIsEmptyCall(ASTMethodCall call) {
        return call.getImage().equals("isEmpty") && isTrimCall(call.getFirstChildOfType(ASTPrimaryExpression.class));
    }

    private boolean isTrimCall(ASTPrimaryExpression expr) {
        ASTPrimarySuffix suffix = expr.getFirstChildOfType(ASTPrimarySuffix.class);
        return suffix != null && suffix.getImage().equals("trim");
    }

    private boolean isZeroLiteral(ASTMethodCall call) {
        ASTPrimaryExpression expr = call.getNextSibling();
        return expr != null && expr.getFirstChildOfType(ASTLiteral.class).getImage().equals("0");
    }

    private boolean isBooleanLiteral(ASTMethodCall call, boolean value) {
        ASTPrimaryExpression expr = call.getNextSibling();
        return expr != null && expr.getFirstChildOfType(ASTLiteral.class).getImage().equals(String.valueOf(value));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }

    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getOperator() == ASTEqualityExpression.EQUAL || node.getOperator() == ASTEqualityExpression.NOT_EQUAL) {
            NodeStream<ASTPrimaryExpression> expressions = node.children(ASTPrimaryExpression.class);
            if (expressions.count() != 2) {
                return super.visit(node, data);
            }

            ASTPrimaryExpression left = expressions.first();
            ASTPrimaryExpression right = expressions.last();

            if (isTrimLengthCheck(left, right) || isTrimLengthCheck(right, left)) {
                addViolation(data, node);
            } else if (isTrimEmptyCheck(left, right) || isTrimEmptyCheck(right, left)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthCheck(ASTPrimaryExpression expr1, ASTPrimaryExpression expr2) {
        return isTrimCall(expr1) && isZeroLiteral(expr2);
    }

    private boolean isTrimEmptyCheck(ASTPrimaryExpression expr1, ASTPrimaryExpression expr2) {
        return isTrimCall(expr1) && isEmptyLiteral(expr2);
    }

    private boolean isTrimCall(ASTPrimaryExpression expr) {
        List<ASTPrimarySuffix> suffixes = expr.findDescendantsOfType(ASTPrimarySuffix.class);
        return suffixes.size() == 2 && "trim".equals(suffixes.get(0).getImage()) && "length".equals(suffixes.get(1).getImage());
    }

    private boolean isZeroLiteral(ASTPrimaryExpression expr) {
        return expr.getFirstChildOfType(ASTLiteral.class) != null && "0".equals(expr.getFirstChildOfType(ASTLiteral.class).getImage());
    }

    private boolean isEmptyLiteral(ASTPrimaryExpression expr) {
        List<ASTPrimarySuffix> suffixes = expr.findDescendantsOfType(ASTPrimarySuffix.class);
        return suffixes.size() == 1 && "isEmpty".equals(suffixes.get(0).getImage());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 124.06744623184204 秒
