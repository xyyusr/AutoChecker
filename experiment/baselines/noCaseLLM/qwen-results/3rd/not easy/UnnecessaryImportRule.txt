开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.Set;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    private Set<JSymbol> usedSymbols;

    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        usedSymbols = new HashSet<>();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTName node, Object data) {
        JSymbol symbol = node.getReferencedSym();
        if (symbol != null) {
            usedSymbols.add(symbol);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        SymbolTable symbolTable = node.getCompilationUnit().getSymbolTable();
        JPackageSymbol currentPackage = symbolTable.getCurrentScope().getPackageSymbol();
        JClassSymbol javaLangObject = symbolTable.lookupClassSymbol("java.lang.Object");
        JClassSymbol javaLangPackage = symbolTable.lookupClassSymbol("java.lang");

        ASTName importName = node.getFirstChildOfType(ASTName.class);
        JSymbol importSymbol = importName.getReferencedSym();

        if (importSymbol instanceof JClassSymbol) {
            JClassSymbol classSymbol = (JClassSymbol) importSymbol;
            JPackageSymbol importPackage = classSymbol.getPackageSymbol();
            if (importPackage.equals(currentPackage) || importPackage.equals(javaLangPackage)) {
                addViolation(data, node);
            } else if (!usedSymbols.contains(classSymbol)) {
                addViolation(data, node);
            }
        } else if (importSymbol instanceof JPackageSymbol) {
            JPackageSymbol packageSymbol = (JPackageSymbol) importSymbol;
            if (packageSymbol.equals(currentPackage) || packageSymbol.equals(javaLangPackage)) {
                addViolation(data, node);
            } else {
                boolean allMembersUsed = true;
                for (JClassSymbol classSymbol : packageSymbol.getClassSymbols()) {
                    if (!usedSymbols.contains(classSymbol)) {
                        allMembersUsed = false;
                        break;
                    }
                }
                if (!allMembersUsed) {
                    addViolation(data, node);
                }
            }
        }

        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.Set;
import java.util.HashSet;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        SymbolTable symbolTable = node.getSymbolTable();
        Set<String> usedTypes = new HashSet<>();
        collectUsedTypes(node, usedTypes);

        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importedType = getImportedTypeName(importDecl);
            if (importDecl.isStarImport()) {
                checkStarImport(importDecl, usedTypes, data);
            } else {
                checkSingleImport(importDecl, usedTypes, data);
            }
        }

        return super.visit(node, data);
    }

    private void collectUsedTypes(ASTCompilationUnit node, Set<String> usedTypes) {
        for (ASTPrimaryExpression expr : node.findDescendantsOfType(ASTPrimaryExpression.class)) {
            ASTName name = expr.getFirstChildOfType(ASTName.class);
            if (name != null) {
                String fullName = name.getImage();
                if (!fullName.contains(".")) {
                    continue;
                }
                JType type = TypeSystem.getType(fullName);
                if (type != null) {
                    usedTypes.add(type.getQualifiedName());
                }
            }
        }
    }

    private String getImportedTypeName(ASTImportDeclaration importDecl) {
        ASTName importName = importDecl.getFirstChildOfType(ASTName.class);
        return importName.getImage();
    }

    private void checkStarImport(ASTImportDeclaration importDecl, Set<String> usedTypes, Object data) {
        String packageName = getImportedTypeName(importDecl).replaceAll("\\*","");

        for (String usedType : usedTypes) {
            if (usedType.startsWith(packageName)) {
                return;
            }
        }

        addViolation(data, importDecl);
    }

    private void checkSingleImport(ASTImportDeclaration importDecl, Set<String> usedTypes, Object data) {
        String importedType = getImportedTypeName(importDecl);
        if (!usedTypes.contains(importedType)) {
            addViolation(data, importDecl);
        }
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        SymbolTable symbolTable = node.getSymbolTable();
        Set<String> usedImports = new HashSet<>();
        Set<String> allImports = new HashSet<>();

        node.findDescendantsOfType(ASTImportDeclaration.class).forEach(importDeclaration -> {
            String importName = importDeclaration.getImportedName();
            allImports.add(importName);
            if (importDeclaration.isStarImport()) {
                String packageName = importName.substring(0, importName.lastIndexOf('.'));
                symbolTable.getPackage(packageName).getClasses().forEach(classSymbol -> usedImports.add(classSymbol.getQualifiedName()));
            }
        });

        node.findDescendantsOfType(ASTPrimaryPrefix.class).forEach(primaryPrefix -> {
            ASTPrimarySuffix primarySuffix = primaryPrefix.getFirstChildOfType(ASTPrimarySuffix.class);
            if (primarySuffix != null) {
                ASTName name = primaryPrefix.getFirstChildOfType(ASTName.class);
                if (name != null) {
                    String fullName = name.getImage();
                    if (fullName.contains(".")) {
                        usedImports.add(fullName);
                    }
                }
            }
        });

        node.findDescendantsOfType(ASTTypeDeclaration.class).forEach(typeDeclaration -> {
            JClassSymbol classSymbol = typeDeclaration.getSymbol();
            if (classSymbol != null) {
                usedImports.add(classSymbol.getPackageName());
            }
        });

        allImports.stream()
                .filter(importName -> isUnnecessaryImport(node, importName, usedImports))
                .forEach(importName -> addViolation(data, findImportDeclaration(node, importName)));

        return super.visit(node, data);
    }

    private boolean isUnnecessaryImport(ASTCompilationUnit node, String importName, Set<String> usedImports) {
        if (importName.startsWith("java.lang.")) {
            return true;
        }
        String packageName = node.getPackageName();
        if (importName.equals(packageName) || importName.startsWith(packageName + ".")) {
            return true;
        }
        return !usedImports.stream().anyMatch(usedImport -> usedImport.startsWith(importName));
    }

    private ASTImportDeclaration findImportDeclaration(ASTCompilationUnit node, String importName) {
        return node.findDescendantsOfType(ASTImportDeclaration.class).stream()
                .filter(importDeclaration -> importDeclaration.getImportedName().equals(importName))
                .findFirst()
                .orElse(null);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTCompilationUnit.class, ASTImportDeclaration.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        Set<String> usedImports = new HashSet<>();
        for (ASTClassOrInterfaceDeclaration classOrInterface : node.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class)) {
            usedImports.addAll(findUsedImports(classOrInterface));
        }
        for (ASTImportDeclaration importDecl : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            String importName = importDecl.getImportedName();
            if (!isImportUsed(importDecl, usedImports) || isImplicitImport(importName) || isDuplicatedImport(importDecl, node)) {
                addViolation(data, importDecl);
            }
        }
        return super.visit(node, data);
    }

    private Set<String> findUsedImports(ASTClassOrInterfaceDeclaration classOrInterface) {
        Set<String> usedImports = new HashSet<>();
        for (ASTFieldDeclaration field : classOrInterface.findDescendantsOfType(ASTFieldDeclaration.class)) {
            usedImports.addAll(findUsedImportsInField(field));
        }
        for (ASTMethodDeclaration method : classOrInterface.findDescendantsOfType(ASTMethodDeclaration.class)) {
            usedImports.addAll(findUsedImportsInMethod(method));
        }
        return usedImports;
    }

    private Set<String> findUsedImportsInField(ASTFieldDeclaration field) {
        Set<String> usedImports = new HashSet<>();
        for (ASTVariableDeclaratorId varId : field.findDescendantsOfType(ASTVariableDeclaratorId.class)) {
            usedImports.addAll(findUsedImportsInName(varId.getNameNode()));
        }
        return usedImports;
    }

    private Set<String> findUsedImportsInMethod(ASTMethodDeclaration method) {
        Set<String> usedImports = new HashSet<>();
        for (ASTPrimaryExpression expr : method.findDescendantsOfType(ASTPrimaryExpression.class)) {
            for (ASTPrimaryPrefix prefix : expr.findDescendantsOfType(ASTPrimaryPrefix.class)) {
                for (ASTName name : prefix.findDescendantsOfType(ASTName.class)) {
                    usedImports.addAll(findUsedImportsInName(name));
                }
            }
        }
        return usedImports;
    }

    private Set<String> findUsedImportsInName(ASTName name) {
        Set<String> usedImports = new HashSet<>();
        JType type = name.getType();
        if (type != null && type instanceof JClassSymbol) {
            usedImports.add(((JClassSymbol) type).getQualifiedName());
        }
        return usedImports;
    }

    private boolean isImportUsed(ASTImportDeclaration importDecl, Set<String> usedImports) {
        String importName = importDecl.getImportedName();
        return usedImports.stream().anyMatch(importName::equals) || usedImports.stream().anyMatch(importName + ".*"::equals);
    }

    private boolean isImplicitImport(String importName) {
        return importName.startsWith("java.lang.") || importName.equals(getPackageName());
    }

    private boolean isDuplicatedImport(ASTImportDeclaration importDecl, ASTCompilationUnit compilationUnit) {
        String importName = importDecl.getImportedName();
        List<ASTImportDeclaration> importDecls = compilationUnit.findDescendantsOfType(ASTImportDeclaration.class);
        long count = importDecls.stream().filter(decl -> decl.getImportedName().equals(importName)).count();
        return count > 1;
    }

    private String getPackageName() {
        return getTopNode().getPackageName();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public UnnecessaryImportRule() {
        super(ASTImportDeclaration.class, ASTCompilationUnit.class);
    }

    private Set<String> usedTypes = new HashSet<>();
    private Set<String> implicitImports = new HashSet<>();

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        implicitImports.add("java.lang");
        implicitImports.add(node.getPackageNameDeclaration().getImage());
        usedTypes.clear();
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTImportDeclaration node, Object data) {
        ASTName name = node.getFirstChildOfType(ASTName.class);
        if (name != null) {
            String importName = name.getImage();
            if (importName.endsWith(".*")) {
                implicitImports.add(importName.substring(0, importName.length() - 2));
            } else {
                usedTypes.add(importName);
            }
        }
        return data;
    }

    @Override
    public Object visit(JavaNode node, Object data) {
        if (node instanceof ASTName) {
            ASTName nameNode = (ASTName) node;
            String name = nameNode.getImage();
            JClassSymbol classSymbol = TypeSystem.getInstance().findClass(name);
            if (classSymbol != null) {
                usedTypes.add(classSymbol.getCanonicalName());
            }
        } else if (node instanceof JVariableSymbol || node instanceof JMethodSymbol) {
            String fullName = ((JVariableSymbol) node).getQualifiedName();
            usedTypes.add(fullName.substring(0, fullName.lastIndexOf('.')));
        }
        return super.visit(node, data);
    }

    @Override
    public void end(ASTCompilationUnit node, Object data) {
        for (ASTImportDeclaration importDeclaration : node.findDescendantsOfType(ASTImportDeclaration.class)) {
            ASTName name = importDeclaration.getFirstChildOfType(ASTName.class);
            if (name != null) {
                String importName = name.getImage();
                boolean isImplicit = implicitImports.stream().anyMatch(implicitImport -> importName.startsWith(implicitImport + "."));
                boolean isUsed = usedTypes.stream().anyMatch(usedType -> usedType.equals(importName) || usedType.startsWith(importName + "."));
                if (!isUsed || isImplicit) {
                    addViolation(data, importDeclaration);
                }
            }
        }
        super.end(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 185.2557122707367 秒
