开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node);
        }
        if (node.hasFinally()) {
            if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class, 1))) {
                addViolation(data, node.getFinallyBlock());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node.getThenBranch());
        }
        if (node.hasElse()) {
            if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class, 1))) {
                addViolation(data, node.getElseBranch());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (isEmptyBlock(node.getFirstChildOfType(ASTBlock.class))) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    private boolean isEmptyBlock(ASTBlock block) {
        return block != null && block.isEmpty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTInitializer.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        List<ASTBlockStatement> tryBlockStatements = node.getFirstChildOfType(ASTBlock.class).getBlockStatementOrBlock();
        if (tryBlockStatements.isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        if (node.hasFinally()) {
            List<ASTBlockStatement> finallyBlockStatements = node.getFinallyBlock().getBlockStatementOrBlock();
            if (finallyBlockStatements.isEmpty()) {
                addViolation(data, node.getFinallyBlock());
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getFirstChildOfType(ASTBlock.class).getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getFirstChildOfType(ASTBlock.class).getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getFirstBranch().getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstBranch());
        }
        if (node.hasElseClause() && node.getElseBranch().getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getElseBranch());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        if (node.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isUsedAsStatement() && node.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTBlock.class, ASTDoStatement.class, ASTForStatement.class, ASTIfStatement.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTTryStatement.class, ASTWhileStatement.class, ASTInitializer.class);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block != null && block.isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block != null && block.isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        ASTBlock thenBlock = node.getFirstChildOfType(ASTBlock.class);
        ASTBlock elseBlock = node.getElseBlock();
        if (thenBlock != null && thenBlock.isEmpty()) {
            addViolation(data, thenBlock);
        }
        if (elseBlock != null && elseBlock.isEmpty()) {
            addViolation(data, elseBlock);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block != null && block.isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block != null && block.isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        ASTBlock tryBlock = node.getFirstChildOfType(ASTBlock.class);
        if (tryBlock != null && tryBlock.isEmpty()) {
            addViolation(data, tryBlock);
        }

        for (ASTCatchClause catchClause : node.getCatchClauses()) {
            ASTBlock catchBlock = catchClause.getFirstChildOfType(ASTBlock.class);
            if (catchBlock != null && catchBlock.isEmpty()) {
                addViolation(data, catchBlock);
            }
        }

        ASTFinallyBlock finallyBlock = node.getFirstChildOfType(ASTFinallyBlock.class);
        if (finallyBlock != null) {
            ASTBlock block = finallyBlock.getFirstChildOfType(ASTBlock.class);
            if (block != null && block.isEmpty()) {
                addViolation(data, block);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block != null && block.isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        ASTBlock block = node.getFirstChildOfType(ASTBlock.class);
        if (block != null && block.isEmpty()) {
            addViolation(data, block);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        List<ASTBlockStatement> tryBlockStatements = node.getFirstChildOfType(ASTBlock.class).getBlockStatementOrBlock();
        if (tryBlockStatements.isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        ASTBlock finallyBlock = node.getFinallyBlock();
        if (finallyBlock != null && finallyBlock.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, finallyBlock);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getFirstChildOfType(ASTBlock.class).getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getFirstChildOfType(ASTBlock.class).getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getFirstChildOfType(ASTBlock.class));
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        ASTBlock ifBlock = node.getFirstChildOfType(ASTBlock.class);
        if (ifBlock != null && ifBlock.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, ifBlock);
        }
        ASTBlock elseBlock = node.getElseBlock();
        if (elseBlock != null && elseBlock.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, elseBlock);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBlock().getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getBlock());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBlock().getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getBlock());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBlock().getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node.getBlock());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.getParent() instanceof ASTBlockStatement && node.getBlockStatementOrBlock().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;
import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTIfStatement.class, ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTTryStatement.class, ASTBlock.class);
    }
    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (isEmptyBlock(node.getElseClause()) || isEmptyBlock(node.getThenClause())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (isEmptyBlock(node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (isEmptyBlock(node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (isEmptyBlock(node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (isEmptyBlock(node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (isEmptyBlock(node.getBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (isEmptyBlock(node.getTryBlock()) || isEmptyBlock(node.getFinallyBlock())) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isInitializer() && isEmptyBlock(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    private boolean isEmptyBlock(JavaNode node) {
        return node instanceof ASTBlock && ((ASTBlock) node).getStatements().isEmpty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 195.34241390228271 秒
