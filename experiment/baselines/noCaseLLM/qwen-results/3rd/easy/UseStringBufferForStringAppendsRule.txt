开始

========================================== Rule UseStringBufferForStringAppendsRule ===========================================
一共 28 个测试用例
正例 17 个
反例 11 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    private Map<JavaNode, Integer> appendCounts = new HashMap<>();

    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAssignmentExpression.Operator.PLUS) {
            JavaNode lhs = node.getLeftOperand();
            if (lhs instanceof ASTPrimaryExpression) {
                NodeStream<ASTAdditiveExpression> additiveExpressions = node.getRightOperand().getDescendantsStream(ASTAdditiveExpression.class);
                additiveExpressions.forEach(expr -> {
                    int count = countStringLiterals(expr);
                    appendCounts.put(lhs, appendCounts.getOrDefault(lhs, 0) + count);
                });
            }
        }
        return super.visit(node, data);
    }

    private int countStringLiterals(ASTAdditiveExpression node) {
        NodeStream<ASTStringLiteral> stringLiterals = node.getDescendantsStream(ASTStringLiteral.class);
        return (int) stringLiterals.count();
    }

    @Override
    public void end(ASTCompilationUnit node, Object data) {
        appendCounts.forEach((lhs, count) -> {
            if (count > 1) {
                addViolation(data, lhs);
            }
        });
        appendCounts.clear();
        super.end(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import java.util.HashMap;
import java.util.Map;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    private Map<String, Integer> stringAppendsCount;

    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class, ASTAdditiveExpression.class);
        stringAppendsCount = new HashMap<>();
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAssignmentExpression.Operator.PLUS) {
            ASTVariableDeclaratorId varId = node.getFirstParentOfType(ASTVariableDeclaratorId.class);
            if (varId != null) {
                Type varType = varId.getType();
                if (varType.isA(String.class)) {
                    String varName = varId.getImage();
                    stringAppendsCount.put(varName, stringAppendsCount.getOrDefault(varName, 0) + 1);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        if (node.isCompound() && node.getOperator() == ASTAdditiveExpression.Operator.PLUS) {
            ASTVariableDeclaratorId varId = node.getFirstParentOfType(ASTVariableDeclaratorId.class);
            if (varId != null) {
                Type varType = varId.getType();
                if (varType.isA(String.class)) {
                    String varName = varId.getImage();
                    int count = stringAppendsCount.getOrDefault(varName, 0);
                    if (count > 1) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.HashSet;
import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentExpression.class);
    }
    
    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (node.getOperator().getImage().equals("+=")) {
            ASTAdditiveExpression additiveExpression = node.getFirstChildOfType(ASTAdditiveExpression.class);
            if (additiveExpression != null && additiveExpression.isStringConcatenation()) {
                ASTVariableDeclaratorId lhs = node.getLeftOperand().getFirstDescendantOfType(ASTVariableDeclaratorId.class);
                if (lhs != null) {
                    JType type = lhs.getType();
                    if (type != null && type.isSubtypeOf(TypeSystem.getInstance().getString())) {
                        int appendCount = countAppendsInBlock(node);
                        if (appendCount > 1) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
    
    private int countAppendsInBlock(ASTAssignmentExpression node) {
        int count = 0;
        Set<ASTVariableDeclaratorId> visitedVariables = new HashSet<>();
        for (ASTAssignmentExpression expr : node.getEnclosingBlock().findDescendantsOfType(ASTAssignmentExpression.class)) {
            if (expr.getOperator().getImage().equals("+=")) {
                ASTVariableDeclaratorId lhs = expr.getLeftOperand().getFirstDescendantOfType(ASTVariableDeclaratorId.class);
                if (lhs != null && !visitedVariables.contains(lhs)) {
                    JType type = lhs.getType();
                    if (type != null && type.isSubtypeOf(TypeSystem.getInstance().getString())) {
                        visitedVariables.add(lhs);
                        count += countAppendsForVariable(expr, lhs.getName());
                    }
                }
            }
        }
        return count;
    }
    
    private int countAppendsForVariable(ASTAssignmentExpression node, String variableName) {
        int count = 0;
        for (ASTAssignmentExpression expr : node.getEnclosingBlock().findDescendantsOfType(ASTAssignmentExpression.class)) {
            if (expr.getOperator().getImage().equals("+=")) {
                ASTVariableDeclaratorId lhs = expr.getLeftOperand().getFirstDescendantOfType(ASTVariableDeclaratorId.class);
                if (lhs != null && lhs.getName().equals(variableName)) {
                    count++;
                }
            }
        }
        return count;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTAssignmentOperator.class, ASTAdditiveExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentOperator node, Object data) {
        if (node.isCompound() && node.getImage().equals("+=")) {
            ASTAdditiveExpression additiveExpression = node.getFirstParentOfType(ASTAdditiveExpression.class);
            if (additiveExpression != null && additiveExpression.getLeftOperand() != null && additiveExpression.getRightOperand() != null) {
                ASTExpression leftOperand = additiveExpression.getLeftOperand();
                ASTExpression rightOperand = additiveExpression.getRightOperand();
                if (leftOperand.getType() != null && leftOperand.getType().isA(String.class) && rightOperand.getType() != null && rightOperand.getType().isA(String.class)) {
                    ASTStatementExpression statementExpression = node.getFirstParentOfType(ASTStatementExpression.class);
                    if (statementExpression != null) {
                        ASTBlockStatement blockStatement = statementExpression.getFirstParentOfType(ASTBlockStatement.class);
                        if (blockStatement != null) {
                            ASTBlock block = blockStatement.getFirstParentOfType(ASTBlock.class);
                            if (block != null) {
                                List<ASTAdditiveExpression> allAdditiveExpressions = block.findDescendantsOfType(ASTAdditiveExpression.class);
                                int count = 0;
                                for (ASTAdditiveExpression expr : allAdditiveExpressions) {
                                    if (expr.getLeftOperand().equals(leftOperand) && expr.getImage().equals("+")) {
                                        count++;
                                    }
                                }
                                if (count > 1) {
                                    addViolation(data, node);
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAdditiveExpression node, Object data) {
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;
import java.util.ArrayList;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule {
    public UseStringBufferForStringAppendsRule() {
        super(ASTBlock.class, ASTStatementExpression.class);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        List<ASTAdditiveExpression> appendExpressions = new ArrayList<>();
        node.children(ASTStatementExpression.class).forEach(statement -> {
            statement.children(ASTAdditiveExpression.class).forEach(expression -> {
                if (isStringConcatenation(expression)) {
                    appendExpressions.add(expression);
                }
            });
        });
        if (appendExpressions.size() > 1) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTStatementExpression node, Object data) {
        node.children(ASTAdditiveExpression.class).forEach(expression -> {
            if (isStringConcatenation(expression)) {
                addViolation(data, node);
            }
        });
        return super.visit(node, data);
    }

    private boolean isStringConcatenation(ASTAdditiveExpression expression) {
        if (expression instanceof ASTAdditiveExpression) {
            ASTAdditiveExpression additiveExpression = (ASTAdditiveExpression) expression;
            if (additiveExpression.isCompound() && additiveExpression.getOperator().equals("+=")) {
                return additiveExpression.children(ASTExpression.class).anyMatch(expr -> isStringLiteralOrVariable(expr));
            }
        }
        return false;
    }

    private boolean isStringLiteralOrVariable(ASTExpression expression) {
        JType type = expression.getType();
        return type != null && (TypeSystem.STRING_TYPE.equals(type) || isStringVariable(expression));
    }

    private boolean isStringVariable(ASTExpression expression) {
        if (expression instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression primaryExpression = (ASTPrimaryExpression) expression;
            if (primaryExpression.jjtGetChild(0) instanceof ASTPrimaryPrefix) {
                ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) primaryExpression.jjtGetChild(0);
                if (primaryPrefix.jjtGetChild(0) instanceof ASTName) {
                    ASTName name = (ASTName) primaryPrefix.jjtGetChild(0);
                    return name.getEnclosingBlock().jjtGetChild(0) instanceof ASTVariableDeclarator &&
                            TypeSystem.STRING_TYPE.equals(((ASTVariableDeclarator) name.getEnclosingBlock().jjtGetChild(0)).getType());
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 190.8572552204132 秒
