开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;
import java.util.ArrayList;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class, ASTMethodCall.class);
    }
    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getOperator() == ASTEqualityExpression.EQUAL && node.getLeftOperand() instanceof ASTPrimaryExpression && node.getRightOperand() instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression left = (ASTPrimaryExpression) node.getLeftOperand();
            ASTPrimaryExpression right = (ASTPrimaryExpression) node.getRightOperand();
            if (isTrimLengthCheck(left) && isZero(right) || isTrimLengthCheck(right) && isZero(left)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimEmptyCheck(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    private boolean isTrimLengthCheck(ASTPrimaryExpression expr) {
        if (expr.getFirstChild() instanceof ASTPrimaryPrefix && expr.jjtGetNumChildren() == 2) {
            ASTPrimaryPrefix prefix = (ASTPrimaryPrefix) expr.getFirstChild();
            ASTPrimarySuffix suffix = (ASTPrimarySuffix) expr.jjtGetChild(1);
            if (prefix.getFirstChild() instanceof ASTName && suffix instanceof ASTPrimarySuffix && suffix.getImage().equals(".length()")) {
                ASTName name = (ASTName) prefix.getFirstChild();
                List<ASTPrimarySuffix> suffixes = name.findChildrenOfType(ASTPrimarySuffix.class);
                if (suffixes.size() == 1 && suffixes.get(0).getImage().equals(".trim()")) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean isZero(ASTPrimaryExpression expr) {
        if (expr.getFirstChild() instanceof ASTLiteral) {
            String image = expr.getFirstChild().getImage();
            return image.equals("0") || image.equals("0L");
        }
        return false;
    }
    private boolean isTrimEmptyCheck(ASTMethodCall node) {
        if (node.getMethodName().equals("isEmpty")) {
            ASTPrimaryExpression prefix = (ASTPrimaryExpression) node.jjtGetParent().jjtGetChild(0);
            ASTPrimaryPrefix primaryPrefix = (ASTPrimaryPrefix) prefix.getFirstChild();
            if (primaryPrefix.getFirstChild() instanceof ASTName) {
                ASTName name = (ASTName) primaryPrefix.getFirstChild();
                List<ASTPrimarySuffix> suffixes = name.findChildrenOfType(ASTPrimarySuffix.class);
                if (suffixes.size() == 1 && suffixes.get(0).getImage().equals(".trim()")) {
                    return true;
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class, ASTMethodCall.class);
    }
    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getOperator() == ASTEqualityExpression.EQUAL && node.jjtGetChild(1) instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression rightPrimaryExpression = (ASTPrimaryExpression) node.jjtGetChild(1);
            if (rightPrimaryExpression.jjtGetChild(0) instanceof ASTPrimaryPrefix) {
                ASTPrimaryPrefix prefix = (ASTPrimaryPrefix) rightPrimaryExpression.jjtGetChild(0);
                if (prefix.jjtGetChild(0) instanceof ASTMethodCall) {
                    ASTMethodCall methodCall = (ASTMethodCall) prefix.jjtGetChild(0);
                    if (isTrimLengthCall(methodCall)) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }
    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isTrimIsEmptyCall(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    private boolean isTrimLengthCall(ASTMethodCall methodCall) {
        NodeStream<ASTPrimarySuffix> suffixes = methodCall.getMethodSuffixOrName().children(ASTPrimarySuffix.class);
        List<String> methodNames = suffixes.nodes().map(ASTPrimarySuffix::getImage).collect(Collectors.toList());
        return methodNames.size() == 2 && "trim".equals(methodNames.get(0)) && "length".equals(methodNames.get(1)) && methodCall.getType() == TypeSystem.STRING_TYPE;
    }
    private boolean isTrimIsEmptyCall(ASTMethodCall methodCall) {
        NodeStream<ASTPrimarySuffix> suffixes = methodCall.getMethodSuffixOrName().children(ASTPrimarySuffix.class);
        List<String> methodNames = suffixes.nodes().map(ASTPrimarySuffix::getImage).collect(Collectors.toList());
        return methodNames.size() == 2 && "trim".equals(methodNames.get(0)) && "isEmpty".equals(methodNames.get(1)) && methodCall.getType() == TypeSystem.STRING_TYPE;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTEqualityExpression.class);
    }
    
    @Override
    public Object visit(ASTEqualityExpression node, Object data) {
        if (node.getLeftOperand() instanceof ASTPrimaryExpression && node.getRightOperand() instanceof ASTLiteral) {
            ASTPrimaryExpression leftExpression = (ASTPrimaryExpression) node.getLeftOperand();
            ASTLiteral rightLiteral = (ASTLiteral) node.getRightOperand();
            
            if (rightLiteral.getType() == TypeSystem.STRING_TYPE && "0".equals(rightLiteral.getImage())) {
                if (isInefficientTrimLengthCheck(leftExpression)) {
                    addViolation(data, node);
                }
            }
        }
        
        if (node.getLeftOperand() instanceof ASTPrimaryExpression && node.getRightOperand() instanceof ASTPrimaryExpression) {
            ASTPrimaryExpression leftExpression = (ASTPrimaryExpression) node.getLeftOperand();
            ASTPrimaryExpression rightExpression = (ASTPrimaryExpression) node.getRightOperand();
            
            if (isInefficientTrimIsEmptyCheck(leftExpression) || isInefficientTrimIsEmptyCheck(rightExpression)) {
                addViolation(data, node);
            }
        }
        
        return super.visit(node, data);
    }

    private boolean isInefficientTrimLengthCheck(ASTPrimaryExpression expression) {
        return isMethodCall(expression, "trim", "length") && expression.getType() == TypeSystem.INT_TYPE;
    }

    private boolean isInefficientTrimIsEmptyCheck(ASTPrimaryExpression expression) {
        return isMethodCall(expression, "trim", "isEmpty") && expression.getType() == TypeSystem.BOOLEAN_TYPE;
    }

    private boolean isMethodCall(ASTPrimaryExpression expression, String firstMethod, String secondMethod) {
        NodeStream<ASTPrimarySuffix> suffixes = expression.children(ASTPrimarySuffix.class);
        List<ASTPrimarySuffix> suffixList = suffixes.toList();
        
        return suffixList.size() == 2 
            && suffixList.get(0).getMethodName().equals(firstMethod)
            && suffixList.get(1).getMethodName().equals(secondMethod);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if ("trim".equals(node.getName()) && node.getArguments().isEmpty()) {
            JavaNode parent = node.getParent();
            if (parent instanceof ASTMethodCall) {
                ASTMethodCall parentMethodCall = (ASTMethodCall) parent;
                String parentMethodName = parentMethodCall.getName();
                List<ASTMethodCall> trimCalls = parentMethodCall.jjtGetParent().findDescendantsOfType(ASTMethodCall.class)
                        .filter(n -> "trim".equals(n.getName()) && n.getArguments().isEmpty())
                        .toList();
                if (trimCalls.size() == 2) {
                    JavaNode grandParent = parentMethodCall.jjtGetParent();
                    if (grandParent instanceof ASTEqualityExpression) {
                        ASTEqualityExpression equalityExpression = (ASTEqualityExpression) grandParent;
                        if ("length".equals(parentMethodName) && equalityExpression.getImage().equals("==") && equalityExpression.jjtGetChild(1).getImage().equals("0")) {
                            addViolation(data, node);
                        }
                    } else if (grandParent instanceof ASTMethodCall) {
                        ASTMethodCall grandParentMethodCall = (ASTMethodCall) grandParent;
                        if ("isEmpty".equals(grandParentMethodCall.getName())) {
                            addViolation(data, node);
                        }
                    }
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you the rule description, please give me the complete checker code of the rule including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.

==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;
import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTBinaryExpression.class, ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTBinaryExpression node, Object data) {
        if (node.getOperator() == ASTBinaryExpression.Image.EQUALS) {
            List<ASTPrimaryExpression> primaryExpressions = node.findDescendantsOfType(ASTPrimaryExpression.class);
            if (primaryExpressions.size() == 2) {
                ASTPrimaryExpression left = primaryExpressions.get(0);
                ASTPrimaryExpression right = primaryExpressions.get(1);
                if (isTrimLengthZero(left) && isZero(right)) {
                    addViolation(data, node);
                } else if (isTrimLengthZero(right) && isZero(left)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        JMethodSymbol methodSymbol = node.getMethodSymbol();
        if (methodSymbol != null && methodSymbol.getName().equals("isEmpty")) {
            ASTMethodCall previousMethodCall = node.getFirstChildOfType(ASTMethodCall.class);
            if (previousMethodCall != null) {
                JMethodSymbol previousMethodSymbol = previousMethodCall.getMethodSymbol();
                if (previousMethodSymbol != null && previousMethodSymbol.getName().equals("trim")) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isTrimLengthZero(ASTPrimaryExpression node) {
        ASTMethodCall methodCall = node.getFirstChildOfType(ASTMethodCall.class);
        if (methodCall != null) {
            JMethodSymbol methodSymbol = methodCall.getMethodSymbol();
            ASTPrimaryExpression previousExpression = methodCall.getFirstChildOfType(ASTPrimaryExpression.class);
            if (methodSymbol != null && methodSymbol.getName().equals("length")) {
                ASTMethodCall trimMethodCall = previousExpression.getFirstChildOfType(ASTMethodCall.class);
                if (trimMethodCall != null) {
                    JMethodSymbol trimMethodSymbol = trimMethodCall.getMethodSymbol();
                    if (trimMethodSymbol != null && trimMethodSymbol.getName().equals("trim")) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean isZero(ASTPrimaryExpression node) {
        return node.hasDescendantMatching(ASTStereotype::isLiteral) && node.getFirstDescendantOfType(ASTStereotype.class).getImage().equals("0");
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 184.63498377799988 秒
