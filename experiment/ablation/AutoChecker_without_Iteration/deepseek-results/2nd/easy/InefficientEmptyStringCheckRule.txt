开始

========================================== Rule InefficientEmptyStringCheckRule ===========================================
一共 18 个测试用例
正例 8 个
反例 10 个
38
34
85
71
40
37
100
82
144
127
114
98
96
79
97
81
96
81
12
10
30
28
11
8
97
91
157
137
93
78
15
13
12
10
84
69
107
91
9
7
19
14
85
71
12
9
83
69
111
94
12
10
11
9
149
133
10
8
90
76
92
78
27
17
9
7
94
78
23
19
116
101
=========================logics=========================
1. Get all method calls in the code.
2. For each method call, check whether the method name is `trim`.
3. For each `trim` method call, check whether the return value is used in a comparison (`==` or `.equals()`).
4. For each comparison, check whether the right-hand side operand is `0` (for `length() == 0`) or `isEmpty()` is called.
5. If any of the above conditions are met, the test case violates the rule.

In this test case:
- There is no `trim` method call.
- The comparison `foo.length() == 0` does not involve `trim`.
- Therefore, the test case does not violate the rule.

The test case is compliant with the rule.
*Get all method calls in the code.* 匹配到的元操作或API：
query: Get all method calls in the code.
most similar API: get method name of method call
cosine Similarity: 0.8306456804275513
*For each method call, check whether the method name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each `trim` method call, check whether the return value is used in a comparison (`==` or `.equals()`).* 匹配到的元操作或API：
query: For each `trim` method call, check whether the return value is used in a comparison (`==` or `.equals()`).
most similar API: Check whether the method call equals
cosine Similarity: 0.8180227279663086
*For each comparison, check whether the right-hand side operand is `0` (for `length() == 0`) or `isEmpty()` is called.* 匹配到的元操作或API：
未匹配成功元操作或API
*If any of the above conditions are met, the test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the condition of the if statement.
2. Check whether the condition contains a method call.
3. Get the name of the called method.
4. Check whether the method name is `trim`.
5. Get the method caller of the `trim` method.
6. Check whether the method caller is a string type.
7. Get the return type of the `trim` method.
8. Check whether the return type is `String`.
9. Get the next method call after `trim`.
10. Check whether the method name is `length` or `isEmpty`.
11. Check whether the method caller is the result of the `trim` method.
12. Check whether the result of the method call is compared to `0` (for `length`) or used directly in a condition (for `isEmpty`).

If the condition of the if statement contains a call to `trim` followed by a call to `length` or `isEmpty` on the result of `trim`, and the result is compared to `0` or used directly in a condition, then this test case violates the rule.
*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the condition contains a method call.* 匹配到的元操作或API：
query: Check whether the condition contains a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8687794208526611
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the method name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller of the `trim` method.* 匹配到的元操作或API：
logic: Get the method caller of the `trim` method.
most similar meta operation: Get the method caller
cosine Similarity: 0.8803603053092957
*Check whether the method caller is a string type.* 匹配到的元操作或API：
logic: Check whether the method caller is a string type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9876717329025269
*Get the return type of the `trim` method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the return type is `String`.* 匹配到的元操作或API：
logic: Check whether the return type is `String`.
most similar meta operation: Check whether the return type of method is string type
cosine Similarity: 0.9312100410461426
*Get the next method call after `trim`.* 匹配到的元操作或API：
query: Get the next method call after `trim`.
most similar API: get next sibling of method call
cosine Similarity: 0.8521233201026917
*Check whether the method name is `length` or `isEmpty`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method caller is the result of the `trim` method.* 匹配到的元操作或API：
query: Check whether the method caller is the result of the `trim` method.
most similar API: Check whether the method call equals
cosine Similarity: 0.8009501695632935
*Check whether the result of the method call is compared to `0` (for `length`) or used directly in a condition (for `isEmpty`).* 匹配到的元操作或API：
query: Check whether the result of the method call is compared to `0` (for `length`) or used directly in a condition (for `isEmpty`).
most similar API: Check whether the method call equals
cosine Similarity: 0.8004094362258911
=========================logics=========================
1. Get the condition of the if statement.
2. Check whether the condition contains a method call.
3. Get the name of the called method.
4. Check whether the called method is `trim`.
5. Get the caller of the `trim` method.
6. Check whether the caller is a `String` type.
7. Check whether the result of `trim` is used in a comparison with an empty string (`""`).
8. Check whether the result of `trim` is used in a call to `length` or `isEmpty`.

In this test case:
- The condition of the if statement is `foo.trim().equals("")`.
- The called method is `equals`, not `length` or `isEmpty`.
- The `trim` method is called on a `String` type (`foo`).
- The result of `trim` is compared with an empty string (`""`).

Since the test case does not use `trim().length()` or `trim().isEmpty()`, it does not violate the rule. The number of violations is 0.
*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the condition contains a method call.* 匹配到的元操作或API：
query: Check whether the condition contains a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8687794208526611
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the called method is `trim`.* 匹配到的元操作或API：
query: Check whether the called method is `trim`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8012824058532715
*Get the caller of the `trim` method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the caller is a `String` type.* 匹配到的元操作或API：
logic: Check whether the caller is a `String` type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9358006715774536
*Check whether the result of `trim` is used in a comparison with an empty string (`""`).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim` is used in a call to `length` or `isEmpty`.* 匹配到的元操作或API：
未匹配成功元操作或API
79
65
=========================logics=========================
1. Get the condition of the while statement.
2. Check whether the condition contains a method call.
3. Get the name of the called method.
4. Check whether the method name is `trim`.
5. Get the method caller of the `trim` method.
6. Check whether the method caller is a String type.
7. Get the return type of the `trim` method.
8. Check whether the return type is String.
9. Get the next method call after `trim`.
10. Check whether the method name is `length` or `isEmpty`.
11. Check whether the method caller is the result of `trim()`.
12. Check whether the result of `length()` or `isEmpty()` is compared to `0` or used in a boolean condition.

If the condition of the while statement contains a call to `trim()` followed by `length()` or `isEmpty()` on a String, and the result is compared to `0` or used in a boolean condition, then this test case violates the rule.
*Get the condition of the while statement.* 匹配到的元操作或API：
logic: Get the condition of the while statement.
most similar meta operation: Get the condition of while statement
cosine Similarity: 0.9793691039085388
*Check whether the condition contains a method call.* 匹配到的元操作或API：
query: Check whether the condition contains a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8687794208526611
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the method name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller of the `trim` method.* 匹配到的元操作或API：
logic: Get the method caller of the `trim` method.
most similar meta operation: Get the method caller
cosine Similarity: 0.8803603053092957
*Check whether the method caller is a String type.* 匹配到的元操作或API：
logic: Check whether the method caller is a String type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9876717329025269
*Get the return type of the `trim` method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the return type is String.* 匹配到的元操作或API：
logic: Check whether the return type is String.
most similar meta operation: Check whether the return type of method is string type
cosine Similarity: 0.934654712677002
*Get the next method call after `trim`.* 匹配到的元操作或API：
query: Get the next method call after `trim`.
most similar API: get next sibling of method call
cosine Similarity: 0.8521233201026917
*Check whether the method name is `length` or `isEmpty`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method caller is the result of `trim()`.* 匹配到的元操作或API：
query: Check whether the method caller is the result of `trim()`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8004682064056396
*Check whether the result of `length()` or `isEmpty()` is compared to `0` or used in a boolean condition.* 匹配到的元操作或API：
未匹配成功元操作或API
99
82
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is `trim`.
3. Get the method caller.
4. Check whether the type of method caller is `String`.
5. Get the return type of called method.
6. Check whether the return type of called method is `String`.
7. Get the next method call after `trim`.
8. Check whether the name is `length` or `isEmpty`.
9. Check whether the result of `trim().length()` or `trim().isEmpty()` is used in a comparison (e.g., `== 0` or `== true`).
10. Check whether the result of `trim().length()` or `trim().isEmpty()` is assigned to a variable.

If the result of `trim().length()` or `trim().isEmpty()` is used in a comparison, then this test case violates the rule. If the result is assigned to a variable, it does not violate the rule. In this test case, the result of `trim().length()` is assigned to a variable, so it does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is `String`.* 匹配到的元操作或API：
logic: Check whether the type of method caller is `String`.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9760235548019409
*Get the return type of called method.* 匹配到的元操作或API：
logic: Get the return type of called method.
most similar meta operation: Get the return type of called method
cosine Similarity: 0.983582615852356
*Check whether the return type of called method is `String`.* 匹配到的元操作或API：
logic: Check whether the return type of called method is `String`.
most similar meta operation: Check whether the return type of called method is string
cosine Similarity: 0.9819179773330688
*Get the next method call after `trim`.* 匹配到的元操作或API：
query: Get the next method call after `trim`.
most similar API: get next sibling of method call
cosine Similarity: 0.8521233201026917
*Check whether the name is `length` or `isEmpty`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim().length()` or `trim().isEmpty()` is used in a comparison (e.g., `== 0` or `== true`).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim().length()` or `trim().isEmpty()` is assigned to a variable.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the right-hand side operand of the assignment expression.
2. Check whether the operand is an infix expression.
3. Get the operator of the infix expression.
4. Check whether the operator is `==`.
5. Get the left operand of the infix expression.
6. Check whether the left operand is a method call.
7. Get the name of the called method.
8. Check whether the name is `length`.
9. Get the method caller of the `length` method.
10. Check whether the method caller is a method call.
11. Get the name of the called method.
12. Check whether the name is `trim`.
13. Get the method caller of the `trim` method.
14. Check whether the method caller is a string type.
15. Get the right operand of the infix expression.
16. Check whether the right operand is a numeric literal.
17. Check whether the numeric literal is an int literal.
18. Get the value of the int literal.
19. Check whether the value is `0`.

If the right-hand side operand of the assignment expression is an infix expression with the `==` operator, the left operand is a `length` method call on the result of a `trim` method call on a string, and the right operand is an int literal with value `0`, then this test case violates the rule.
*Get the right-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right-hand side operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9076520800590515
*Check whether the operand is an infix expression.* 匹配到的元操作或API：
logic: Check whether the operand is an infix expression.
most similar meta operation: Check whether the operator in infix expression is ''
cosine Similarity: 0.9251353740692139
*Get the operator of the infix expression.* 匹配到的元操作或API：
logic: Get the operator of the infix expression.
most similar meta operation: Get the operator of infix expression
cosine Similarity: 0.9841877222061157
*Check whether the operator is `==`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the left operand of the infix expression.* 匹配到的元操作或API：
logic: Get the left operand of the infix expression.
most similar meta operation: Get the left operand of infix expression
cosine Similarity: 0.9858164191246033
*Check whether the left operand is a method call.* 匹配到的元操作或API：
query: Check whether the left operand is a method call.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8237406015396118
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the name is `length`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller of the `length` method.* 匹配到的元操作或API：
logic: Get the method caller of the `length` method.
most similar meta operation: Get the method caller
cosine Similarity: 0.8560362458229065
*Check whether the method caller is a method call.* 匹配到的元操作或API：
query: Check whether the method caller is a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8533448576927185
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller of the `trim` method.* 匹配到的元操作或API：
logic: Get the method caller of the `trim` method.
most similar meta operation: Get the method caller
cosine Similarity: 0.8803603053092957
*Check whether the method caller is a string type.* 匹配到的元操作或API：
logic: Check whether the method caller is a string type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9876717329025269
*Get the right operand of the infix expression.* 匹配到的元操作或API：
logic: Get the right operand of the infix expression.
most similar meta operation: Get the right operand of infix expression
cosine Similarity: 0.9822914600372314
*Check whether the right operand is a numeric literal.* 匹配到的元操作或API：
logic: Check whether the right operand is a numeric literal.
most similar meta operation: Check whether the numeric literal is double literal
cosine Similarity: 0.8874009251594543
*Check whether the numeric literal is an int literal.* 匹配到的元操作或API：
logic: Check whether the numeric literal is an int literal.
most similar meta operation: Check whether the numeric literal is int literal
cosine Similarity: 0.9875028133392334
*Get the value of the int literal.* 匹配到的元操作或API：
logic: Get the value of the int literal.
most similar meta operation: Get the value of int literal
cosine Similarity: 0.9746853113174438
*Check whether the value is `0`.* 匹配到的元操作或API：
query: Check whether the value is `0`.
most similar API: Check whether is zero checked
cosine Similarity: 0.8817785978317261
=========================logics=========================
1. Get the condition of the if statement or the expression being evaluated.
2. Check whether the condition involves a method call on a String object.
3. Get the name of the called method.
4. Check whether the called method is `trim`.
5. Get the next method call in the chain after `trim`.
6. Check whether the next method call is `length` or `isEmpty`.
7. Check whether the result of `length` or `isEmpty` is compared to `0` or used in a boolean expression.
8. If the condition involves `trim().length() == 0` or `trim().isEmpty()`, then this test case violates the rule.

In this test case:
- The condition is `foo.trim().length() == 1`.
- The method `trim` is called on the String `foo`.
- The next method call after `trim` is `length`.
- The result of `length` is compared to `1`, not `0`.

Since the comparison is to `1` and not `0`, this test case does not violate the rule. The number of violations is indeed `0`.
*Get the condition of the if statement or the expression being evaluated.* 匹配到的元操作或API：
logic: Get the condition of the if statement or the expression being evaluated.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9111081957817078
*Check whether the condition involves a method call on a String object.* 匹配到的元操作或API：
logic: Check whether the condition involves a method call on a String object.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.8792132139205933
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the called method is `trim`.* 匹配到的元操作或API：
query: Check whether the called method is `trim`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8012824058532715
*Get the next method call in the chain after `trim`.* 匹配到的元操作或API：
query: Get the next method call in the chain after `trim`.
most similar API: get next sibling of method call
cosine Similarity: 0.8579559326171875
*Check whether the next method call is `length` or `isEmpty`.* 匹配到的元操作或API：
query: Check whether the next method call is `length` or `isEmpty`.
most similar API: Check whether the method call equals
cosine Similarity: 0.806501030921936
*Check whether the result of `length` or `isEmpty` is compared to `0` or used in a boolean expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the condition involves `trim().length() == 0` or `trim().isEmpty()`, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of called method.
        2. Check whether the name is `trim`.
        3. Get the method caller.
        4. Check whether the type of method caller is `String`.
        5. Get the next method call after `trim`.
        6. Check whether the next method call is `length` or `isEmpty`.
        7. Check whether the result of `trim().length()` or `trim().isEmpty()` is directly compared to `0` or used in a condition.
        If the result of `trim().length()` or `trim().isEmpty()` is directly compared to `0` or used in a condition, then this test case violates the rule.

In this test case:
- The result of `foo.trim().length()` is passed as an argument to another method `foo`, and it is not directly compared to `0` or used in a condition. Therefore, this test case does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is `String`.* 匹配到的元操作或API：
logic: Check whether the type of method caller is `String`.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9760235548019409
*Get the next method call after `trim`.* 匹配到的元操作或API：
query: Get the next method call after `trim`.
most similar API: get next sibling of method call
cosine Similarity: 0.8521233201026917
*Check whether the next method call is `length` or `isEmpty`.* 匹配到的元操作或API：
query: Check whether the next method call is `length` or `isEmpty`.
most similar API: Check whether the method call equals
cosine Similarity: 0.806501030921936
*Check whether the result of `trim().length()` or `trim().isEmpty()` is directly compared to `0` or used in a condition.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the condition of the if statement or the expression in the boolean assignment.
2. Check whether the condition or expression contains a method call to `trim()`.
3. Check whether the method call to `trim()` is followed by a call to `length()` or `isEmpty()`.
4. Check whether the result of `trim().length()` or `trim().isEmpty()` is compared to `0` or used in a boolean expression.
If the condition or expression contains `trim().length() == 0` or `trim().isEmpty()`, then this test case violates the rule.

In the provided test case:
1. The expression `foo.trim().length() == (2 - 1)` is found.
2. The expression contains a method call to `trim()`.
3. The method call to `trim()` is followed by a call to `length()`.
4. The result of `trim().length()` is compared to `(2 - 1)`, which is equivalent to `1`.

Since the expression `foo.trim().length() == (2 - 1)` does not compare the result of `trim().length()` to `0`, this test case does not violate the rule. The number of violations is indeed 0.
*Get the condition of the if statement or the expression in the boolean assignment.* 匹配到的元操作或API：
logic: Get the condition of the if statement or the expression in the boolean assignment.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.8682462573051453
*Check whether the condition or expression contains a method call to `trim()`.* 匹配到的元操作或API：
query: Check whether the condition or expression contains a method call to `trim()`.
most similar API: Check whether the method call is expression
cosine Similarity: 0.838556706905365
*Check whether the method call to `trim()` is followed by a call to `length()` or `isEmpty()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim().length()` or `trim().isEmpty()` is compared to `0` or used in a boolean expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*The expression `foo.trim().length() == (2 - 1)` is found.* 匹配到的元操作或API：
未匹配成功元操作或API
*The expression contains a method call to `trim()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*The method call to `trim()` is followed by a call to `length()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*The result of `trim().length()` is compared to `(2 - 1)`, which is equivalent to `1`.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is isEmpty.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the method call chain.
6. Check whether the method call chain contains trim method.
If the method call chain contains trim method and the called method name is isEmpty and the method caller is an object of String, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is isEmpty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the method call chain.* 匹配到的元操作或API：
query: Get the method call chain.
most similar API: get method name of method call
cosine Similarity: 0.855171263217926
*Check whether the method call chain contains trim method.* 匹配到的元操作或API：
未匹配成功元操作或API
77
63
97
80
96
79
84
70
=========================logics=========================
1. Get all method calls in the test case.
2. For each method call:
   a. Get the name of the called method.
   b. Check whether the name is `isEmpty`.
   c. Get the method caller.
   d. Check whether the type of method caller is `String`.
   e. Get the method call chain of the caller.
   f. Check whether the method call chain contains `trim()`.
3. If a method call satisfies the above conditions, it violates the rule.

In this test case:
- The first violation is `Arrays.toString(foo.toCharArray()).trim().isEmpty()`:
  - The method name is `isEmpty`.
  - The caller type is `String`.
  - The method call chain contains `trim()`.
- The second violation is `String.valueOf(i).trim().isEmpty()`:
  - The method name is `isEmpty`.
  - The caller type is `String`.
  - The method call chain contains `trim()`.

Thus, this test case violates the rule twice.
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method call:* 匹配到的元操作或API：
未匹配成功元操作或API
*If a method call satisfies the above conditions, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all method calls in the code.
2. For each method call:
   a. Get the name of the called method.
   b. Check whether the name is `isEmpty`.
   c. If the name is `isEmpty`, get the method caller.
   d. Check whether the method caller is a method call.
   e. If the method caller is a method call, get the name of the called method.
   f. Check whether the name is `trim`.
   g. If the name is `trim`, get the method caller.
   h. Check whether the method caller is a string type.
   i. If the method caller is a string type, this is a violation of the rule.

In this test case:
- The first violation is `Arrays.toString(foo.toCharArray()).trim().isEmpty()`.
- The second violation is `String.valueOf(2).trim().isEmpty()`.

Both cases involve calling `trim().isEmpty()` on a string, which is inefficient for checking if a string is blank. Thus, the test case violates the rule twice.
*Get all method calls in the code.* 匹配到的元操作或API：
query: Get all method calls in the code.
most similar API: get method name of method call
cosine Similarity: 0.8306456804275513
*For each method call:* 匹配到的元操作或API：
未匹配成功元操作或API
97
81
94
78
95
78
119
103
89
74
94
78
87
72
=========================logics=========================
1. Get all method calls in the test case.
2. For each method call:
   - Get the name of the called method.
   - Check whether the name is `trim`.
   - If the name is `trim`, get the next method call in the chain.
   - Check whether the next method call is `length` or `isEmpty`.
   - If the next method call is `length` or `isEmpty`, check whether the result is compared to `0` or used in a condition.
3. If any method call chain matches `trim().length() == 0` or `trim().isEmpty()`, then this test case violates the rule.

In this test case, there are no method calls matching `trim().length() == 0` or `trim().isEmpty()`, so it does not violate the rule.
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method call:* 匹配到的元操作或API：
未匹配成功元操作或API
*If any method call chain matches `trim().length() == 0` or `trim().isEmpty()`, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
117
102
95
78
111
96
=========================logics=========================
1. Get all method calls in the test case.
2. Check whether any method call is `trim()`.
3. Check whether any method call is `length()`.
4. Check whether any method call is `isEmpty()`.
5. Check whether any method call is chained with `trim()` and `length()` or `trim()` and `isEmpty()`.
6. Check whether the result of the chained method call is compared to `0` or used in a condition.

If any of the above checks indicate the presence of `trim().length() == 0` or `trim().isEmpty()`, then the test case violates the rule. Otherwise, it does not violate the rule.

In this test case, there are no method calls to `trim()`, `length()`, or `isEmpty()`, and no chained method calls or comparisons involving these methods. Therefore, the test case does not violate the rule.
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any method call is `trim()`.* 匹配到的元操作或API：
query: Check whether any method call is `trim()`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8105552792549133
*Check whether any method call is `length()`.* 匹配到的元操作或API：
query: Check whether any method call is `length()`.
most similar API: Check whether the method call equals
cosine Similarity: 0.827614963054657
*Check whether any method call is `isEmpty()`.* 匹配到的元操作或API：
query: Check whether any method call is `isEmpty()`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8202650547027588
*Check whether any method call is chained with `trim()` and `length()` or `trim()` and `isEmpty()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of the chained method call is compared to `0` or used in a condition.* 匹配到的元操作或API：
query: Check whether the result of the chained method call is compared to `0` or used in a condition.
most similar API: Check whether the method call equals
cosine Similarity: 0.8004375696182251
106
91
99
82
156
136
=========================logics=========================
1. Get the condition of the if statement.
        2. Check whether the condition contains a method call.
        3. Get the name of the called method.
        4. Check whether the method name is `trim`.
        5. Get the caller of the `trim` method.
        6. Check whether the caller is a string type.
        7. Get the return type of the `trim` method.
        8. Check whether the return type is a string type.
        9. Get the next method call after `trim`.
        10. Check whether the method name is `length` or `isEmpty`.
        11. Check whether the caller of `length` or `isEmpty` is the result of `trim`.
        12. Check whether the result of `length` or `isEmpty` is compared to `0` or used in a boolean context.

If the condition of the if statement contains a call to `trim` followed by `length` or `isEmpty`, and the result is compared to `0` or used in a boolean context, then this test case violates the rule. 

In this test case:
- The condition `val.trim().length() > 0` involves `trim` followed by `length`, which is an inefficient way to check if a string is blank. This violates the rule.
*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the condition contains a method call.* 匹配到的元操作或API：
query: Check whether the condition contains a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8687794208526611
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the method name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the caller of the `trim` method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the caller is a string type.* 匹配到的元操作或API：
logic: Check whether the caller is a string type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9409966468811035
*Get the return type of the `trim` method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the return type is a string type.* 匹配到的元操作或API：
logic: Check whether the return type is a string type.
most similar meta operation: Check whether the return type of method is string type
cosine Similarity: 0.949841320514679
*Get the next method call after `trim`.* 匹配到的元操作或API：
query: Get the next method call after `trim`.
most similar API: get next sibling of method call
cosine Similarity: 0.8521233201026917
*Check whether the method name is `length` or `isEmpty`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the caller of `length` or `isEmpty` is the result of `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `length` or `isEmpty` is compared to `0` or used in a boolean context.* 匹配到的元操作或API：
未匹配成功元操作或API
89
74
89
74
77
63
=========================logics=========================
1. Get all method calls in the code.
2. For each method call, check if the method name is `isEmpty`.
3. For each `isEmpty` method call, get the method caller.
4. Check if the method caller is a method call with the name `trim`.
5. For each `trim` method call, get the method caller.
6. Check if the method caller is a method call (e.g., `get()`) or a variable (e.g., `bar`).
7. If the method caller is a method call or a variable, check if the `trim().isEmpty()` pattern is used in an `if` condition.
8. Count the number of violations where `trim().isEmpty()` is used in an `if` condition.

Based on the test case, the violations are:
1. `get().trim().isEmpty()`
2. `this.get().trim().isEmpty()`
3. `bar.trim().isEmpty()`
4. `bar.toString().trim().isEmpty()`

Each of these violates the rule because they use the inefficient `trim().isEmpty()` pattern to check if a string is blank. The number of violations is 4.
*Get all method calls in the code.* 匹配到的元操作或API：
query: Get all method calls in the code.
most similar API: get method name of method call
cosine Similarity: 0.8306456804275513
*For each method call, check if the method name is `isEmpty`.* 匹配到的元操作或API：
query: For each method call, check if the method name is `isEmpty`.
most similar API: Check whether the method is void
cosine Similarity: 0.8080292344093323
*For each `isEmpty` method call, get the method caller.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check if the method caller is a method call with the name `trim`.* 匹配到的元操作或API：
query: Check if the method caller is a method call with the name `trim`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8075698614120483
*For each `trim` method call, get the method caller.* 匹配到的元操作或API：
logic: For each `trim` method call, get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.867919385433197
*Check if the method caller is a method call (e.g., `get()`) or a variable (e.g., `bar`).* 匹配到的元操作或API：
query: Check if the method caller is a method call (e.g., `get()`) or a variable (e.g., `bar`).
most similar API: Check whether is getter or setter call
cosine Similarity: 0.8358651399612427
*If the method caller is a method call or a variable, check if the `trim().isEmpty()` pattern is used in an `if` condition.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of violations where `trim().isEmpty()` is used in an `if` condition.* 匹配到的元操作或API：
未匹配成功元操作或API
*`get().trim().isEmpty()`* 匹配到的元操作或API：
未匹配成功元操作或API
*`this.get().trim().isEmpty()`* 匹配到的元操作或API：
未匹配成功元操作或API
*`bar.trim().isEmpty()`* 匹配到的元操作或API：
未匹配成功元操作或API
*`bar.toString().trim().isEmpty()`* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all method calls in the test case.
2. Check whether the method call is `trim()`.
3. Check whether the return type of `trim()` is `String`.
4. Check whether the result of `trim()` is followed by a call to `length()`.
5. Check whether the result of `length()` is compared to `0` using `==`.
6. Check whether the method call is `isEmpty()`.
7. Check whether the result of `trim()` is followed by a call to `isEmpty()`.
8. Check whether the result of `trim()` is called on a method result, a field, or a local variable.
9. Check whether the result of `trim()` is called on `toString()`.

If any of the following conditions are met, the test case violates the rule:
- `trim().length() == 0` is used to check if a string is blank.
- `trim().isEmpty()` is used to check if a string is blank.
- `trim()` is called on a method result, a field, or a local variable, and the result is followed by `length() == 0` or `isEmpty()`.
- `trim()` is called on `toString()`, and the result is followed by `length() == 0` or `isEmpty()`.

In this test case, there are 4 violations of the rule:
1. `get().trim().length() == 0`
2. `this.get().trim().length() == 0`
3. `bar.trim().length() == 0`
4. `bar.toString().trim().length() == 0`
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method call is `trim()`.* 匹配到的元操作或API：
query: Check whether the method call is `trim()`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8045022487640381
*Check whether the return type of `trim()` is `String`.* 匹配到的元操作或API：
logic: Check whether the return type of `trim()` is `String`.
most similar meta operation: Check whether the return type of called method is string
cosine Similarity: 0.8527207374572754
*Check whether the result of `trim()` is followed by a call to `length()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `length()` is compared to `0` using `==`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method call is `isEmpty()`.* 匹配到的元操作或API：
query: Check whether the method call is `isEmpty()`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8213329315185547
*Check whether the result of `trim()` is followed by a call to `isEmpty()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim()` is called on a method result, a field, or a local variable.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim()` is called on `toString()`.* 匹配到的元操作或API：
未匹配成功元操作或API
*`get().trim().length() == 0`* 匹配到的元操作或API：
未匹配成功元操作或API
*`this.get().trim().length() == 0`* 匹配到的元操作或API：
未匹配成功元操作或API
*`bar.trim().length() == 0`* 匹配到的元操作或API：
未匹配成功元操作或API
*`bar.toString().trim().length() == 0`* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all method calls in the test case.
2. For each method call, check whether the method name is `trim`.
3. For each `trim` method call, get the method call or expression that uses its result.
4. Check whether the result of `trim` is used in a method call to `isEmpty` or in an expression comparing `length` to `0`.
5. If the result of `trim` is used in `isEmpty` or `length == 0`, mark it as a violation.

### Granular Checks:
1. Get all method calls in the test case.
2. Check whether the method name is `trim` for each method call.
3. For each `trim` method call:
   - Get the method call or expression that uses its result.
   - Check whether the result is used in a call to `isEmpty`.
   - Check whether the result is used in an expression comparing `length` to `0`.
4. Count the number of violations where `trim` is followed by `isEmpty` or `length == 0`.

### Expected Violations:
- `bar.trim().isEmpty()`
- `bar.trim().length() == 0`
- `get().trim().isEmpty()`
- `get().trim().length() == 0`
- `this.get().trim().isEmpty()`
- `this.get().trim().length() == 0`

### Conclusion:
The test case contains **6 violations** of the rule, as each instance of `trim` followed by `isEmpty` or `length == 0` is inefficient and should be avoided.
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method call, check whether the method name is `trim`.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each `trim` method call, get the method call or expression that uses its result.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the result of `trim` is used in a method call to `isEmpty` or in an expression comparing `length` to `0`.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the result of `trim` is used in `isEmpty` or `length == 0`, mark it as a violation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method name is `trim` for each method call.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each `trim` method call:* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of violations where `trim` is followed by `isEmpty` or `length == 0`.* 匹配到的元操作或API：
未匹配成功元操作或API
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// test is ok, ok
public class Foo {
    void bar() {
        String foo = "foo";
        if (foo.length() == 0) {
            // this is bad
        }
    }
}
```
2. This is a negative test case
```java
// String.trim.length is called, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        if (foo.trim().length() == 0) {
            // this is bad
        }
    }
}
```
3. This is a positive test case
```java
// String.trim.length not is called, ok
public class Foo {
    void bar() {
        String foo = "foo";
        if (foo.trim().equals("")) {
        }
    }
}
```
4. This is a negative test case
```java
// String.trim.length is called, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        while (foo.trim().length() == 0) {
        }
    }
}
```
5. This is a positive test case
```java
// String.trim.length is called, assigned to int, ok
public class Foo {
    void bar() {
        String foo = "foo";
        int i = foo.trim().length();
    }
}
```
6. This is a negative test case
```java
// String.trim.length is called, assigned to boolean, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo.trim().length() == 0;
    }
}
```
7. This is a positive test case
```java
// Using trim.length to find the length and compare to 1, OK
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo.trim().length() == 1;
    }
}
```
8. This is a positive test case
```java
// Passes trim().length() and 0 to another method
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo(foo.trim().length(), 0);
    }
}
```
9. This is a positive test case
```java
// Compares the length against a mathematical function
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo(foo.trim().length() == (2 - 1));
    }
}
```
10. This is a negative test case
```java
// String.trim().isEmpty() is called, should have failed
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b = foo.trim().isEmpty();
    }
}
```
11. This is a negative test case
```java
// String.trim().isEmpty() is called after a chain call, should have failed
import java.util.Arrays;
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b =  Arrays.toString(foo.toCharArray()).trim().isEmpty();
        int i = 2;
        b =  String.valueOf(i).trim().isEmpty();
    }
}
```
12. This is a negative test case
```java
// String.trim().isEmpty() is called after a chain call, should have failed twice
import java.util.Arrays;
public class Foo {
    void bar() {
        String foo = "foo";
        boolean b =  Arrays.toString(foo.toCharArray()).trim().isEmpty();
        b =  String.valueOf(2).trim().isEmpty();
    }
}
```
13. This is a positive test case
```java
// Verify no NPE is thrown
public class Foo extends SomeUnresolvedClass {
    void bar(String[] logLevels, String[] guardMethods) {
        if (super.guardStmtByLogLevel.isEmpty() && logLevels.length > 0 && guardMethods.length > 0) {
            configureGuards(logLevels, guardMethods);
        }
    }
}
```
14. This is a positive test case
```java
// Avoid NPE for pattern matching instanceof
public class PatternMatchingInstanceof {
    private String s = "other string";

    public void test() {
        Object obj = "abc";
        if (obj instanceof String s) {
            System.out.println("a) obj == s: " + (obj == s)); // true
        }
    }
}
```
15. This is a negative test case
```java
// [java] InefficientEmptyStringCheck false negative in anonymous class #1224
import javax.swing.*;
            import java.awt.event.KeyEvent;
            import java.awt.event.KeyListener;

            public class Main {
                public static void main(String[] args) {
                    final JPanel jPanel = new JPanel();
                    jPanel.addKeyListener(new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent e) {
                            final String val = "";
                            if (val.trim().length() > 0) {
                                System.out.println("Non-empty string.");
                            }
                        }

                        @Override
                        public void keyPressed(KeyEvent e) {
                        }

                        @Override
                        public void keyReleased(KeyEvent e) {
                        }
                    });
                }
            }
```
16. This is a negative test case
```java
// String.trim.isEmpty is called on method result, should have failed
package net.sourceforge.pmd.lang.java.rule.performance.inefficientemptystringcheck;
public class StringTrimIsEmpty {
    String get() {
        return "foo";
    }
    void bar() {
        if (get().trim().isEmpty()) {
            // violation
        }
        if (this.get().trim().isEmpty()) {
            // violation
        }

        String bar = get();
        if (bar.trim().isEmpty()) {
            // violation
        }
        if (bar.toString().trim().isEmpty()) {
            // violation
        }
    }
}
```
17. This is a negative test case
```java
// String.trim.length is called on method result, should have failed
package net.sourceforge.pmd.lang.java.rule.performance.inefficientemptystringcheck;
public class StringTrimLength {
    String get() {
        return "foo";
    }
    void bar() {
        if (get().trim().length() == 0) {
            // violation missing
        }
        if (this.get().trim().length() == 0) {
            // violation missing
        }

        String bar = get();
        if (bar.trim().length() == 0) {
            // violation already detected
        }
        if (bar.toString().trim().length() == 0) {
            // violation missing
        }
    }
}
```
18. This is a negative test case
```java
// String.trim.isEmpty and length called in method argument
package net.sourceforge.pmd.lang.java.rule.performance.inefficientemptystringcheck;
public class StringTrimMethodArgument {
    public String get() {
        return "foo";
    }
    public void bar() {
        String bar = "foo";
        System.out.println(bar.trim().isEmpty()); // violation missing
        System.out.println(bar.trim().length() == 0);
        System.out.println(get().trim().isEmpty()); // violation missing
        System.out.println(get().trim().length() == 0); // violation missing
        System.out.println(this.get().trim().isEmpty()); // violation missing
        System.out.println(this.get().trim().length() == 0); // violating missing
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
4. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
5. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.ast.Node getNextSibling()
6. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
7. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
8. net.sourceforge.pmd.lang.java.ast.ASTInfixExpression: public net.sourceforge.pmd.lang.java.ast.BinaryOp getOperator()
9. net.sourceforge.pmd.lang.java.ast.ASTInfixExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getLeftOperand()
10. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
11. net.sourceforge.pmd.lang.java.ast.ASTInfixExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
12. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isDoubleLiteral()
13. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isIntLiteral()
14. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getValueAsInt()
15. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isZeroChecked(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Return true if the given expression is enclosed in a zero check. The expression must evaluate to a natural number (ie >= 0), so that {@code e < 1} actually means {@code e == 0}. @param e Expression
16. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isVoid(), //Returns true if the result type of this method is {@code void}.
17. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isGetterOrSetterCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)

1.  //Check whether the method caller is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallerStringType(ASTMethodCall node){
    return TypeTestUtil.isA(String.class, node.getQualifier());
}
```
2.  //Check whether the return type of method is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isReturnValueStringType(ASTMethodDeclaration method) {
    return TypeTestUtil.isA(String.class, method.getResultTypeNode());
}
```
3.  //Get the return type of called method
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getReturnType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType();
}
```
4.  //Check whether the return type of called method is string
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isReturnStringType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return TypeTestUtil.isA(String.class, m.getReturnType());
}
```
5.  //Check whether the operator in infix expression is ''
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils;
public boolean isInfixExpressionWithOperator(ASTInfixExpression node, BinaryOp op){
    //enum BinaryOp{CONDITIONAL_OR("||"), CONDITIONAL_AND("&&"), OR("|"), XOR("^"), AND("&"), EQ("=="), NE("!="), LE("<="), GE(">="), GT(">"), LT("<"), INSTANCEOF("instanceof"), LEFT_SHIFT("<<"), RIGHT_SHIFT(">>"), UNSIGNED_RIGHT_SHIFT(">>>"), ADD("+"), SUB("-"), MUL("*"), DIV("/"), MOD("%")}
    return JavaAstUtils.isInfixExprWithOperator(node, op);
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule {
    public InefficientEmptyStringCheckRule() {
        super(ASTIfStatement.class, ASTWhileStatement.class, ASTAssignmentExpression.class, ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        checkCondition(node.getCondition(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        checkCondition(node.getCondition(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        checkCondition(node.getRightOperand(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        if (isMethodCallerStringType(node) && (node.getMethodName().equals("isEmpty") || node.getMethodName().equals("length"))) {
            if (node.getQualifier() instanceof ASTMethodCall) {
                ASTMethodCall qualifier = (ASTMethodCall) node.getQualifier();
                if (qualifier.getMethodName().equals("trim") && isMethodCallerStringType(qualifier)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private void checkCondition(ASTExpression condition, Object data) {
        if (condition instanceof ASTInfixExpression) {
            ASTInfixExpression infix = (ASTInfixExpression) condition;
            if (JavaAstUtils.isInfixExprWithOperator(infix, BinaryOp.EQ)) {
                checkInfixExpression(infix, data);
            }
        }
    }

    private void checkInfixExpression(ASTInfixExpression infix, Object data) {
        ASTExpression left = infix.getLeftOperand();
        ASTExpression right = infix.getRightOperand();

        if (left instanceof ASTMethodCall) {
            checkMethodCall((ASTMethodCall) left, right, data);
        } else if (right instanceof ASTMethodCall) {
            checkMethodCall((ASTMethodCall) right, left, data);
        }
    }

    private void checkMethodCall(ASTMethodCall methodCall, ASTExpression other, Object data) {
        if (methodCall.getMethodName().equals("length") && methodCall.getQualifier() instanceof ASTMethodCall) {
            ASTMethodCall qualifier = (ASTMethodCall) methodCall.getQualifier();
            if (qualifier.getMethodName().equals("trim") && isMethodCallerStringType(qualifier)) {
                if (other instanceof ASTNumericLiteral && ((ASTNumericLiteral) other).getValueAsInt() == 0) {
                    addViolation(data, methodCall);
                }
            }
        }
    }

    private boolean isMethodCallerStringType(ASTMethodCall node) {
        return TypeTestUtil.isA(String.class, node.getQualifier());
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 17431.287766218185 秒
