开始

========================================== Rule AvoidInstantiatingObjectsInLoopsRule ===========================================
一共 23 个测试用例
正例 14 个
反例 9 个
92
78
85
71
12
10
30
28
107
91
11
9
94
78
83
69
90
76
97
91
97
81
116
101
9
7
40
37
10
8
106
91
96
79
38
34
149
133
19
14
144
127
23
19
157
137
11
8
12
10
15
13
82
68
85
71
9
7
12
10
12
9
27
17
=========================logics=========================
1. Get the loop statement in the method.
2. Check whether the loop is a for loop.
3. Get the body of the loop.
4. Check whether the body contains a new object creation expression.
5. Get the type of the object created by the constructor call.
6. Check whether the type of the object is a class type.
If the loop body contains a new object creation expression, then this test case violates the rule.
*Get the loop statement in the method.* 匹配到的元操作或API：
query: Get the loop statement in the method.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8049269914627075
*Check whether the loop is a for loop.* 匹配到的元操作或API：
query: Check whether the loop is a for loop.
most similar API: Check whether the for statement equals
cosine Similarity: 0.8174847960472107
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8687449097633362
*Check whether the body contains a new object creation expression.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the type of the object created by the constructor call.* 匹配到的元操作或API：
logic: Get the type of the object created by the constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9769417643547058
*Check whether the type of the object is a class type.* 匹配到的元操作或API：
logic: Check whether the type of the object is a class type.
most similar meta operation: Check whether the type of object is x class type
cosine Similarity: 0.9154262542724609
79
65
107
91
=========================logics=========================
1. Get all loop statements in the method.
2. For each loop statement, get all statements inside the loop body.
3. Check whether any statement inside the loop body is a constructor call.
4. If a constructor call is found inside a loop, then this test case violates the rule.

In this test case:
- The `while(true)` loop contains a statement `String a = new String();`, which is a constructor call.
- Therefore, this test case violates the rule. The number of violations is 1.
*Get all loop statements in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, get all statements inside the loop body.* 匹配到的元操作或API：
query: For each loop statement, get all statements inside the loop body.
most similar API: get body of while statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8314188718795776
*Check whether any statement inside the loop body is a constructor call.* 匹配到的元操作或API：
query: Check whether any statement inside the loop body is a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8396989107131958
*If a constructor call is found inside a loop, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
80
65
=========================logics=========================
1. Get all loop statements in the method.
2. For each loop statement, get all statements within the loop body.
3. Check whether any statement within the loop body is a constructor call.
4. If a constructor call is found within the loop body, check whether it creates a new object.
5. If a new object is created within the loop body, then this test case violates the rule.

In this test case, the `do-while` loop contains a statement `String a = new String();`, which creates a new `String` object within the loop. Therefore, this test case violates the rule.
*Get all loop statements in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, get all statements within the loop body.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any statement within the loop body is a constructor call.* 匹配到的元操作或API：
query: Check whether any statement within the loop body is a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8452669978141785
*If a constructor call is found within the loop body, check whether it creates a new object.* 匹配到的元操作或API：
query: If a constructor call is found within the loop body, check whether it creates a new object.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8329252004623413
*If a new object is created within the loop body, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the loop statement in the method.
2. Check whether the loop is a do-while loop.
3. Get the body of the loop.
4. Check whether the body contains an object creation expression (e.g., `new String()`).
5. Get the type of object created by the constructor call.
6. Check whether the object creation expression is within the loop body.

If the loop body contains an object creation expression (e.g., `new String()`), then this test case violates the rule.
*Get the loop statement in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the loop is a do-while loop.* 匹配到的元操作或API：
query: Check whether the loop is a do-while loop.
most similar API: Check whether the do statement equals
cosine Similarity: 0.813605010509491
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of do statement
cosine Similarity: 0.8035649657249451
*Check whether the body contains an object creation expression (e.g., `new String()`).* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the type of object created by the constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by the constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.983032763004303
*Check whether the object creation expression is within the loop body.* 匹配到的元操作或API：
query: Check whether the object creation expression is within the loop body.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8213527202606201
77
63
=========================logics=========================
1. Get the loop statement in the method.
2. Check whether the loop contains a throw statement.
3. Get the expression in the throw statement.
4. Check whether the expression is a new object creation (constructor call).
5. If the loop contains a throw statement and the expression is not a new object creation, then this test case does not violate the rule.

Since the loop contains a throw statement and the expression is not a new object creation, this test case does not violate the rule. The number of violations is 0.
*Get the loop statement in the method.* 匹配到的元操作或API：
query: Get the loop statement in the method.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8049269914627075
*Check whether the loop contains a throw statement.* 匹配到的元操作或API：
query: Check whether the loop contains a throw statement.
most similar API: Check whether the throw statement equals
cosine Similarity: 0.8981672525405884
*Get the expression in the throw statement.* 匹配到的元操作或API：
logic: Get the expression in the throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9856711030006409
*Check whether the expression is a new object creation (constructor call).* 匹配到的元操作或API：
query: Check whether the expression is a new object creation (constructor call).
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8968040943145752
*If the loop contains a throw statement and the expression is not a new object creation, then this test case does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
77
63
=========================logics=========================
1. Get the loop statement in the method.
2. Check whether the loop contains a return statement.
3. Get the expression in the return statement.
4. Check whether the expression is a new object creation (constructor call).
5. If the loop contains a return statement with a new object creation, it does not violate the rule.

Since the test case contains a return statement with a new object creation within the loop, it does not violate the rule. The number of violations is 0.
*Get the loop statement in the method.* 匹配到的元操作或API：
query: Get the loop statement in the method.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8049269914627075
*Check whether the loop contains a return statement.* 匹配到的元操作或API：
query: Check whether the loop contains a return statement.
most similar API: Check whether the return statement equals
cosine Similarity: 0.8877671360969543
*Get the expression in the return statement.* 匹配到的元操作或API：
logic: Get the expression in the return statement.
most similar meta operation: Get the return expression in return statement
cosine Similarity: 0.9655367136001587
*Check whether the expression is a new object creation (constructor call).* 匹配到的元操作或API：
query: Check whether the expression is a new object creation (constructor call).
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8968040943145752
*If the loop contains a return statement with a new object creation, it does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
79
65
77
63
79
65
93
78
97
80
116
101
85
71
=========================logics=========================
1. Get the loop statement in the method.
2. Check whether the loop is a while loop.
3. Get the body of the while loop.
4. Check whether the body contains a try-catch block.
5. Get the catch block of the try-catch statement.
6. Check whether the catch block contains an assignment expression.
7. Get the right-hand side operand of the assignment expression.
8. Check whether the right-hand side operand is a constructor call.
9. Get the type of object created by the constructor call.
10. Check whether the type is StringBuffer.

If a new object (e.g., `new StringBuffer()`) is created within the loop, then this test case violates the rule. However, in this case, the object creation occurs in the catch block, which is not part of the loop's main body, so it does not violate the rule. The description "ok 3" and "0 violations" are correct.
*Get the loop statement in the method.* 匹配到的元操作或API：
query: Get the loop statement in the method.
most similar API: get body of while statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.820429801940918
*Check whether the loop is a while loop.* 匹配到的元操作或API：
query: Check whether the loop is a while loop.
most similar API: Check whether the while statement equals
cosine Similarity: 0.8612951040267944
*Get the body of the while loop.* 匹配到的元操作或API：
query: Get the body of the while loop.
most similar API: get body of while statement
cosine Similarity: 0.9468631744384766
*Check whether the body contains a try-catch block.* 匹配到的元操作或API：
query: Check whether the body contains a try-catch block.
most similar API: get body of try statement
cosine Similarity: 0.8125630617141724
*Get the catch block of the try-catch statement.* 匹配到的元操作或API：
logic: Get the catch block of the try-catch statement.
most similar meta operation: Get a catch branch of try statement
cosine Similarity: 0.850435197353363
*Check whether the catch block contains an assignment expression.* 匹配到的元操作或API：
query: Check whether the catch block contains an assignment expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8714617490768433
*Get the right-hand side operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right-hand side operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9076520800590515
*Check whether the right-hand side operand is a constructor call.* 匹配到的元操作或API：
query: Check whether the right-hand side operand is a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8456283211708069
*Get the type of object created by the constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by the constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.983032763004303
*Check whether the type is StringBuffer.* 匹配到的元操作或API：
未匹配成功元操作或API
87
72
96
80
96
79
94
78
119
103
96
81
82
68
114
98
95
78
84
70
=========================logics=========================
1. Get all loop statements in the code.
2. For each loop statement, check whether it is a for-each loop.
3. For each for-each loop, get the right-hand side of the loop initialization (the collection or array being iterated over).
4. Check whether the right-hand side of the loop initialization involves a new object instantiation (e.g., `new ArrayList<String>()` or `new File("subdirectory").list()`).
5. If the right-hand side of the loop initialization involves a new object instantiation, increment the violation count.

In this test case:
- There are two for-each loops.
- The first loop initializes with `new ArrayList<String>()`, which is a new object instantiation.
- The second loop initializes with `new File("subdirectory").list()`, which also involves a new object instantiation.

Thus, the number of violations in this test case is **2**, not 0 as stated in the description. The test case violates the rule.
*Get all loop statements in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether it is a for-each loop.* 匹配到的元操作或API：
query: For each loop statement, check whether it is a for-each loop.
most similar API: Check whether the foreach statement equals
cosine Similarity: 0.8065549731254578
*For each for-each loop, get the right-hand side of the loop initialization (the collection or array being iterated over).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the right-hand side of the loop initialization involves a new object instantiation (e.g., `new ArrayList<String>()` or `new File("subdirectory").list()`).* 匹配到的元操作或API：
未匹配成功元操作或API
*If the right-hand side of the loop initialization involves a new object instantiation, increment the violation count.* 匹配到的元操作或API：
未匹配成功元操作或API
99
82
100
82
93
78
94
79
88
73
94
78
111
94
77
63
94
79
97
81
77
63
=========================logics=========================
1. Get all loop statements in the code.
2. For each loop statement, get all statements inside the loop body.
3. For each statement inside the loop body, check whether it is an object creation expression (i.e., a `new` expression).
4. If an object creation expression is found, check whether the object is assigned to a variable or passed as a parameter.
5. If the object is assigned to a variable or passed as a parameter, check whether the object creation expression has different parameters in each iteration of the loop.

In this test case:
- The loop is a `for` loop.
- Inside the loop body, there is an object creation expression `new Dimension(i, i)`.
- The object is assigned to an array element `arr[i]`.
- The parameters of the object creation expression (`i, i`) change in each iteration of the loop.

Since the object creation expression has different parameters in each iteration and the object is assigned to a variable, this test case does not violate the rule. The number of violations is 0.
*Get all loop statements in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, get all statements inside the loop body.* 匹配到的元操作或API：
query: For each loop statement, get all statements inside the loop body.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8661582469940186
*For each statement inside the loop body, check whether it is an object creation expression (i.e., a `new` expression).* 匹配到的元操作或API：
未匹配成功元操作或API
*If an object creation expression is found, check whether the object is assigned to a variable or passed as a parameter.* 匹配到的元操作或API：
query: If an object creation expression is found, check whether the object is assigned to a variable or passed as a parameter.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8117382526397705
*If the object is assigned to a variable or passed as a parameter, check whether the object creation expression has different parameters in each iteration of the loop.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loop statements in the test case.
2. For each loop statement:
   a. Get all statements within the loop body.
   b. For each statement within the loop body:
      i. Check whether the statement is an assignment expression.
      ii. If it is an assignment expression:
          - Get the right-hand side operand of the assignment expression.
          - Check whether the right-hand side operand is a constructor call (new object creation).
          - If it is a constructor call, check whether the left-hand side operand is an array or a collection.
          - If the left-hand side operand is not an array or a collection, then this test case violates the rule.

In this test case:
- The `checkArray` method contains a loop where new `Car` objects are created and assigned to an array. This is allowed because the assignment is to an array.
- The `checkCollection` method contains a loop where new `Car` objects are created and added to a collection. This is allowed because the assignment is to a collection.

Since both cases involve assignments to arrays or collections, the test case does not violate the rule. The number of violations is 0.
*Get all loop statements in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement:* 匹配到的元操作或API：
query: For each loop statement:
most similar API: for each of statement expression list
cosine Similarity: 0.8271892070770264
125
108
84
69
117
102
=========================logics=========================
1. Get all loop statements in the code.
2. For each loop statement, check whether it contains a constructor call.
3. Get the type of object created by the constructor call.
4. Check whether the constructor call is within the loop body.
5. Check whether the loop contains a break statement.

If a constructor call is found within a loop body and the loop does not contain a break statement, then this test case violates the rule. In this case, the `Message event = new Message(element);` statement inside the outer for-loop violates the rule because it creates a new object within a loop without a break statement.
*Get all loop statements in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether it contains a constructor call.* 匹配到的元操作或API：
query: For each loop statement, check whether it contains a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8648724555969238
*Get the type of object created by the constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by the constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.983032763004303
*Check whether the constructor call is within the loop body.* 匹配到的元操作或API：
query: Check whether the constructor call is within the loop body.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8520429134368896
*Check whether the loop contains a break statement.* 匹配到的元操作或API：
query: Check whether the loop contains a break statement.
most similar API: Check whether the break statement equals
cosine Similarity: 0.906059205532074
=========================logics=========================
1. Get the condition of the while loop.
2. Check whether the condition contains a new object creation expression.
3. Get the type of object created by the constructor call.
4. Check whether the type of object is a valid class type (e.g., `String`).

If the condition of the while loop contains a new object creation expression (e.g., `new String()`), then this test case violates the rule. 

In this case, the test case violates the rule because a new `String` object is created within the loop condition.
*Get the condition of the while loop.* 匹配到的元操作或API：
logic: Get the condition of the while loop.
most similar meta operation: Get the condition of while statement
cosine Similarity: 0.9551070332527161
*Check whether the condition contains a new object creation expression.* 匹配到的元操作或API：
query: Check whether the condition contains a new object creation expression.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8165695071220398
*Get the type of object created by the constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by the constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.983032763004303
*Check whether the type of object is a valid class type (e.g., `String`).* 匹配到的元操作或API：
logic: Check whether the type of object is a valid class type (e.g., `String`).
most similar meta operation: Check whether the type of object is x class type
cosine Similarity: 0.8707186579704285
156
136
=========================logics=========================
1. Get all loops in the code.
2. For each loop, get all statements inside the loop body.
3. Check whether any statement is a constructor call (e.g., `new String()`).
4. If a constructor call is found within a loop, check whether it is inside an anonymous class.
5. Count the number of constructor calls within loops that are not inside anonymous classes.

If the count of violating constructor calls is greater than 0, the test case violates the rule. In this case, the test case violates the rule twice (once in the `Inner` class and once in the anonymous class).
*Get all loops in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get all statements inside the loop body.* 匹配到的元操作或API：
query: For each loop, get all statements inside the loop body.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8594652414321899
*Check whether any statement is a constructor call (e.g., `new String()`).* 匹配到的元操作或API：
query: Check whether any statement is a constructor call (e.g., `new String()`).
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8432807326316833
*If a constructor call is found within a loop, check whether it is inside an anonymous class.* 匹配到的元操作或API：
query: If a constructor call is found within a loop, check whether it is inside an anonymous class.
most similar API: Check whether the constructor call is anonymous class
cosine Similarity: 0.9036514163017273
*Count the number of constructor calls within loops that are not inside anonymous classes.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loops in the code.
2. For each loop, get all statements within the loop body.
3. Check whether any statement creates a new object using the `new` keyword.
4. If a new object is created within the loop, check whether it is a collection or list initialization (e.g., `new ArrayList<>()`).
5. If the new object creation is not related to collection or list initialization, it violates the rule.

In this test case:
- The loop is a `for` loop.
- The loop body contains the statement `thisIsACar.add(new Car());`.
- The `new Car()` creates a new object within the loop.
- However, this is a valid use case for adding objects to a collection within a loop, so it does not violate the rule.

Conclusion: The test case does not violate the rule. The number of violations is 0.
*Get all loops in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get all statements within the loop body.* 匹配到的元操作或API：
query: For each loop, get all statements within the loop body.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8598793148994446
*Check whether any statement creates a new object using the `new` keyword.* 匹配到的元操作或API：
未匹配成功元操作或API
*If a new object is created within the loop, check whether it is a collection or list initialization (e.g., `new ArrayList<>()`).* 匹配到的元操作或API：
未匹配成功元操作或API
*If the new object creation is not related to collection or list initialization, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loop statements in the code.
2. For each loop statement, check whether there is a constructor call inside the loop body.
3. If a constructor call is found inside a loop, check whether it creates a new object.
4. If a new object is created within a loop, then this test case violates the rule.

In this test case:
- The `for` loop contains the statement `thisIsACar.add(new Car());`.
- The `new Car()` is a constructor call that creates a new object within the loop.
- Therefore, this test case violates the rule.
*Get all loop statements in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether there is a constructor call inside the loop body.* 匹配到的元操作或API：
query: For each loop statement, check whether there is a constructor call inside the loop body.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8266292810440063
*If a constructor call is found inside a loop, check whether it creates a new object.* 匹配到的元操作或API：
query: If a constructor call is found inside a loop, check whether it creates a new object.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8486884832382202
*If a new object is created within a loop, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
93
78
=========================logics=========================
1. Get the loop statement.
2. Check whether the loop is a for-each loop.
3. Get the body of the loop.
4. Check whether the body contains a new array creation expression.
5. Get the type of the new array.
6. Check whether the type of the new array is a class type.
If the loop body contains a new array creation expression and the type of the new array is a class type, then this test case violates the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8191356062889099
*Check whether the loop is a for-each loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8633920550346375
*Check whether the body contains a new array creation expression.* 匹配到的元操作或API：
query: Check whether the body contains a new array creation expression.
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8342970609664917
*Get the type of the new array.* 匹配到的元操作或API：
query: Get the type of the new array.
most similar API: get type of array type
cosine Similarity: 0.9191934466362
*Check whether the type of the new array is a class type.* 匹配到的元操作或API：
logic: Check whether the type of the new array is a class type.
most similar meta operation: Check whether the array is x class type
cosine Similarity: 0.9092990159988403
=========================logics=========================
1. Get the loop statement.
2. Check whether the loop is a for-each loop.
3. Get the loop variable of the for-each loop.
4. Get the expression used to initialize the loop variable.
5. Check whether the expression is a new array creation expression.
6. Check whether the new array creation expression is inside the loop body.
If the new array creation expression is used to initialize the loop variable of a for-each loop and is not inside the loop body, then this test case does not violate the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8191356062889099
*Check whether the loop is a for-each loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the loop variable of the for-each loop.* 匹配到的元操作或API：
logic: Get the loop variable of the for-each loop.
most similar meta operation: Get the loop variable of for-each loop
cosine Similarity: 0.9766618013381958
*Get the expression used to initialize the loop variable.* 匹配到的元操作或API：
query: Get the expression used to initialize the loop variable.
most similar API: get loop variables: Returns the variable IDS corresponding to variables declared in the init clause of the loop.
cosine Similarity: 0.8245398998260498
*Check whether the expression is a new array creation expression.* 匹配到的元操作或API：
query: Check whether the expression is a new array creation expression.
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8720208406448364
*Check whether the new array creation expression is inside the loop body.* 匹配到的元操作或API：
query: Check whether the new array creation expression is inside the loop body.
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8407169580459595
89
74
=========================logics=========================
1. Get all loops in the test case.
2. For each loop, get all method calls within the loop.
3. Check whether any method call is a constructor call (i.e., creates a new object).
4. Check whether the newly created object is added to a collection or assigned to an array field.
5. If a new object is created within a loop and is not added to a collection or assigned to an array field, then the test case violates the rule.

In this test case:
- The first loop creates a new `String` object and adds it to the `field` collection.
- The second loop creates a new `String` object and assigns it to an element in the `arrayField` array.

Since the newly created objects are added to a collection and assigned to an array field, this test case does not violate the rule. The number of violations is 0.
*Get all loops in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get all method calls within the loop.* 匹配到的元操作或API：
query: For each loop, get all method calls within the loop.
most similar API: get method name of method call
cosine Similarity: 0.8001967668533325
*Check whether any method call is a constructor call (i.e., creates a new object).* 匹配到的元操作或API：
query: Check whether any method call is a constructor call (i.e., creates a new object).
most similar API: Check whether the constructor call is qualified instance creation
cosine Similarity: 0.8654343485832214
*Check whether the newly created object is added to a collection or assigned to an array field.* 匹配到的元操作或API：
未匹配成功元操作或API
*If a new object is created within a loop and is not added to a collection or assigned to an array field, then the test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loops in the method.
2. For each loop, get all statements within the loop body.
3. Check whether any statement creates a new object using the `new` keyword.
4. If a new object is created within the loop, check whether it is wrapped in a method call (e.g., `ByteBuffer.wrap`).
5. If the new object is wrapped in a method call, check whether the method call is part of a collection operation (e.g., adding to a list).
6. If the new object is created within the loop but is wrapped in a method call and used in a collection operation, it does not violate the rule.

In this test case:
- The loop iterates over the `bytes` array.
- Inside the loop, a new byte array `new byte[]{b}` is created.
- The new byte array is wrapped in a `ByteBuffer.wrap` method call.
- The result of `ByteBuffer.wrap` is added to the `buffers` list.

Since the new object creation is wrapped in a method call and used in a collection operation, it does not violate the rule. Therefore, the number of violations is 0.
*Get all loops in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get all statements within the loop body.* 匹配到的元操作或API：
query: For each loop, get all statements within the loop body.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8461307883262634
*Check whether any statement creates a new object using the `new` keyword.* 匹配到的元操作或API：
未匹配成功元操作或API
*If a new object is created within the loop, check whether it is wrapped in a method call (e.g., `ByteBuffer.wrap`).* 匹配到的元操作或API：
未匹配成功元操作或API
*If the new object is wrapped in a method call, check whether the method call is part of a collection operation (e.g., adding to a list).* 匹配到的元操作或API：
未匹配成功元操作或API
*If the new object is created within the loop but is wrapped in a method call and used in a collection operation, it does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the loop statement in the code.
2. Check whether the loop is a for loop.
3. Get the body of the loop.
4. Check whether the body contains an object instantiation (e.g., `new StringBuilder()`).
5. Check whether the instantiated object is assigned to an array element (e.g., `data[i] = ...`).
6. Check whether the instantiated object is temporary (e.g., used only within the loop and not stored elsewhere).
7. If the instantiated object is temporary and assigned to an array element, it does not violate the rule.

In this test case:
- The loop is a `for` loop.
- The body contains an instantiation of `StringBuilder`.
- The instantiated object is assigned to an array element (`data[i]`).
- The instantiated object is temporary (used only within the loop).

Since the object is temporary and assigned to an array element, this test case does not violate the rule. The description "ok 11" and the number of violations being 0 are correct.
*Get the loop statement in the code.* 匹配到的元操作或API：
query: Get the loop statement in the code.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8135801553726196
*Check whether the loop is a for loop.* 匹配到的元操作或API：
query: Check whether the loop is a for loop.
most similar API: Check whether the for statement equals
cosine Similarity: 0.8174847960472107
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8687449097633362
*Check whether the body contains an object instantiation (e.g., `new StringBuilder()`).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the instantiated object is assigned to an array element (e.g., `data[i] = ...`).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the instantiated object is temporary (e.g., used only within the loop and not stored elsewhere).* 匹配到的元操作或API：
未匹配成功元操作或API
*If the instantiated object is temporary and assigned to an array element, it does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loops in the code.
2. For each loop, check if there is any object creation (e.g., `new` keyword).
3. Check whether the object creation is an array allocation (e.g., `new int[]`).
4. Check whether the array allocation is part of an assignment statement (e.g., `arr[i] = new int[] { i };`).
5. If the array allocation is part of an assignment statement, it is not considered a violation of the rule.

In this test case:
- The loop contains an array allocation (`new int[] { i }`).
- The array allocation is part of an assignment statement (`arr[i] = new int[] { i };`).
- Therefore, this test case does not violate the rule.
*Get all loops in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, check if there is any object creation (e.g., `new` keyword).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the object creation is an array allocation (e.g., `new int[]`).* 匹配到的元操作或API：
query: Check whether the object creation is an array allocation (e.g., `new int[]`).
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8381121158599854
*Check whether the array allocation is part of an assignment statement (e.g., `arr[i] = new int[] { i };`).* 匹配到的元操作或API：
query: Check whether the array allocation is part of an assignment statement (e.g., `arr[i] = new int[] { i };`).
most similar API: Check whether the array allocation equals
cosine Similarity: 0.8641119003295898
*If the array allocation is part of an assignment statement, it is not considered a violation of the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loop statements in the class.
2. For each loop statement, get all object creation expressions within the loop body.
3. Check whether the object creation expression is creating an array.
4. Check whether the array creation expression is directly returned or assigned to a variable followed by a `break` statement.
5. If the array creation expression is directly returned or assigned to a variable followed by a `break`, it does not violate the rule. Otherwise, it violates the rule.

In this test case:
- The first loop contains a `return` statement with an array creation expression, which does not violate the rule.
- The second loop contains an array creation expression assigned to a variable followed by a `break` statement, which also does not violate the rule.

Thus, the test case adheres to the rule, and the number of violations is 0.
*Get all loop statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, get all object creation expressions within the loop body.* 匹配到的元操作或API：
query: For each loop statement, get all object creation expressions within the loop body.
most similar API: for each of statement expression list
cosine Similarity: 0.8204677104949951
*Check whether the object creation expression is creating an array.* 匹配到的元操作或API：
query: Check whether the object creation expression is creating an array.
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8431629538536072
*Check whether the array creation expression is directly returned or assigned to a variable followed by a `break` statement.* 匹配到的元操作或API：
query: Check whether the array creation expression is directly returned or assigned to a variable followed by a `break` statement.
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8185225129127502
*If the array creation expression is directly returned or assigned to a variable followed by a `break`, it does not violate the rule. Otherwise, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loops in the method.
2. For each loop, get all statements within the loop body.
3. Check whether any statement creates a new object (e.g., using the `new` keyword).
4. If a new object is created within the loop, check whether it is an array creation expression.
5. If the array creation expression is part of a method call (e.g., `data.toArray(new String[0])`), it is not considered a violation of the rule.

In this test case:
- The loop iterates over `args`.
- Within the loop, the statement `this.consume(data.toArray(new String[0]));` is executed.
- The array creation `new String[0]` is part of the `toArray` method call, which is a valid use case and does not violate the rule.

Thus, this test case does not violate the rule.
*Get all loops in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get all statements within the loop body.* 匹配到的元操作或API：
query: For each loop, get all statements within the loop body.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8461307883262634
*Check whether any statement creates a new object (e.g., using the `new` keyword).* 匹配到的元操作或API：
未匹配成功元操作或API
*If a new object is created within the loop, check whether it is an array creation expression.* 匹配到的元操作或API：
query: If a new object is created within the loop, check whether it is an array creation expression.
most similar API: Check whether the array allocation is expression
cosine Similarity: 0.8409647941589355
*If the array creation expression is part of a method call (e.g., `data.toArray(new String[0])`), it is not considered a violation of the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: New objects can not be created within loops;

The following are the test cases of the rule:
1. This is a negative test case
```java
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}
```
2. This is a negative test case
```java
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}
```
3. This is a negative test case
```java
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
4. This is a negative test case
```java
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
5. This is a positive test case
```java
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}
```
6. This is a positive test case
```java
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}
```
7. This is a positive test case
```java
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}
```
8. This is a positive test case
```java
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList<String>()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}
```
9. This is a positive test case
```java
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}
```
10. This is a positive test case
```java
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i < cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection<Car> cars = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}
```
11. This is a negative test case
```java
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List<Function<Message, Boolean>> filters;

    public Message(Message message) {}

    private SortedSet<Message> getFilteredMessages(List<Message> messages) {
        final SortedSet<Message> result = new TreeSet<>(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function<Message, Boolean> filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}
```
12. This is a negative test case
```java
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() > 0) {
        }
    }
}
```
13. This is a negative test case
```java
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}
```
14. This is a positive test case
```java
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
15. This is a negative test case
```java
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
16. This is a negative test case
```java
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}
```
17. This is a positive test case
```java
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}
```
18. This is a positive test case
```java
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List<String> field = new ArrayList<>();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i < args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}
```
19. This is a positive test case
```java
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List<ByteBuffer> buffers = new ArrayList<>();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}
```
20. This is a positive test case
```java
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}
```
21. This is a positive test case
```java
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i < 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}
```
22. This is a positive test case
```java
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i < 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i < 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}
```
23. This is a positive test case
```java
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List<String> data = new ArrayList<>();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
2. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public boolean equals(java.lang.Object)
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public boolean equals(java.lang.Object)
7. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that will be run while the guard evaluates to true.
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
9. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
11. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
12. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
13. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
15. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTCatchClause> getCatchClauses()
16. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
17. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
18. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: public void forEach(java.util.function.Consumer)
20. net.sourceforge.pmd.lang.java.ast.ASTBreakStatement: public boolean equals(java.lang.Object)
21. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
22. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isAnonymousClass(), //Returns true if this expression defines a body, which is compiled to an anonymous class. If this method returns false.
23. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
24. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
25. net.sourceforge.pmd.lang.java.ast.ASTArrayType: public java.lang.Class<Class<?> getType()
26. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()
27. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public net.sourceforge.pmd.lang.ast.NodeStream<ASTVariableDeclaratorId> getLoopVariables(net.sourceforge.pmd.lang.java.ast.ASTForStatement), //Returns the variable IDS corresponding to variables declared in the init clause of the loop.
28. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
29. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isQualifiedInstanceCreation(), //Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.
30. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean equals(java.lang.Object)

1.  //Check whether the type of object is x class type
```java
import net.sourceforge.pmd.lang.java.ast.ASTConstructorCall;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isVariableAccessStringType(ASTConstructorCall node){
    return TypeTestUtil.isA(x.class, node);
}
```
2.  //Check whether the array is x class type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayClassType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(x.class, classOrInterfaceType);
        }
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class, ASTForeachStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForeachStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    private void checkLoopBody(ASTStatement body, Object data) {
        if (body == null) {
            return;
        }

        body.descendants(ASTConstructorCall.class).forEach(constructorCall -> {
            if (!isAllowedConstructorCall(constructorCall)) {
                addViolation(data, constructorCall);
            }
        });

        body.descendants(ASTArrayAllocation.class).forEach(arrayAllocation -> {
            if (!isAllowedArrayAllocation(arrayAllocation)) {
                addViolation(data, arrayAllocation);
            }
        });
    }

    private boolean isAllowedConstructorCall(ASTConstructorCall constructorCall) {
        if (constructorCall.getParent() instanceof ASTThrowStatement) {
            return true;
        }
        if (constructorCall.getParent() instanceof ASTReturnStatement) {
            return true;
        }
        if (constructorCall.getParent() instanceof ASTAssignmentExpression) {
            ASTAssignmentExpression assignment = (ASTAssignmentExpression) constructorCall.getParent();
            if (assignment.getRightOperand() == constructorCall) {
                return true;
            }
        }
        if (constructorCall.getParent() instanceof ASTMethodCall) {
            return true;
        }
        return false;
    }

    private boolean isAllowedArrayAllocation(ASTArrayAllocation arrayAllocation) {
        if (arrayAllocation.getParent() instanceof ASTReturnStatement) {
            return true;
        }
        if (arrayAllocation.getParent() instanceof ASTAssignmentExpression) {
            ASTAssignmentExpression assignment = (ASTAssignmentExpression) arrayAllocation.getParent();
            if (assignment.getRightOperand() == arrayAllocation) {
                return true;
            }
        }
        if (arrayAllocation.getParent() instanceof ASTMethodCall) {
            return true;
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 1184.2298140525818 秒
