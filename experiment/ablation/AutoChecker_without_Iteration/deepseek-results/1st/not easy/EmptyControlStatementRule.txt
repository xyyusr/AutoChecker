开始

========================================== Rule EmptyControlStatementRule ===========================================
一共 31 个测试用例
正例 9 个
反例 22 个
92
78
85
71
12
10
30
28
107
91
11
9
94
78
90
76
97
91
97
81
9
7
40
37
10
8
77
63
96
79
96
81
38
34
149
133
19
14
79
65
93
78
144
127
23
19
157
137
116
101
11
8
12
10
15
13
85
71
9
7
85
71
12
10
12
9
27
17
=========================logics=========================
1. Get the body of the try statement.
2. Check whether the body of the try statement is empty.
3. Get the body of the catch clause.
4. Check whether the body of the catch clause is empty.
5. Get the body of the finally clause (if it exists).
6. Check whether the body of the finally clause is empty (if it exists).

If the body of the try statement is empty, then this test case violates the rule. The number of violations in this test case is 1.
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Get the body of the catch clause.* 匹配到的元操作或API：
logic: Get the body of the catch clause.
most similar meta operation: Get a parameter of catch clause
cosine Similarity: 0.8557884693145752
*Check whether the body of the catch clause is empty.* 匹配到的元操作或API：
query: Check whether the body of the catch clause is empty.
most similar API: Check whether the catch clause equals
cosine Similarity: 0.8271180987358093
*Get the body of the finally clause (if it exists).* 匹配到的元操作或API：
query: Get the body of the finally clause (if it exists).
most similar API: get finally clause of try statement
cosine Similarity: 0.8526455163955688
*Check whether the body of the finally clause is empty (if it exists).* 匹配到的元操作或API：
未匹配成功元操作或API
99
82
83
69
116
101
111
94
78
63
=========================logics=========================
1. Get the body of the try statement.
2. Check whether the body of the try statement is empty.
3. Get the finally clause of the try statement.
4. Check whether the body of the finally clause is empty.
5. Get the body of the method.
6. Check whether the method body contains any other control statements (switch, synchronized, if, loops, etc.).
7. Check whether any initializers or blocks used as statements are empty.
If the body of the try statement is empty, then this test case violates the rule. The number of violations is 1.
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Get the finally clause of the try statement.* 匹配到的元操作或API：
logic: Get the finally clause of the try statement.
most similar meta operation: Get the finally branch of try statement
cosine Similarity: 0.8998424410820007
*Check whether the body of the finally clause is empty.* 匹配到的元操作或API：
query: Check whether the body of the finally clause is empty.
most similar API: get body of finally clause
cosine Similarity: 0.868161678314209
*Get the body of the method.* 匹配到的元操作或API：
query: Get the body of the method.
most similar API: get body of method
cosine Similarity: 0.9667365550994873
*Check whether the method body contains any other control statements (switch, synchronized, if, loops, etc.).* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any initializers or blocks used as statements are empty.* 匹配到的元操作或API：
query: Check whether any initializers or blocks used as statements are empty.
most similar API: Check whether the block is empty
cosine Similarity: 0.8483888506889343
=========================logics=========================
1. Get the finally branch of the try statement.
2. Check whether the finally branch is empty.
If the finally branch of the try statement is empty, then this test case violates the rule.
*Get the finally branch of the try statement.* 匹配到的元操作或API：
logic: Get the finally branch of the try statement.
most similar meta operation: Get the finally branch of try statement
cosine Similarity: 0.9862933158874512
*Check whether the finally branch is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the finally branch of the try statement.
2. Check whether the finally branch is empty.
3. Get the body of the try statement.
4. Check whether the body of the try statement is empty.
5. Get the body of the finally branch.
6. Check whether the body of the finally branch is empty.
If the body of the try statement or the finally branch is empty, then this test case violates the rule. Otherwise, it does not violate the rule. In this test case, the body of the try statement is not empty, and the body of the finally branch is not empty, so it does not violate the rule.
*Get the finally branch of the try statement.* 匹配到的元操作或API：
logic: Get the finally branch of the try statement.
most similar meta operation: Get the finally branch of try statement
cosine Similarity: 0.9862933158874512
*Check whether the finally branch is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Get the body of the finally branch.* 匹配到的元操作或API：
query: Get the body of the finally branch.
most similar API: get body of finally clause: Returns the body of this finally clause.
cosine Similarity: 0.8446674942970276
*Check whether the body of the finally branch is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the body of the try statement.
2. Check whether the body of the try statement is empty.
3. Get the finally clause of the try statement.
4. Check whether the finally clause of the try statement is empty.
If the body of the try statement or the finally clause is empty, then this test case violates the rule. In this case, both the try block and the finally block are empty, so the test case violates the rule twice.
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Get the finally clause of the try statement.* 匹配到的元操作或API：
logic: Get the finally clause of the try statement.
most similar meta operation: Get the finally branch of try statement
cosine Similarity: 0.8998424410820007
*Check whether the finally clause of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the finally clause of the try statement is empty.
most similar API: get finally clause of try statement
cosine Similarity: 0.8729100823402405
106
91
106
91
82
68
109
93
94
78
96
80
=========================logics=========================
1. Get the body of the try statement.
2. Check whether the body of the try statement is empty.
3. Check whether the try statement is a try-with-resources statement.
4. Get the resource name in the try-with-resources statement.
5. Check whether the resource name is "ignored".

If the body of the try statement is empty and the try statement is not a try-with-resources statement or the resource name is not "ignored", then this test case violates the rule. In this case, the test case violates the rule because the body of the try-with-resources statement is empty and the resource name is not "ignored".
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Check whether the try statement is a try-with-resources statement.* 匹配到的元操作或API：
query: Check whether the try statement is a try-with-resources statement.
most similar API: Check whether the try statement is try with resources
cosine Similarity: 0.9599140286445618
*Get the resource name in the try-with-resources statement.* 匹配到的元操作或API：
query: Get the resource name in the try-with-resources statement.
most similar API: get resources of try statement
cosine Similarity: 0.8417260050773621
*Check whether the resource name is "ignored".* 匹配到的元操作或API：
未匹配成功元操作或API
119
103
84
70
=========================logics=========================
1. Get the body of the try statement.
2. Check whether the body of the try statement is empty.
3. Check whether the try statement is a try-with-resources statement.
4. Get the resource list of the try-with-resources statement.
5. Check whether the resource list is not empty.
6. Check whether the body of the try statement is empty.

If the try statement is a try-with-resources statement with a non-empty resource list and an empty body, then this test case violates the rule.
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Check whether the try statement is a try-with-resources statement.* 匹配到的元操作或API：
query: Check whether the try statement is a try-with-resources statement.
most similar API: Check whether the try statement is try with resources
cosine Similarity: 0.9599140286445618
*Get the resource list of the try-with-resources statement.* 匹配到的元操作或API：
query: Get the resource list of the try-with-resources statement.
most similar API: get resources of try statement: Returns the node for the resource list. This is null if this is not a try-with-resources.
cosine Similarity: 0.8625781536102295
*Check whether the resource list is not empty.* 匹配到的元操作或API：
query: Check whether the resource list is not empty.
most similar API: Check whether the resource list is empty
cosine Similarity: 0.9581260085105896
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
=========================logics=========================
1. Get the body of the try statement.
2. Check whether the body of the try statement is empty.
3. Get the resource list of the try-with-resources statement.
4. Check whether the resource list is empty.
5. Get the body of the finally clause (if any).
6. Check whether the body of the finally clause is empty.
7. Get the body of the switch statement.
8. Check whether the body of the switch statement is empty.
9. Get the body of the synchronized statement.
10. Check whether the body of the synchronized statement is empty.
11. Get the body of the if statement.
12. Check whether the body of the if statement is empty.
13. Get the body of the loop statement (while, for, do-while).
14. Check whether the body of the loop statement is empty.
15. Get the body of the initializer or block used as a statement.
16. Check whether the body of the initializer or block is empty.

In this test case, the try-with-resources statement has a non-empty resource list and an empty body. Since the rule description specifies that empty bodies are reported as violations, but the test case description indicates that this is an acceptable case ("ok 2"), the test case does not violate the rule. Therefore, the number of violations in this test case is 0.
*Get the body of the try statement.* 匹配到的元操作或API：
query: Get the body of the try statement.
most similar API: get body of try statement
cosine Similarity: 0.9787788391113281
*Check whether the body of the try statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the try statement is empty.
most similar API: get body of try statement
cosine Similarity: 0.8486953377723694
*Get the resource list of the try-with-resources statement.* 匹配到的元操作或API：
query: Get the resource list of the try-with-resources statement.
most similar API: get resources of try statement: Returns the node for the resource list. This is null if this is not a try-with-resources.
cosine Similarity: 0.8625781536102295
*Check whether the resource list is empty.* 匹配到的元操作或API：
query: Check whether the resource list is empty.
most similar API: Check whether the resource list is empty
cosine Similarity: 0.9851408004760742
*Get the body of the finally clause (if any).* 匹配到的元操作或API：
query: Get the body of the finally clause (if any).
most similar API: get finally clause of try statement
cosine Similarity: 0.8464450240135193
*Check whether the body of the finally clause is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of the switch statement.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the body of the switch statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the switch statement is empty.
most similar API: Check whether the class or interface body is empty
cosine Similarity: 0.8094784021377563
*Get the body of the synchronized statement.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the body of the synchronized statement is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of the if statement.* 匹配到的元操作或API：
query: Get the body of the if statement.
most similar API: get body of try statement
cosine Similarity: 0.8455290198326111
*Check whether the body of the if statement is empty.* 匹配到的元操作或API：
logic: Check whether the body of the if statement is empty.
most similar meta operation: Check whether the string is empty
cosine Similarity: 0.8603639006614685
*Get the body of the loop statement (while, for, do-while).* 匹配到的元操作或API：
query: Get the body of the loop statement (while, for, do-while).
most similar API: get body of try statement
cosine Similarity: 0.8022884130477905
*Check whether the body of the loop statement is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of the initializer or block used as a statement.* 匹配到的元操作或API：
query: Get the body of the initializer or block used as a statement.
most similar API: get block body of lambda expression
cosine Similarity: 0.814827561378479
*Check whether the body of the initializer or block is empty.* 匹配到的元操作或API：
query: Check whether the body of the initializer or block is empty.
most similar API: Check whether the block is empty
cosine Similarity: 0.8658367395401001
89
74
79
65
=========================logics=========================
1. Get the body of the synchronized statement.
2. Check whether the body of the synchronized statement is empty.
If the body of the synchronized statement is empty, then this test case violates the rule.
*Get the body of the synchronized statement.* 匹配到的元操作或API：
query: Get the body of the synchronized statement.
most similar API: get body of synchronized statement
cosine Similarity: 0.978999674320221
*Check whether the body of the synchronized statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the synchronized statement is empty.
most similar API: Check whether the synchronized statement equals
cosine Similarity: 0.8556152582168579
=========================logics=========================
1. Get the body of the synchronized statement.
2. Check whether the body of the synchronized statement is empty.
If the body of the synchronized statement is empty, then this test case violates the rule. Otherwise, it does not violate the rule. In this test case, the body of the synchronized statement contains the statement `int x = 2;`, so it does not violate the rule.
*Get the body of the synchronized statement.* 匹配到的元操作或API：
query: Get the body of the synchronized statement.
most similar API: get body of synchronized statement
cosine Similarity: 0.978999674320221
*Check whether the body of the synchronized statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the synchronized statement is empty.
most similar API: Check whether the synchronized statement equals
cosine Similarity: 0.8556152582168579
90
76
=========================logics=========================
1. Get the body of the switch statement.
2. Check whether the body of the switch statement is empty.
If the body of the switch statement is empty, then this test case violates the rule.
*Get the body of the switch statement.* 匹配到的元操作或API：
query: Get the body of the switch statement.
most similar API: get text of switch statement
cosine Similarity: 0.8815826773643494
*Check whether the body of the switch statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the switch statement is empty.
most similar API: Check whether the switch statement equals
cosine Similarity: 0.81386798620224
=========================logics=========================
1. Get the body of the method.
2. Check whether the body contains an empty block.
3. Check whether the empty block is used as a statement (for scoping).
If the body of the method contains an empty block used as a statement, then this test case violates the rule.
*Get the body of the method.* 匹配到的元操作或API：
query: Get the body of the method.
most similar API: get body of method
cosine Similarity: 0.9667365550994873
*Check whether the body contains an empty block.* 匹配到的元操作或API：
query: Check whether the body contains an empty block.
most similar API: Check whether the block is empty
cosine Similarity: 0.8996579647064209
*Check whether the empty block is used as a statement (for scoping).* 匹配到的元操作或API：
query: Check whether the empty block is used as a statement (for scoping).
most similar API: Check whether the block is empty
cosine Similarity: 0.8710309267044067
81
67
85
71
=========================logics=========================
1. Get the body of the switch statement.
2. Check whether the body of the switch statement is empty.
3. Get the number of branches in the switch statement.
4. Check whether any branch in the switch statement contains executable statements.
If the body of the switch statement is not empty and contains at least one branch with executable statements, then this test case does not violate the rule.
*Get the body of the switch statement.* 匹配到的元操作或API：
query: Get the body of the switch statement.
most similar API: get text of switch statement
cosine Similarity: 0.8815826773643494
*Check whether the body of the switch statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the switch statement is empty.
most similar API: Check whether the switch statement equals
cosine Similarity: 0.81386798620224
*Get the number of branches in the switch statement.* 匹配到的元操作或API：
logic: Get the number of branches in the switch statement.
most similar meta operation: Get a branch of switch statement
cosine Similarity: 0.8736404776573181
*Check whether any branch in the switch statement contains executable statements.* 匹配到的元操作或API：
query: Check whether any branch in the switch statement contains executable statements.
most similar API: get branches of switch statement
cosine Similarity: 0.8126786947250366
77
63
=========================logics=========================
1. Get the body of the method.
2. Check whether the body contains a statement block.
3. Check whether the statement block is empty.
4. Check whether the statement block contains a return statement.
5. Check whether the statement block contains any other statements.

If the statement block is not empty and contains a return statement or other statements, then this test case does not violate the rule.
*Get the body of the method.* 匹配到的元操作或API：
query: Get the body of the method.
most similar API: get body of method
cosine Similarity: 0.9667365550994873
*Check whether the body contains a statement block.* 匹配到的元操作或API：
query: Check whether the body contains a statement block.
most similar API: Check whether the block contains comment
cosine Similarity: 0.8057861328125
*Check whether the statement block is empty.* 匹配到的元操作或API：
query: Check whether the statement block is empty.
most similar API: Check whether the block is empty
cosine Similarity: 0.9085157513618469
*Check whether the statement block contains a return statement.* 匹配到的元操作或API：
query: Check whether the statement block contains a return statement.
most similar API: Check whether the return statement equals
cosine Similarity: 0.893481969833374
*Check whether the statement block contains any other statements.* 匹配到的元操作或API：
query: Check whether the statement block contains any other statements.
most similar API: Check whether the block contains comment
cosine Similarity: 0.8019936084747314
78
64
=========================logics=========================
1. Get the initializer block in the class.
2. Check whether the initializer block is empty.
3. Check whether the initializer block is static.
If the initializer block is non-static and empty, then this test case violates the rule.
*Get the initializer block in the class.* 匹配到的元操作或API：
query: Get the initializer block in the class.
most similar API: get class of initializer
cosine Similarity: 0.8538593649864197
*Check whether the initializer block is empty.* 匹配到的元操作或API：
query: Check whether the initializer block is empty.
most similar API: Check whether the block is empty
cosine Similarity: 0.862004280090332
*Check whether the initializer block is static.* 匹配到的元操作或API：
query: Check whether the initializer block is static.
most similar API: Check whether the initializer is static
cosine Similarity: 0.9568565487861633
=========================logics=========================
1. Check whether the class has a static initializer.
2. Check whether the static initializer is empty.
If the static initializer is empty, then this test case violates the rule.
*Check whether the class has a static initializer.* 匹配到的元操作或API：
query: Check whether the class has a static initializer.
most similar API: Check whether the initializer is static
cosine Similarity: 0.9438152313232422
*Check whether the static initializer is empty.* 匹配到的元操作或API：
query: Check whether the static initializer is empty.
most similar API: Check whether the initializer is static
cosine Similarity: 0.9006940722465515
=========================logics=========================
1. Get the body of the method.
2. Check whether the body contains an empty block statement.
3. Check whether the empty block statement is used for scoping or as an initializer.
If the body of the method contains an empty block statement that is not used for scoping or as an initializer, then this test case violates the rule.
*Get the body of the method.* 匹配到的元操作或API：
query: Get the body of the method.
most similar API: get body of method
cosine Similarity: 0.9667365550994873
*Check whether the body contains an empty block statement.* 匹配到的元操作或API：
query: Check whether the body contains an empty block statement.
most similar API: Check whether the block is empty
cosine Similarity: 0.8777798414230347
*Check whether the empty block statement is used for scoping or as an initializer.* 匹配到的元操作或API：
query: Check whether the empty block statement is used for scoping or as an initializer.
most similar API: Check whether the block is empty
cosine Similarity: 0.8274514675140381
96
79
114
98
95
78
=========================logics=========================
1. Get the body of the initializer block.
2. Check whether the initializer block is empty.
3. If the initializer block is not empty, it does not violate the rule.

Since the initializer block in the test case contains a statement (`System.out.print("something interesting");`), it is not empty. Therefore, this test case does not violate the rule. The number of violations is 0.
*Get the body of the initializer block.* 匹配到的元操作或API：
query: Get the body of the initializer block.
most similar API: get body of initializer
cosine Similarity: 0.9420628547668457
*Check whether the initializer block is empty.* 匹配到的元操作或API：
query: Check whether the initializer block is empty.
most similar API: Check whether the block is empty
cosine Similarity: 0.862004280090332
*If the initializer block is not empty, it does not violate the rule.* 匹配到的元操作或API：
query: If the initializer block is not empty, it does not violate the rule.
most similar API: Check whether the initializer equals
cosine Similarity: 0.8031706213951111
94
79
=========================logics=========================
1. Get the static initializer block in the class.
2. Check whether the static initializer block is empty.
3. If the static initializer block is not empty, then this test case does not violate the rule.

Since the static initializer block in the test case contains the statement `x++;`, it is not empty. Therefore, this test case does not violate the rule. The number of violations in this test case is 0.
*Get the static initializer block in the class.* 匹配到的元操作或API：
query: Get the static initializer block in the class.
most similar API: get class of initializer
cosine Similarity: 0.8276135921478271
*Check whether the static initializer block is empty.* 匹配到的元操作或API：
query: Check whether the static initializer block is empty.
most similar API: Check whether the initializer is static
cosine Similarity: 0.8749605417251587
*If the static initializer block is not empty, then this test case does not violate the rule.* 匹配到的元操作或API：
query: If the static initializer block is not empty, then this test case does not violate the rule.
most similar API: Check whether the initializer is static
cosine Similarity: 0.8283753991127014
96
80
75
61
82
68
=========================logics=========================
1. Get all loop statements in the class.
2. For each loop statement, check whether the loop body is empty.
3. Check whether the loop is a for-each loop.
4. Check whether the loop variable is used in the loop body.
5. If the loop body is empty and the loop variable is unused, it does not violate the rule.
6. If the loop body is non-empty, it does not violate the rule.

In this test case:
- The first for-each loop has an empty body and an unused loop variable (`ignored`), which does not violate the rule.
- The second for-each loop has an empty body and an unused loop variable (`ignored2`), which does not violate the rule.
- The third for-each loop has a non-empty body, which does not violate the rule.

Thus, the test case does not violate the rule.
*Get all loop statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether the loop body is empty.* 匹配到的元操作或API：
query: For each loop statement, check whether the loop body is empty.
most similar API: Check whether the empty statement equals
cosine Similarity: 0.8109421133995056
*Check whether the loop is a for-each loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the loop variable is used in the loop body.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the loop body is empty and the loop variable is unused, it does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the loop body is non-empty, it does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
100
82
94
78
77
63
82
68
77
63
=========================logics=========================
1. Get all loop statements in the method.
2. For each loop statement, check whether its body is empty.
3. Count the number of loop statements with empty bodies.

In this test case:
- There are two `for` loops in the `bar` method.
- The first `for` loop has an empty body.
- The second `for` loop has a non-empty body (it contains `System.out.println(i);`).

The number of violating the rule (empty loop body) in this test case is **1**.
*Get all loop statements in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether its body is empty.* 匹配到的元操作或API：
query: For each loop statement, check whether its body is empty.
most similar API: Check whether the statement expression list is empty
cosine Similarity: 0.8071459531784058
*Count the number of loop statements with empty bodies.* 匹配到的元操作或API：
未匹配成功元操作或API
80
65
=========================logics=========================
1. Get all loop statements in the method.
2. For each loop statement, check whether it is a do-while loop.
3. For each do-while loop, check whether its body is empty.
4. Count the number of do-while loops with empty bodies.
If the count of do-while loops with empty bodies is greater than 0, then this test case violates the rule. In this case, the number of violations is 1.
*Get all loop statements in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether it is a do-while loop.* 匹配到的元操作或API：
query: For each loop statement, check whether it is a do-while loop.
most similar API: Check whether the do statement equals
cosine Similarity: 0.802704393863678
*For each do-while loop, check whether its body is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of do-while loops with empty bodies.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loop statements in the method.
2. For each loop statement, check whether the loop body is empty.
3. Count the number of loop statements with empty bodies.

In this test case:
- The first `for` loop has an empty body.
- The second `for` loop has a non-empty body (contains `System.out.println(i);`).

Thus, the number of violating the rule in this test case is **1**.
*Get all loop statements in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether the loop body is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of loop statements with empty bodies.* 匹配到的元操作或API：
未匹配成功元操作或API
79
65
107
91
=========================logics=========================
1. Get all loop statements in the method.
2. For each loop statement, check whether the loop body is empty.
3. Count the number of loop statements with empty bodies.
If the number of loop statements with empty bodies is greater than 0, then this test case violates the rule. In this case, the number of violating instances is 1.
*Get all loop statements in the method.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, check whether the loop body is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of loop statements with empty bodies.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the body of the while loop statement.
2. Check whether the body of the while loop statement is empty.
If the body of the while loop statement is empty, then this test case violates the rule.
*Get the body of the while loop statement.* 匹配到的元操作或API：
query: Get the body of the while loop statement.
most similar API: get body of while statement
cosine Similarity: 0.9643052816390991
*Check whether the body of the while loop statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the while loop statement is empty.
most similar API: Check whether the empty statement equals
cosine Similarity: 0.8361269235610962
84
69
=========================logics=========================
1. Get the condition of the if statement.
2. Check whether the if statement has an empty body.
3. Get the body of the if statement.
4. Check whether the body of the if statement is empty.
If the body of the if statement is empty, then this test case violates the rule.
*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the if statement has an empty body.* 匹配到的元操作或API：
query: Check whether the if statement has an empty body.
most similar API: Check whether the class or interface body is empty
cosine Similarity: 0.8336375951766968
*Get the body of the if statement.* 匹配到的元操作或API：
query: Get the body of the if statement.
most similar API: get text of if statement
cosine Similarity: 0.8748294115066528
*Check whether the body of the if statement is empty.* 匹配到的元操作或API：
logic: Check whether the body of the if statement is empty.
most similar meta operation: Check whether the string is empty
cosine Similarity: 0.8603639006614685
=========================logics=========================
1. Get the condition of if statement.
        2. Check whether the if statement has an else branch.
        3. Check whether the body of the if statement is empty.
        4. Check whether the body of the else branch is empty.
        If the body of the if statement or the else branch is empty, then this test case violate the rule.
*Get the condition of if statement.* 匹配到的元操作或API：
logic: Get the condition of if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9797651767730713
*Check whether the if statement has an else branch.* 匹配到的元操作或API：
logic: Check whether the if statement has an else branch.
most similar meta operation: Check whether the if statement has else branch
cosine Similarity: 0.9772751331329346
*Check whether the body of the if statement is empty.* 匹配到的元操作或API：
logic: Check whether the body of the if statement is empty.
most similar meta operation: Check whether the string is empty
cosine Similarity: 0.8603639006614685
*Check whether the body of the else branch is empty.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the body of the if statement.
2. Check whether the body of the if statement is empty.
3. Get the else branch of the if statement.
4. Check whether the else branch is an else-if statement.
5. Get the body of the else-if statement.
6. Check whether the body of the else-if statement is empty.
7. Get the else branch of the if statement.
8. Check whether the else branch is an else statement.
9. Get the body of the else statement.
10. Check whether the body of the else statement is empty.
If the body of the if statement, else-if statement, or else statement is empty, then this test case violates the rule. The number of violations in this test case is 3.
*Get the body of the if statement.* 匹配到的元操作或API：
query: Get the body of the if statement.
most similar API: get text of if statement
cosine Similarity: 0.8748294115066528
*Check whether the body of the if statement is empty.* 匹配到的元操作或API：
logic: Check whether the body of the if statement is empty.
most similar meta operation: Check whether the string is empty
cosine Similarity: 0.8603639006614685
*Get the else branch of the if statement.* 匹配到的元操作或API：
logic: Get the else branch of the if statement.
most similar meta operation: Get the else branch of if statement
cosine Similarity: 0.9849298000335693
*Check whether the else branch is an else-if statement.* 匹配到的元操作或API：
logic: Check whether the else branch is an else-if statement.
most similar meta operation: Check whether the if statement has else branch
cosine Similarity: 0.9533129930496216
*Get the body of the else-if statement.* 匹配到的元操作或API：
logic: Get the body of the else-if statement.
most similar meta operation: Get the else branch of if statement
cosine Similarity: 0.8554012179374695
*Check whether the body of the else-if statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the else-if statement is empty.
most similar API: Check whether the if statement has else
cosine Similarity: 0.8438532948493958
*Get the else branch of the if statement.* 匹配到的元操作或API：
logic: Get the else branch of the if statement.
most similar meta operation: Get the else branch of if statement
cosine Similarity: 0.9849298000335693
*Check whether the else branch is an else statement.* 匹配到的元操作或API：
logic: Check whether the else branch is an else statement.
most similar meta operation: Check whether the if statement has else branch
cosine Similarity: 0.9461255669593811
*Get the body of the else statement.* 匹配到的元操作或API：
logic: Get the body of the else statement.
most similar meta operation: Get the else branch of if statement
cosine Similarity: 0.8584789633750916
*Check whether the body of the else statement is empty.* 匹配到的元操作或API：
query: Check whether the body of the else statement is empty.
most similar API: Check whether the if statement has else
cosine Similarity: 0.8450315594673157
=========================logics=========================
1. Get the condition of the if statement.
2. Check whether the if statement has an empty body.
3. Get the class that the method is located in.
4. Check whether the method is public.
5. Check whether the method is private.
6. Check whether the method is protected.
7. Check whether the method is default package-private.
8. Get the name of the method.
9. Get the signature of the method.
10. Get the return type of the method.
11. Check whether the return type of the method is void.
12. Get the number of formal parameters of the method.
13. Get the type of the formal parameter.
14. Check whether the formal parameter is int type.
15. Check whether the method has declared annotations.
16. Get the javadoc comment of the method.
17. Check whether the method is static.
18. Check whether the method is final.
19. Check whether the method is synchronized.
20. Check whether the method is native.
21. Check whether the method is overridable.
22. Check whether the method is overridden.
23. Get the original method of this overridden method.
24. Check whether the method is a junit method.
25. Get the return expression in the return statement.
26. Get the name of the class.
27. Check whether the class is public.
28. Check whether the class is private.
29. Check whether the class is protected.
30. Check whether the class is default package-private.
31. Check whether the class is abstract.
32. Check whether the class is final.
33. Check whether the class is static.
34. Get the super class of the class.
35. Check whether the class has extended x class.
36. Get an implemented interface of the class.
37. Check whether the class has implemented x interface.
38. Get the name of the package where the class is located.
39. Check whether the class is an interface.
40. Check whether the class is an inner class.
41. Check whether the class is an anonymous class.
42. Get the javadoc comment of the class.
43. Check whether the class has declared annotations.
44. Get a declared annotation of the class.
45. Check whether the class has x annotation.
46. Get the name of the package where the class is located.
47. Check whether the class is an interface.
48. Check whether the class is an inner class.
49. Check whether the class is an anonymous class.
50. Get the javadoc comment of the class.
51. Check whether the class has declared annotations.
52. Get a declared annotation of the class.
53. Check whether the class has x annotation.
54. Get the name of the package where the class is located.
55. Check whether the class is an interface.
56. Check whether the class is an inner class.
57. Check whether the class is an anonymous class.
58. Get the javadoc comment of the class.
59. Check whether the class has declared annotations.
60. Get a declared annotation of the class.
61. Check whether the class has x annotation.
62. Get the name of the package where the class is located.
63. Check whether the class is an interface.
64. Check whether the class is an inner class.
65. Check whether the class is an anonymous class.
66. Get the javadoc comment of the class.
67. Check whether the class has declared annotations.
68. Get a declared annotation of the class.
69. Check whether the class has x annotation.
70. Get the name of the package where the class is located.
71. Check whether the class is an interface.
72. Check whether the class is an inner class.
73. Check whether the class is an anonymous class.
74. Get the javadoc comment of the class.
75. Check whether the class has declared annotations.
76. Get a declared annotation of the class.
77. Check whether the class has x annotation.
78. Get the name of the package where the class is located.
79. Check whether the class is an interface.
80. Check whether the class is an inner class.
81. Check whether the class is an anonymous class.
82. Get the javadoc comment of the class.
83. Check whether the class has declared annotations.
84. Get a declared annotation of the class.
85. Check whether the class has x annotation.
86. Get the name of the package where the class is located.
87. Check whether the class is an interface.
88. Check whether the class is an inner class.
89. Check whether the class is an anonymous class.
90. Get the javadoc comment of the class.
91. Check whether the class has declared annotations.
92. Get a declared annotation of the class.
93. Check whether the class has x annotation.
94. Get the name of the package where the class is located.
95. Check whether the class is an interface.
96. Check whether the class is an inner class.
97. Check whether the class is an anonymous class.
98. Get the javadoc comment of the class.
99. Check whether the class has declared annotations.
100. Get a declared annotation of the class.
101. Check whether the class has x annotation.
102. Get the name of the package where the class is located.
103. Check whether the class is an interface.
104. Check whether the class is an inner class.
105. Check whether the class is an anonymous class.
106. Get the javadoc comment of the class.
107. Check whether the class has declared annotations.
108. Get a declared annotation of the class.
109. Check whether the class has x annotation.
110. Get the name of the package where the class is located.
111. Check whether the class is an interface.
112. Check whether the class is an inner class.
113. Check whether the class is an anonymous class.
114. Get the javadoc comment of the class.
115. Check whether the class has declared annotations.
116. Get a declared annotation of the class.
117. Check whether the class has x annotation.
118. Get the name of the package where the class is located.
119. Check whether the class is an interface.
120. Check whether the class is an inner class.
121. Check whether the class is an anonymous class.
122. Get the javadoc comment of the class.
123. Check whether the class has declared annotations.
124. Get a declared annotation of the class.
125. Check whether the class has x annotation.
126. Get the name of the package where the class is located.
127. Check whether the class is an interface.
128. Check whether the class is an inner class.
129. Check whether the class is an anonymous class.
130. Get the javadoc comment of the class.
131. Check whether the class has declared annotations.
132. Get a declared annotation of the class.
133. Check whether the class has x annotation.
134. Get the name of the package where the class is located.
135. Check whether the class is an interface.
136. Check whether the class is an inner class.
137. Check whether the class is an anonymous class.
138. Get the javadoc comment of the class.
139. Check whether the class has declared annotations.
140. Get a declared annotation of the class.
141. Check whether the class has x annotation.
142. Get the name of the package where the class is located.
143. Check whether the class is an interface.
144. Check whether the class is an inner class.
145. Check whether the class is an anonymous class.
146. Get the javadoc comment of the class.
147. Check whether the class has declared annotations.
148. Get a declared annotation of the class.
149. Check whether the class has x annotation.
150. Get the name of the package where the class is located.
151. Check whether the class is an interface.
152. Check whether the class is an inner class.
153. Check whether the class is an anonymous class.
154. Get the javadoc comment of the class.
155. Check whether the class has declared annotations.
156. Get a declared annotation of the class.
157. Check whether the class has x annotation.
158. Get the name of the package where the class is located.
159. Check whether the class is an interface.
160. Check whether the class is an inner class.
161. Check whether the class is an anonymous class.
162. Get the javadoc comment of the class.
163. Check whether the class has declared annotations.
164. Get a declared annotation of the class.
165. Check whether the class has x annotation.
166. Get the name of the package where the class is located.
167. Check whether the class is an interface.
168. Check whether the class is an inner class.
169. Check whether the class is an anonymous class.
170. Get the javadoc comment of the class.
171. Check whether the class has declared annotations.
172. Get a declared annotation of the class.
173. Check whether the class has x annotation.
174. Get the name of the package where the class is located.
175. Check whether the class is an interface.
176. Check whether the class is an inner class.
177. Check whether the class is an anonymous class.
178. Get the javadoc comment of the class.
179. Check whether the class has declared annotations.
180. Get a declared annotation of the class.
181. Check whether the class has x annotation.
182. Get the name of the package where the class is located.
183. Check whether the class is an interface.
184. Check whether the class is an inner class.
185. Check whether the class is an anonymous class.
186. Get the javadoc comment of the class.
187. Check whether the class has declared annotations.
188. Get a declared annotation of the class.
189. Check whether the class has x annotation.
190. Get the name of the package where the class is located.
191. Check whether the class is an interface.
192. Check whether the class is an inner class.
193. Check whether the class is an anonymous class.
194. Get the javadoc comment of the class.
195. Check whether the class has declared annotations.
196. Get a declared annotation of the class.
197. Check whether the class has x annotation.
198. Get the name of the package where the class is located.
199. Check whether the class is an interface.
200. Check whether the class is an inner class.
201. Check whether the class is an anonymous class.
202. Get the javadoc comment of the class.
203. Check whether the class has declared annotations.
204. Get a declared annotation of the class.
205. Check whether the class has x annotation.
206. Get the name of the package where the class is located.
207. Check whether the class is an interface.
208. Check whether the class is an inner class.
209. Check whether the class is an anonymous class.
210. Get the javadoc comment of the class.
211. Check whether the class has declared annotations.
212. Get a declared annotation of the class.
213. Check whether the class has x annotation.
214. Get the name of the package where the class is located.
215. Check whether the class is an interface.
216. Check whether the class is an inner class.
217. Check whether the class is an anonymous class.
218. Get the javadoc comment of the class.
219. Check whether the class has declared annotations.
220. Get a declared annotation of the class.
221. Check whether the class has x annotation.
222. Get the name of the package where the class is located.
223. Check whether the class is an interface.
224. Check whether the class is an inner class.
225. Check whether the class is an anonymous class.
226. Get the javadoc comment of the class.
227. Check whether the class has declared annotations.
228. Get a declared annotation of the class.
229. Check whether the class has x annotation.
230. Get the name of the package where the class is located.
231. Check whether the class is an interface.
232. Check whether the class is an inner class.
233. Check whether the class is an anonymous class.
234. Get the javadoc comment of the class.
235. Check whether the class has declared annotations.
236. Get a declared annotation of the class.
237. Check whether the class has x annotation.
238. Get the name of the package where the class is located.
239. Check whether the class is an interface.
240. Check whether the class is an inner class.
241. Check whether the class is an anonymous class.
242. Get the javadoc comment of the class.
243. Check whether the class has declared annotations.
244. Get a declared annotation of the class.
245. Check whether the class has x annotation.
246. Get the name of the package where the class is located.
247. Check whether the class is an interface.
248. Check whether the class is an inner class.
249. Check whether the class is an anonymous class.
250. Get the javadoc comment of the class.
251. Check whether the class has declared annotations.
252. Get a declared annotation of the class.
253. Check whether the class has x annotation.
254. Get the name of the package where the class is located.
255. Check whether the class is an interface.
256. Check whether the class is an inner class.
257. Check whether the class is an anonymous class.
258. Get the javadoc comment of the class.
259. Check whether the class has declared annotations.
260. Get a declared annotation of the class.
261. Check whether the class has x annotation.
262. Get the name of the package where the class is located.
263. Check whether the class is an interface.
264. Check whether the class is an inner class.
265. Check whether the class is an anonymous class.
266. Get the javadoc comment of the class.
267. Check whether the class has declared annotations.
268. Get a declared annotation of the class.
269. Check whether the class has x annotation.
270. Get the name of the package where the class is located.
271. Check whether the class is an interface.
272. Check whether the class is an inner class.
273. Check whether the class is an anonymous class.
274. Get the javadoc comment of the class.
275. Check whether the class has declared annotations.
276. Get a declared annotation of the class.
277. Check whether the class has x annotation.
278. Get the name of the package where the class is located.
279. Check whether the class is an interface.
280. Check whether the class is an inner class.
281. Check whether the class is an anonymous class.
282. Get the javadoc comment of the class.
283. Check whether the class has declared annotations.
284. Get a declared annotation of the class.
285. Check whether the class has x annotation.
286. Get the name of the package where the class is located.
287. Check whether the class is an interface.
288. Check whether the class is an inner class.
289. Check whether the class is an anonymous class.
290. Get the javadoc comment of the class.
291. Check whether the class has declared annotations.
292. Get a declared annotation of the class.
293. Check whether the class has x annotation.
294. Get the name of the package where the class is located.
295. Check whether the class is an interface.
296. Check whether the class is an inner class.
297. Check whether the class is an anonymous class.
298. Get the javadoc comment of the class.
299. Check whether the class has declared annotations.
300. Get a declared annotation of the class.
301. Check whether the class has x annotation.
302. Get the name of the package where the class is located.
303. Check whether the class is an interface.
304. Check whether the class is an inner class.
305. Check whether the class is an anonymous class.
306. Get the javadoc comment of the class.
307. Check whether the class has declared annotations.
308. Get a declared annotation of the class.
309. Check whether the class has x annotation.
310. Get the name of the package where the class is located.
311. Check whether the class is an interface.
312. Check whether the class is an inner class.
313. Check whether the class is an anonymous class.
314. Get the javadoc comment of the class.
315. Check whether the class has declared annotations.
316. Get a declared annotation of the class.
317. Check whether the class has x annotation.
318. Get the name of the package where the class is located.
319. Check whether the class is an interface.
320. Check whether the class is an inner class.
321. Check whether the class is an anonymous class.
322. Get the javadoc comment of the class.
323. Check whether the class has declared annotations.
324. Get a declared annotation of the class.
325. Check whether the class has x annotation.
326. Get the name of the package where the class is located.
327. Check whether the class is an interface.
328. Check whether the class is an inner class.
329. Check whether the class is an anonymous class.
330. Get the javadoc comment of the class.
331. Check whether the class has declared annotations.
332. Get a declared annotation of the class.
333. Check whether the class has x annotation.
334. Get the name of the package where the class is located.
335. Check whether the class is an interface.
336. Check whether the class is an inner class.
337. Check whether the class is an anonymous class.
338. Get the javadoc comment of the class.
339. Check whether the class has declared annotations.
340. Get a declared annotation of the class.
341. Check whether the class has x annotation.
342. Get the name of the package where the class is located.
343. Check whether the class is an interface.
344. Check whether the class is an inner class.
345. Check whether the class is an anonymous class.
346. Get the javadoc comment of the class.
347. Check whether the class has declared annotations.
348. Get a declared annotation of the class.
349. Check whether the class has x annotation.
350. Get the name of the package where the class is located.
351. Check whether the class is an interface.
352. Check whether the class is an inner class.
353. Check whether the class is an anonymous class.
354. Get the javadoc comment of the class.
355. Check whether the class has declared annotations.
356. Get a declared annotation of the class.
357. Check whether the class has x annotation.
358. Get the name of the package where the class is located.
359. Check whether the class is an interface.
360. Check whether the class is an inner class.
361. Check whether the class is an anonymous class.
362. Get the javadoc comment of the class.
363. Check whether the class has declared annotations.
364. Get a declared annotation of the class.
365. Check whether the class has x annotation.
366. Get the name of the package where the class is located.
367. Check whether the class is an interface.
368. Check whether the class is an inner class.
369. Check whether the class is an anonymous class.
370. Get the javadoc comment of the class.
371. Check whether the class has declared annotations.
372. Get a declared annotation of the class.
373. Check whether the class has x annotation.
374. Get the name of the package where the class is located.
375. Check whether the class is an interface.

*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the if statement has an empty body.* 匹配到的元操作或API：
query: Check whether the if statement has an empty body.
most similar API: Check whether the empty statement equals
cosine Similarity: 0.8656878471374512
*Get the class that the method is located in.* 匹配到的元操作或API：
logic: Get the class that the method is located in.
most similar meta operation: Get the class that method located in
cosine Similarity: 0.971136212348938
*Check whether the method is public.* 匹配到的元操作或API：
logic: Check whether the method is public.
most similar meta operation: Check whether the method is public
cosine Similarity: 0.982057511806488
*Check whether the method is private.* 匹配到的元操作或API：
logic: Check whether the method is private.
most similar meta operation: Check whether the method is private
cosine Similarity: 0.9821236729621887
*Check whether the method is protected.* 匹配到的元操作或API：
logic: Check whether the method is protected.
most similar meta operation: Check whether the method is protected
cosine Similarity: 0.9815421104431152
*Check whether the method is default package-private.* 匹配到的元操作或API：
logic: Check whether the method is default package-private.
most similar meta operation: Check whether the method is default package-private
cosine Similarity: 0.972201406955719
*Get the name of the method.* 匹配到的元操作或API：
logic: Get the name of the method.
most similar meta operation: Get the name of method
cosine Similarity: 0.9713990092277527
*Get the signature of the method.* 匹配到的元操作或API：
logic: Get the signature of the method.
most similar meta operation: Get the signature of method
cosine Similarity: 0.9734326601028442
*Get the return type of the method.* 匹配到的元操作或API：
logic: Get the return type of the method.
most similar meta operation: Get the return type of method
cosine Similarity: 0.9745092988014221
*Check whether the return type of the method is void.* 匹配到的元操作或API：
logic: Check whether the return type of the method is void.
most similar meta operation: Check whether the return type of method is void
cosine Similarity: 0.981889545917511
*Get the number of formal parameters of the method.* 匹配到的元操作或API：
logic: Get the number of formal parameters of the method.
most similar meta operation: Get the number of formal parameters of method
cosine Similarity: 0.9806327819824219
*Get the type of the formal parameter.* 匹配到的元操作或API：
logic: Get the type of the formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9761149883270264
*Check whether the formal parameter is int type.* 匹配到的元操作或API：
logic: Check whether the formal parameter is int type.
most similar meta operation: Check whether the formal parameter is int type
cosine Similarity: 0.9879910945892334
*Check whether the method has declared annotations.* 匹配到的元操作或API：
logic: Check whether the method has declared annotations.
most similar meta operation: Check whether method has declared annotations
cosine Similarity: 0.9820230007171631
*Get the javadoc comment of the method.* 匹配到的元操作或API：
logic: Get the javadoc comment of the method.
most similar meta operation: Get the javadoc comment of method
cosine Similarity: 0.9848002791404724
*Check whether the method is static.* 匹配到的元操作或API：
logic: Check whether the method is static.
most similar meta operation: Check whether the method is static
cosine Similarity: 0.9812488555908203
*Check whether the method is final.* 匹配到的元操作或API：
logic: Check whether the method is final.
most similar meta operation: Check whether the method is final
cosine Similarity: 0.985183835029602
*Check whether the method is synchronized.* 匹配到的元操作或API：
logic: Check whether the method is synchronized.
most similar meta operation: Check whether the method is synchronized
cosine Similarity: 0.9820958375930786
*Check whether the method is native.* 匹配到的元操作或API：
logic: Check whether the method is native.
most similar meta operation: Check whether the method is native
cosine Similarity: 0.9861124753952026
*Check whether the method is overridable.* 匹配到的元操作或API：
logic: Check whether the method is overridable.
most similar meta operation: Check whether the method is overridable
cosine Similarity: 0.9839692115783691
*Check whether the method is overridden.* 匹配到的元操作或API：
logic: Check whether the method is overridden.
most similar meta operation: Check whether the method is overridden
cosine Similarity: 0.9829655885696411
*Get the original method of this overridden method.* 匹配到的元操作或API：
logic: Get the original method of this overridden method.
most similar meta operation: Get the original method of this overridden method
cosine Similarity: 0.9831136465072632
*Check whether the method is a junit method.* 匹配到的元操作或API：
logic: Check whether the method is a junit method.
most similar meta operation: Check whether the method is a junit method
cosine Similarity: 0.9799772500991821
*Get the return expression in the return statement.* 匹配到的元操作或API：
logic: Get the return expression in the return statement.
most similar meta operation: Get the return expression in return statement
cosine Similarity: 0.9828119277954102
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Check whether the class is protected.* 匹配到的元操作或API：
logic: Check whether the class is protected.
most similar meta operation: Check whether the class is protected
cosine Similarity: 0.9844120740890503
*Check whether the class is default package-private.* 匹配到的元操作或API：
logic: Check whether the class is default package-private.
most similar meta operation: Check whether the class is default package-private
cosine Similarity: 0.9734809398651123
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
*Check whether the class is static.* 匹配到的元操作或API：
logic: Check whether the class is static.
most similar meta operation: Check whether the class is static
cosine Similarity: 0.9831520318984985
*Get the super class of the class.* 匹配到的元操作或API：
logic: Get the super class of the class.
most similar meta operation: Get the super class of class
cosine Similarity: 0.9794139266014099
*Check whether the class has extended x class.* 匹配到的元操作或API：
logic: Check whether the class has extended x class.
most similar meta operation: Check whether the class has extended x class
cosine Similarity: 0.9917446374893188
*Get an implemented interface of the class.* 匹配到的元操作或API：
logic: Get an implemented interface of the class.
most similar meta operation: Get a implemented interface of class
cosine Similarity: 0.9786056280136108
*Check whether the class has implemented x interface.* 匹配到的元操作或API：
logic: Check whether the class has implemented x interface.
most similar meta operation: Check whether the class has implemented x interface
cosine Similarity: 0.9905824661254883
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
*Check whether the class is an inner class.* 匹配到的元操作或API：
logic: Check whether the class is an inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.9831405878067017
*Check whether the class is an anonymous class.* 匹配到的元操作或API：
logic: Check whether the class is an anonymous class.
most similar meta operation: Check whether the class is anonymous class
cosine Similarity: 0.9796479344367981
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of the class.* 匹配到的元操作或API：
logic: Get a declared annotation of the class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.9829835295677185
*Check whether the class has x annotation.* 匹配到的元操作或API：
logic: Check whether the class has x annotation.
most similar meta operation: Check whether the class has x annotation
cosine Similarity: 0.9908236265182495
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class is an interface.* 匹配到的元操作或API：
logic: Check whether the class is an interface.
most similar meta operation: Check whether the class is interface
cosine Similarity: 0.9778784513473511
=========================logics=========================
1. Get the condition of the if statement.
2. Check whether the if statement has an else branch.
3. Get the body of the if statement.
4. Check whether the body of the if statement is empty.
5. Check whether the body of the if statement contains only comments.

If the body of the if statement is empty or contains only comments, then this test case violates the rule. The number of violations in this test case is 1.
*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the if statement has an else branch.* 匹配到的元操作或API：
logic: Check whether the if statement has an else branch.
most similar meta operation: Check whether the if statement has else branch
cosine Similarity: 0.9772751331329346
*Get the body of the if statement.* 匹配到的元操作或API：
query: Get the body of the if statement.
most similar API: get text of if statement
cosine Similarity: 0.8748294115066528
*Check whether the body of the if statement is empty.* 匹配到的元操作或API：
logic: Check whether the body of the if statement is empty.
most similar meta operation: Check whether the string is empty
cosine Similarity: 0.8603639006614685
*Check whether the body of the if statement contains only comments.* 匹配到的元操作或API：
query: Check whether the body of the if statement contains only comments.
most similar API: Check whether is comment
cosine Similarity: 0.8367845416069031
97
80
=========================logics=========================
1. Get all control statements in the class.
2. For each control statement, check whether its body is empty.
3. Get all initializers in the class.
4. For each initializer, check whether it is empty.
5. Get all blocks used as statements in the class.
6. For each block, check whether it is empty.
If any control statement has an empty body, or any initializer or block used as a statement is empty, then this test case violates the rule. Otherwise, it does not violate the rule.
*Get all control statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each control statement, check whether its body is empty.* 匹配到的元操作或API：
query: For each control statement, check whether its body is empty.
most similar API: Check whether the class or interface body is empty
cosine Similarity: 0.8018958568572998
*Get all initializers in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each initializer, check whether it is empty.* 匹配到的元操作或API：
query: For each initializer, check whether it is empty.
most similar API: Check whether is array initializer
cosine Similarity: 0.8174344897270203
*Get all blocks used as statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each block, check whether it is empty.* 匹配到的元操作或API：
query: For each block, check whether it is empty.
most similar API: Check whether the block is empty
cosine Similarity: 0.9363816976547241
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The following are the test cases of the rule:
1. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock1 {
                public void foo() {
                    try {
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
```
2. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                    } finally {
                        int x = 5;
                    }
                }
            }
```
3. This is a negative test case
```java
// pos, empty finally block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                        int x = 0;
                    } finally { // warn
                    }
                }
            }
```
4. This is a positive test case
```java
// pos, empty finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                        int f =2;
                    } finally {
                        int x = 5;
                    }
                }
            }
```
5. This is a negative test case
```java
// pos, empty try and finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                    } finally {
                    }
                }
            }
```
6. This is a negative test case
```java
class X {
                void method() {
                    try (ClientResponse response = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                        // was false positive
                        // EmptyTryBlock was fixed to ignore empty try-with-resources.
                        // This new rule will by default report also empty try-with-resource blocks,
                        // if the resource name is not "ignored", see next test case.
                    }
                }
            }
```
7. This is a negative test case
```java
// empty concise try-with-resource - not ok
import java.io.InputStream;
            class X {
                void method(InputStream in) {
                    try (in) {
                    }
                }
            }
```
8. This is a positive test case
```java
// #432 empty try-with-resource - ok with unused var name
class X {
                void method() {
                    try (ClientResponse ignored = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                    }
                }
            }
```
9. This is a negative test case
```java
// pos, empty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {}
                }
            }
```
10. This is a positive test case
```java
// neg, nonempty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {int x = 2;}
                }
            }
```
11. This is a negative test case
```java
// pos, empty switch stmt
public class EmptySwitchStmt1 {
                public void bar() {
                    int x = 2;
                    switch (x) {}
                }
            }
```
12. This is a negative test case
```java
// pos, empty block
public class Foo {
                public void bar() {
                    {}
                }
            }
```
13. This is a positive test case
```java
// neg, nonempty switch stmt
public class EmptySwitchStmt2 {
                public void bar() {
                    int x = 2;
                    switch (x) {
                    case 2: int y=4;
                    }
                }
            }
```
14. This is a positive test case
```java
// statement block not empty
public class Foo {
                public void bar() {
                    { return; }
                }
            }
```
15. This is a negative test case
```java
// empty initializer failure case (non static)
public class Foo {
                {}
            }
```
16. This is a negative test case
```java
// empty initializer failure case (static)
public class Foo {
                static {}
            }
```
17. This is a negative test case
```java
// not an initializer - empty statement block
public class Foo {
                public void bar() {
                    { }
                }
            }
```
18. This is a positive test case
```java
// initializer not empty
public class Foo {
                {
                    System.out.print("something interesting");
                }
            }
```
19. This is a positive test case
```java
// static initializer not empty
public class Foo {
                static {
                    x++;
                }
            }
```
20. This is a positive test case
```java
// neg, empty foreach with unused var name
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int ignored : list) {
                    }
                    for (int ignored2 : list) ;
                    for (int i : list) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
21. This is a negative test case
```java
// pos, empty for
public class Foo {
                public void bar() {
                    for (int i = 0; i < 2; i++) {
                    }
                    for (int i = 0; i < 2; i++) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
22. This is a negative test case
```java
// pos, empty do..while
public class Foo {
                public void bar() {
                    int i = 0;
                    do {
                    } while (i < 3);
                    do { // neg, nonempty
                        System.out.println(i);
                    } while (i < 3);
                }
            }
```
23. This is a negative test case
```java
// pos, empty foreach
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int i : list) {
                    }
                    for (int i : list)  { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
24. This is a negative test case
```java
// pos, empty while
public class Foo {
                public void bar() {
                    while (true == true) {
                    }
                    while (true == true) {
                        String x = "";
                    }
                }
            }
```
25. This is a negative test case
```java
// while(true);
public class Foo {
                public void bar() {
                    while (true);
                }
            }
```
26. This is a negative test case
```java
// one empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        }
    }
}
```
27. This is a negative test case
```java
// empty if with else statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else {
        }
    }
}
```
28. This is a negative test case
```java
// empty if with else and else if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else if (x > 3) {
        } else {
        }
    }
}
```
29. This is a negative test case
```java
// empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2);
    }
}
```
30. This is a negative test case
```java
// empty if statement with comment
public class Foo {
    void bar(int x) {
        if (x == 0) {
            // empty!
        }
    }
}
```
31. This is a positive test case
```java
// one not empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
            x = 1;
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
2. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTCatchParameter getParameter()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause(), //Returns the {@code finally} clause of this try statement, if any. @return The finally statement, or null if there is none
5. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause()
6. net.sourceforge.pmd.lang.java.ast.ASTFinallyClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this finally clause.
7. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
8. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isEmpty()
9. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public boolean isTryWithResources(), //Returns true if this node is a try-with-resources, in which case it has a ResourceSpecification child node.
10. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTResourceList getResources(), //Returns the node for the resource list. This is null if this is not a try-with-resources.
11. net.sourceforge.pmd.lang.java.ast.ASTResourceList: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public boolean isEmpty()
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty()
14. net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBlockBody(), //Returns the body of this lambda if it is a block.
15. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this statement.
16. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.document.Chars getText()
18. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches()
20. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches(), //Returns a stream of all branches of this switch.
21. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean containsComment()
22. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
23. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.Class<Class<?> getClass()
24. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean isStatic()
25. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this initializer.
26. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean equals(java.lang.Object)
27. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
28. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: public boolean isEmpty()
29. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public boolean equals(java.lang.Object)
30. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
31. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
32. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.document.Chars getText()
33. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse()
34. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getElseBranch()
35. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse(), //Returns true if this statement has an {@code else} clause.
36. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
37. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPublic()
38. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPrivate()
39. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isProtected()
40. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPackagePrivate()
41. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
42. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
43. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getResultTypeNode()
44. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isVoid()
45. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
46. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
47. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isStatic()
48. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isFinal()
49. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSynchronized()
50. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isNative()
51. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isOverridden()
52. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getOverriddenMethod()
53. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isJUnitMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)
54. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
55. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
56. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
57. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPrivate()
58. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isProtected()
59. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPackagePrivate()
60. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAbstract()
61. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isFinal()
62. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isStatic()
63. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
64. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()
65. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getPackageName()
66. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isInterface()
67. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isNested()
68. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnonymous()
69. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
70. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
71. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnyAnnotationPresent(java.util.Collection)
72. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isComment(net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken), //Returns true if the given token is a Java comment.
73. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)

1.  //Get the number of formal parameters of method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTMethodDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the formal parameter is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFormalParameterIntType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```
3.  //Check whether method has declared annotations
```java
import net.sourceforge.pmd.lang.ast.NodeStream;
import net.sourceforge.pmd.lang.java.ast.*;
public boolean hasAnnotation(ASTMethodDeclaration node){
    NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
    return declaredAnnotations.nonEmpty();
}
```
4.  //Check whether the method is overridable
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.ast.JModifier;
public boolean isOverridable(ASTMethodDeclaration method){
    return method.hasModifiers(JModifier.STATIC, JModifier.PRIVATE, JModifier.FINAL);
}
```
5.  //Check whether the class has extended x class
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean extendsSpecificClass(ASTClassOrInterfaceDeclaration node){
    ASTClassOrInterfaceType classOrInterfaceType = node.getSuperClassTypeNode();
    return TypeTestUtil.isA(x.class, classOrInterfaceType);
}
```
6.  //Check whether the class has implemented x interface
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean hasImplementComparable(ASTClassOrInterfaceDeclaration node) {
    if (TypeTestUtil.isA(interfaceName.class, node)) {
        return true;
    }
    return false;
}
```
7.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTFinallyClause.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTInitializer.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getBody().isEmpty() && !node.isTryWithResources()) {
            addViolation(data, node);
        }
        if (node.getFinallyClause() != null && node.getFinallyClause().getBody().isEmpty()) {
            addViolation(data, node.getFinallyClause());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFinallyClause node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getBranches().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getThenBranch().isEmpty() && !node.hasElse()) {
            addViolation(data, node);
        }
        if (node.hasElse() && node.getElseBranch().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isEmpty() && node.getParent() instanceof ASTStatement) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The following are the test cases of the rule:
1. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock1 {
                public void foo() {
                    try {
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
```
2. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                    } finally {
                        int x = 5;
                    }
                }
            }
```
3. This is a negative test case
```java
// pos, empty finally block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                        int x = 0;
                    } finally { // warn
                    }
                }
            }
```
4. This is a positive test case
```java
// pos, empty finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                        int f =2;
                    } finally {
                        int x = 5;
                    }
                }
            }
```
5. This is a negative test case
```java
// pos, empty try and finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                    } finally {
                    }
                }
            }
```
6. This is a negative test case
```java
class X {
                void method() {
                    try (ClientResponse response = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                        // was false positive
                        // EmptyTryBlock was fixed to ignore empty try-with-resources.
                        // This new rule will by default report also empty try-with-resource blocks,
                        // if the resource name is not "ignored", see next test case.
                    }
                }
            }
```
7. This is a negative test case
```java
// empty concise try-with-resource - not ok
import java.io.InputStream;
            class X {
                void method(InputStream in) {
                    try (in) {
                    }
                }
            }
```
8. This is a positive test case
```java
// #432 empty try-with-resource - ok with unused var name
class X {
                void method() {
                    try (ClientResponse ignored = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                    }
                }
            }
```
9. This is a negative test case
```java
// pos, empty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {}
                }
            }
```
10. This is a positive test case
```java
// neg, nonempty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {int x = 2;}
                }
            }
```
11. This is a negative test case
```java
// pos, empty switch stmt
public class EmptySwitchStmt1 {
                public void bar() {
                    int x = 2;
                    switch (x) {}
                }
            }
```
12. This is a negative test case
```java
// pos, empty block
public class Foo {
                public void bar() {
                    {}
                }
            }
```
13. This is a positive test case
```java
// neg, nonempty switch stmt
public class EmptySwitchStmt2 {
                public void bar() {
                    int x = 2;
                    switch (x) {
                    case 2: int y=4;
                    }
                }
            }
```
14. This is a positive test case
```java
// statement block not empty
public class Foo {
                public void bar() {
                    { return; }
                }
            }
```
15. This is a negative test case
```java
// empty initializer failure case (non static)
public class Foo {
                {}
            }
```
16. This is a negative test case
```java
// empty initializer failure case (static)
public class Foo {
                static {}
            }
```
17. This is a negative test case
```java
// not an initializer - empty statement block
public class Foo {
                public void bar() {
                    { }
                }
            }
```
18. This is a positive test case
```java
// initializer not empty
public class Foo {
                {
                    System.out.print("something interesting");
                }
            }
```
19. This is a positive test case
```java
// static initializer not empty
public class Foo {
                static {
                    x++;
                }
            }
```
20. This is a positive test case
```java
// neg, empty foreach with unused var name
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int ignored : list) {
                    }
                    for (int ignored2 : list) ;
                    for (int i : list) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
21. This is a negative test case
```java
// pos, empty for
public class Foo {
                public void bar() {
                    for (int i = 0; i < 2; i++) {
                    }
                    for (int i = 0; i < 2; i++) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
22. This is a negative test case
```java
// pos, empty do..while
public class Foo {
                public void bar() {
                    int i = 0;
                    do {
                    } while (i < 3);
                    do { // neg, nonempty
                        System.out.println(i);
                    } while (i < 3);
                }
            }
```
23. This is a negative test case
```java
// pos, empty foreach
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int i : list) {
                    }
                    for (int i : list)  { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
24. This is a negative test case
```java
// pos, empty while
public class Foo {
                public void bar() {
                    while (true == true) {
                    }
                    while (true == true) {
                        String x = "";
                    }
                }
            }
```
25. This is a negative test case
```java
// while(true);
public class Foo {
                public void bar() {
                    while (true);
                }
            }
```
26. This is a negative test case
```java
// one empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        }
    }
}
```
27. This is a negative test case
```java
// empty if with else statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else {
        }
    }
}
```
28. This is a negative test case
```java
// empty if with else and else if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else if (x > 3) {
        } else {
        }
    }
}
```
29. This is a negative test case
```java
// empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2);
    }
}
```
30. This is a negative test case
```java
// empty if statement with comment
public class Foo {
    void bar(int x) {
        if (x == 0) {
            // empty!
        }
    }
}
```
31. This is a positive test case
```java
// one not empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
            x = 1;
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
2. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTCatchParameter getParameter()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause(), //Returns the {@code finally} clause of this try statement, if any. @return The finally statement, or null if there is none
5. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause()
6. net.sourceforge.pmd.lang.java.ast.ASTFinallyClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this finally clause.
7. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
8. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isEmpty()
9. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public boolean isTryWithResources(), //Returns true if this node is a try-with-resources, in which case it has a ResourceSpecification child node.
10. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTResourceList getResources(), //Returns the node for the resource list. This is null if this is not a try-with-resources.
11. net.sourceforge.pmd.lang.java.ast.ASTResourceList: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public boolean isEmpty()
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty()
14. net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBlockBody(), //Returns the body of this lambda if it is a block.
15. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this statement.
16. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.document.Chars getText()
18. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches()
20. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches(), //Returns a stream of all branches of this switch.
21. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean containsComment()
22. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
23. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.Class<Class<?> getClass()
24. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean isStatic()
25. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this initializer.
26. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean equals(java.lang.Object)
27. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
28. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: public boolean isEmpty()
29. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public boolean equals(java.lang.Object)
30. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
31. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
32. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.document.Chars getText()
33. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse()
34. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getElseBranch()
35. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse(), //Returns true if this statement has an {@code else} clause.
36. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
37. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPublic()
38. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPrivate()
39. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isProtected()
40. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPackagePrivate()
41. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
42. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
43. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getResultTypeNode()
44. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isVoid()
45. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
46. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
47. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isStatic()
48. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isFinal()
49. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSynchronized()
50. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isNative()
51. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isOverridden()
52. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getOverriddenMethod()
53. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isJUnitMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)
54. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
55. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
56. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
57. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPrivate()
58. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isProtected()
59. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPackagePrivate()
60. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAbstract()
61. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isFinal()
62. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isStatic()
63. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
64. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()
65. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getPackageName()
66. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isInterface()
67. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isNested()
68. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnonymous()
69. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
70. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
71. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnyAnnotationPresent(java.util.Collection)
72. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isComment(net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken), //Returns true if the given token is a Java comment.
73. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)

1.  //Get the number of formal parameters of method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTMethodDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the formal parameter is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFormalParameterIntType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```
3.  //Check whether method has declared annotations
```java
import net.sourceforge.pmd.lang.ast.NodeStream;
import net.sourceforge.pmd.lang.java.ast.*;
public boolean hasAnnotation(ASTMethodDeclaration node){
    NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
    return declaredAnnotations.nonEmpty();
}
```
4.  //Check whether the method is overridable
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.ast.JModifier;
public boolean isOverridable(ASTMethodDeclaration method){
    return method.hasModifiers(JModifier.STATIC, JModifier.PRIVATE, JModifier.FINAL);
}
```
5.  //Check whether the class has extended x class
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean extendsSpecificClass(ASTClassOrInterfaceDeclaration node){
    ASTClassOrInterfaceType classOrInterfaceType = node.getSuperClassTypeNode();
    return TypeTestUtil.isA(x.class, classOrInterfaceType);
}
```
6.  //Check whether the class has implemented x interface
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean hasImplementComparable(ASTClassOrInterfaceDeclaration node) {
    if (TypeTestUtil.isA(interfaceName.class, node)) {
        return true;
    }
    return false;
}
```
7.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTFinallyClause.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTInitializer.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getBody().isEmpty() && !node.isTryWithResources()) {
            addViolation(data, node);
        }
        if (node.getFinallyClause() != null && node.getFinallyClause().getBody().isEmpty()) {
            addViolation(data, node.getFinallyClause());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFinallyClause node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getBranches().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getBody().isEmpty() && !node.hasElse()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isEmpty() && node.getParent() instanceof ASTStatement) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The following are the test cases of the rule:
1. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock1 {
                public void foo() {
                    try {
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
```
2. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                    } finally {
                        int x = 5;
                    }
                }
            }
```
3. This is a negative test case
```java
// pos, empty finally block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                        int x = 0;
                    } finally { // warn
                    }
                }
            }
```
4. This is a positive test case
```java
// pos, empty finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                        int f =2;
                    } finally {
                        int x = 5;
                    }
                }
            }
```
5. This is a negative test case
```java
// pos, empty try and finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                    } finally {
                    }
                }
            }
```
6. This is a negative test case
```java
class X {
                void method() {
                    try (ClientResponse response = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                        // was false positive
                        // EmptyTryBlock was fixed to ignore empty try-with-resources.
                        // This new rule will by default report also empty try-with-resource blocks,
                        // if the resource name is not "ignored", see next test case.
                    }
                }
            }
```
7. This is a negative test case
```java
// empty concise try-with-resource - not ok
import java.io.InputStream;
            class X {
                void method(InputStream in) {
                    try (in) {
                    }
                }
            }
```
8. This is a positive test case
```java
// #432 empty try-with-resource - ok with unused var name
class X {
                void method() {
                    try (ClientResponse ignored = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                    }
                }
            }
```
9. This is a negative test case
```java
// pos, empty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {}
                }
            }
```
10. This is a positive test case
```java
// neg, nonempty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {int x = 2;}
                }
            }
```
11. This is a negative test case
```java
// pos, empty switch stmt
public class EmptySwitchStmt1 {
                public void bar() {
                    int x = 2;
                    switch (x) {}
                }
            }
```
12. This is a negative test case
```java
// pos, empty block
public class Foo {
                public void bar() {
                    {}
                }
            }
```
13. This is a positive test case
```java
// neg, nonempty switch stmt
public class EmptySwitchStmt2 {
                public void bar() {
                    int x = 2;
                    switch (x) {
                    case 2: int y=4;
                    }
                }
            }
```
14. This is a positive test case
```java
// statement block not empty
public class Foo {
                public void bar() {
                    { return; }
                }
            }
```
15. This is a negative test case
```java
// empty initializer failure case (non static)
public class Foo {
                {}
            }
```
16. This is a negative test case
```java
// empty initializer failure case (static)
public class Foo {
                static {}
            }
```
17. This is a negative test case
```java
// not an initializer - empty statement block
public class Foo {
                public void bar() {
                    { }
                }
            }
```
18. This is a positive test case
```java
// initializer not empty
public class Foo {
                {
                    System.out.print("something interesting");
                }
            }
```
19. This is a positive test case
```java
// static initializer not empty
public class Foo {
                static {
                    x++;
                }
            }
```
20. This is a positive test case
```java
// neg, empty foreach with unused var name
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int ignored : list) {
                    }
                    for (int ignored2 : list) ;
                    for (int i : list) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
21. This is a negative test case
```java
// pos, empty for
public class Foo {
                public void bar() {
                    for (int i = 0; i < 2; i++) {
                    }
                    for (int i = 0; i < 2; i++) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
22. This is a negative test case
```java
// pos, empty do..while
public class Foo {
                public void bar() {
                    int i = 0;
                    do {
                    } while (i < 3);
                    do { // neg, nonempty
                        System.out.println(i);
                    } while (i < 3);
                }
            }
```
23. This is a negative test case
```java
// pos, empty foreach
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int i : list) {
                    }
                    for (int i : list)  { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
24. This is a negative test case
```java
// pos, empty while
public class Foo {
                public void bar() {
                    while (true == true) {
                    }
                    while (true == true) {
                        String x = "";
                    }
                }
            }
```
25. This is a negative test case
```java
// while(true);
public class Foo {
                public void bar() {
                    while (true);
                }
            }
```
26. This is a negative test case
```java
// one empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        }
    }
}
```
27. This is a negative test case
```java
// empty if with else statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else {
        }
    }
}
```
28. This is a negative test case
```java
// empty if with else and else if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else if (x > 3) {
        } else {
        }
    }
}
```
29. This is a negative test case
```java
// empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2);
    }
}
```
30. This is a negative test case
```java
// empty if statement with comment
public class Foo {
    void bar(int x) {
        if (x == 0) {
            // empty!
        }
    }
}
```
31. This is a positive test case
```java
// one not empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
            x = 1;
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
2. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTCatchParameter getParameter()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause(), //Returns the {@code finally} clause of this try statement, if any. @return The finally statement, or null if there is none
5. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause()
6. net.sourceforge.pmd.lang.java.ast.ASTFinallyClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this finally clause.
7. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
8. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isEmpty()
9. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public boolean isTryWithResources(), //Returns true if this node is a try-with-resources, in which case it has a ResourceSpecification child node.
10. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTResourceList getResources(), //Returns the node for the resource list. This is null if this is not a try-with-resources.
11. net.sourceforge.pmd.lang.java.ast.ASTResourceList: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public boolean isEmpty()
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty()
14. net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBlockBody(), //Returns the body of this lambda if it is a block.
15. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this statement.
16. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.document.Chars getText()
18. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches()
20. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches(), //Returns a stream of all branches of this switch.
21. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean containsComment()
22. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
23. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.Class<Class<?> getClass()
24. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean isStatic()
25. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this initializer.
26. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean equals(java.lang.Object)
27. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
28. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: public boolean isEmpty()
29. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public boolean equals(java.lang.Object)
30. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
31. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
32. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.document.Chars getText()
33. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse()
34. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getElseBranch()
35. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse(), //Returns true if this statement has an {@code else} clause.
36. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
37. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPublic()
38. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPrivate()
39. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isProtected()
40. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPackagePrivate()
41. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
42. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
43. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getResultTypeNode()
44. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isVoid()
45. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
46. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
47. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isStatic()
48. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isFinal()
49. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSynchronized()
50. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isNative()
51. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isOverridden()
52. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getOverriddenMethod()
53. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isJUnitMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)
54. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
55. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
56. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
57. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPrivate()
58. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isProtected()
59. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPackagePrivate()
60. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAbstract()
61. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isFinal()
62. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isStatic()
63. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
64. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()
65. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getPackageName()
66. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isInterface()
67. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isNested()
68. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnonymous()
69. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
70. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
71. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnyAnnotationPresent(java.util.Collection)
72. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isComment(net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken), //Returns true if the given token is a Java comment.
73. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)

1.  //Get the number of formal parameters of method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTMethodDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the formal parameter is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFormalParameterIntType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```
3.  //Check whether method has declared annotations
```java
import net.sourceforge.pmd.lang.ast.NodeStream;
import net.sourceforge.pmd.lang.java.ast.*;
public boolean hasAnnotation(ASTMethodDeclaration node){
    NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
    return declaredAnnotations.nonEmpty();
}
```
4.  //Check whether the method is overridable
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.ast.JModifier;
public boolean isOverridable(ASTMethodDeclaration method){
    return method.hasModifiers(JModifier.STATIC, JModifier.PRIVATE, JModifier.FINAL);
}
```
5.  //Check whether the class has extended x class
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean extendsSpecificClass(ASTClassOrInterfaceDeclaration node){
    ASTClassOrInterfaceType classOrInterfaceType = node.getSuperClassTypeNode();
    return TypeTestUtil.isA(x.class, classOrInterfaceType);
}
```
6.  //Check whether the class has implemented x interface
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean hasImplementComparable(ASTClassOrInterfaceDeclaration node) {
    if (TypeTestUtil.isA(interfaceName.class, node)) {
        return true;
    }
    return false;
}
```
7.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;
import java.lang.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTFinallyClause.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTInitializer.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getBody().isEmpty() && !node.isTryWithResources()) {
            addViolation(data, node);
        }
        if (node.getFinallyClause() != null && node.getFinallyClause().getBody().isEmpty()) {
            addViolation(data, node.getFinallyClause());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFinallyClause node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getBranches().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getThenBranch().isEmpty() && !node.hasElse()) {
            addViolation(data, node);
        }
        if (node.hasElse() && node.getElseBranch().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isEmpty() && !node.containsComment()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).;

The following are the test cases of the rule:
1. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock1 {
                public void foo() {
                    try {
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
```
2. This is a negative test case
```java
// pos, empty try block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                    } finally {
                        int x = 5;
                    }
                }
            }
```
3. This is a negative test case
```java
// pos, empty finally block
public class EmptyTryBlock2 {
                public void foo() {
                    try {
                        int x = 0;
                    } finally { // warn
                    }
                }
            }
```
4. This is a positive test case
```java
// pos, empty finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                        int f =2;
                    } finally {
                        int x = 5;
                    }
                }
            }
```
5. This is a negative test case
```java
// pos, empty try and finally block
public class EmptyTryBlock3 {
                public void foo() {
                    try {
                    } finally {
                    }
                }
            }
```
6. This is a negative test case
```java
class X {
                void method() {
                    try (ClientResponse response = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                        // was false positive
                        // EmptyTryBlock was fixed to ignore empty try-with-resources.
                        // This new rule will by default report also empty try-with-resource blocks,
                        // if the resource name is not "ignored", see next test case.
                    }
                }
            }
```
7. This is a negative test case
```java
// empty concise try-with-resource - not ok
import java.io.InputStream;
            class X {
                void method(InputStream in) {
                    try (in) {
                    }
                }
            }
```
8. This is a positive test case
```java
// #432 empty try-with-resource - ok with unused var name
class X {
                void method() {
                    try (ClientResponse ignored = execute(() -> target.request(mediaTypes).delete(), DELETE, new ExpectedResponse(status, required))) {
                    }
                }
            }
```
9. This is a negative test case
```java
// pos, empty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {}
                }
            }
```
10. This is a positive test case
```java
// neg, nonempty synchronized stmt
public class Foo {
                void foo() {
                    synchronized (this) {int x = 2;}
                }
            }
```
11. This is a negative test case
```java
// pos, empty switch stmt
public class EmptySwitchStmt1 {
                public void bar() {
                    int x = 2;
                    switch (x) {}
                }
            }
```
12. This is a negative test case
```java
// pos, empty block
public class Foo {
                public void bar() {
                    {}
                }
            }
```
13. This is a positive test case
```java
// neg, nonempty switch stmt
public class EmptySwitchStmt2 {
                public void bar() {
                    int x = 2;
                    switch (x) {
                    case 2: int y=4;
                    }
                }
            }
```
14. This is a positive test case
```java
// statement block not empty
public class Foo {
                public void bar() {
                    { return; }
                }
            }
```
15. This is a negative test case
```java
// empty initializer failure case (non static)
public class Foo {
                {}
            }
```
16. This is a negative test case
```java
// empty initializer failure case (static)
public class Foo {
                static {}
            }
```
17. This is a negative test case
```java
// not an initializer - empty statement block
public class Foo {
                public void bar() {
                    { }
                }
            }
```
18. This is a positive test case
```java
// initializer not empty
public class Foo {
                {
                    System.out.print("something interesting");
                }
            }
```
19. This is a positive test case
```java
// static initializer not empty
public class Foo {
                static {
                    x++;
                }
            }
```
20. This is a positive test case
```java
// neg, empty foreach with unused var name
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int ignored : list) {
                    }
                    for (int ignored2 : list) ;
                    for (int i : list) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
21. This is a negative test case
```java
// pos, empty for
public class Foo {
                public void bar() {
                    for (int i = 0; i < 2; i++) {
                    }
                    for (int i = 0; i < 2; i++) { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
22. This is a negative test case
```java
// pos, empty do..while
public class Foo {
                public void bar() {
                    int i = 0;
                    do {
                    } while (i < 3);
                    do { // neg, nonempty
                        System.out.println(i);
                    } while (i < 3);
                }
            }
```
23. This is a negative test case
```java
// pos, empty foreach
import java.util.List;

            public class Foo {

                public void bar(List<Integer> list) {
                    for (int i : list) {
                    }
                    for (int i : list)  { // neg, nonempty
                        System.out.println(i);
                    }
                }
            }
```
24. This is a negative test case
```java
// pos, empty while
public class Foo {
                public void bar() {
                    while (true == true) {
                    }
                    while (true == true) {
                        String x = "";
                    }
                }
            }
```
25. This is a negative test case
```java
// while(true);
public class Foo {
                public void bar() {
                    while (true);
                }
            }
```
26. This is a negative test case
```java
// one empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        }
    }
}
```
27. This is a negative test case
```java
// empty if with else statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else {
        }
    }
}
```
28. This is a negative test case
```java
// empty if with else and else if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
        } else if (x > 3) {
        } else {
        }
    }
}
```
29. This is a negative test case
```java
// empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2);
    }
}
```
30. This is a negative test case
```java
// empty if statement with comment
public class Foo {
    void bar(int x) {
        if (x == 0) {
            // empty!
        }
    }
}
```
31. This is a positive test case
```java
// one not empty if statement
public class Foo {
    void bar(int x) {
        if (x > 2) {
            x = 1;
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
2. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTCatchParameter getParameter()
3. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public boolean equals(java.lang.Object)
4. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause(), //Returns the {@code finally} clause of this try statement, if any. @return The finally statement, or null if there is none
5. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTFinallyClause getFinallyClause()
6. net.sourceforge.pmd.lang.java.ast.ASTFinallyClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this finally clause.
7. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
8. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isEmpty()
9. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public boolean isTryWithResources(), //Returns true if this node is a try-with-resources, in which case it has a ResourceSpecification child node.
10. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTResourceList getResources(), //Returns the node for the resource list. This is null if this is not a try-with-resources.
11. net.sourceforge.pmd.lang.java.ast.ASTResourceList: public boolean isEmpty()
12. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceBody: public boolean isEmpty()
13. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isEmpty()
14. net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBlockBody(), //Returns the body of this lambda if it is a block.
15. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this statement.
16. net.sourceforge.pmd.lang.java.ast.ASTSynchronizedStatement: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.document.Chars getText()
18. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches()
20. net.sourceforge.pmd.lang.java.ast.ASTSwitchStatement: public net.sourceforge.pmd.lang.ast.NodeStream<ASTSwitchBranch> getBranches(), //Returns a stream of all branches of this switch.
21. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean containsComment()
22. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
23. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public java.lang.Class<Class<?> getClass()
24. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean isStatic()
25. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this initializer.
26. net.sourceforge.pmd.lang.java.ast.ASTInitializer: public boolean equals(java.lang.Object)
27. net.sourceforge.pmd.lang.java.ast.ASTEmptyStatement: public boolean equals(java.lang.Object)
28. net.sourceforge.pmd.lang.java.ast.ASTStatementExpressionList: public boolean isEmpty()
29. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public boolean equals(java.lang.Object)
30. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
31. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
32. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.document.Chars getText()
33. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse()
34. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getElseBranch()
35. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public boolean hasElse(), //Returns true if this statement has an {@code else} clause.
36. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration getEnclosingType()
37. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPublic()
38. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPrivate()
39. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isProtected()
40. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isPackagePrivate()
41. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
42. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
43. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getResultTypeNode()
44. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isVoid()
45. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
46. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
47. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isStatic()
48. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isFinal()
49. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isSynchronized()
50. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isNative()
51. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isOverridden()
52. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getOverriddenMethod()
53. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isJUnitMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)
54. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
55. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
56. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
57. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPrivate()
58. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isProtected()
59. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPackagePrivate()
60. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAbstract()
61. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isFinal()
62. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isStatic()
63. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
64. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTClassOrInterfaceType> getSuperInterfaceTypeNodes()
65. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getPackageName()
66. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isInterface()
67. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isNested()
68. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnonymous()
69. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
70. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
71. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAnyAnnotationPresent(java.util.Collection)
72. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isComment(net.sourceforge.pmd.lang.ast.impl.javacc.JavaccToken), //Returns true if the given token is a Java comment.
73. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayInitializer(net.sourceforge.pmd.lang.java.ast.ASTExpression)

1.  //Get the number of formal parameters of method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getFormalParametersNumber(ASTMethodDeclaration node){
    ASTFormalParameters formalParameters = node.getFormalParameters();
    return formalParameters.size();
}
```
2.  //Check whether the formal parameter is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFormalParameterIntType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```
3.  //Check whether method has declared annotations
```java
import net.sourceforge.pmd.lang.ast.NodeStream;
import net.sourceforge.pmd.lang.java.ast.*;
public boolean hasAnnotation(ASTMethodDeclaration node){
    NodeStream<ASTAnnotation> declaredAnnotations = node.getDeclaredAnnotations();
    return declaredAnnotations.nonEmpty();
}
```
4.  //Check whether the method is overridable
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.ast.JModifier;
public boolean isOverridable(ASTMethodDeclaration method){
    return method.hasModifiers(JModifier.STATIC, JModifier.PRIVATE, JModifier.FINAL);
}
```
5.  //Check whether the class has extended x class
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean extendsSpecificClass(ASTClassOrInterfaceDeclaration node){
    ASTClassOrInterfaceType classOrInterfaceType = node.getSuperClassTypeNode();
    return TypeTestUtil.isA(x.class, classOrInterfaceType);
}
```
6.  //Check whether the class has implemented x interface
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean hasImplementComparable(ASTClassOrInterfaceDeclaration node) {
    if (TypeTestUtil.isA(interfaceName.class, node)) {
        return true;
    }
    return false;
}
```
7.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.codestyle;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class EmptyControlStatementRule extends AbstractJavaRulechainRule {
    public EmptyControlStatementRule() {
        super(ASTTryStatement.class, ASTFinallyClause.class, ASTSwitchStatement.class, ASTSynchronizedStatement.class, ASTIfStatement.class, ASTWhileStatement.class, ASTForStatement.class, ASTDoStatement.class, ASTInitializer.class, ASTBlock.class);
    }

    @Override
    public Object visit(ASTTryStatement node, Object data) {
        if (node.getBody().isEmpty() && !node.isTryWithResources()) {
            addViolation(data, node);
        }
        if (node.getFinallyClause() != null && node.getFinallyClause().getBody().isEmpty()) {
            addViolation(data, node.getFinallyClause());
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTFinallyClause node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSwitchStatement node, Object data) {
        if (node.getBranches().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTSynchronizedStatement node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTIfStatement node, Object data) {
        if (node.getThenBranch() instanceof ASTBlock && ((ASTBlock) node.getThenBranch()).isEmpty()) {
            addViolation(data, node);
        }
        if (node.hasElse() && node.getElseBranch() instanceof ASTBlock && ((ASTBlock) node.getElseBranch()).isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        if (node.getBody() instanceof ASTBlock && ((ASTBlock) node.getBody()).isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        if (node.getBody() instanceof ASTBlock && ((ASTBlock) node.getBody()).isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        if (node.getBody() instanceof ASTBlock && ((ASTBlock) node.getBody()).isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInitializer node, Object data) {
        if (node.getBody().isEmpty()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.isEmpty() && !node.containsComment()) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 1327.829921722412 秒
