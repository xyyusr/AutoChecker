开始

========================================== Rule LiteralsFirstInComparisonsRule ===========================================
一共 33 个测试用例
正例 22 个
反例 11 个
38
34
85
71
40
37
144
127
114
98
96
79
96
81
12
10
30
28
11
8
97
91
157
137
99
82
93
78
15
13
12
10
119
103
107
91
9
7
19
14
85
71
12
9
12
10
11
9
149
133
10
8
90
76
92
78
27
17
77
63
9
7
94
78
23
19
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a variable.
9. Check whether the argument is null.
If the called method name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals and the method caller is a string literal and the argument is a variable and the argument is not null, then this test case adheres to the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a variable.* 匹配到的元操作或API：
query: Check whether the argument is a variable.
most similar API: Check whether is reference to var
cosine Similarity: 0.8143181800842285
*Check whether the argument is null.* 匹配到的元操作或API：
query: Check whether the argument is null.
most similar API: Check whether is null check
cosine Similarity: 0.8581958413124084
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals.
3. Get the method caller.
4. Check whether the method caller is a variable.
5. Get the argument list of method.
6. Check whether the argument is a string literal.
If the called method name is equals and the method caller is a variable and the argument is a string literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals.* 匹配到的元操作或API：
query: Check whether the name is equals.
most similar API: Check whether is equals method
cosine Similarity: 0.8145300149917603
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a variable.* 匹配到的元操作或API：
query: Check whether the method caller is a variable.
most similar API: Check whether the method call equals
cosine Similarity: 0.8110101222991943
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
100
82
77
63
97
81
97
80
84
69
106
90
=========================logics=========================
1. Get all method calls in the class.
2. Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
3. For each method call, check whether the method caller is a non-literal (e.g., a variable or expression).
4. Check whether the first argument of the method call is a literal (e.g., `""`).
5. If the method caller is a non-literal and the first argument is a literal, then this violates the rule.

In the provided test case:
- There are 4 instances of `str.equals("")` where `str` is a non-literal and `""` is a literal.
- Each of these instances violates the rule because the literal is not positioned first in the comparison.

Thus, the number of violations in this test case is **4**.
*Get all method calls in the class.* 匹配到的元操作或API：
query: Get all method calls in the class.
most similar API: get method name of method call
cosine Similarity: 0.8157881498336792
*Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.* 匹配到的元操作或API：
query: Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
most similar API: Check whether the method equals
cosine Similarity: 0.8280919790267944
*For each method call, check whether the method caller is a non-literal (e.g., a variable or expression).* 匹配到的元操作或API：
query: For each method call, check whether the method caller is a non-literal (e.g., a variable or expression).
most similar API: Check whether the method call is expression
cosine Similarity: 0.8662031888961792
*Check whether the first argument of the method call is a literal (e.g., `""`).* 匹配到的元操作或API：
query: Check whether the first argument of the method call is a literal (e.g., `""`).
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8046491742134094
*If the method caller is a non-literal and the first argument is a literal, then this violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
106
91
84
70
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a literal.
If the called method name is equals and the method caller is an object of String and the argument is not a literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals.* 匹配到的元操作或API：
query: Check whether the name is equals.
most similar API: Check whether is equals method
cosine Similarity: 0.8145300149917603
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a literal.* 匹配到的元操作或API：
query: Check whether the argument is a literal.
most similar API: Check whether is boolean literal
cosine Similarity: 0.8468946814537048
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a string literal.
9. Check whether the method caller is a string literal.
If the called method name is equals and the method caller is a String object and the argument is not a string literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals.* 匹配到的元操作或API：
query: Check whether the name is equals.
most similar API: Check whether is equals method
cosine Similarity: 0.8145300149917603
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
107
91
117
102
125
108
83
69
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals.
3. Get the method caller.
4. Check whether the type of method caller is Character class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a character literal.
9. Get the value of character literal.
10. Check whether the value of character literal is 'x'.
If the called method name is equals and the argument is a character literal and the value of the character literal is 'x' and the method caller is an object of Character, then this test case does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals.* 匹配到的元操作或API：
query: Check whether the name is equals.
most similar API: Check whether the field equals
cosine Similarity: 0.8173662424087524
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is Character class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is Character class type.
most similar meta operation: Check whether the return type of called method is char type
cosine Similarity: 0.9098348617553711
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a character literal.* 匹配到的元操作或API：
logic: Check whether the argument is a character literal.
most similar meta operation: Check whether the argument is char type
cosine Similarity: 0.8678105473518372
*Get the value of character literal.* 匹配到的元操作或API：
logic: Get the value of character literal.
most similar meta operation: Get the value of char literal
cosine Similarity: 0.932583749294281
*Check whether the value of character literal is 'x'.* 匹配到的元操作或API：
query: Check whether the value of character literal is 'x'.
most similar API: Check whether the char literal equals
cosine Similarity: 0.8376838564872742
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equalsIgnoreCase.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Check whether the argument is a variable.
7. Check whether the argument is null.
If the called method name is equalsIgnoreCase and the method caller is a string literal and the argument is a variable and the argument is not null, then this test case does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equalsIgnoreCase.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a variable.* 匹配到的元操作或API：
query: Check whether the argument is a variable.
most similar API: Check whether is reference to var
cosine Similarity: 0.8143181800842285
*Check whether the argument is null.* 匹配到的元操作或API：
query: Check whether the argument is null.
most similar API: Check whether is null check
cosine Similarity: 0.8581958413124084
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equalsIgnoreCase.
3. Get the method caller.
4. Check whether the method caller is a variable.
5. Get the argument list of method.
6. Check whether the argument is a string literal.
7. Check whether the method caller is a string literal.
If the called method name is equalsIgnoreCase and the method caller is a variable and the argument is a string literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equalsIgnoreCase.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a variable.* 匹配到的元操作或API：
query: Check whether the method caller is a variable.
most similar API: Check whether the method call equals
cosine Similarity: 0.8110101222991943
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
=========================logics=========================
1. Get the condition of if statement.
2. Check whether the condition is a logical OR expression.
3. Get the left operand of the logical OR expression.
4. Check whether the left operand is a null check (e.g., `str == null`).
5. Get the right operand of the logical OR expression.
6. Check whether the right operand is a method call.
7. Get the name of the called method.
8. Check whether the method name is `equalsIgnoreCase`.
9. Get the argument list of the method call.
10. Check whether the argument is a string literal.
11. Check whether the string literal is positioned first in the method call.

If the method call is `equalsIgnoreCase` and the string literal is positioned first in the argument list, then this test case adheres to the rule. Otherwise, it violates the rule. In this case, the test case adheres to the rule because the string literal `""` is positioned first in the `equalsIgnoreCase` method call.
*Get the condition of if statement.* 匹配到的元操作或API：
logic: Get the condition of if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9797651767730713
*Check whether the condition is a logical OR expression.* 匹配到的元操作或API：
query: Check whether the condition is a logical OR expression.
most similar API: Check whether the assignment expression is expression
cosine Similarity: 0.8182482719421387
*Get the left operand of the logical OR expression.* 匹配到的元操作或API：
logic: Get the left operand of the logical OR expression.
most similar meta operation: Get the left operand of assignment expression
cosine Similarity: 0.8923843502998352
*Check whether the left operand is a null check (e.g., `str == null`).* 匹配到的元操作或API：
query: Check whether the left operand is a null check (e.g., `str == null`).
most similar API: Check whether the null literal is null literal
cosine Similarity: 0.8046084046363831
*Get the right operand of the logical OR expression.* 匹配到的元操作或API：
logic: Get the right operand of the logical OR expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8644448518753052
*Check whether the right operand is a method call.* 匹配到的元操作或API：
query: Check whether the right operand is a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8639539480209351
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the method name is `equalsIgnoreCase`.* 匹配到的元操作或API：
query: Check whether the method name is `equalsIgnoreCase`.
most similar API: Check whether the method equals
cosine Similarity: 0.8279829025268555
*Get the argument list of the method call.* 匹配到的元操作或API：
logic: Get the argument list of the method call.
most similar meta operation: Get the number of arguments of called method
cosine Similarity: 0.8692123889923096
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Check whether the string literal is positioned first in the method call.* 匹配到的元操作或API：
query: Check whether the string literal is positioned first in the method call.
most similar API: compare location of string literal
cosine Similarity: 0.8422873616218567
=========================logics=========================
1. Get the name of called method.
        2. Check whether the name is equalsIgnoreCase.
        3. Get the method caller.
        4. Check whether the method caller is a string literal.
        5. Get the argument list of method.
        6. Get the size of argument list.
        7. Check whether the size of argument list is 1.
        8. Check whether the argument is a string literal.
        If the called method name is equalsIgnoreCase and the method caller is not a string literal and the argument is not a string literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equalsIgnoreCase.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equalsIgnoreCase.
3. Get the method caller.
4. Check whether the method caller is a literal.
5. Get the argument list of method.
6. Check whether the argument is a method call.
7. Get the return type of the method call.
8. Check whether the return type is String.
If the called method name is equalsIgnoreCase and the method caller is not a literal and the argument is a method call that returns a String, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equalsIgnoreCase.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a literal.* 匹配到的元操作或API：
query: Check whether the method caller is a literal.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8410024046897888
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a method call.* 匹配到的元操作或API：
query: Check whether the argument is a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.847655713558197
*Get the return type of the method call.* 匹配到的元操作或API：
logic: Get the return type of the method call.
most similar meta operation: Get the return type of called method
cosine Similarity: 0.9652632474899292
*Check whether the return type is String.* 匹配到的元操作或API：
logic: Check whether the return type is String.
most similar meta operation: Check whether the return type of method is string type
cosine Similarity: 0.934654712677002
111
94
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is compareTo.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a variable.
If the called method name is compareTo and the method caller is a string literal and the argument is a variable, then this test case adheres to the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is compareTo.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a variable.* 匹配到的元操作或API：
query: Check whether the argument is a variable.
most similar API: Check whether is reference to var
cosine Similarity: 0.8143181800842285
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is compareTo.
3. Get the method caller.
4. Check whether the method caller is a string type.
5. Get the argument list of method.
6. Check whether the argument is a string literal.
7. Get the length of string literal.
8. Check whether the length of string literal is 1.
If the called method name is compareTo and the method caller is a string type and the argument is a string literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is compareTo.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string type.* 匹配到的元操作或API：
logic: Check whether the method caller is a string type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9876717329025269
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Get the length of string literal.* 匹配到的元操作或API：
logic: Get the length of string literal.
most similar meta operation: Get the length of string literal
cosine Similarity: 0.9875898361206055
*Check whether the length of string literal is 1.* 匹配到的元操作或API：
logic: Check whether the length of string literal is 1.
most similar meta operation: Get the length of string literal
cosine Similarity: 0.8637055158615112
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Check whether the argument is null.
If the called method name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals and the method caller is not a string literal and the argument is not null, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is null.* 匹配到的元操作或API：
query: Check whether the argument is null.
most similar API: Check whether is null check
cosine Similarity: 0.8581958413124084
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is compareToIgnoreCase.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Check whether the argument is a variable.
If the called method name is compareToIgnoreCase and the method caller is a string literal and the argument is a variable, then this test case adhere to the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is compareToIgnoreCase.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a variable.* 匹配到的元操作或API：
query: Check whether the argument is a variable.
most similar API: Check whether is reference to var
cosine Similarity: 0.8143181800842285
=========================logics=========================
1. Get the name of called method.
        2. Check whether the name is compareToIgnoreCase.
        3. Get the method caller.
        4. Check whether the method caller is a variable.
        5. Get the argument list of method.
        6. Check whether the argument is a string literal.
        If the called method name is compareToIgnoreCase and the method caller is a variable and the argument is a string literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is compareToIgnoreCase.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a variable.* 匹配到的元操作或API：
query: Check whether the method caller is a variable.
most similar API: Check whether the method call equals
cosine Similarity: 0.8110101222991943
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
=========================logics=========================
1. Get the name of the method being called in the `bar` method.
2. Check whether the method name is `compareToIgnoreCase`.
3. Get the argument list of the method call.
4. Check whether the argument list contains a string literal.
5. Check whether the string literal is the first argument in the method call.
6. Check whether the method call is part of a comparison operation.
7. Check whether the method call is used in a context where the second argument could be null.

If the method name is `compareToIgnoreCase`, the argument list contains a string literal, and the string literal is the first argument, then this test case adheres to the rule. If the method call is not part of a comparison operation or the second argument is not null, then this test case does not violate the rule.
*Get the name of the method being called in the `bar` method.* 匹配到的元操作或API：
logic: Get the name of the method being called in the `bar` method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.8855595588684082
*Check whether the method name is `compareToIgnoreCase`.* 匹配到的元操作或API：
query: Check whether the method name is `compareToIgnoreCase`.
most similar API: Check whether the method equals
cosine Similarity: 0.8052526712417603
*Get the argument list of the method call.* 匹配到的元操作或API：
logic: Get the argument list of the method call.
most similar meta operation: Get the number of arguments of called method
cosine Similarity: 0.8692123889923096
*Check whether the argument list contains a string literal.* 匹配到的元操作或API：
query: Check whether the argument list contains a string literal.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8610956072807312
*Check whether the string literal is the first argument in the method call.* 匹配到的元操作或API：
query: Check whether the string literal is the first argument in the method call.
most similar API: Check whether the string literal is string literal
cosine Similarity: 0.8534751534461975
*Check whether the method call is part of a comparison operation.* 匹配到的元操作或API：
query: Check whether the method call is part of a comparison operation.
most similar API: Check whether the method call equals
cosine Similarity: 0.8779996633529663
*Check whether the method call is used in a context where the second argument could be null.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is `contentEquals`.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of the method.
6. Check whether the argument is a variable or expression.
7. Check whether the argument is null.

If the called method is `contentEquals`, the method caller is a string literal, and the argument is not null, then this test case adheres to the rule. The test case is correct and does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is `contentEquals`.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of the method.* 匹配到的元操作或API：
query: Get the argument list of the method.
most similar API: get arguments of method call
cosine Similarity: 0.9019454121589661
*Check whether the argument is a variable or expression.* 匹配到的元操作或API：
query: Check whether the argument is a variable or expression.
most similar API: Check whether the variable access is expression
cosine Similarity: 0.8725705742835999
*Check whether the argument is null.* 匹配到的元操作或API：
query: Check whether the argument is null.
most similar API: Check whether is null check
cosine Similarity: 0.8581958413124084
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is contentEquals.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a string literal.
9. Check whether the method caller is a variable.
If the called method name is contentEquals and the argument is a string literal and the method caller is a variable, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Check whether the method caller is a variable.* 匹配到的元操作或API：
query: Check whether the method caller is a variable.
most similar API: Check whether the method call equals
cosine Similarity: 0.8110101222991943
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Check whether the argument is null.
If the called method name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals and the method caller is not a string literal and the argument is not null, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is null.* 匹配到的元操作或API：
query: Check whether the argument is null.
most similar API: Check whether is null check
cosine Similarity: 0.8581958413124084
116
101
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a string literal.
9. Check whether the method caller is a method call.
10. Get the method caller of the method caller.
11. Check whether the method caller is a field.
12. Check whether the field is final.
13. Check whether the field is static.
14. Check whether the field is volatile.
15. Check whether the field is transient.
16. Check whether the field is initialized.
17. Check whether the field is initialized to literal value.
18. Check whether the field is initialized to variable value.
19. Get the literal value that the field is initialized to.
20. Check whether the field is a local variable.
21. Check whether the field is a formal parameter.
22. Check whether the field is a accessed variable.
23. Check whether the field is a method call.
24. Check whether the field is a constructor call.
25. Check whether the field is a array access.
26. Check whether the field is a array creation.
27. Check whether the field is a array initialization.
28. Check whether the field is a array length.
29. Check whether the field is a array clone.
30. Check whether the field is a array toString.
31. Check whether the field is a array hashCode.
32. Check whether the field is a array equals.
33. Check whether the field is a array compareTo.
34. Check whether the field is a array compareToIgnoreCase.
35. Check whether the field is a array contentEquals.
36. Check whether the field is a array getClass.
37. Check whether the field is a array wait.
38. Check whether the field is a array notify.
39. Check whether the field is a array notifyAll.
40. Check whether the field is a array finalize.
41. Check whether the field is a array clone.
42. Check whether the field is a array toString.
43. Check whether the field is a array hashCode.
44. Check whether the field is a array equals.
45. Check whether the field is a array compareTo.
46. Check whether the field is a array compareToIgnoreCase.
47. Check whether the field is a array contentEquals.
48. Check whether the field is a array getClass.
49. Check whether the field is a array wait.
50. Check whether the field is a array notify.
51. Check whether the field is a array notifyAll.
52. Check whether the field is a array finalize.
53. Check whether the field is a array clone.
54. Check whether the field is a array toString.
55. Check whether the field is a array hashCode.
56. Check whether the field is a array equals.
57. Check whether the field is a array compareTo.
58. Check whether the field is a array compareToIgnoreCase.
59. Check whether the field is a array contentEquals.
60. Check whether the field is a array getClass.
61. Check whether the field is a array wait.
62. Check whether the field is a array notify.
63. Check whether the field is a array notifyAll.
64. Check whether the field is a array finalize.
65. Check whether the field is a array clone.
66. Check whether the field is a array toString.
67. Check whether the field is a array hashCode.
68. Check whether the field is a array equals.
69. Check whether the field is a array compareTo.
70. Check whether the field is a array compareToIgnoreCase.
71. Check whether the field is a array contentEquals.
72. Check whether the field is a array getClass.
73. Check whether the field is a array wait.
74. Check whether the field is a array notify.
75. Check whether the field is a array notifyAll.
76. Check whether the field is a array finalize.
77. Check whether the field is a array clone.
78. Check whether the field is a array toString.
79. Check whether the field is a array hashCode.
80. Check whether the field is a array equals.
81. Check whether the field is a array compareTo.
82. Check whether the field is a array compareToIgnoreCase.
83. Check whether the field is a array contentEquals.
84. Check whether the field is a array getClass.
85. Check whether the field is a array wait.
86. Check whether the field is a array notify.
87. Check whether the field is a array notifyAll.
88. Check whether the field is a array finalize.
89. Check whether the field is a array clone.
90. Check whether the field is a array toString.
91. Check whether the field is a array hashCode.
92. Check whether the field is a array equals.
93. Check whether the field is a array compareTo.
94. Check whether the field is a array compareToIgnoreCase.
95. Check whether the field is a array contentEquals.
96. Check whether the field is a array getClass.
97. Check whether the field is a array wait.
98. Check whether the field is a array notify.
99. Check whether the field is a array notifyAll.
100. Check whether the field is a array finalize.
101. Check whether the field is a array clone.
102. Check whether the field is a array toString.
103. Check whether the field is a array hashCode.
104. Check whether the field is a array equals.
105. Check whether the field is a array compareTo.
106. Check whether the field is a array compareToIgnoreCase.
107. Check whether the field is a array contentEquals.
108. Check whether the field is a array getClass.
109. Check whether the field is a array wait.
110. Check whether the field is a array notify.
111. Check whether the field is a array notifyAll.
112. Check whether the field is a array finalize.
113. Check whether the field is a array clone.
114. Check whether the field is a array toString.
115. Check whether the field is a array hashCode.
116. Check whether the field is a array equals.
117. Check whether the field is a array compareTo.
118. Check whether the field is a array compareToIgnoreCase.
119. Check whether the field is a array contentEquals.
120. Check whether the field is a array getClass.
121. Check whether the field is a array wait.
122. Check whether the field is a array notify.
123. Check whether the field is a array notifyAll.
124. Check whether the field is a array finalize.
125. Check whether the field is a array clone.
126. Check whether the field is a array toString.
127. Check whether the field is a array hashCode.
128. Check whether the field is a array equals.
129. Check whether the field is a array compareTo.
130. Check whether the field is a array compareToIgnoreCase.
131. Check whether the field is a array contentEquals.
132. Check whether the field is a array getClass.
133. Check whether the field is a array wait.
134. Check whether the field is a array notify.
135. Check whether the field is a array notifyAll.
136. Check whether the field is a array finalize.
137. Check whether the field is a array clone.
138. Check whether the field is a array toString.
139. Check whether the field is a array hashCode.
140. Check whether the field is a array equals.
141. Check whether the field is a array compareTo.
142. Check whether the field is a array compareToIgnoreCase.
143. Check whether the field is a array contentEquals.
144. Check whether the field is a array getClass.
145. Check whether the field is a array wait.
146. Check whether the field is a array notify.
147. Check whether the field is a array notifyAll.
148. Check whether the field is a array finalize.
149. Check whether the field is a array clone.
150. Check whether the field is a array toString.
151. Check whether the field is a array hashCode.
152. Check whether the field is a array equals.
153. Check whether the field is a array compareTo.
154. Check whether the field is a array compareToIgnoreCase.
155. Check whether the field is a array contentEquals.
156. Check whether the field is a array getClass.
157. Check whether the field is a array wait.
158. Check whether the field is a array notify.
159. Check whether the field is a array notifyAll.
160. Check whether the field is a array finalize.
161. Check whether the field is a array clone.
162. Check whether the field is a array toString.
163. Check whether the field is a array hashCode.
164. Check whether the field is a array equals.
165. Check whether the field is a array compareTo.
166. Check whether the field is a array compareToIgnoreCase.
167. Check whether the field is a array contentEquals.
168. Check whether the field is a array getClass.
169. Check whether the field is a array wait.
170. Check whether the field is a array notify.
171. Check whether the field is a array notifyAll.
172. Check whether the field is a array finalize.
173. Check whether the field is a array clone.
174. Check whether the field is a array toString.
175. Check whether the field is a array hashCode.
176. Check whether the field is a array equals.
177. Check whether the field is a array compareTo.
178. Check whether the field is a array compareToIgnoreCase.
179. Check whether the field is a array contentEquals.
180. Check whether the field is a array getClass.
181. Check whether the field is a array wait.
182. Check whether the field is a array notify.
183. Check whether the field is a array notifyAll.
184. Check whether the field is a array finalize.
185. Check whether the field is a array clone.
186. Check whether the field is a array toString.
187. Check whether the field is a array hashCode.
188. Check whether the field is a array equals.
189. Check whether the field is a array compareTo.
190. Check whether the field is a array compareToIgnoreCase.
191. Check whether the field is a array contentEquals.
192. Check whether the field is a array getClass.
193. Check whether the field is a array wait.
194. Check whether the field is a array notify.
195. Check whether the field is a array notifyAll.
196. Check whether the field is a array finalize.
197. Check whether the field is a array clone.
198. Check whether the field is a array toString.
199. Check whether the field is a array hashCode.
200. Check whether the field is a array equals.
201. Check whether the field is a array compareTo.
202. Check whether the field is a array compareToIgnoreCase.
203. Check whether the field is a array contentEquals.
204. Check whether the field is a array getClass.
205. Check whether the field is a array wait.
206. Check whether the field is a array notify.
207. Check whether the field is a array notifyAll.
208. Check whether the field is a array finalize.
209. Check whether the field is a array clone.
210. Check whether the field is a array toString.
211. Check whether the field is a array hashCode.
212. Check whether the field is a array equals.
213. Check whether the field is a array compareTo.
214. Check whether the field is a array compareToIgnoreCase.
215. Check whether the field is a array contentEquals.
216. Check whether the field is a array getClass.
217. Check whether the field is a array wait.
218. Check whether the field is a array notify.
219. Check whether the field is a array notifyAll.
220. Check whether the field is a array finalize.
221. Check whether the field is a array clone.
222. Check whether the field is a array toString.
223. Check whether the field is a array hashCode.
224. Check whether the field is a array equals.
225. Check whether the field is a array compareTo.
226. Check whether the field is a array compareToIgnoreCase.
227. Check whether the field is a array contentEquals.
228. Check whether the field is a array getClass.
229. Check whether the field is a array wait.
230. Check whether the field is a array notify.
231. Check whether the field is a array notifyAll.
232. Check whether the field is a array finalize.
233. Check whether the field is a array clone.
234. Check whether the field is a array toString.
235. Check whether the field is a array hashCode.
236. Check whether the field is a array equals.
237. Check whether the field is a array compareTo.
238. Check whether the field is a array compareToIgnoreCase.
239. Check whether the field is a array contentEquals.
240. Check whether the field is a array getClass.
241. Check whether the field is a array wait.
242. Check whether the field is a array notify.
243. Check whether the field is a array notifyAll.
244. Check whether the field is a array finalize.
245. Check whether the field is a array clone.
246. Check whether the field is a array toString.
247. Check whether the field is a array hashCode.
248. Check whether the field is a array equals.
249. Check whether the field is a array compareTo.
250. Check whether the field is a array compareToIgnoreCase.
251. Check whether the field is a array contentEquals.
252. Check whether the field is a array getClass.
253. Check whether the field is a array wait.
254. Check whether the field is a array notify.
255. Check whether the field is a array notifyAll.
256. Check whether the field is a array finalize.
257. Check whether the field is a array clone.
258. Check whether the field is a array toString.
259. Check whether the field is a array hashCode.
260. Check whether the field is a array equals.
261. Check whether the field is a array compareTo.
262. Check whether the field is a array compareToIgnoreCase.
263. Check whether the field is a array contentEquals.
264. Check whether the field is a array getClass.
265. Check whether the field is a array wait.
266. Check whether the field is a array notify.
267. Check whether the field is a array notifyAll.
268. Check whether the field is a array finalize.
269. Check whether the field is a array clone.
270. Check whether the field is a array toString.
271. Check whether the field is a array hashCode.
272. Check whether the field is a array equals.
273. Check whether the field is a array compareTo.
274. Check whether the field is a array compareToIgnoreCase.
275. Check whether the field is a array contentEquals.
276. Check whether the field is a array getClass.
277. Check whether the field is a array wait.
278. Check whether the field is a array notify.
279. Check whether the field is a array notifyAll.
280. Check whether the field is a array finalize.
281. Check whether the field is a array clone.
282. Check whether the field is a array toString.
283. Check whether the field is a array hashCode.
284. Check whether the field is a array equals.
285. Check whether the field is a array compareTo.
286. Check whether the field is a array compareToIgnoreCase.
287. Check whether the field is a array contentEquals.
288. Check whether the field is a array getClass.
289. Check whether the field is a array wait.
290. Check whether the field is a array notify.
291. Check whether the field is a array notifyAll.
292. Check whether the field is a array finalize.
293. Check whether the field is a array clone.
294. Check whether the field is a array toString.
295. Check whether the field is a array hashCode.
296. Check whether the field is a array equals.
297. Check whether the field is a array compareTo.
298. Check whether the field is a array compareToIgnoreCase.
299. Check whether the field is a array contentEquals.
300. Check whether the field is a array getClass.
301. Check whether the field is a array wait.
302. Check whether the field is a array notify.
303. Check whether the field is a array notifyAll.
304. Check whether the field is a array finalize.
305. Check whether the field is a array clone.
306. Check whether the field is a array toString.
307. Check whether the field is a array hashCode.
308. Check whether the field is a array equals.
309. Check whether the field is a array compareTo.
310. Check whether the field is a array compareToIgnoreCase.
311. Check whether the field is a array contentEquals.
312. Check whether the field is a array getClass.
313. Check whether the field is a array wait.
314. Check whether the field is a array notify.
315. Check whether the field is a array notifyAll.
316. Check whether the field is a array finalize.
317. Check whether the field is a array clone.
318. Check whether the field is a array toString.
319. Check whether the field is a array hashCode.
320. Check whether the field is a array equals.
321. Check whether the field is a array compareTo.
322. Check whether the field is a array compareToIgnoreCase.
323. Check whether the field is a array contentEquals.
324. Check whether the field is a array getClass.
325. Check whether the field is a array wait.
326. Check whether the field is a array notify.
327. Check whether the field is a array notifyAll.
328. Check whether the field is a array finalize.
329. Check whether the field is a array clone.
330. Check whether the field is a array toString.
331. Check whether the field is a array hashCode.
332. Check whether the field is a array equals.
333. Check whether the field is a array compareTo.
334. Check whether the field is a array compareToIgnoreCase.
335. Check whether the field is a array contentEquals.
336. Check whether the field is a array getClass.
337. Check whether the field is a array wait.
338. Check whether the field is a array notify.
339. Check whether the field is a array notifyAll.
340. Check whether the field is a array finalize.
341. Check whether the field is a array clone.
342. Check whether the field is a array toString.
343. Check whether the field is a array hashCode.
344. Check whether the field is a array equals.
345. Check whether the field is a array compareTo.
346. Check whether the field is a array compareToIgnoreCase.
347. Check whether the field is a array contentEquals.
348. Check whether the field is a array getClass.
349. Check whether the field is a array wait.
350. Check whether the field is a array notify.
351. Check whether the field is a array notifyAll.
352. Check whether the field is a array finalize.
353. Check whether the field is a array clone.
354. Check whether the field is a array
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals.* 匹配到的元操作或API：
query: Check whether the name is equals.
most similar API: Check whether is equals method
cosine Similarity: 0.8145300149917603
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
*Check whether the method caller is a method call.* 匹配到的元操作或API：
query: Check whether the method caller is a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8533448576927185
*Get the method caller of the method caller.* 匹配到的元操作或API：
logic: Get the method caller of the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9095522165298462
*Check whether the method caller is a field.* 匹配到的元操作或API：
logic: Check whether the method caller is a field.
most similar meta operation: Check whether the method caller is record type
cosine Similarity: 0.8503203988075256
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is volatile.* 匹配到的元操作或API：
logic: Check whether the field is volatile.
most similar meta operation: Check whether the field is volatile
cosine Similarity: 0.9884835481643677
*Check whether the field is transient.* 匹配到的元操作或API：
logic: Check whether the field is transient.
most similar meta operation: Check whether the field is transient
cosine Similarity: 0.9895565509796143
*Check whether the field is initialized.* 匹配到的元操作或API：
logic: Check whether the field is initialized.
most similar meta operation: Check whether the field is initialized
cosine Similarity: 0.9865798950195312
*Check whether the field is initialized to literal value.* 匹配到的元操作或API：
logic: Check whether the field is initialized to literal value.
most similar meta operation: Check whether the field is initialized
cosine Similarity: 0.9092312455177307
*Check whether the field is initialized to variable value.* 匹配到的元操作或API：
logic: Check whether the field is initialized to variable value.
most similar meta operation: Check whether the field is initialized to variable value
cosine Similarity: 0.9891040325164795
*Get the literal value that the field is initialized to.* 匹配到的元操作或API：
logic: Get the literal value that the field is initialized to.
most similar meta operation: Get the literal value that the field is initialized to
cosine Similarity: 0.9854511022567749
*Check whether the field is a local variable.* 匹配到的元操作或API：
logic: Check whether the field is a local variable.
most similar meta operation: Check whether the accessed variable is a local variable
cosine Similarity: 0.8961758613586426
*Check whether the field is a formal parameter.* 匹配到的元操作或API：
logic: Check whether the field is a formal parameter.
most similar meta operation: Check whether the formal parameter is record type
cosine Similarity: 0.854501485824585
*Check whether the field is a accessed variable.* 匹配到的元操作或API：
logic: Check whether the field is a accessed variable.
most similar meta operation: Check whether the accessed variable is a field
cosine Similarity: 0.9586765170097351
*Check whether the field is a method call.* 匹配到的元操作或API：
query: Check whether the field is a method call.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8433461785316467
*Check whether the field is a constructor call.* 匹配到的元操作或API：
query: Check whether the field is a constructor call.
most similar API: Check whether is ref to field of this instance
cosine Similarity: 0.8106200098991394
*Check whether the field is a array access.* 匹配到的元操作或API：
logic: Check whether the field is a array access.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8967502117156982
*Check whether the field is a array creation.* 匹配到的元操作或API：
logic: Check whether the field is a array creation.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8849005103111267
*Check whether the field is a array initialization.* 匹配到的元操作或API：
logic: Check whether the field is a array initialization.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8759430646896362
*Check whether the field is a array length.* 匹配到的元操作或API：
logic: Check whether the field is a array length.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8849468231201172
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array toString.* 匹配到的元操作或API：
logic: Check whether the field is a array toString.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.893584132194519
*Check whether the field is a array hashCode.* 匹配到的元操作或API：
logic: Check whether the field is a array hashCode.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8702170848846436
*Check whether the field is a array equals.* 匹配到的元操作或API：
logic: Check whether the field is a array equals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9139949083328247
*Check whether the field is a array compareTo.* 匹配到的元操作或API：
logic: Check whether the field is a array compareTo.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.883551299571991
*Check whether the field is a array compareToIgnoreCase.* 匹配到的元操作或API：
logic: Check whether the field is a array compareToIgnoreCase.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8822835683822632
*Check whether the field is a array contentEquals.* 匹配到的元操作或API：
logic: Check whether the field is a array contentEquals.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8754533529281616
*Check whether the field is a array getClass.* 匹配到的元操作或API：
logic: Check whether the field is a array getClass.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8832765221595764
*Check whether the field is a array wait.* 匹配到的元操作或API：
query: Check whether the field is a array wait.
most similar API: Check whether is array length field access
cosine Similarity: 0.8079809546470642
*Check whether the field is a array notify.* 匹配到的元操作或API：
logic: Check whether the field is a array notify.
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.8785163164138794
*Check whether the field is a array notifyAll.* 匹配到的元操作或API：
query: Check whether the field is a array notifyAll.
most similar API: Check whether is array length field access
cosine Similarity: 0.8142451643943787
*Check whether the field is a array finalize.* 匹配到的元操作或API：
logic: Check whether the field is a array finalize.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.854417085647583
*Check whether the field is a array clone.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is a array* 匹配到的元操作或API：
logic: Check whether the field is a array
most similar meta operation: Check whether the field is array type
cosine Similarity: 0.9566054344177246
89
74
95
78
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.
3. Get the method caller.
4. Check whether the method caller is a string literal.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a string literal.
If the called method name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals and the method caller is a string literal and the argument is a string literal, then this test case does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a string literal.* 匹配到的元操作或API：
logic: Check whether the argument is a string literal.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.9077170491218567
=========================logics=========================
1. Get the condition of the if statement.
2. Check whether the condition is a method call.
3. Get the name of the called method.
4. Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
5. Get the method caller.
6. Check whether the method caller is a method call (e.g., `getStr("b")`).
7. Get the argument of the called method.
8. Check whether the argument is a string literal (e.g., `"ab"`).
9. Check whether the method caller is a string literal and the argument is a method call or variable.

If the method caller is not a string literal and the argument is a string literal, then this test case violates the rule. In this case, the first `if` statement violates the rule because `getStr("b").equals("ab")` does not place the literal first. The second `if` statement complies with the rule because `"ab".equals(getStr("b"))` places the literal first.
*Get the condition of the if statement.* 匹配到的元操作或API：
logic: Get the condition of the if statement.
most similar meta operation: Get the condition of if statement
cosine Similarity: 0.9738380908966064
*Check whether the condition is a method call.* 匹配到的元操作或API：
query: Check whether the condition is a method call.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8619776368141174
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.* 匹配到的元操作或API：
query: Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
most similar API: Check whether the method equals
cosine Similarity: 0.8280919790267944
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a method call (e.g., `getStr("b")`).* 匹配到的元操作或API：
query: Check whether the method caller is a method call (e.g., `getStr("b")`).
most similar API: Check whether is getter call
cosine Similarity: 0.8245909810066223
*Get the argument of the called method.* 匹配到的元操作或API：
logic: Get the argument of the called method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.9677789211273193
*Check whether the argument is a string literal (e.g., `"ab"`).* 匹配到的元操作或API：
logic: Check whether the argument is a string literal (e.g., `"ab"`).
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.8671841025352478
*Check whether the method caller is a string literal and the argument is a method call or variable.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal and the argument is a method call or variable.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.8838169574737549
91
75
=========================logics=========================
1. Get all method calls in the test case.
2. Check whether the method call name is `equals`.
3. Get the method caller of the `equals` method.
4. Check whether the method caller is a non-literal expression (e.g., `hasMap.getMap().get("foo")`).
5. Get the argument of the `equals` method.
6. Check whether the argument is a string literal (e.g., `"bar"` or `"fum"`).
7. Check whether the method caller is a string literal and the argument is a non-literal expression (this would be the correct order).
8. Count the number of violations where the method caller is a non-literal expression and the argument is a string literal.

In this test case:
- `hasMap.getMap().get("foo").equals("bar")` violates the rule because the method caller is a non-literal expression and the argument is a string literal.
- `hasMap.getMap().get("fi").equals("fum")` violates the rule for the same reason.

The number of violations is 2, as stated in the description.
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method call name is `equals`.* 匹配到的元操作或API：
query: Check whether the method call name is `equals`.
most similar API: Check whether the method call equals
cosine Similarity: 0.9317341446876526
*Get the method caller of the `equals` method.* 匹配到的元操作或API：
logic: Get the method caller of the `equals` method.
most similar meta operation: Get the method caller
cosine Similarity: 0.8531227707862854
*Check whether the method caller is a non-literal expression (e.g., `hasMap.getMap().get("foo")`).* 匹配到的元操作或API：
query: Check whether the method caller is a non-literal expression (e.g., `hasMap.getMap().get("foo")`).
most similar API: Check whether the method call is expression
cosine Similarity: 0.8585419058799744
*Get the argument of the `equals` method.* 匹配到的元操作或API：
query: Get the argument of the `equals` method.
most similar API: get arguments of method call
cosine Similarity: 0.8013982176780701
*Check whether the argument is a string literal (e.g., `"bar"` or `"fum"`).* 匹配到的元操作或API：
logic: Check whether the argument is a string literal (e.g., `"bar"` or `"fum"`).
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.8580542802810669
*Check whether the method caller is a string literal and the argument is a non-literal expression (this would be the correct order).* 匹配到的元操作或API：
query: Check whether the method caller is a string literal and the argument is a non-literal expression (this would be the correct order).
most similar API: Check whether the method call is expression
cosine Similarity: 0.8535241484642029
*Count the number of violations where the method caller is a non-literal expression and the argument is a string literal.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a field.
9. Check whether the field is static.
10. Check whether the field is final.
11. Check whether the field is a String type.
If the called method name is equals and the argument is a static final String field and the method caller is an object of String, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals.* 匹配到的元操作或API：
query: Check whether the name is equals.
most similar API: Check whether the field equals
cosine Similarity: 0.8173662424087524
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a field.* 匹配到的元操作或API：
query: Check whether the argument is a field.
most similar API: Check whether the field is syntactically abstract
cosine Similarity: 0.8235291242599487
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Check whether the field is a String type.* 匹配到的元操作或API：
logic: Check whether the field is a String type.
most similar meta operation: Check whether the field is string type
cosine Similarity: 0.9841241240501404
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals or equalsIgnoreCase or compareTo or compareToIgnoreCase or contentEquals.
3. Get the method caller.
4. Check whether the method caller is a field.
5. Check whether the field is final.
6. Get the argument list of method.
7. Check whether the argument is a literal.
If the called method name is equals or equalsIgnoreCase or compareTo or compareToIgnoreCase or contentEquals and the method caller is a non-final field and the argument is a literal, then this test case does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals or equalsIgnoreCase or compareTo or compareToIgnoreCase or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a field.* 匹配到的元操作或API：
logic: Check whether the method caller is a field.
most similar meta operation: Check whether the method caller is record type
cosine Similarity: 0.8503203988075256
*Check whether the field is final.* 匹配到的元操作或API：
logic: Check whether the field is final.
most similar meta operation: Check whether the field is final
cosine Similarity: 0.9875956177711487
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a literal.* 匹配到的元操作或API：
query: Check whether the argument is a literal.
most similar API: Check whether is boolean literal
cosine Similarity: 0.8468946814537048
=========================logics=========================
1. Get the name of called method.
        2. Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.
        3. Get the method caller.
        4. Check whether the method caller is a string literal.
        5. Get the argument list of method.
        6. Check whether the argument is a field.
        7. Check whether the field is static.
        If the called method name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals and the method caller is not a string literal and the argument is a non-static field, then this test case does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a string literal.* 匹配到的元操作或API：
logic: Check whether the method caller is a string literal.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9311872720718384
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Check whether the argument is a field.* 匹配到的元操作或API：
query: Check whether the argument is a field.
most similar API: Check whether the field is syntactically abstract
cosine Similarity: 0.8235291242599487
*Check whether the field is static.* 匹配到的元操作或API：
logic: Check whether the field is static.
most similar meta operation: Check whether the field is static
cosine Similarity: 0.9852341413497925
=========================logics=========================
1. Get the name of called method.
        2. Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.
        3. Get the method caller.
        4. Check whether the type of method caller is String class type.
        5. Get the argument list of method.
        6. Get the size of argument list.
        7. Check whether the size of argument list is 1.
        8. Get the type of argument.
        9. Check whether the argument is a String literal or a String constant.
        10. Check whether the method caller is a String literal or a String constant.
        If the called method is one of the String comparison methods and the method caller is not a String literal or a String constant, then this test case violate the rule. Otherwise, it does not violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals, equalsIgnoreCase, compareTo, compareToIgnoreCase, or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Get the type of argument.* 匹配到的元操作或API：
logic: Get the type of argument.
most similar meta operation: Get the type of argument
cosine Similarity: 0.9841679334640503
*Check whether the argument is a String literal or a String constant.* 匹配到的元操作或API：
logic: Check whether the argument is a String literal or a String constant.
most similar meta operation: Check whether the argument is string type
cosine Similarity: 0.8631155490875244
*Check whether the method caller is a String literal or a String constant.* 匹配到的元操作或API：
logic: Check whether the method caller is a String literal or a String constant.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.8957539796829224
=========================logics=========================
1. Get all method calls in the class.
2. Check whether the method call is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
3. For each relevant method call:
   - Get the method caller.
   - Check whether the method caller is a variable or field (not a literal or constant).
   - Get the argument of the method call.
   - Check whether the argument is a literal or constant.
4. If the method caller is not a literal or constant and the argument is a literal or constant, then this violates the rule.

In the provided test case:
- The method calls `type.equals(Q)` and `type.equals(T)` are checked.
- `type` is a variable (not a literal or constant).
- `Q` and `T` are constants (static final fields).
- Since the literals/constants (`Q` and `T`) are not placed first in the comparison, this test case violates the rule twice.
*Get all method calls in the class.* 匹配到的元操作或API：
query: Get all method calls in the class.
most similar API: get method name of method call
cosine Similarity: 0.8157881498336792
*Check whether the method call is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.* 匹配到的元操作或API：
query: Check whether the method call is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8661156296730042
*For each relevant method call:* 匹配到的元操作或API：
未匹配成功元操作或API
*If the method caller is not a literal or constant and the argument is a literal or constant, then this violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the called method in the if condition.
2. Check whether the called method is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
3. Get the method caller.
4. Check whether the method caller is a literal or a constant field.
5. Get the argument of the called method.
6. Check whether the argument is a variable or a non-constant expression.
7. Check whether the method caller is a literal or a constant field and the argument is a variable or a non-constant expression.

If the method caller is a literal or a constant field and the argument is a variable or a non-constant expression, then this test case adheres to the rule. Otherwise, it violates the rule. In this test case, the method caller is a constant field (`Q`), and the argument is a variable (`type`), so it adheres to the rule.
*Get the name of the called method in the if condition.* 匹配到的元操作或API：
logic: Get the name of the called method in the if condition.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9052807092666626
*Check whether the called method is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.* 匹配到的元操作或API：
query: Check whether the called method is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
most similar API: Check whether the method call equals
cosine Similarity: 0.8633910417556763
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a literal or a constant field.* 匹配到的元操作或API：
query: Check whether the method caller is a literal or a constant field.
most similar API: Check whether the method call is compile time constant
cosine Similarity: 0.8541296720504761
*Get the argument of the called method.* 匹配到的元操作或API：
logic: Get the argument of the called method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.9677789211273193
*Check whether the argument is a variable or a non-constant expression.* 匹配到的元操作或API：
query: Check whether the argument is a variable or a non-constant expression.
most similar API: Check whether the variable access is expression
cosine Similarity: 0.8388809561729431
*Check whether the method caller is a literal or a constant field and the argument is a variable or a non-constant expression.* 匹配到的元操作或API：
query: Check whether the method caller is a literal or a constant field and the argument is a variable or a non-constant expression.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8461019992828369
96
79
=========================logics=========================
1. Get all method calls in the test case.
2. Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
3. For each method call identified in step 2:
   - Get the method caller.
   - Check whether the method caller is a string literal.
   - Get the first argument of the method call.
   - Check whether the first argument is a string literal.
4. If the method caller is not a string literal but the first argument is a string literal, then this test case violates the rule.

In the provided test case:
- The method call `S1.equals(S2)` has `S1` as the method caller and `S2` as the first argument. Neither is a string literal, so it does not violate the rule.
- The method call `PMDVersion.VERSION.equals(S2)` has `PMDVersion.VERSION` as the method caller and `S2` as the first argument. Neither is a string literal, so it does not violate the rule.

Thus, the test case does not violate the rule.
*Get all method calls in the test case.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.* 匹配到的元操作或API：
query: Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
most similar API: Check whether the method equals
cosine Similarity: 0.8280919790267944
*For each method call identified in step 2:* 匹配到的元操作或API：
未匹配成功元操作或API
*If the method caller is not a string literal but the first argument is a string literal, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the called method.
2. Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
3. Get the method caller.
4. Check whether the method caller is a literal (e.g., a string literal or constant).
5. Get the argument of the method call.
6. Check whether the argument is a literal or a constant.
7. Check whether the literal or constant is positioned first in the comparison.

If the method name is one of the specified comparison methods and the literal or constant is not positioned first in the comparison, then this test case violates the rule. However, in this test case, the literal `PMDVersion.VERSION` is positioned first, so it adheres to the rule.
*Get the name of the called method.* 匹配到的元操作或API：
logic: Get the name of the called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9750091433525085
*Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.* 匹配到的元操作或API：
query: Check whether the method name is `equals`, `equalsIgnoreCase`, `compareTo`, `compareToIgnoreCase`, or `contentEquals`.
most similar API: Check whether the method equals
cosine Similarity: 0.8280919790267944
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the method caller is a literal (e.g., a string literal or constant).* 匹配到的元操作或API：
logic: Check whether the method caller is a literal (e.g., a string literal or constant).
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.8746865391731262
*Get the argument of the method call.* 匹配到的元操作或API：
logic: Get the argument of the method call.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.9464631080627441
*Check whether the argument is a literal or a constant.* 匹配到的元操作或API：
query: Check whether the argument is a literal or a constant.
most similar API: Check whether the string literal is compile time constant
cosine Similarity: 0.825132429599762
*Check whether the literal or constant is positioned first in the comparison.* 匹配到的元操作或API：
query: Check whether the literal or constant is positioned first in the comparison.
most similar API: compare location of string literal
cosine Similarity: 0.8010321855545044
=========================logics=========================
1. Get the name of called method.
2. Check whether the name is equals or equalsIgnoreCase or compareTo or compareToIgnoreCase or contentEquals.
3. Get the method caller.
4. Check whether the type of method caller is String class type.
5. Get the argument list of method.
6. Get the size of argument list.
7. Check whether the size of argument list is 1.
8. Check whether the argument is a literal.
9. Check whether the method caller is a literal.
If the called method name is equals or equalsIgnoreCase or compareTo or compareToIgnoreCase or contentEquals and the method caller is not a literal and the argument is a literal, then this test case violate the rule.
*Get the name of called method.* 匹配到的元操作或API：
logic: Get the name of called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9817375540733337
*Check whether the name is equals or equalsIgnoreCase or compareTo or compareToIgnoreCase or contentEquals.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the method caller.* 匹配到的元操作或API：
logic: Get the method caller.
most similar meta operation: Get the method caller
cosine Similarity: 0.9796932339668274
*Check whether the type of method caller is String class type.* 匹配到的元操作或API：
logic: Check whether the type of method caller is String class type.
most similar meta operation: Check whether the method caller is string type
cosine Similarity: 0.9724031686782837
*Get the argument list of method.* 匹配到的元操作或API：
logic: Get the argument list of method.
most similar meta operation: Get an argument of called method
cosine Similarity: 0.8603729009628296
*Get the size of argument list.* 匹配到的元操作或API：
query: Get the size of argument list.
most similar API: size of argument list
cosine Similarity: 0.9362415671348572
*Check whether the size of argument list is 1.* 匹配到的元操作或API：
query: Check whether the size of argument list is 1.
most similar API: size of argument list
cosine Similarity: 0.8567349910736084
*Check whether the argument is a literal.* 匹配到的元操作或API：
query: Check whether the argument is a literal.
most similar API: Check whether is boolean literal
cosine Similarity: 0.8468946814537048
*Check whether the method caller is a literal.* 匹配到的元操作或API：
query: Check whether the method caller is a literal.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8410024046897888
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
4. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, java.util.Set), //Returns true if the expression is a {@link ASTNamedReferenceExpr} that references any of the symbol in the set.
6. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.rule.internal.StablePathMatcher)
7. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isEqualsMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)
8. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isBooleanLiteral(net.sourceforge.pmd.lang.java.ast.JavaNode), //Returns true if the node is a boolean literal with any value.
13. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public java.lang.Character getConstValue()
15. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
17. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
18. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
19. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
20. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
21. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
22. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length()
23. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
24. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
25. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
26. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isVolatile()
27. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isTransient()
28. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isRefToFieldOfThisInstance(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression has the form `field`, or `this.field`, where `field` is a field declared in the enclosing class. Considers inherited fields. Assumes we're not in a static context.
29. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayLengthFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression)
30. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isGetterCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
31. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isSyntacticallyAbstract()
32. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isCompileTimeConstant(), //Returns true if this expression is a compile-time constant, and is inlined.
33. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()

1.  //Check whether the method caller is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallerStringType(ASTMethodCall node){
    return TypeTestUtil.isA(String.class, node.getQualifier());
}
```
2.  //Check whether the argument is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return TypeTestUtil.isA(String.class, expression.getTypeMirror());
}
```
3.  //Check whether the return type of called method is char type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isReturnCharType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isPrimitive(JPrimitiveType.PrimitiveTypeKind.CHAR);
}
```
4.  //Check whether the argument is char type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isMethodCallArgumentCharType(ASTMethodCall call) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return expression.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.CHAR);
}
```
5.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```
6.  //Get the return type of called method
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getReturnType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType();
}
```
7.  //Check whether the return type of method is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isReturnValueStringType(ASTMethodDeclaration method) {
    return TypeTestUtil.isA(String.class, method.getResultTypeNode());
}
```
8.  //Check whether the method caller is record type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;
public boolean isMethodCallerEnumType(ASTMethodCall node){
    if(node.getQualifier() != null){
        return node.getQualifier().getTypeMirror().getSymbol() instanceof JClassSymbol && ((JClassSymbol) node.getQualifier().getTypeMirror().getSymbol()).isRecord();
    }
    return false;
}
```
9.  //Check whether the field is initialized
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitialized(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                return true;
            }
        }
    }
    return false;
}
```
10.  //Check whether the field is initialized to variable value
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitializedToVariableValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTVariableAccess) {
                    return true;
                }
            }
        }
    }
    return false;
}
```
11.  //Get the literal value that the field is initialized to
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTLiteral;
import net.sourceforge.pmd.lang.ast.NodeStream;
public ASTLiteral getInitializedValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTLiteral) {
                    return (ASTLiteral)init;
                }
            }
        }
    }
    return null;
}
```
12.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```
13.  //Check whether the formal parameter is record type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;
public boolean isFormalParameterRecordType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().getSymbol() instanceof JClassSymbol && ((JClassSymbol) type.getTypeMirror().getSymbol()).isRecord();
}
```
14.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```
15.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```
16.  //Check whether the field is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isFieldStringType(ASTFieldDeclaration node) {
    return TypeTestUtil.isA(String.class, node.getTypeNode());
}
```
17.  //Get the type of argument
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getMethodCallArgumentType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return expression.getTypeMirror();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import java.util.Set;
import java.util.HashSet;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    private static final Set<String> COMPARISON_METHODS = new HashSet<>();
    static {
        COMPARISON_METHODS.add("equals");
        COMPARISON_METHODS.add("equalsIgnoreCase");
        COMPARISON_METHODS.add("compareTo");
        COMPARISON_METHODS.add("compareToIgnoreCase");
        COMPARISON_METHODS.add("contentEquals");
    }

    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getMethodName();
        if (COMPARISON_METHODS.contains(methodName)) {
            ASTExpression qualifier = node.getQualifier();
            ASTArgumentList arguments = node.getArguments();
            if (arguments.size() == 1) {
                ASTExpression argument = arguments.get(0);
                if (isStringLiteral(qualifier) && !isStringLiteral(argument)) {
                    return super.visit(node, data);
                }
                if (!isStringLiteral(qualifier) && isStringLiteral(argument)) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isStringLiteral(ASTExpression expr) {
        if (expr instanceof ASTStringLiteral) {
            return true;
        }
        if (expr instanceof ASTVariableAccess) {
            JVariableSymbol sym = ((ASTVariableAccess) expr).getReferencedSym();
            if (sym instanceof JFieldSymbol) {
                JFieldSymbol fieldSym = (JFieldSymbol) sym;
                if (fieldSym.isStatic() && fieldSym.isFinal()) {
                    JTypeMirror type = fieldSym.getTypeMirror();
                    return TypeTestUtil.isA(String.class, type);
                }
            }
        }
        return false;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.;

The following are the test cases of the rule:
1. This is a positive test case
```java
// ok, literal comes first in .equals comparison
public class Foo {
    boolean bar(String x) {
        return "2".equals(x);
    }
}
```
2. This is a negative test case
```java
// bad, literal comes last in .equals comparison
public class Foo {
    boolean bar(String x) {
        return x.equals("2");
    }
}
```
3. This is a negative test case
```java
// ok, empty literal in .equals comparison
public class Foo {
    void bar(String str) {
        if ((str == null) || (str.equals(""))) {
            str = "snafu";
        }
        if (str == null || str.equals("")) {
            str = "snafu";
        }
        if ((str != null) && (str.equals(""))) {
            str = "snafu";
        }
        if (str != null && str.equals("")) {
            str = "snafu";
        }
    }
}
```
4. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug(Number number)
    {
        if (number.equals(new BigDecimal("123"))) {}
    }
}
```
5. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equals false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (str.equals(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
6. This is a positive test case
```java
// #1256 PositionLiteralsFirstInComparisons .equals false positive with Characters
public class LiteralTest {
    protected final boolean check;
    public LiteralTest(Character c) {
        check = c.equals('x');
    }
}
```
7. This is a positive test case
```java
// ok, literal comes first in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".equalsIgnoreCase(x);
    }
}
```
8. This is a negative test case
```java
// bad, literal comes last in .equalsIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.equalsIgnoreCase("2");
    }
}
```
9. This is a positive test case
```java
// ok, testing .equalsIgnoreCase false positive
public class Foo {
    void bar() {
        if ((str == null) || (equalsIgnoreCase(""))) {
            str = "snafu";
        }
    }
}
```
10. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
import java.math.BigDecimal;
public class Foo
{
    public void bug()
    {
        if (equalsIgnoreCase(new BigDecimal("123"))) {}
    }
}
```
11. This is a positive test case
```java
// Test case from bug [1472195] - PositionLiteralsFirstInComparisons gives many .equalsIgnoreCase false positives
public class Foo
{
    public void testMethod(String str)
    {
        if (equalsIgnoreCase(getAnotherString("abc"))){}
    }

    private String getAnotherString(String str)
    {
        return "xyz";
    }
}
```
12. This is a positive test case
```java
// ok, literal comes first in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareTo(x) < 0;
    }
}
```
13. This is a negative test case
```java
// bad, literal comes last in .compareTo comparison
public class Foo {
    boolean bar(String x) {
        return x.compareTo("2") > 0;
    }
}
```
14. This is a positive test case
```java
// ok, testing for .compareTo false positive
public class Foo {
    boolean bar() {
        return compareTo("randomStringArg");
    }
}
```
15. This is a positive test case
```java
// ok, literal comes first in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return "2".compareToIgnoreCase(x) < 0;
    }
}
```
16. This is a negative test case
```java
// bad, literal comes last in .compareToIgnoreCase comparison
public class Foo {
    boolean bar(String x) {
        return x.compareToIgnoreCase("2") > 0;
    }
}
```
17. This is a positive test case
```java
// ok, testing ,compareToIgnoreCase false positive
public class Foo {
    String bar() {
        return compareToIgnoreCase("randomStringArg");
    }
}
```
18. This is a positive test case
```java
// ok, literal comes first in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return "2".contentEquals(x);
    }
}
```
19. This is a negative test case
```java
// bad, literal comes last in .contentEquals comparison
public class Foo {
    boolean bar(String x) {
        return x.contentEquals("2");
    }
}
```
20. This is a positive test case
```java
// ok, testing .contentEquals false positive
public class Foo {
    boolean bar(String x) {
        return contentEquals("2");
    }
}
```
21. This is a negative test case
```java
// bad, testing false negative at the end of a chain
import java.io.File;
public class Foo {
    public boolean bar() {
        File f;
        return f.getParent().equals("testStr");
    }
}
```
22. This is a positive test case
```java
// ok, should be ignored in case both operands are string literals
public class Foo {
    boolean isFoo;
    public void bar() {
        this.isFoo = "Hello".equals("World");
    }
}
```
23. This is a negative test case
```java
// Equals on method result with String argument
public class Foo {
    private String getStr(String a) {
        return "a" + a;
    }
    public void bar() {
        if (getStr("b").equals("ab")) { }   // nok
        if ("ab".equals(getStr("b"))) { }   // ok
    }
}
```
24. This is a negative test case
```java
// FN with unresolved types
import java.util.Map;
import my.Unknown;
class Foo {
    public void testObjectArray(Unknown uk) {
        Unknown hasMap = (Unknown) this.beanFactory.getBean("literalMap");
        assertTrue(hasMap.getMap().size() == 3);
        assertTrue(hasMap.getMap().get("foo").equals("bar"));
        assertTrue(hasMap.getMap().get("fi").equals("fum"));
        assertTrue(hasMap.getMap().get("fa") == null);
    }
}
```
25. This is a negative test case
```java
// #575 LiteralsFirstInComparisons to consider constant fields, i.e. static final Strings
public class Foo {
    private static final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
26. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not final
public class Foo {
    private static String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
27. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the field is not static
public class Foo {
    private final String TEST_CONSTANT = "Test-Constant";
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
28. This is a positive test case
```java
// #575 LiteralsFirstInComparisons must not trigger if the constant field is not a String
public class Foo {
    private final Integer TEST_CONSTANT = 5;
    public boolean test(String someString) {
        return someString.equals(TEST_CONSTANT);
    }
}
```
29. This is a negative test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static final String T = "t";

                public static int convert(String type) {
                    if (type.equals(Q)) {
                        return 1;
                    } else if (type.equals(T)) {
                        return 2;
                    } else {
                        return 3;
                    }
                }
            }
```
30. This is a positive test case
```java
// #3236 [java] LiteralsFirstInComparisons should consider constant fields (cont'd)
class DT1 {
                public static final String Q = "q";
                public static int convert2(String type) {
                    if (Q.equals(type)) {
                        return 1;
                    } else {
                        return 3;
                    }
                }
            }
```
31. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315
import net.sourceforge.pmd.PMDVersion;
public class LiteralsFirstInComparisonCase {
    private static final String S1 = "s1";
    private static final String S2 = "s2";
    public static boolean compare() {
        return S1.equals(S2);
    }
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
32. This is a positive test case
```java
// [java] LiteralsFirstInComparisons with two constants #3315 - with on demand import
import net.sourceforge.pmd.*;
public class LiteralsFirstInComparisonCase {
    private static final String S2 = "s2";
    public static boolean isUnkown() {
        return PMDVersion.VERSION.equals(S2);
    }
}
```
33. This is a positive test case
```java
// False positive with non-String constants
import java.math.BigInteger;

public class LiteralsFirstInComparisonBigInteger {
    public void foo() {
        BigInteger value = new BigInteger("1");
        if (value.equals(BigInteger.ZERO)) {
            System.out.println("1==0!!");
        }
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.bestpractices;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
2. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
3. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
4. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public int size(), //Returns the number of nodes in this list. This must be the number of nodes yielded by the {@link #iterator()}.
5. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isReferenceToVar(net.sourceforge.pmd.lang.java.ast.ASTExpression, java.util.Set), //Returns true if the expression is a {@link ASTNamedReferenceExpr} that references any of the symbol in the set.
6. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.rule.internal.StablePathMatcher)
7. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isEqualsMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration)
8. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
9. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
11. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isStringLiteral(), //Returns true if this is a {@linkplain ASTStringLiteral string literal}.
12. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isBooleanLiteral(net.sourceforge.pmd.lang.java.ast.JavaNode), //Returns true if the node is a boolean literal with any value.
13. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean equals(java.lang.Object)
14. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public java.lang.Character getConstValue()
15. net.sourceforge.pmd.lang.java.ast.ASTCharLiteral: public boolean equals(java.lang.Object)
16. net.sourceforge.pmd.lang.java.ast.ASTIfStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
17. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
18. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr getLeftOperand()
19. net.sourceforge.pmd.lang.java.ast.ASTNullLiteral: public boolean isNullLiteral(), //Returns true if this is the {@linkplain ASTNullLiteral null literal}.
20. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
21. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
22. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public int length()
23. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
24. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isFinal()
25. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isStatic()
26. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isVolatile()
27. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isTransient()
28. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isRefToFieldOfThisInstance(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Returns true if the expression has the form `field`, or `this.field`, where `field` is a field declared in the enclosing class. Considers inherited fields. Assumes we're not in a static context.
29. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isArrayLengthFieldAccess(net.sourceforge.pmd.lang.java.ast.ASTExpression)
30. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isGetterCall(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
31. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public boolean isSyntacticallyAbstract()
32. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isCompileTimeConstant(), //Returns true if this expression is a compile-time constant, and is inlined.
33. net.sourceforge.pmd.lang.java.ast.ASTStringLiteral: public boolean isCompileTimeConstant()

1.  //Check whether the method caller is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallerStringType(ASTMethodCall node){
    return TypeTestUtil.isA(String.class, node.getQualifier());
}
```
2.  //Check whether the argument is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isMethodCallArgumentStringType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return TypeTestUtil.isA(String.class, expression.getTypeMirror());
}
```
3.  //Check whether the return type of called method is char type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isReturnCharType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isPrimitive(JPrimitiveType.PrimitiveTypeKind.CHAR);
}
```
4.  //Check whether the argument is char type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isMethodCallArgumentCharType(ASTMethodCall call) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return expression.getTypeMirror().isPrimitive(JPrimitiveType.PrimitiveTypeKind.CHAR);
}
```
5.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```
6.  //Get the return type of called method
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getReturnType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType();
}
```
7.  //Check whether the return type of method is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isReturnValueStringType(ASTMethodDeclaration method) {
    return TypeTestUtil.isA(String.class, method.getResultTypeNode());
}
```
8.  //Check whether the method caller is record type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;
public boolean isMethodCallerEnumType(ASTMethodCall node){
    if(node.getQualifier() != null){
        return node.getQualifier().getTypeMirror().getSymbol() instanceof JClassSymbol && ((JClassSymbol) node.getQualifier().getTypeMirror().getSymbol()).isRecord();
    }
    return false;
}
```
9.  //Check whether the field is initialized
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitialized(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                return true;
            }
        }
    }
    return false;
}
```
10.  //Check whether the field is initialized to variable value
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitializedToVariableValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTVariableAccess) {
                    return true;
                }
            }
        }
    }
    return false;
}
```
11.  //Get the literal value that the field is initialized to
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTLiteral;
import net.sourceforge.pmd.lang.ast.NodeStream;
public ASTLiteral getInitializedValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTLiteral) {
                    return (ASTLiteral)init;
                }
            }
        }
    }
    return null;
}
```
12.  //Check whether the accessed variable is a local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JLocalVariableSymbol;
public boolean isVariableAccessLocalVariable(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JLocalVariableSymbol) {
        JLocalVariableSymbol localVariableSymbol = (JLocalVariableSymbol) sym;
        return true;
    }
    return false;
}
```
13.  //Check whether the formal parameter is record type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.symbols.JClassSymbol;
public boolean isFormalParameterRecordType(ASTFormalParameter node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().getSymbol() instanceof JClassSymbol && ((JClassSymbol) type.getTypeMirror().getSymbol()).isRecord();
}
```
14.  //Check whether the accessed variable is a field
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
import net.sourceforge.pmd.lang.java.symbols.JFieldSymbol;
public boolean isVariableAccessField(ASTVariableAccess node) {
    JVariableSymbol sym = node.getReferencedSym();
    if (sym instanceof JFieldSymbol) {
        JFieldSymbol fieldSym = (JFieldSymbol) sym;
        return true;
    }
    return false;
}
```
15.  //Check whether the field is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
public boolean isFieldArrayType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    return type.getTypeMirror().isArray();
}
```
16.  //Check whether the field is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isFieldStringType(ASTFieldDeclaration node) {
    return TypeTestUtil.isA(String.class, node.getTypeNode());
}
```
17.  //Get the type of argument
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.ast.ASTArgumentList;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getMethodCallArgumentType(ASTMethodCall node) {
    ASTArgumentList astArgumentList = node.getArguments();
    //select which argument to judge
    ASTExpression expression = astArgumentList.get(0);
    return expression.getTypeMirror();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.bestpractices;


import java.util.Set;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule {

    public LiteralsFirstInComparisonsRule() {
        super(ASTMethodCall.class);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        String methodName = node.getMethodName();
        if (isComparisonMethod(methodName)) {
            if (isMethodCallerStringType(node)) {
                ASTExpression qualifier = node.getQualifier();
                ASTArgumentList arguments = node.getArguments();
                if (arguments.size() == 1) {
                    ASTExpression argument = arguments.get(0);
                    if (isStringLiteral(qualifier) && !isStringLiteral(argument)) {
                        return super.visit(node, data);
                    }
                    if (!isStringLiteral(qualifier) && isStringLiteral(argument)) {
                        addViolation(data, node);
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    private boolean isComparisonMethod(String methodName) {
        return "equals".equals(methodName) || "equalsIgnoreCase".equals(methodName) ||
               "compareTo".equals(methodName) || "compareToIgnoreCase".equals(methodName) ||
               "contentEquals".equals(methodName);
    }

    private boolean isMethodCallerStringType(ASTMethodCall node) {
        return TypeTestUtil.isA(String.class, node.getQualifier());
    }

    private boolean isStringLiteral(ASTExpression expression) {
        return expression instanceof ASTStringLiteral;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 17394.83339381218 秒
