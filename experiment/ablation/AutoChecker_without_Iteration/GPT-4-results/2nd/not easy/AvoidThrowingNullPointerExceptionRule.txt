开始

========================================== Rule AvoidThrowingNullPointerExceptionRule ===========================================
一共 9 个测试用例
正例 6 个
反例 3 个
106
91
11
9
85
71
9
7
30
28
9
7
12
10
19
14
90
76
97
81
157
137
12
10
77
63
40
37
15
13
10
8
107
91
94
78
96
79
23
19
27
17
85
71
92
78
12
10
97
91
144
127
11
8
38
34
12
9
=========================logics=========================
1. Get the expression in throw statement.
2. Check whether the type of exception thrown in throw statement is NullPointerException.
If the thrown exception is NullPointerException, then this test case violate the rule.
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Check whether the type of exception thrown in throw statement is NullPointerException.* 匹配到的元操作或API：
logic: Check whether the type of exception thrown in throw statement is NullPointerException.
most similar meta operation: Check whether the exception type thrown by the throw statement is x
cosine Similarity: 0.868859052658081
149
133
96
81
83
69
116
101
114
98
93
78
=========================logics=========================
1. Get the type of object created by constructor call.
2. Check whether the type of object is NullPointerException.
3. Check whether the created object is thrown directly.
If a NullPointerException is instantiated but not thrown, then this test case does not violate the rule.
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
*Check whether the type of object is NullPointerException.* 匹配到的元操作或API：
query: Check whether the type of object is NullPointerException.
most similar API: Check whether is null check
cosine Similarity: 0.8054730892181396
*Check whether the created object is thrown directly.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the expression in throw statement.
2. Check whether the type of exception thrown in throw statement is NullPointerException.
If the thrown exception is a NullPointerException, then this test case violates the rule.
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Check whether the type of exception thrown in throw statement is NullPointerException.* 匹配到的元操作或API：
logic: Check whether the type of exception thrown in throw statement is NullPointerException.
most similar meta operation: Check whether the exception type thrown by the throw statement is x
cosine Similarity: 0.868859052658081
77
63
=========================logics=========================
1. Get the type of object created by constructor call.
2. Check whether the type of object is NullPointerException.
3. Get the assignment expression.
4. Check whether the object created by constructor call is assigned to a variable.
5. Get the name of the assigned variable.
6. Get the throw statement.
7. Get the thrown exception.
8. Check whether the name of the thrown exception matches the name of the assigned variable.
If an object of NullPointerException type is created and assigned to a variable, and then thrown with the same variable name, then this test case would violate the rule. However, in this specific test case, the exception thrown is not the same as the NullPointerException created, hence it does not violate the rule.
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
*Check whether the type of object is NullPointerException.* 匹配到的元操作或API：
query: Check whether the type of object is NullPointerException.
most similar API: Check whether is null check
cosine Similarity: 0.8054730892181396
*Get the assignment expression.* 匹配到的元操作或API：
logic: Get the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.8583638668060303
*Check whether the object created by constructor call is assigned to a variable.* 匹配到的元操作或API：
query: Check whether the object created by constructor call is assigned to a variable.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.830266535282135
*Get the name of the assigned variable.* 匹配到的元操作或API：
logic: Get the name of the assigned variable.
most similar meta operation: Get the name of local variable
cosine Similarity: 0.876572847366333
*Get the throw statement.* 匹配到的元操作或API：
logic: Get the throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9059110879898071
*Get the thrown exception.* 匹配到的元操作或API：
query: Get the thrown exception.
most similar API: get text of throw statement
cosine Similarity: 0.8122556209564209
*Check whether the name of the thrown exception matches the name of the assigned variable.* 匹配到的元操作或API：
未匹配成功元操作或API
97
80
=========================logics=========================
1. Get the expression in throw statement.
2. Check whether the type of exception thrown in throw statement is NullPointerException.
3. Get the name of accessed variable.
4. Check whether the accessed variable is being read.
5. Get the variable declaration of the accessed variable.
6. Check whether the variable declaration is a NullPointerException.
7. Check whether the variable declaration is reassigned to a different exception before being thrown.

If the expression thrown in the throw statement is a NullPointerException and it is not reassigned to a different exception before being thrown, then this test case violates the rule. However, in this case, the NullPointerException is reassigned to a RuntimeException before being thrown, so the test case doesn't violate the rule.
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Check whether the type of exception thrown in throw statement is NullPointerException.* 匹配到的元操作或API：
logic: Check whether the type of exception thrown in throw statement is NullPointerException.
most similar meta operation: Check whether the exception type thrown by the throw statement is x
cosine Similarity: 0.868859052658081
*Get the name of accessed variable.* 匹配到的元操作或API：
logic: Get the name of accessed variable.
most similar meta operation: Get the name of accessed variable
cosine Similarity: 0.986038088798523
*Check whether the accessed variable is being read.* 匹配到的元操作或API：
logic: Check whether the accessed variable is being read.
most similar meta operation: Check whether the accessed variable is being read
cosine Similarity: 0.9878706932067871
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Check whether the variable declaration is a NullPointerException.* 匹配到的元操作或API：
query: Check whether the variable declaration is a NullPointerException.
most similar API: Check whether is null check: Returns true if the expression is a null check on the given variable.
cosine Similarity: 0.8036433458328247
*Check whether the variable declaration is reassigned to a different exception before being thrown.* 匹配到的元操作或API：
query: Check whether the variable declaration is reassigned to a different exception before being thrown.
most similar API: Check whether is just rethrow exception
cosine Similarity: 0.8023318648338318
119
103
84
69
=========================logics=========================
1. Get the name of method.
2. Get the body of method if it is a block.
3. Get the throw statement in method body.
4. Get the expression in throw statement.
5. Check whether the type of exception thrown in throw statement is NullPointerException.
If the type of exception thrown in throw statement is NullPointerException, then this test case violate the rule. However, in the given test case, the NullPointerException is not thrown, it's assigned to a variable after the throw statement. Therefore, this test case doesn't violate the rule.
*Get the name of method.* 匹配到的元操作或API：
logic: Get the name of method.
most similar meta operation: Get the name of method
cosine Similarity: 0.9766309261322021
*Get the body of method if it is a block.* 匹配到的元操作或API：
query: Get the body of method if it is a block.
most similar API: get body of method
cosine Similarity: 0.8958308100700378
*Get the throw statement in method body.* 匹配到的元操作或API：
logic: Get the throw statement in method body.
most similar meta operation: Get a throw exception in method signature
cosine Similarity: 0.8646093010902405
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Check whether the type of exception thrown in throw statement is NullPointerException.* 匹配到的元操作或API：
logic: Check whether the type of exception thrown in throw statement is NullPointerException.
most similar meta operation: Check whether the exception type thrown by the throw statement is x
cosine Similarity: 0.868859052658081
=========================logics=========================
1. Get the expression in throw statement.
2. Get the type of exception thrown in throw statement.
3. Check whether the exception type thrown by the throw statement is NullPointerException.
4. Get the variable declaration of the accessed variable.
5. Get the type of variable.
6. Check whether the type of variable is NullPointerException.
If the exception type thrown by the throw statement is NullPointerException and the type of variable is NullPointerException, then this test case violates the rule.
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Get the type of exception thrown in throw statement.* 匹配到的元操作或API：
logic: Get the type of exception thrown in throw statement.
most similar meta operation: Get the type of exception thrown in throw statement
cosine Similarity: 0.9913609623908997
*Check whether the exception type thrown by the throw statement is NullPointerException.* 匹配到的元操作或API：
logic: Check whether the exception type thrown by the throw statement is NullPointerException.
most similar meta operation: Check whether the exception type thrown by the throw statement is x
cosine Similarity: 0.8715394735336304
*Get the variable declaration of the accessed variable.* 匹配到的元操作或API：
logic: Get the variable declaration of the accessed variable.
most similar meta operation: Get the variable declaration of the accessed variable
cosine Similarity: 0.9881973266601562
*Get the type of variable.* 匹配到的元操作或API：
logic: Get the type of variable.
most similar meta operation: Get the type of local variable
cosine Similarity: 0.9095539450645447
*Check whether the type of variable is NullPointerException.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the expression in throw statement.
2. Check whether the expression is an object created by constructor call.
3. Get the type of object created by constructor call.
4. Check whether the type of object is a NullPointerException class type.
If the expression in throw statement is an object created by a NullPointerException constructor call, then this test case violates the rule.
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Check whether the expression is an object created by constructor call.* 匹配到的元操作或API：
query: Check whether the expression is an object created by constructor call.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.9203702211380005
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
*Check whether the type of object is a NullPointerException class type.* 匹配到的元操作或API：
query: Check whether the type of object is a NullPointerException class type.
most similar API: Check whether the class or interface type is primitive type
cosine Similarity: 0.8051457405090332
=========================logics=========================
1. Get the expression in throw statement.
2. Check whether the expression is an instance of NullPointerException.
If the expression in the throw statement is an instance of NullPointerException, then the test case violates the rule.
*Get the expression in throw statement.* 匹配到的元操作或API：
logic: Get the expression in throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9904441833496094
*Check whether the expression is an instance of NullPointerException.* 匹配到的元操作或API：
query: Check whether the expression is an instance of NullPointerException.
most similar API: Check whether is null check: Returns true if the expression is a null check on the given variable.
cosine Similarity: 0.8337364196777344
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid throwing NullPointerExceptions manually.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// throwing various types
public class Foo {
    void bar() {
        throw new NullPointerException();
    }
}
```
2. This is a positive test case
```java
// no problems if NullPointerException is only instantiated but not thrown
public class Foo {
    void bar() {
        Exception e = new NullPointerException("Test message");
        String msg = e.getMessage();
    }
}
```
3. This is a negative test case
```java
// problem should be detected even if NullPointerException is stored in some intermediate variable
public class Foo {
    void bar() {
        Exception e = new NullPointerException();
        throw e;
    }
}
```
4. This is a positive test case
```java
// variables with same name false positive test
public class Foo {
    void foo() {
        Exception e = new NullPointerException();
        e.printStackTrace();
    }

    void bar() {
        Exception e = new RuntimeException();
        throw e;
    }
}
```
5. This is a positive test case
```java
// ok, variable has been reassigned to RuntimeException before thrown
public class Foo {
    void bar() {
        Exception e = new NullPointerException();
        e = new RuntimeException();
        throw e;
    }
}
```
6. This is a positive test case
```java
// ok, variable is reassigned with NullPointerException after thrown
public class Foo {
    void bar(String s) {
        Exception e = new RuntimeException();
        if (s.equals("throw")) {
            throw e;
        }
        e = new NullPointerException();
    }
}
```
7. This is a negative test case
```java
// bad, variable had been reassigned with NullPointerException before thrown
public class Foo {
    void bar() {
        Exception e = new RuntimeException();
        e = new NullPointerException();
        throw e;
    }
}
```
8. This is a positive test case
```java
// variable is not necessarily an NPE
public class Foo {
    void bar() {
        Exception e = new RuntimeException();
        if (e.toString().isEmpty())
            e = new NullPointerException();
        throw e;
    }
}
```
9. This is a positive test case
```java
// variable is not necessarily an NPE 2
public class Foo {
    void bar(Exception e) {
        if (e.toString().isEmpty())
            e = new NullPointerException();
        throw e;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
3. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.rule.internal.StablePathMatcher)
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.document.Chars getText()
7. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public java.lang.String getName()
8. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
9. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isJustRethrowException(net.sourceforge.pmd.lang.java.ast.ASTCatchClause), //Return true if the catch clause just rethrows the caught exception immediately.
10. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
12. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
15. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public boolean isPrimitiveType()

1.  //Check whether the exception type thrown by the throw statement is x
```java
import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isThrownExceptionxType(ASTThrowStatement node) {
    JTypeMirror thrownType = node.getExpr().getTypeMirror();
    if(TypeTestUtil.isA(x.class, thrownType)){
        return true;
    }
    return false;
}
```
2.  //Get the name of local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getLocalVariableName(ASTLocalVariableDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a local declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
3.  //Check whether the accessed variable is being read
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr;
public boolean variableIsBeingRead(ASTVariableAccess var) {
    if(var.getAccessType() == ASTAssignableExpr.AccessType.READ){
        return true;
    }
    return false;
}
```
4.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
5.  //Get the type of exception thrown in throw statement
```java
import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getThrownExceptionType(ASTThrowStatement node) {
    JTypeMirror thrownType = node.getExpr().getTypeMirror();
    return thrownType;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRulechainRule {
    public AvoidThrowingNullPointerExceptionRule() {
        super(ASTThrowStatement.class, ASTLocalVariableDeclaration.class, ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTThrowStatement node, Object data) {
        if (node.getExpr().getFirstDescendantOfType(ASTConstructorCall.class) != null) {
            ASTConstructorCall constructorCall = node.getExpr().getFirstDescendantOfType(ASTConstructorCall.class);
            if (TypeTestUtil.isA(NullPointerException.class, constructorCall.getTypeNode().getTypeMirror())) {
                addViolationWithMessage(data, constructorCall, "Avoid throwing NullPointerExceptions manually.");
            }
        } else if (node.getExpr().getFirstDescendantOfType(ASTName.class) != null) {
            ASTName name = node.getExpr().getFirstDescendantOfType(ASTName.class);
            if (name.getNameDeclaration() instanceof ASTLocalVariableDeclaration) {
                ASTLocalVariableDeclaration localVariableDeclaration = (ASTLocalVariableDeclaration) name.getNameDeclaration();
                if (TypeTestUtil.isA(NullPointerException.class, localVariableDeclaration.getTypeNode().getTypeMirror())) {
                    addViolationWithMessage(data, name, "Avoid throwing NullPointerExceptions manually.");
                }
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        ASTConstructorCall constructorCall = node.getFirstDescendantOfType(ASTConstructorCall.class);
        if (constructorCall != null && TypeTestUtil.isA(NullPointerException.class, constructorCall.getTypeNode().getTypeMirror())) {
            node.getVariableId().getUserData().put("ExceptionType", "NullPointerException");
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        if (TypeTestUtil.isA(NullPointerException.class, node.getRightOperand().getTypeMirror())) {
            node.getFirstDescendantOfType(ASTName.class).getNameDeclaration().getUserData().put("ExceptionType", "NullPointerException");
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Avoid throwing NullPointerExceptions manually.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// throwing various types
public class Foo {
    void bar() {
        throw new NullPointerException();
    }
}
```
2. This is a positive test case
```java
// no problems if NullPointerException is only instantiated but not thrown
public class Foo {
    void bar() {
        Exception e = new NullPointerException("Test message");
        String msg = e.getMessage();
    }
}
```
3. This is a negative test case
```java
// problem should be detected even if NullPointerException is stored in some intermediate variable
public class Foo {
    void bar() {
        Exception e = new NullPointerException();
        throw e;
    }
}
```
4. This is a positive test case
```java
// variables with same name false positive test
public class Foo {
    void foo() {
        Exception e = new NullPointerException();
        e.printStackTrace();
    }

    void bar() {
        Exception e = new RuntimeException();
        throw e;
    }
}
```
5. This is a positive test case
```java
// ok, variable has been reassigned to RuntimeException before thrown
public class Foo {
    void bar() {
        Exception e = new NullPointerException();
        e = new RuntimeException();
        throw e;
    }
}
```
6. This is a positive test case
```java
// ok, variable is reassigned with NullPointerException after thrown
public class Foo {
    void bar(String s) {
        Exception e = new RuntimeException();
        if (s.equals("throw")) {
            throw e;
        }
        e = new NullPointerException();
    }
}
```
7. This is a negative test case
```java
// bad, variable had been reassigned with NullPointerException before thrown
public class Foo {
    void bar() {
        Exception e = new RuntimeException();
        e = new NullPointerException();
        throw e;
    }
}
```
8. This is a positive test case
```java
// variable is not necessarily an NPE
public class Foo {
    void bar() {
        Exception e = new RuntimeException();
        if (e.toString().isEmpty())
            e = new NullPointerException();
        throw e;
    }
}
```
9. This is a positive test case
```java
// variable is not necessarily an NPE 2
public class Foo {
    void bar(Exception e) {
        if (e.toString().isEmpty())
            e = new NullPointerException();
        throw e;
    }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
2. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
3. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.rule.internal.StablePathMatcher)
4. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.document.Chars getText()
7. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public java.lang.String getName()
8. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isNullCheck(net.sourceforge.pmd.lang.java.ast.ASTExpression, net.sourceforge.pmd.lang.java.symbols.JVariableSymbol), //Returns true if the expression is a null check on the given variable.
9. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isJustRethrowException(net.sourceforge.pmd.lang.java.ast.ASTCatchClause), //Return true if the catch clause just rethrows the caught exception immediately.
10. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public java.lang.String getName()
11. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this method or constructor. Returns null if this is the declaration of an abstract method.
12. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList()
13. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
14. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
15. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public boolean isPrimitiveType()

1.  //Check whether the exception type thrown by the throw statement is x
```java
import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isThrownExceptionxType(ASTThrowStatement node) {
    JTypeMirror thrownType = node.getExpr().getTypeMirror();
    if(TypeTestUtil.isA(x.class, thrownType)){
        return true;
    }
    return false;
}
```
2.  //Get the name of local variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getLocalVariableName(ASTLocalVariableDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a local declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
3.  //Check whether the accessed variable is being read
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTAssignableExpr;
public boolean variableIsBeingRead(ASTVariableAccess var) {
    if(var.getAccessType() == ASTAssignableExpr.AccessType.READ){
        return true;
    }
    return false;
}
```
4.  //Get the variable declaration of the accessed variable
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.symbols.JVariableSymbol;
public ASTVariableDeclaratorId getVariableDeclaration(ASTVariableAccess var) {
    JVariableSymbol symbol = var.getReferencedSym();
    if(symbol != null){
        ASTVariableDeclaratorId declaratorId = symbol.tryGetNode();
        return declaratorId;
    }
    return null;
}
```
5.  //Get the type of exception thrown in throw statement
```java
import net.sourceforge.pmd.lang.java.ast.ASTThrowStatement;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
public JTypeMirror getThrownExceptionType(ASTThrowStatement node) {
    JTypeMirror thrownType = node.getExpr().getTypeMirror();
    return thrownType;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRulechainRule {

    public AvoidThrowingNullPointerExceptionRule() {
        super(ASTThrowStatement.class);
    }

    @Override
    public Object visit(ASTThrowStatement node, Object data) {
        JTypeMirror thrownType = node.getExpr().getTypeMirror();
        if (TypeTestUtil.isA(NullPointerException.class, thrownType)) {
            addViolation(data, node);
        } else {
            ASTVariableAccess variableAccess = node.getFirstDescendantOfType(ASTVariableAccess.class);
            if (variableAccess != null && variableAccess.getReferencedSym() != null) {
                ASTConstructorCall constructorCall = variableAccess.getReferencedSym().tryGetNode().getFirstDescendantOfType(ASTConstructorCall.class);
                if (constructorCall != null && TypeTestUtil.isA(NullPointerException.class, constructorCall.getTypeNode().getTypeMirror())) {
                    addViolation(data, node);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 554.2299611568451 秒
