开始

========================================== Rule ClassWithOnlyPrivateConstructorsShouldBeFinalRule ===========================================
一共 22 个测试用例
正例 15 个
反例 7 个
27
17
92
78
157
137
9
7
12
10
12
10
9
7
96
79
85
71
10
8
12
9
11
8
125
108
85
71
38
34
12
10
90
76
23
19
40
37
30
28
11
9
15
13
19
14
97
91
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of the class.
4. Check whether the constructor is private.
If the class is public and all its constructors are private, then this test case violates the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get the constructors of the class.
4. For each constructor in the class, check whether the constructor is private.
5. Check whether the class is final.
If the class is public and all of its constructors are private and the class is not final, then this test case violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get the constructors of the class.* 匹配到的元操作或API：
query: Get the constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.824925422668457
*For each constructor in the class, check whether the constructor is private.* 匹配到的元操作或API：
logic: For each constructor in the class, check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9349413514137268
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
=========================logics=========================
1. Get the name of class.
2. Check whether the class is final.
3. Get all the constructors in the class.
4. Check whether the constructor is private.
If all the constructors in the class are private and the class itself is not declared as final, then this test case violate the rule. In this given test case, the class is declared as final, so it does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
*Get all the constructors in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
107
91
149
133
119
103
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of class.
4. For each constructor, check whether it is private.
5. If all constructors are private, check whether the class is final.
If the class is not final and all its constructors are private, then this test case violates the rule. Since this test case has a public constructor, it does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of class.* 匹配到的元操作或API：
query: Get all constructors of class.
most similar API: get class of constructor
cosine Similarity: 0.8041397333145142
*For each constructor, check whether it is private.* 匹配到的元操作或API：
logic: For each constructor, check whether it is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9428061842918396
*If all constructors are private, check whether the class is final.* 匹配到的元操作或API：
logic: If all constructors are private, check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.8886126279830933
=========================logics=========================
1. Get the name of class.
2. Check whether the class is abstract.
3. Get all constructors of the class.
4. Check whether the constructor is private.
5. Check whether the constructor is public.
If the class is not abstract and all its constructors are private, then it violates the rule. However, in this case, the class is abstract and has a public constructor, so it does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
*Check whether the constructor is public.* 匹配到的元操作或API：
logic: Check whether the constructor is public.
most similar meta operation: Check whether the constructor is public
cosine Similarity: 0.985020637512207
94
78
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of the class.
4. Check whether the constructor is private.
5. Get the super class of class.
6. Check whether the super class is the class with private constructor.
If the class is not public and all its constructors are private but there is a subclass using its private constructor, then the test case does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
*Get the super class of class.* 匹配到的元操作或API：
logic: Get the super class of class.
most similar meta operation: Get the super class of class
cosine Similarity: 0.9851946830749512
*Check whether the super class is the class with private constructor.* 匹配到的元操作或API：
query: Check whether the super class is the class with private constructor.
most similar API: Check whether the constructor is private
cosine Similarity: 0.8401780128479004
=========================logics=========================
1. Get the name of class.
2. Check whether the class has constructors.
3. Get all constructors declared in class.
4. Check whether the constructor is private.
5. Check whether the class is subclass.
6. Get the name of super class.
7. Check whether the super class has private constructor.
If the class is a subclass and the super class has only private constructors, then this test case does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class has constructors.* 匹配到的元操作或API：
query: Check whether the class has constructors.
most similar API: Check whether the constructor has modifiers
cosine Similarity: 0.8567851185798645
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368493318557739
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
*Check whether the class is subclass.* 匹配到的元操作或API：
query: Check whether the class is subclass.
most similar API: Check whether is test class
cosine Similarity: 0.8234319090843201
*Get the name of super class.* 匹配到的元操作或API：
logic: Get the name of super class.
most similar meta operation: Get the super class of class
cosine Similarity: 0.9043893814086914
*Check whether the super class has private constructor.* 匹配到的元操作或API：
logic: Check whether the super class has private constructor.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.8880776166915894
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of the class.
4. Check whether all constructors are private.
5. Check whether the class is final.
6. Get the super class of class.
7. Check whether the super class is the given class. 
If the class is public and all its constructors are private and it's not final and no class extends it, then this test case violates the rule.

*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
*Get the super class of class.* 匹配到的元操作或API：
logic: Get the super class of class.
most similar meta operation: Get the super class of class
cosine Similarity: 0.9851946830749512
*Check whether the super class is the given class.* 匹配到的元操作或API：
query: Check whether the super class is the given class.
most similar API: Check whether is this or super
cosine Similarity: 0.8124294877052307
96
81
144
127
95
78
117
102
77
63
83
69
95
80
93
78
77
63
89
74
94
78
97
81
97
80
=========================logics=========================
1. Get the name of class.
2. Check whether the class is final.
3. Get all constructors declared in class.
4. Check whether the constructor is private.
If the class is not final and all its constructors are private, then this test case violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
*Get all constructors declared in class.* 匹配到的元操作或API：
query: Get all constructors declared in class.
most similar API: get declared annotations of constructor
cosine Similarity: 0.8368493318557739
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of the class.
4. For each constructor, check whether the constructor is private.
5. If all constructors are private, check whether the class is final.
If the class is not public, and has all private constructors, and is not declared as final, then this test case violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*For each constructor, check whether the constructor is private.* 匹配到的元操作或API：
logic: For each constructor, check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9437501430511475
*If all constructors are private, check whether the class is final.* 匹配到的元操作或API：
logic: If all constructors are private, check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.8886126279830933
99
82
=========================logics=========================
1. Check whether the class is inner class.
2. Check whether the class is private.
3. Get all constructors of the class.
4. Check whether all constructors are private.
If the class is an inner class and all of its constructors are private, then this test case violates the rule.
*Check whether the class is inner class.* 匹配到的元操作或API：
logic: Check whether the class is inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.987544596195221
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
111
94
=========================logics=========================
1. Get the name of class.
2. Check whether the class is inner class.
3. Get all constructors of class.
4. Check whether all constructors are private.
5. Get the super class of class.
6. Check whether the super class has only private constructors.
7. Check whether the super class is located in the same compilation unit.
If the class is an inner class, and all its constructors and its super class's constructors are private, and the super class is located in the same compilation unit, then this test case does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is inner class.* 匹配到的元操作或API：
logic: Check whether the class is inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.987544596195221
*Get all constructors of class.* 匹配到的元操作或API：
query: Get all constructors of class.
most similar API: get class of constructor
cosine Similarity: 0.8041397333145142
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Get the super class of class.* 匹配到的元操作或API：
logic: Get the super class of class.
most similar meta operation: Get the super class of class
cosine Similarity: 0.9851946830749512
*Check whether the super class has only private constructors.* 匹配到的元操作或API：
logic: Check whether the super class has only private constructors.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.8570313453674316
*Check whether the super class is located in the same compilation unit.* 匹配到的元操作或API：
query: Check whether the super class is located in the same compilation unit.
most similar API: Check whether the compilation unit equals
cosine Similarity: 0.838246762752533
=========================logics=========================
1. Check whether the class is inner class.
2. Check whether the class is private.
3. Get all constructors of the class.
4. Check whether the class has any constructors.
5. If the class has constructors, check whether all the constructors are private.
6. If the class has no constructors, the default constructor is implicitly private.
7. Get all usages of class.
8. Check whether there are no usages of the class.
If the class is a private inner class and all its constructors are private or it doesn't have any constructors and there are no usages of the class, then this test case violate the rule.

*Check whether the class is inner class.* 匹配到的元操作或API：
logic: Check whether the class is inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.987544596195221
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Get all constructors of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the class has any constructors.* 匹配到的元操作或API：
query: Check whether the class has any constructors.
most similar API: Check whether is anonymous class creation
cosine Similarity: 0.8191983103752136
*If the class has constructors, check whether all the constructors are private.* 匹配到的元操作或API：
logic: If the class has constructors, check whether all the constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9185813665390015
*If the class has no constructors, the default constructor is implicitly private.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all usages of class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether there are no usages of the class.* 匹配到的元操作或API：
query: Check whether there are no usages of the class.
most similar API: Check whether is never used
cosine Similarity: 0.8623934388160706
=========================logics=========================
1. Get the name of class.
2. Check whether the class is inner class.
3. Check whether the class is private.
4. Get all constructors of the class.
5. Check whether all constructors are private.
6. Check whether the class is extended by any other class in the same package.
If the class is an inner class, private, all constructors are private, and the class is not extended by any other class in the same package, then this test case satisfies the rule and does not violate it.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is inner class.* 匹配到的元操作或API：
logic: Check whether the class is inner class.
most similar meta operation: Check whether the class is inner class
cosine Similarity: 0.987544596195221
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Get all constructors of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Check whether the class is extended by any other class in the same package.* 匹配到的元操作或API：
未匹配成功元操作或API
156
136
106
91
116
101
=========================logics=========================
1. Get the name of class.
2. Check whether the class is abstract.
3. Check whether the class is private.
4. Get all constructors of the class.
5. Check whether all constructors are private.
6. Get all methods declared in class.
7. Check whether method is abstract.
If the class is private, abstract, and all the constructors are private, and there are some abstract methods, then this test case does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Get all constructors of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declared annotations of method
cosine Similarity: 0.8366352915763855
*Check whether method is abstract.* 匹配到的元操作或API：
logic: Check whether method is abstract.
most similar meta operation: Check whether the method is abstract
cosine Similarity: 0.98253333568573
98
81
94
78
96
80
84
70
=========================logics=========================
1. Check whether the class is private.
2. Check whether the class is abstract.
3. Get all constructors of the class.
4. Check whether the constructors are private.
5. Get all methods declared in class.
6. Check whether method is abstract.
If the class is private, abstract and has private constructors and also has abstract methods, then this test case doesn't violate the rule.
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Get all constructors of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the constructors are private.* 匹配到的元操作或API：
logic: Check whether the constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9602795839309692
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declared annotations of method
cosine Similarity: 0.8366352915763855
*Check whether method is abstract.* 匹配到的元操作或API：
logic: Check whether method is abstract.
most similar meta operation: Check whether the method is abstract
cosine Similarity: 0.98253333568573
=========================logics=========================
1. Get the name of class.
2. Check whether the class is private.
3. Check whether the class is abstract.
4. Get all methods declared in class.
5. Check whether any method is abstract.
6. Get the super class of the subclass.
7. Check whether the super class of the subclass is the checked class.
8. Check whether the subclass is final.
If the class is private and abstract, and does not have any abstract methods, but has a subclass that is final, then this test case does not violate the rule.

*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declared annotations of method
cosine Similarity: 0.8366352915763855
*Check whether any method is abstract.* 匹配到的元操作或API：
logic: Check whether any method is abstract.
most similar meta operation: Check whether the method is abstract
cosine Similarity: 0.9592255353927612
*Get the super class of the subclass.* 匹配到的元操作或API：
logic: Get the super class of the subclass.
most similar meta operation: Get the super class of class
cosine Similarity: 0.9412555694580078
*Check whether the super class of the subclass is the checked class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the subclass is final.* 匹配到的元操作或API：
logic: Check whether the subclass is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9335128664970398
=========================logics=========================
1. Get the name of class.
        2. Check whether the class is private.
        3. Check whether the class is abstract.
        4. Get all methods declared in class.
        5. Check whether any method is abstract.
        6. Get all constructors of the class.
        7. Check whether all constructors are private.
        8. Get all subclasses of the class.
        9. Check whether there are any subclasses.
        If the class is private, abstract, has no abstract methods, all its constructors are private, and it has no subclasses, then this test case violates the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is private.* 匹配到的元操作或API：
logic: Check whether the class is private.
most similar meta operation: Check whether the class is private
cosine Similarity: 0.9853935241699219
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Get all methods declared in class.* 匹配到的元操作或API：
query: Get all methods declared in class.
most similar API: get declared annotations of method
cosine Similarity: 0.8366352915763855
*Check whether any method is abstract.* 匹配到的元操作或API：
logic: Check whether any method is abstract.
most similar meta operation: Check whether the method is abstract
cosine Similarity: 0.9592255353927612
*Get all constructors of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Get all subclasses of the class.* 匹配到的元操作或API：
query: Get all subclasses of the class.
most similar API: get permitted subclasses of class or interface
cosine Similarity: 0.8104342222213745
*Check whether there are any subclasses.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Check whether the class is abstract.
4. Get all the constructors of the class.
5. Check whether the constructor is private.
6. Get all the methods of the class.
7. Check whether the method is abstract.
If the class is public and abstract, and all its constructors are private, but the class does not contain any abstract methods, then this test case violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Check whether the class is abstract.* 匹配到的元操作或API：
logic: Check whether the class is abstract.
most similar meta operation: Check whether the class is abstract
cosine Similarity: 0.9844731092453003
*Get all the constructors of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
*Get all the methods of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the method is abstract.* 匹配到的元操作或API：
logic: Check whether the method is abstract.
most similar meta operation: Check whether the method is abstract
cosine Similarity: 0.9833381175994873
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of the class.
4. Check whether all constructors are private.
5. Check whether the class is final.
If the class is public, all its constructors are private, and the class is not final, then this test case violates the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
99
82
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get all constructors of the class.
4. Get the visibility of each constructor.
5. Check whether all constructors are private.
6. Check whether class has declared annotations.
7. Get a declared annotation of class.
8. Check whether the class has '@Value' annotation.
If the class is public and has all private constructors but has '@Value' annotation, then this test case does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all constructors of the class.* 匹配到的元操作或API：
query: Get all constructors of the class.
most similar API: get parents of type of constructor
cosine Similarity: 0.8007241487503052
*Get the visibility of each constructor.* 匹配到的元操作或API：
query: Get the visibility of each constructor.
most similar API: get visibility of constructor
cosine Similarity: 0.9371628761291504
*Check whether all constructors are private.* 匹配到的元操作或API：
logic: Check whether all constructors are private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.936521589756012
*Check whether class has declared annotations.* 匹配到的元操作或API：
logic: Check whether class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9901518821716309
*Get a declared annotation of class.* 匹配到的元操作或API：
logic: Get a declared annotation of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.987838864326477
*Check whether the class has '@Value' annotation.* 匹配到的元操作或API：
query: Check whether the class has '@Value' annotation.
most similar API: Check whether the primitive type is annotation present
cosine Similarity: 0.8128114938735962
=========================logics=========================
1. Get the name of class.
2. Check whether the class has declared annotations.
3. Get a declared annotation of class.
4. Check whether the class has NoArgsConstructor annotation.
5. Get all constructors of class.
6. Check whether the constructor is private.
7. Check whether the class is final.
If the class has NoArgsConstructor annotation, all constructors are private and the class is not final, then this test case does not violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of class.* 匹配到的元操作或API：
logic: Get a declared annotation of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.987838864326477
*Check whether the class has NoArgsConstructor annotation.* 匹配到的元操作或API：
query: Check whether the class has NoArgsConstructor annotation.
most similar API: Check whether the constructor is any annotation present
cosine Similarity: 0.8321322798728943
*Get all constructors of class.* 匹配到的元操作或API：
query: Get all constructors of class.
most similar API: get class of constructor
cosine Similarity: 0.8041397333145142
*Check whether the constructor is private.* 匹配到的元操作或API：
logic: Check whether the constructor is private.
most similar meta operation: Check whether the constructor is private
cosine Similarity: 0.9866331219673157
*Check whether the class is final.* 匹配到的元操作或API：
logic: Check whether the class is final.
most similar meta operation: Check whether the class is final
cosine Similarity: 0.9887726306915283
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports classes that may be made final because they cannot be extended from outside their compilation unit anyway. This is because all their constructors are private, so a subclass could not call the super constructor.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Simple violation
public class Foo {
    private Foo() { }
}
```
2. This is a negative test case
```java
// violation for abstract class
public class Foo {
    private Foo() { }
}
```
3. This is a positive test case
```java
// ok, class is final
public final class Foo {
    private Foo() { }
}
```
4. This is a positive test case
```java
// One public constructor, not required to be final
public class Foo {
    private Foo() { }
    public Foo(String param) { }
}
```
5. This is a positive test case
```java
// abstract class, one public constructor, not required to be final
public abstract class Foo {
    private Foo() { }
    public Foo(String param) { }
}
```
6. This is a positive test case
```java
// Ok, subclass using the private constructor
public class Foo {
    private Foo() { }

    public static class Bar extends Foo {
        public Bar() { }
    }
}
```
7. This is a positive test case
```java
// Ok, subclass using the private constructor of another subclass
public class Foo {
    public Foo() { }

    public static class Bar {
        private Bar() { }
    }

    public static class Barbie extends Bar {
        public Barbie() { }
    }
}
```
8. This is a positive test case
```java
// Ok, two classes
public class Foo {
    private Foo() { }
}
class Bar extends Foo {
    public Bar() { }
}
```
9. This is a positive test case
```java
// One protected constructor, not required to be final
class ClassWithOnlyPrivateConstructorsShouldBeFinal {
    private String string;

    protected ClassWithOnlyPrivateConstructorsShouldBeFinal(final Object object) {
        this(object.toString());
    }

    private ClassWithOnlyPrivateConstructorsShouldBeFinal(final String string) {
        super();

        setString(string);
    }

    public final void setString(final String string) {
        this.string = string;
    }

    public String getString() {
        return string;
    }
}
```
10. This is a positive test case
```java
// One package private constructor, not required to be final
class ClassWithOnlyPrivateConstructorsShouldBeFinal {
    private String string;

    ClassWithOnlyPrivateConstructorsShouldBeFinal(final Object object) {
        this(object.toString());
    }

    private ClassWithOnlyPrivateConstructorsShouldBeFinal(final String string) {
        super();

        setString(string);
    }

    public final void setString(final String string) {
        this.string = string;
    }

    public String getString() {
        return string;
    }
}
```
11. This is a negative test case
```java
// #2536 [java] ClassWithOnlyPrivateConstructorsShouldBeFinal can't detect inner class with only private constructor
public class Main209 {
    private static class InputBits {
        private InputBits(int number) { }
    }
}
```
12. This is a positive test case
```java
// Inner class with only private constructor extended within compilation unit (#2536)
public class Main209 {
    private static class InputBits {
        private InputBits(int number) { }
    }
    public static final class Sub extends InputBits {
        private Sub() {
            super(1);
        }
    }
}
```
13. This is a negative test case
```java
// Private inner class with no ctor and no usage
public class Main209 {
    private static class InputBits {
        // default ctor is implicitly private
    }
}
```
14. This is a positive test case
```java
// Private inner class with no ctor and usage
public class Main209 {
    private static class InputBits {
        // default ctor is implicitly private
    }
    public static final class Sub extends InputBits {}
}
```
15. This is a positive test case
```java
// Private abstract classes with abstract methods should be ignored #3668
public class Outer {
    private abstract class Base {
        abstract void run();
    }
    public void someMethod() {
        Base b = new Base() {
            void run() {}
        };
        b.run();
    }
}
```
16. This is a positive test case
```java
// Private abstract generic classes with abstract methods should be ignored #3668
import java.util.Comparator;
public class Outer {
    private abstract class Base<E> {
        abstract void run();
        abstract void sort(Comparator<E> comparator);
    }
    public void someMethod() {
        Base b = new Base<Object>() {
            void run() {}
            void sort(Comparator<Object> comparator) {}
        };
    }
}
```
17. This is a positive test case
```java
// Private abstract classes without abstract methods but with subclasses should be ignored #3668
public class Outer {
    private abstract class Base {
        private void run() {}
    }
    private final class Sub extends Base {}
}
```
18. This is a negative test case
```java
// Private abstract classes without abstract methods and subclasses #3668
public class Outer {
    private abstract class Base {
        private void run() {}
    }
}
```
19. This is a negative test case
```java
// Abstract outer classes should be flagged #3668
public abstract class FooUtils {
    private FooUtils() {
        // private constructor can't be called from sub classes,
        // so this class can't be extended
    }
    // note: this "abstract" class does not contain abstract methods
    // it was only declared as abstract to prevent instantiation
}
```
20. This is a negative test case
```java
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal - false negative when a compilation unit contains two class declarations #3851
public class Example { // false-negative here
    private Example() {
    }
}

class Another {
}
```
21. This is a positive test case
```java
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal should consider lombok's @Value #4200
import lombok.Value;

@Value
public class Test {
    private Test(int a, int b) {}
}
```
22. This is a positive test case
```java
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal false positive with Lombok's @NoArgsConstructor #4188
import lombok.NoArgsConstructor;
@NoArgsConstructor
class NoArgs1 { private NoArgs1(String a) {} } // no violation
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ClassWithOnlyPrivateConstructorsShouldBeFinalRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.util.List<List<T> getParentsOfType(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isPrivate()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.Class<Class<?> getClass()
7. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAbstract()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isPublic()
9. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
10. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)
11. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
12. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isTestClass(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration)
13. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisOrSuper(net.sourceforge.pmd.lang.java.ast.ASTExpression)
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isNested()
15. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPrivate()
16. net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isAnonymousClassCreation(net.sourceforge.pmd.lang.java.ast.ASTExpression)
18. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNeverUsed(net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId), //True if the variable is never used. Note that the visibility of the variable must be less than {@link Visibility#V_PRIVATE} for us to be sure of it.
19. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
20. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isAbstract()
21. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.util.List<ASTClassOrInterfaceType> getPermittedSubclasses()
22. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()
23. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
24. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public boolean isAnnotationPresent(java.lang.Class), //Returns true if an annotation with the given type is applied to this node.
25. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isAnyAnnotationPresent(java.util.Collection), //Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>

1.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ClassWithOnlyPrivateConstructorsShouldBeFinalRule extends AbstractJavaRulechainRule {

    public ClassWithOnlyPrivateConstructorsShouldBeFinalRule() {
        super(ASTAnyTypeDeclaration.class);
    }

    @Override
    public Object visit(ASTAnyTypeDeclaration node, Object data) {
        if (node instanceof ASTClassOrInterfaceDeclaration && !((ASTClassOrInterfaceDeclaration) node).isAbstract() && !((ASTClassOrInterfaceDeclaration) node).isFinal()) {
            List<ASTConstructorDeclaration> constructors = node.findDescendantsOfType(ASTConstructorDeclaration.class);
            if (allConstructorsArePrivate(constructors)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean allConstructorsArePrivate(List<ASTConstructorDeclaration> constructors) {
        for (ASTConstructorDeclaration constructor : constructors) {
            if (!constructor.isPrivate()) {
                return false;
            }
        }
        return true;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports classes that may be made final because they cannot be extended from outside their compilation unit anyway. This is because all their constructors are private, so a subclass could not call the super constructor.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// Simple violation
public class Foo {
    private Foo() { }
}
```
2. This is a negative test case
```java
// violation for abstract class
public class Foo {
    private Foo() { }
}
```
3. This is a positive test case
```java
// ok, class is final
public final class Foo {
    private Foo() { }
}
```
4. This is a positive test case
```java
// One public constructor, not required to be final
public class Foo {
    private Foo() { }
    public Foo(String param) { }
}
```
5. This is a positive test case
```java
// abstract class, one public constructor, not required to be final
public abstract class Foo {
    private Foo() { }
    public Foo(String param) { }
}
```
6. This is a positive test case
```java
// Ok, subclass using the private constructor
public class Foo {
    private Foo() { }

    public static class Bar extends Foo {
        public Bar() { }
    }
}
```
7. This is a positive test case
```java
// Ok, subclass using the private constructor of another subclass
public class Foo {
    public Foo() { }

    public static class Bar {
        private Bar() { }
    }

    public static class Barbie extends Bar {
        public Barbie() { }
    }
}
```
8. This is a positive test case
```java
// Ok, two classes
public class Foo {
    private Foo() { }
}
class Bar extends Foo {
    public Bar() { }
}
```
9. This is a positive test case
```java
// One protected constructor, not required to be final
class ClassWithOnlyPrivateConstructorsShouldBeFinal {
    private String string;

    protected ClassWithOnlyPrivateConstructorsShouldBeFinal(final Object object) {
        this(object.toString());
    }

    private ClassWithOnlyPrivateConstructorsShouldBeFinal(final String string) {
        super();

        setString(string);
    }

    public final void setString(final String string) {
        this.string = string;
    }

    public String getString() {
        return string;
    }
}
```
10. This is a positive test case
```java
// One package private constructor, not required to be final
class ClassWithOnlyPrivateConstructorsShouldBeFinal {
    private String string;

    ClassWithOnlyPrivateConstructorsShouldBeFinal(final Object object) {
        this(object.toString());
    }

    private ClassWithOnlyPrivateConstructorsShouldBeFinal(final String string) {
        super();

        setString(string);
    }

    public final void setString(final String string) {
        this.string = string;
    }

    public String getString() {
        return string;
    }
}
```
11. This is a negative test case
```java
// #2536 [java] ClassWithOnlyPrivateConstructorsShouldBeFinal can't detect inner class with only private constructor
public class Main209 {
    private static class InputBits {
        private InputBits(int number) { }
    }
}
```
12. This is a positive test case
```java
// Inner class with only private constructor extended within compilation unit (#2536)
public class Main209 {
    private static class InputBits {
        private InputBits(int number) { }
    }
    public static final class Sub extends InputBits {
        private Sub() {
            super(1);
        }
    }
}
```
13. This is a negative test case
```java
// Private inner class with no ctor and no usage
public class Main209 {
    private static class InputBits {
        // default ctor is implicitly private
    }
}
```
14. This is a positive test case
```java
// Private inner class with no ctor and usage
public class Main209 {
    private static class InputBits {
        // default ctor is implicitly private
    }
    public static final class Sub extends InputBits {}
}
```
15. This is a positive test case
```java
// Private abstract classes with abstract methods should be ignored #3668
public class Outer {
    private abstract class Base {
        abstract void run();
    }
    public void someMethod() {
        Base b = new Base() {
            void run() {}
        };
        b.run();
    }
}
```
16. This is a positive test case
```java
// Private abstract generic classes with abstract methods should be ignored #3668
import java.util.Comparator;
public class Outer {
    private abstract class Base<E> {
        abstract void run();
        abstract void sort(Comparator<E> comparator);
    }
    public void someMethod() {
        Base b = new Base<Object>() {
            void run() {}
            void sort(Comparator<Object> comparator) {}
        };
    }
}
```
17. This is a positive test case
```java
// Private abstract classes without abstract methods but with subclasses should be ignored #3668
public class Outer {
    private abstract class Base {
        private void run() {}
    }
    private final class Sub extends Base {}
}
```
18. This is a negative test case
```java
// Private abstract classes without abstract methods and subclasses #3668
public class Outer {
    private abstract class Base {
        private void run() {}
    }
}
```
19. This is a negative test case
```java
// Abstract outer classes should be flagged #3668
public abstract class FooUtils {
    private FooUtils() {
        // private constructor can't be called from sub classes,
        // so this class can't be extended
    }
    // note: this "abstract" class does not contain abstract methods
    // it was only declared as abstract to prevent instantiation
}
```
20. This is a negative test case
```java
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal - false negative when a compilation unit contains two class declarations #3851
public class Example { // false-negative here
    private Example() {
    }
}

class Another {
}
```
21. This is a positive test case
```java
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal should consider lombok's @Value #4200
import lombok.Value;

@Value
public class Test {
    private Test(int a, int b) {}
}
```
22. This is a positive test case
```java
// [java] ClassWithOnlyPrivateConstructorsShouldBeFinal false positive with Lombok's @NoArgsConstructor #4188
import lombok.NoArgsConstructor;
@NoArgsConstructor
class NoArgs1 { private NoArgs1(String a) {} } // no violation
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ClassWithOnlyPrivateConstructorsShouldBeFinalRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.util.List<List<T> getParentsOfType(java.lang.Class)
4. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isPrivate()
5. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isFinal()
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public java.lang.Class<Class<?> getClass()
7. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isAbstract()
8. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isPublic()
9. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
10. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean hasModifiers(net.sourceforge.pmd.lang.java.ast.JModifier, [Lnet.sourceforge.pmd.lang.java.ast.JModifier;)
11. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
12. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isTestClass(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration)
13. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isThisOrSuper(net.sourceforge.pmd.lang.java.ast.ASTExpression)
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isNested()
15. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPrivate()
16. net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit: public boolean equals(java.lang.Object)
17. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isAnonymousClassCreation(net.sourceforge.pmd.lang.java.ast.ASTExpression)
18. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isNeverUsed(net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId), //True if the variable is never used. Note that the visibility of the variable must be less than {@link Visibility#V_PRIVATE} for us to be sure of it.
19. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
20. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isAbstract()
21. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.util.List<ASTClassOrInterfaceType> getPermittedSubclasses()
22. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public net.sourceforge.pmd.lang.java.ast.AccessNode$Visibility getVisibility()
23. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
24. net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType: public boolean isAnnotationPresent(java.lang.Class), //Returns true if an annotation with the given type is applied to this node.
25. net.sourceforge.pmd.lang.java.ast.ASTConstructorDeclaration: public boolean isAnyAnnotationPresent(java.util.Collection), //Checks whether any annotation is present on this node. @param binaryNames            Collection that contains binary names of annotations.            Note: for now, canonical names are tolerated, this may be changed in PMD 7. @return <code>true</code> if any annotation is present on this node, else <code>false</code>

1.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import java.util.List;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ClassWithOnlyPrivateConstructorsShouldBeFinalRule extends AbstractJavaRulechainRule {

    public ClassWithOnlyPrivateConstructorsShouldBeFinalRule() {
        super(ASTClassOrInterfaceDeclaration.class);
    }

    @Override
    public Object visit(ASTClassOrInterfaceDeclaration node, Object data) {
        if (!node.isAbstract() && !node.isFinal() && !node.isNested() && node.isPublic()) {
            List<ASTConstructorDeclaration> constructors = node.findDescendantsOfType(ASTConstructorDeclaration.class);
            if (allConstructorsArePrivate(constructors) && !hasAnnotations(node)) {
                addViolation(data, node);
            }
        }
        return super.visit(node, data);
    }

    private boolean allConstructorsArePrivate(List<ASTConstructorDeclaration> constructors) {
        for (ASTConstructorDeclaration constructor : constructors) {
            if (!constructor.isPrivate()) {
                return false;
            }
        }
        return true;
    }

    private boolean hasAnnotations(ASTClassOrInterfaceDeclaration node) {
        NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
        return annotations.nonEmpty();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 731.6632516384125 秒
