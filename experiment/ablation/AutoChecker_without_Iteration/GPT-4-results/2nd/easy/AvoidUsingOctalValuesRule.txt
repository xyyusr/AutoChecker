开始

========================================== Rule AvoidUsingOctalValuesRule ===========================================
一共 8 个测试用例
正例 6 个
反例 2 个
149
133
11
9
85
71
9
7
83
69
30
28
9
7
12
10
19
14
90
76
157
137
12
10
99
82
40
37
15
13
10
8
23
19
27
17
111
94
85
71
12
10
97
91
117
102
11
8
38
34
12
9
=========================logics=========================
1. Get the value of int field.
2. Check whether the int literal is prefixed with '0'.
If the int field is prefixed with '0', this indicates that the int literal is considered as octal and thus violates the rule.
*Get the value of int field.* 匹配到的元操作或API：
logic: Get the value of int field.
most similar meta operation: Get the value of int literal
cosine Similarity: 0.8611956238746643
*Check whether the int literal is prefixed with '0'.* 匹配到的元操作或API：
query: Check whether the int literal is prefixed with '0'.
most similar API: Check whether is literal int
cosine Similarity: 0.8581418991088867
=========================logics=========================
1. Get the name of field.
        2. Get the type of field.
        3. Check whether the type of field is int type.
        4. Check whether the field is initialized to literal value.
        5. Get the base of numeric literal.
        6. Check whether the base of numeric literal is hexadecimal.
        If the field is of int type and is initialized to a hexadecimal literal, then this test case does not violate the rule.
*Get the name of field.* 匹配到的元操作或API：
logic: Get the name of field.
most similar meta operation: Get the name of field
cosine Similarity: 0.978217363357544
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the type of field is int type.* 匹配到的元操作或API：
logic: Check whether the type of field is int type.
most similar meta operation: Check whether the field is int type
cosine Similarity: 0.9810113310813904
*Check whether the field is initialized to literal value.* 匹配到的元操作或API：
logic: Check whether the field is initialized to literal value.
most similar meta operation: Check whether the field is initialized
cosine Similarity: 0.9092312455177307
*Get the base of numeric literal.* 匹配到的元操作或API：
logic: Get the base of numeric literal.
most similar meta operation: Get the base of numeric literal
cosine Similarity: 0.9885143637657166
*Check whether the base of numeric literal is hexadecimal.* 匹配到的元操作或API：
query: Check whether the base of numeric literal is hexadecimal.
most similar API: get base of numeric literal
cosine Similarity: 0.8319025635719299
=========================logics=========================
1. Get the value of field.
2. Check whether the value is numeric literal.
3. Check whether the numeric literal is int literal.
4. Get the base of numeric literal.
5. Check whether the base of numeric literal is octal.
If the base of numeric literal is not octal, then this test case adheres to the rule.
*Get the value of field.* 匹配到的元操作或API：
query: Get the value of field.
most similar API: get text of field
cosine Similarity: 0.8468030691146851
*Check whether the value is numeric literal.* 匹配到的元操作或API：
logic: Check whether the value is numeric literal.
most similar meta operation: Check whether the numeric literal is int literal
cosine Similarity: 0.9104334115982056
*Check whether the numeric literal is int literal.* 匹配到的元操作或API：
logic: Check whether the numeric literal is int literal.
most similar meta operation: Check whether the numeric literal is int literal
cosine Similarity: 0.9893811941146851
*Get the base of numeric literal.* 匹配到的元操作或API：
logic: Get the base of numeric literal.
most similar meta operation: Get the base of numeric literal
cosine Similarity: 0.9885143637657166
*Check whether the base of numeric literal is octal.* 匹配到的元操作或API：
query: Check whether the base of numeric literal is octal.
most similar API: get base of numeric literal
cosine Similarity: 0.8177739381790161
=========================logics=========================
1. Get the type of field.
2. Check whether the field type is double.
3. Check whether the field is initialized to literal value.
4. Get the value of double literal.
5. Check whether the first character of the literal value is zero.
6. Check whether the literal value contains decimal point.
If the type of the field is double, it is initialized to a literal value, the first character is zero and the literal value contains a decimal point, then this test case does not violate the rule.
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field type is double.* 匹配到的元操作或API：
logic: Check whether the field type is double.
most similar meta operation: Check whether the field is double type
cosine Similarity: 0.9658888578414917
*Check whether the field is initialized to literal value.* 匹配到的元操作或API：
logic: Check whether the field is initialized to literal value.
most similar meta operation: Check whether the field is initialized
cosine Similarity: 0.9092312455177307
*Get the value of double literal.* 匹配到的元操作或API：
logic: Get the value of double literal.
most similar meta operation: Get the value of double literal
cosine Similarity: 0.9849545359611511
*Check whether the first character of the literal value is zero.* 匹配到的元操作或API：
query: Check whether the first character of the literal value is zero.
most similar API: Check whether is zero checked
cosine Similarity: 0.8143134713172913
*Check whether the literal value contains decimal point.* 匹配到的元操作或API：
query: Check whether the literal value contains decimal point.
most similar API: Check whether the numeric literal is float literal
cosine Similarity: 0.8171296119689941
=========================logics=========================
1. Get the type of field.
2. Check whether the field is float type.
3. Get the literal value that the field is initialized to.
4. Check whether the literal starts with zero.
If the field is of type float and the literal value does not start with zero, then this test case adhere to the rule.
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field is float type.* 匹配到的元操作或API：
logic: Check whether the field is float type.
most similar meta operation: Check whether the field is float type
cosine Similarity: 0.9873677492141724
*Get the literal value that the field is initialized to.* 匹配到的元操作或API：
logic: Get the literal value that the field is initialized to.
most similar meta operation: Get the literal value that the field is initialized to
cosine Similarity: 0.9854511022567749
*Check whether the literal starts with zero.* 匹配到的元操作或API：
query: Check whether the literal starts with zero.
most similar API: Check whether is zero checked
cosine Similarity: 0.8094881772994995
=========================logics=========================
1. Get the value of long literal.
2. Check whether the numeric literal is long literal.
3. Get the base of numeric literal.
If the long literal starts with zero and it is not 0L, then this test case violate the rule.
*Get the value of long literal.* 匹配到的元操作或API：
logic: Get the value of long literal.
most similar meta operation: Get the value of long literal
cosine Similarity: 0.9849820733070374
*Check whether the numeric literal is long literal.* 匹配到的元操作或API：
logic: Check whether the numeric literal is long literal.
most similar meta operation: Check whether the numeric literal is long literal
cosine Similarity: 0.9893560409545898
*Get the base of numeric literal.* 匹配到的元操作或API：
logic: Get the base of numeric literal.
most similar meta operation: Get the base of numeric literal
cosine Similarity: 0.9885143637657166
=========================logics=========================
1. Get the name of class.
2. Check whether the class is public.
3. Get a field of class.
4. Check whether the field is int type.
5. Check whether the field is initialized.
6. Check whether the field is initialized to numeric literal.
7. Get the base of numeric literal.
8. Check whether the base of numeric literal is octal.
If the base of numeric literal is octal, then this test case violate the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get a field of class.* 匹配到的元操作或API：
query: Get a field of class.
most similar API: get class of field
cosine Similarity: 0.8750177621841431
*Check whether the field is int type.* 匹配到的元操作或API：
logic: Check whether the field is int type.
most similar meta operation: Check whether the field is int type
cosine Similarity: 0.9881454706192017
*Check whether the field is initialized.* 匹配到的元操作或API：
logic: Check whether the field is initialized.
most similar meta operation: Check whether the field is initialized
cosine Similarity: 0.9865798950195312
*Check whether the field is initialized to numeric literal.* 匹配到的元操作或API：
logic: Check whether the field is initialized to numeric literal.
most similar meta operation: Check whether the field is initialized to variable value
cosine Similarity: 0.8657327890396118
*Get the base of numeric literal.* 匹配到的元操作或API：
logic: Get the base of numeric literal.
most similar meta operation: Get the base of numeric literal
cosine Similarity: 0.9885143637657166
*Check whether the base of numeric literal is octal.* 匹配到的元操作或API：
query: Check whether the base of numeric literal is octal.
most similar API: get base of numeric literal
cosine Similarity: 0.8177739381790161
=========================logics=========================
1. Get the value of field.
2. Check whether the value of field is an integer literal.
3. Get the base of numeric literal.
4. Check whether the base of numeric literal is octal.
If the value of the field is an integer literal and the base of the numeric literal is octal, then this test case violate the rule.
*Get the value of field.* 匹配到的元操作或API：
query: Get the value of field.
most similar API: get text of field
cosine Similarity: 0.8468030691146851
*Check whether the value of field is an integer literal.* 匹配到的元操作或API：
logic: Check whether the value of field is an integer literal.
most similar meta operation: Check whether the numeric literal is int literal
cosine Similarity: 0.8806620240211487
*Get the base of numeric literal.* 匹配到的元操作或API：
logic: Get the base of numeric literal.
most similar meta operation: Get the base of numeric literal
cosine Similarity: 0.9885143637657166
*Check whether the base of numeric literal is octal.* 匹配到的元操作或API：
query: Check whether the base of numeric literal is octal.
most similar API: get base of numeric literal
cosine Similarity: 0.8177739381790161
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// bad, 012
public class Foo {
    int x = 012;
}
```
2. This is a positive test case
```java
// OK, hex value
public class Foo {
    int x = 0xCAFE;
}
```
3. This is a positive test case
```java
// OK, long value
public class Foo {
    long x = 0L;
}
```
4. This is a positive test case
```java
// OK, double value
public class Foo {
    double d = 0.1;
}
```
5. This is a positive test case
```java
// OK, double value
public class Foo {
    float f = 0f;
}
```
6. This is a negative test case
```java
// bad, 012L
public class Foo {
    long x = 012L;
}
```
7. This is a positive test case
```java
// OK, 06 if strict is not set
public class Foo {
    int x = 06;
}
```
8. This is a positive test case
```java
// BAD, 06 if strict is set
public class Foo {
    int x = 06;
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getValueAsInt()
2. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isLiteralInt(net.sourceforge.pmd.lang.java.ast.JavaNode, int), //Returns true if this is a numeric literal with the given int value. This also considers long literals.
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getBase()
5. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getBase(), //Returns the base of the literal, eg 8 for an octal literal, 10 for a decimal literal, etc. By convention this returns 10 for the literal {@code 0} (which can really be any base).
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
7. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isIntLiteral()
8. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public double getValueAsDouble()
9. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isZeroChecked(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Return true if the given expression is enclosed in a zero check. The expression must evaluate to a natural number (ie >= 0), so that {@code e < 1} actually means {@code e == 0}. @param e Expression
10. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isFloatLiteral()
11. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public long getValueAsLong()
12. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isLongLiteral()
13. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
15. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public java.lang.Class<Class<?> getClass()

1.  //Get the name of field
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getFieldName(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
2.  //Check whether the field is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFieldIntType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```
3.  //Check whether the field is initialized
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitialized(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                return true;
            }
        }
    }
    return false;
}
```
4.  //Check whether the field is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFieldDoubleType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
5.  //Check whether the field is float type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFieldFloatType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.FLOAT);
}
```
6.  //Get the literal value that the field is initialized to
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTLiteral;
import net.sourceforge.pmd.lang.ast.NodeStream;
public ASTLiteral getInitializedValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTLiteral) {
                    return (ASTLiteral)init;
                }
            }
        }
    }
    return null;
}
```
7.  //Check whether the field is initialized to variable value
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitializedToVariableValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTVariableAccess) {
                    return true;
                }
            }
        }
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {
    
    public AvoidUsingOctalValuesRule() {
        super(ASTFieldDeclaration.class);
    }
    
    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        if (initializedToOctalValue(node)) {
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
    
    private boolean initializedToOctalValue(ASTFieldDeclaration node){
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for(ASTVariableDeclaratorId varId : varIds){
            ASTExpression init = varId.getInitializer();
            if (init != null && init instanceof ASTLiteral) {
                ASTLiteral literal = (ASTLiteral)init;
                if(literal.isIntLiteral() && literal.getBase() == 8){
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean isFieldIntType(ASTFieldDeclaration node) {
        ASTType type = node.getTypeNode();
        JTypeMirror t = type.getTypeMirror();
        return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// bad, 012
public class Foo {
    int x = 012;
}
```
2. This is a positive test case
```java
// OK, hex value
public class Foo {
    int x = 0xCAFE;
}
```
3. This is a positive test case
```java
// OK, long value
public class Foo {
    long x = 0L;
}
```
4. This is a positive test case
```java
// OK, double value
public class Foo {
    double d = 0.1;
}
```
5. This is a positive test case
```java
// OK, double value
public class Foo {
    float f = 0f;
}
```
6. This is a negative test case
```java
// bad, 012L
public class Foo {
    long x = 012L;
}
```
7. This is a positive test case
```java
// OK, 06 if strict is not set
public class Foo {
    int x = 06;
}
```
8. This is a positive test case
```java
// BAD, 06 if strict is set
public class Foo {
    int x = 06;
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getValueAsInt()
2. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isLiteralInt(net.sourceforge.pmd.lang.java.ast.JavaNode, int), //Returns true if this is a numeric literal with the given int value. This also considers long literals.
3. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
4. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getBase()
5. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public int getBase(), //Returns the base of the literal, eg 8 for an octal literal, 10 for a decimal literal, etc. By convention this returns 10 for the literal {@code 0} (which can really be any base).
6. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
7. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isIntLiteral()
8. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public double getValueAsDouble()
9. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isZeroChecked(net.sourceforge.pmd.lang.java.ast.ASTExpression), //Return true if the given expression is enclosed in a zero check. The expression must evaluate to a natural number (ie >= 0), so that {@code e < 1} actually means {@code e == 0}. @param e Expression
10. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isFloatLiteral()
11. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public long getValueAsLong()
12. net.sourceforge.pmd.lang.java.ast.ASTNumericLiteral: public boolean isLongLiteral()
13. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
14. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
15. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public java.lang.Class<Class<?> getClass()

1.  //Get the name of field
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.ast.NodeStream;
public String getFieldName(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId variableDeclaratorId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(variableDeclaratorId.getName().equals("x")){
            String variableName = variableDeclaratorId.getName();
            return variableName;
        }
    }
    return null;
}
```
2.  //Check whether the field is int type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFieldIntType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
}
```
3.  //Check whether the field is initialized
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitialized(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                return true;
            }
        }
    }
    return false;
}
```
4.  //Check whether the field is double type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFieldDoubleType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.DOUBLE);
}
```
5.  //Check whether the field is float type
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.types.JTypeMirror;
import net.sourceforge.pmd.lang.java.types.JPrimitiveType;
public boolean isFieldFloatType(ASTFieldDeclaration node) {
    ASTType type = node.getTypeNode();
    JTypeMirror t = type.getTypeMirror();
    return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.FLOAT);
}
```
6.  //Get the literal value that the field is initialized to
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTLiteral;
import net.sourceforge.pmd.lang.ast.NodeStream;
public ASTLiteral getInitializedValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTLiteral) {
                    return (ASTLiteral)init;
                }
            }
        }
    }
    return null;
}
```
7.  //Check whether the field is initialized to variable value
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.java.ast.ASTVariableAccess;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitializedToVariableValue(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                if (init instanceof ASTVariableAccess) {
                    return true;
                }
            }
        }
    }
    return false;
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {

    public AvoidUsingOctalValuesRule() {
        super(ASTFieldDeclaration.class);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        ASTLiteral literal = getInitializedValue(node);

        if(literal instanceof ASTNumericLiteral) {
            ASTNumericLiteral numericLiteral = (ASTNumericLiteral)literal;

            if(numericLiteral.isIntLiteral() || numericLiteral.isLongLiteral()) {
                int base = numericLiteral.getBase();

                if(base == 8) {
                    addViolationWithMessage(data, node, "Avoid using octal values");
                }
            }
        }

        return super.visit(node, data);
    }

    private ASTLiteral getInitializedValue(ASTFieldDeclaration node){
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for(ASTVariableDeclaratorId varId : varIds){
            if(varId.getName().equals("x")){
                ASTExpression init = varId.getInitializer();
                if (init != null) {
                    if (init instanceof ASTLiteral) {
                        return (ASTLiteral)init;
                    }
                }
            }
        }
        return null;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 351.49474835395813 秒
