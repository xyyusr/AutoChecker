开始

========================================== Rule AvoidInstantiatingObjectsInLoopsRule ===========================================
一共 23 个测试用例
正例 14 个
反例 9 个
106
91
83
69
96
79
15
13
30
28
38
34
27
17
85
71
11
8
144
127
9
7
149
133
97
81
157
137
97
91
12
10
90
76
12
10
11
9
107
91
116
101
94
78
85
71
82
68
12
9
10
8
92
78
9
7
40
37
23
19
19
14
12
10
=========================logics=========================
1. Get the loop statement in method.
2. Get the body of loop statement.
3. Check whether a new object is created within the loop body.
If a new object is created within the loop statement body, then this test case violates the rule.
*Get the loop statement in method.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of loop statement.* 匹配到的元操作或API：
query: Get the body of loop statement.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.9263396263122559
*Check whether a new object is created within the loop body.* 匹配到的元操作或API：
未匹配成功元操作或API
107
91
79
65
=========================logics=========================
1. Get the loop statement.
2. Get the body of loop statement.
3. Check whether the body contains object creation expression.
If loop body contains any object creation, then this test case violate the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of while statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8232429027557373
*Get the body of loop statement.* 匹配到的元操作或API：
query: Get the body of loop statement.
most similar API: get body of while statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.901077926158905
*Check whether the body contains object creation expression.* 匹配到的元操作或API：
query: Check whether the body contains object creation expression.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8069034218788147
80
65
=========================logics=========================
1. Get the body of the do-while loop.
2. Check whether the body includes a constructor call.
3. Get the type of object created by constructor call.
If the body of the do-while loop includes a constructor call, then this test case violates the rule.
*Get the body of the do-while loop.* 匹配到的元操作或API：
query: Get the body of the do-while loop.
most similar API: get body of do statement
cosine Similarity: 0.865790843963623
*Check whether the body includes a constructor call.* 匹配到的元操作或API：
query: Check whether the body includes a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8523860573768616
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
=========================logics=========================
1. Get the body of the loop statement.
2. Check if there is an object creation expression within the loop.
If a new object is created in the loop, then this test case violates the rule.
*Get the body of the loop statement.* 匹配到的元操作或API：
query: Get the body of the loop statement.
most similar API: get body of do statement
cosine Similarity: 0.8413425087928772
*Check if there is an object creation expression within the loop.* 匹配到的元操作或API：
query: Check if there is an object creation expression within the loop.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8268133401870728
77
63
=========================logics=========================
1. Get the loop statement.
2. Get the body of the loop.
3. Check whether the body of the loop is a block.
4. Get all expressions in the block.
5. Check whether the expression is a throw statement.
6. Get the expression in the throw statement.
7. Check whether the expression in the throw statement is a constructor call.
If the body of the loop contains a throw statement and the expression in the throw statement is a constructor call, then this test case does not violate the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8175114989280701
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8687449097633362
*Check whether the body of the loop is a block.* 匹配到的元操作或API：
query: Check whether the body of the loop is a block.
most similar API: Check whether the block is find boundary
cosine Similarity: 0.8383061289787292
*Get all expressions in the block.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the expression is a throw statement.* 匹配到的元操作或API：
logic: Check whether the expression is a throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.8783559799194336
*Get the expression in the throw statement.* 匹配到的元操作或API：
logic: Get the expression in the throw statement.
most similar meta operation: Get the expression in throw statement
cosine Similarity: 0.9856711030006409
*Check whether the expression in the throw statement is a constructor call.* 匹配到的元操作或API：
query: Check whether the expression in the throw statement is a constructor call.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.9081646800041199
77
63
=========================logics=========================
1. Get the body of the for loop.
2. Check whether the body of the for loop contains a return statement.
3. Get the return expression in the return statement.
4. Check whether the return expression is a constructor call.
5. If the body of for loop contains a return statement that returns a newly created object, then this test case does not violate the rule.
*Get the body of the for loop.* 匹配到的元操作或API：
query: Get the body of the for loop.
most similar API: get body of for statement
cosine Similarity: 0.9058630466461182
*Check whether the body of the for loop contains a return statement.* 匹配到的元操作或API：
query: Check whether the body of the for loop contains a return statement.
most similar API: Check whether the return statement equals
cosine Similarity: 0.8571498990058899
*Get the return expression in the return statement.* 匹配到的元操作或API：
logic: Get the return expression in the return statement.
most similar meta operation: Get the return expression in return statement
cosine Similarity: 0.9828119277954102
*Check whether the return expression is a constructor call.* 匹配到的元操作或API：
query: Check whether the return expression is a constructor call.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.9070413112640381
*If the body of for loop contains a return statement that returns a newly created object, then this test case does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
116
101
79
65
77
63
85
71
97
80
93
78
79
65
=========================logics=========================
1. Get the loop statement in the method.
2. Check the body of the loop statement.
3. Get the try-catch statement in loop body.
4. Check the body of the catch clause.
5. Get the assignment expression in the catch clause body.
6. Get the right operand of the assignment expression.
7. Check whether the right operand is an object created by constructor call.

If a new object is created as the right operand of an assignment expression within the body of a try-catch statement in a loop, then this test case violates the rule.
*Get the loop statement in the method.* 匹配到的元操作或API：
query: Get the loop statement in the method.
most similar API: get body of while statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.820429801940918
*Check the body of the loop statement.* 匹配到的元操作或API：
query: Check the body of the loop statement.
most similar API: get body of while statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8161953687667847
*Get the try-catch statement in loop body.* 匹配到的元操作或API：
query: Get the try-catch statement in loop body.
most similar API: get body of try statement
cosine Similarity: 0.8849576711654663
*Check the body of the catch clause.* 匹配到的元操作或API：
query: Check the body of the catch clause.
most similar API: get body of catch clause
cosine Similarity: 0.8934099674224854
*Get the assignment expression in the catch clause body.* 匹配到的元操作或API：
query: Get the assignment expression in the catch clause body.
most similar API: get text of assignment expression
cosine Similarity: 0.8576979041099548
*Get the right operand of the assignment expression.* 匹配到的元操作或API：
logic: Get the right operand of the assignment expression.
most similar meta operation: Get the right operand of assignment expression
cosine Similarity: 0.9825876355171204
*Check whether the right operand is an object created by constructor call.* 匹配到的元操作或API：
query: Check whether the right operand is an object created by constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.844963550567627
94
78
95
78
82
68
84
70
96
80
96
79
96
81
114
98
87
72
119
103
=========================logics=========================
1. Get the loop statement.
2. Check whether it is a for loop or for-each loop.
3. Get the initialization expression in the for loop or the iterable expression in the for-each loop.
4. Check whether this expression is a constructor call (creating a new object).
If the loop initialization or iterable expression involves a constructor call, then this test case violates the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8191356062889099
*Check whether it is a for loop or for-each loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the initialization expression in the for loop or the iterable expression in the for-each loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether this expression is a constructor call (creating a new object).* 匹配到的元操作或API：
query: Check whether this expression is a constructor call (creating a new object).
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.9143310785293579
94
79
93
78
100
82
94
78
99
82
77
63
77
63
88
73
97
81
111
94
94
79
=========================logics=========================
1. Get the body of the for loop.
2. Check whether the body contains a constructor call.
3. Get the object created by the constructor call.
4. Check whether the object is new.
5. Get the arguments passed to the constructor.
6. Check whether the arguments are different for each loop iteration.
If a new object is created within the loop and the arguments passed to the constructor are different for each loop iteration, then this test case does not violate the rule.
*Get the body of the for loop.* 匹配到的元操作或API：
query: Get the body of the for loop.
most similar API: get body of for statement
cosine Similarity: 0.9058630466461182
*Check whether the body contains a constructor call.* 匹配到的元操作或API：
query: Check whether the body contains a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8527532815933228
*Get the object created by the constructor call.* 匹配到的元操作或API：
logic: Get the object created by the constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.8730127811431885
*Check whether the object is new.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the arguments passed to the constructor.* 匹配到的元操作或API：
query: Get the arguments passed to the constructor.
most similar API: get arguments of constructor call
cosine Similarity: 0.9244844317436218
*Check whether the arguments are different for each loop iteration.* 匹配到的元操作或API：
query: Check whether the arguments are different for each loop iteration.
most similar API: Check whether the argument list equals
cosine Similarity: 0.8202863931655884
=========================logics=========================
1. Get the body of for loop.
2. Check whether the body of for loop contains method call.
3. Get the called method.
4. Check whether the called method is a constructor.
If the body of the for loop contains a call to a constructor, then the test case violates the rule. However, in this specific case, the code is assigning new objects to an array or a collection, which is a known exception to this rule. Therefore, this test case does not violate the rule.
*Get the body of for loop.* 匹配到的元操作或API：
query: Get the body of for loop.
most similar API: get body of for statement
cosine Similarity: 0.9184505939483643
*Check whether the body of for loop contains method call.* 匹配到的元操作或API：
query: Check whether the body of for loop contains method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8394899368286133
*Get the called method.* 匹配到的元操作或API：
logic: Get the called method.
most similar meta operation: Get the method caller
cosine Similarity: 0.9149297475814819
*Check whether the called method is a constructor.* 匹配到的元操作或API：
query: Check whether the called method is a constructor.
most similar API: Check whether the constructor call is qualified instance creation
cosine Similarity: 0.8676870465278625
84
69
117
102
125
108
=========================logics=========================
1. Get all loop statements in the code.
2. For each loop statement, get all expressions within the loop.
3. For each expression, check whether it is a constructor call.
4. If it is a constructor call, check whether a new object is created.
If any expression within a loop statement is a constructor call creating a new object, then this test case violates the rule.
*Get all loop statements in the code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, get all expressions within the loop.* 匹配到的元操作或API：
query: For each loop statement, get all expressions within the loop.
most similar API: get iterable expr of foreach statement
cosine Similarity: 0.818475067615509
*For each expression, check whether it is a constructor call.* 匹配到的元操作或API：
query: For each expression, check whether it is a constructor call.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.9329453706741333
*If it is a constructor call, check whether a new object is created.* 匹配到的元操作或API：
query: If it is a constructor call, check whether a new object is created.
most similar API: Check whether the constructor call is qualified instance creation
cosine Similarity: 0.8757493495941162
=========================logics=========================
1. Get the condition of while statement.
2. Check whether the condition includes a method call.
3. Get the type of object created by the constructor call in the method call.
4. Check whether the object is a new instance.
If the condition of the while loop includes a method call that creates a new instance of an object, then this test case violates the rule.
*Get the condition of while statement.* 匹配到的元操作或API：
logic: Get the condition of while statement.
most similar meta operation: Get the condition of while statement
cosine Similarity: 0.9850377440452576
*Check whether the condition includes a method call.* 匹配到的元操作或API：
query: Check whether the condition includes a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8656297922134399
*Get the type of object created by the constructor call in the method call.* 匹配到的元操作或API：
logic: Get the type of object created by the constructor call in the method call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9675067663192749
*Check whether the object is a new instance.* 匹配到的元操作或API：
query: Check whether the object is a new instance.
most similar API: Check whether the constructor call is qualified instance creation
cosine Similarity: 0.8303591012954712
156
136
=========================logics=========================
1. Get all loop statements in the class.
2. For each loop statement, get all statements inside the loop.
3. For each statement, check whether it is a constructor call.
4. If it is a constructor call, get the type of the object created.
5. Check whether the object type is a new object.
If new objects are created inside any loop, then the test case violates the rule.
*Get all loop statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop statement, get all statements inside the loop.* 匹配到的元操作或API：
query: For each loop statement, get all statements inside the loop.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8247477412223816
*For each statement, check whether it is a constructor call.* 匹配到的元操作或API：
query: For each statement, check whether it is a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8672930598258972
*If it is a constructor call, get the type of the object created.* 匹配到的元操作或API：
logic: If it is a constructor call, get the type of the object created.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9686769247055054
*Check whether the object type is a new object.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the loop statement.
2. Get the body of the loop.
3. Check whether the body of the loop contains a method call.
4. Get the method call.
5. Check whether the called method is a constructor.
6. If the method call is a constructor, it means a new object is being created within the loop, which violates the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8175114989280701
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8687449097633362
*Check whether the body of the loop contains a method call.* 匹配到的元操作或API：
query: Check whether the body of the loop contains a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8477331399917603
*Get the method call.* 匹配到的元操作或API：
logic: Get the method call.
most similar meta operation: Get the method caller
cosine Similarity: 0.9031437039375305
*Check whether the called method is a constructor.* 匹配到的元操作或API：
query: Check whether the called method is a constructor.
most similar API: Check whether the constructor call is qualified instance creation
cosine Similarity: 0.8676870465278625
*If the method call is a constructor, it means a new object is being created within the loop, which violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the body of the for loop.
2. Get the object creation expression within the for loop.
3. Check whether the object is a new instance of the Car class.
If there is a creation of a new instance of Car within the for loop body, then this test case violates the rule.
*Get the body of the for loop.* 匹配到的元操作或API：
query: Get the body of the for loop.
most similar API: get body of for statement
cosine Similarity: 0.9058630466461182
*Get the object creation expression within the for loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the object is a new instance of the Car class.* 匹配到的元操作或API：
未匹配成功元操作或API
93
78
=========================logics=========================
1. Get the body of the loop statement.
2. Check whether the body contains a constructor call.
3. Get the type of object created by constructor call.
4. Check whether the type of object is array type.
If the loop body contains a constructor call and the created object is an array type, then this test case violates the rule.
*Get the body of the loop statement.* 匹配到的元操作或API：
query: Get the body of the loop statement.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.9144570827484131
*Check whether the body contains a constructor call.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
*Check whether the type of object is array type.* 匹配到的元操作或API：
logic: Check whether the type of object is array type.
most similar meta operation: Check whether the array is string type
cosine Similarity: 0.9042154550552368
=========================logics=========================
1. Get a loop variable of for-each loop.
2. Check whether the loop variable is a new array instance.
3. Check whether the loop variable is a new object instance.
4. Get the body of the loop.
5. Check whether a new object is created within the loop body.

If a new object is created within the loop body, then this test case violates the rule. However, in this case, no new objects are created within the loop body, so it does not violate the rule.
*Get a loop variable of for-each loop.* 匹配到的元操作或API：
logic: Get a loop variable of for-each loop.
most similar meta operation: Get the loop variable of for-each loop
cosine Similarity: 0.9762570858001709
*Check whether the loop variable is a new array instance.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the loop variable is a new object instance.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the body of the loop.* 匹配到的元操作或API：
query: Get the body of the loop.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8633920550346375
*Check whether a new object is created within the loop body.* 匹配到的元操作或API：
未匹配成功元操作或API
89
74
=========================logics=========================
1. Get the loop statement.
2. Get the body of loop statement.
3. Check whether the body contains an object creation statement.
4. Get the object created by constructor call.
5. Check whether the object is added to a collection or an array.
If objects are created and added to a collection or array in the loop, then this test case does not violate the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8191356062889099
*Get the body of loop statement.* 匹配到的元操作或API：
query: Get the body of loop statement.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.9263396263122559
*Check whether the body contains an object creation statement.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the object created by constructor call.* 匹配到的元操作或API：
logic: Get the object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.8863864541053772
*Check whether the object is added to a collection or an array.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all loop statements in the class.
2. For each loop, get all method calls inside the loop.
3. For each method call, check whether the method call is a constructor call.
4. If a constructor call is found, check whether the type of the created object is marked as "new".
If new objects are created within loops, then this test case violates the rule.
*Get all loop statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get all method calls inside the loop.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method call, check whether the method call is a constructor call.* 匹配到的元操作或API：
query: For each method call, check whether the method call is a constructor call.
most similar API: Check whether the constructor call equals
cosine Similarity: 0.8724889755249023
*If a constructor call is found, check whether the type of the created object is marked as "new".* 匹配到的元操作或API：
logic: If a constructor call is found, check whether the type of the created object is marked as "new".
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.8692337870597839
=========================logics=========================
1. Check whether the code has a loop statement.
2. Get the loop body.
3. Check whether a new object is created within the loop body.
4. Get the type of created object.
5. Check whether the object is assigned to an array.
If there is a new object created inside the loop and the object is assigned to an array, then this test case does not violate the rule.
*Check whether the code has a loop statement.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the loop body.* 匹配到的元操作或API：
query: Get the loop body.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8378283977508545
*Check whether a new object is created within the loop body.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the type of created object.* 匹配到的元操作或API：
logic: Get the type of created object.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9284374117851257
*Check whether the object is assigned to an array.* 匹配到的元操作或API：
query: Check whether the object is assigned to an array.
most similar API: Check whether the array allocation equals
cosine Similarity: 0.8270189166069031
=========================logics=========================
1. Get names of all loops in the class
2. For each loop, get body of the loop
3. Check whether a new object is created in the loop body
4. Get the type of object created by constructor call
5. Check whether the type of object is an array type
If a new object of array type is created within a loop, then this test case violates the rule.
*Get names of all loops in the class* 匹配到的元操作或API：
未匹配成功元操作或API
*For each loop, get body of the loop* 匹配到的元操作或API：
query: For each loop, get body of the loop
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.848569393157959
*Check whether a new object is created in the loop body* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the type of object created by constructor call* 匹配到的元操作或API：
logic: Get the type of object created by constructor call
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9999999403953552
*Check whether the type of object is an array type* 匹配到的元操作或API：
logic: Check whether the type of object is an array type
most similar meta operation: Check whether the array is string type
cosine Similarity: 0.9066983461380005
=========================logics=========================
1. Get the loop statement.
2. Within the loop body, Check whether there is a constructor call.
3. Check whether the type of object created by constructor call is array type.
4. Check whether the new array object is returned immediately after creation.
5. Check whether the loop is broken immediately after the new array object is created.
If the loop statement contains a constructor call creating a new array object, and this new object is not returned or the loop is not broken immediately after the creation, then this test case violates the rule.
*Get the loop statement.* 匹配到的元操作或API：
query: Get the loop statement.
most similar API: get body of for statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8175114989280701
*Within the loop body, Check whether there is a constructor call.* 匹配到的元操作或API：
query: Within the loop body, Check whether there is a constructor call.
most similar API: Check whether is call on this instance
cosine Similarity: 0.8051453232765198
*Check whether the type of object created by constructor call is array type.* 匹配到的元操作或API：
logic: Check whether the type of object created by constructor call is array type.
most similar meta operation: Check whether the return type of called method is array type
cosine Similarity: 0.8759288191795349
*Check whether the new array object is returned immediately after creation.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the loop is broken immediately after the new array object is created.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the body of for loop.
2. Check whether the body contains a method call.
3. Get the method call expression.
4. Get the argument list of the method call.
5. Check whether the argument is an object creation expression.
6. Get the type of object created by constructor call.
7. Check whether the type of object is an array type.
If a new array object is created in the loop, then this test case violates the rule.
*Get the body of for loop.* 匹配到的元操作或API：
query: Get the body of for loop.
most similar API: get body of foreach statement: Returns the statement that represents the body of this loop.
cosine Similarity: 0.8309640884399414
*Check whether the body contains a method call.* 匹配到的元操作或API：
query: Check whether the body contains a method call.
most similar API: Check whether the method call equals
cosine Similarity: 0.8311341404914856
*Get the method call expression.* 匹配到的元操作或API：
query: Get the method call expression.
most similar API: Check whether the method call is expression
cosine Similarity: 0.8590689301490784
*Get the argument list of the method call.* 匹配到的元操作或API：
logic: Get the argument list of the method call.
most similar meta operation: Get the number of arguments of called method
cosine Similarity: 0.8692123889923096
*Check whether the argument is an object creation expression.* 匹配到的元操作或API：
query: Check whether the argument is an object creation expression.
most similar API: Check whether the constructor call is expression
cosine Similarity: 0.8450859189033508
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
*Check whether the type of object is an array type.* 匹配到的元操作或API：
logic: Check whether the type of object is an array type.
most similar meta operation: Check whether the array is string type
cosine Similarity: 0.895054042339325
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: New objects can not be created within loops;

The following are the test cases of the rule:
1. This is a negative test case
```java
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}
```
2. This is a negative test case
```java
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}
```
3. This is a negative test case
```java
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
4. This is a negative test case
```java
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
5. This is a positive test case
```java
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}
```
6. This is a positive test case
```java
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}
```
7. This is a positive test case
```java
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}
```
8. This is a positive test case
```java
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList<String>()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}
```
9. This is a positive test case
```java
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}
```
10. This is a positive test case
```java
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i < cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection<Car> cars = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}
```
11. This is a negative test case
```java
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List<Function<Message, Boolean>> filters;

    public Message(Message message) {}

    private SortedSet<Message> getFilteredMessages(List<Message> messages) {
        final SortedSet<Message> result = new TreeSet<>(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function<Message, Boolean> filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}
```
12. This is a negative test case
```java
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() > 0) {
        }
    }
}
```
13. This is a negative test case
```java
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}
```
14. This is a positive test case
```java
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
15. This is a negative test case
```java
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
16. This is a negative test case
```java
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}
```
17. This is a positive test case
```java
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}
```
18. This is a positive test case
```java
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List<String> field = new ArrayList<>();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i < args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}
```
19. This is a positive test case
```java
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List<ByteBuffer> buffers = new ArrayList<>();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}
```
20. This is a positive test case
```java
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}
```
21. This is a positive test case
```java
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i < 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}
```
22. This is a positive test case
```java
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i < 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i < 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}
```
23. This is a positive test case
```java
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List<String> data = new ArrayList<>();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
2. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that will be run while the guard evaluates to true.
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
7. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isFindBoundary()
8. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
9. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
11. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
12. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this catch branch.
13. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
14. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
15. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
16. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
17. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public boolean equals(java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
20. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isQualifiedInstanceCreation(), //Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.
21. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getIterableExpr(), //Returns the expression that evaluates to the {@link Iterable} being looped upon.
22. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
23. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()
24. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean equals(java.lang.Object)
25. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isCallOnThisInstance(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
26. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```
2.  //Check whether the return type of called method is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
public boolean isReturnArrayType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isArray();
}
```
3.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTBlock.class);
    }

    @Override
    public Object visit(ASTBlock node, Object data) {
        if (node.getParent() instanceof ASTForStatement || node.getParent() instanceof ASTDoStatement
                || node.getParent() instanceof ASTWhileStatement) {
            for (int i = 0; i < node.getNumChildren(); i++) {
                Node child = node.getChild(i);
                if (child instanceof ASTAllocationExpression) {
                    addViolation(data, child);
                }
            }
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第2轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: New objects can not be created within loops;

The following are the test cases of the rule:
1. This is a negative test case
```java
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}
```
2. This is a negative test case
```java
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}
```
3. This is a negative test case
```java
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
4. This is a negative test case
```java
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
5. This is a positive test case
```java
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}
```
6. This is a positive test case
```java
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}
```
7. This is a positive test case
```java
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}
```
8. This is a positive test case
```java
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList<String>()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}
```
9. This is a positive test case
```java
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}
```
10. This is a positive test case
```java
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i < cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection<Car> cars = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}
```
11. This is a negative test case
```java
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List<Function<Message, Boolean>> filters;

    public Message(Message message) {}

    private SortedSet<Message> getFilteredMessages(List<Message> messages) {
        final SortedSet<Message> result = new TreeSet<>(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function<Message, Boolean> filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}
```
12. This is a negative test case
```java
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() > 0) {
        }
    }
}
```
13. This is a negative test case
```java
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}
```
14. This is a positive test case
```java
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
15. This is a negative test case
```java
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
16. This is a negative test case
```java
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}
```
17. This is a positive test case
```java
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}
```
18. This is a positive test case
```java
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List<String> field = new ArrayList<>();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i < args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}
```
19. This is a positive test case
```java
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List<ByteBuffer> buffers = new ArrayList<>();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}
```
20. This is a positive test case
```java
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}
```
21. This is a positive test case
```java
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i < 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}
```
22. This is a positive test case
```java
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i < 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i < 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}
```
23. This is a positive test case
```java
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List<String> data = new ArrayList<>();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
2. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that will be run while the guard evaluates to true.
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
7. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isFindBoundary()
8. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
9. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
11. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
12. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this catch branch.
13. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
14. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
15. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
16. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
17. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public boolean equals(java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
20. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isQualifiedInstanceCreation(), //Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.
21. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getIterableExpr(), //Returns the expression that evaluates to the {@link Iterable} being looped upon.
22. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
23. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()
24. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean equals(java.lang.Object)
25. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isCallOnThisInstance(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
26. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```
2.  //Check whether the return type of called method is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
public boolean isReturnArrayType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isArray();
}
```
3.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {

    public AvoidInstantiatingObjectsInLoopsRule() {
        addRuleChainVisit(ASTForStatement.class);
        addRuleChainVisit(ASTWhileStatement.class);
        addRuleChainVisit(ASTDoStatement.class);
    }
    
    @Override
    public Object visit(ASTForStatement node, Object data) {
        return examineLoop(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        return examineLoop(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        return examineLoop(node, data);
    }

    private Object examineLoop(Node node, Object data) {
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            Node n = node.jjtGetChild(i);
            if (n instanceof ASTAllocationExpression) {
                ASTAllocationExpression alloc = (ASTAllocationExpression) n;
                if (alloc.jjtGetChild(0) instanceof ASTClassOrInterfaceType) {
                    addViolation(data, alloc);
                }
            } else {
                examineLoop(n, data);
            }
        }
        return data;
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第3轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: New objects can not be created within loops;

The following are the test cases of the rule:
1. This is a negative test case
```java
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}
```
2. This is a negative test case
```java
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}
```
3. This is a negative test case
```java
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
4. This is a negative test case
```java
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
5. This is a positive test case
```java
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}
```
6. This is a positive test case
```java
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}
```
7. This is a positive test case
```java
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}
```
8. This is a positive test case
```java
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList<String>()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}
```
9. This is a positive test case
```java
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}
```
10. This is a positive test case
```java
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i < cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection<Car> cars = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}
```
11. This is a negative test case
```java
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List<Function<Message, Boolean>> filters;

    public Message(Message message) {}

    private SortedSet<Message> getFilteredMessages(List<Message> messages) {
        final SortedSet<Message> result = new TreeSet<>(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function<Message, Boolean> filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}
```
12. This is a negative test case
```java
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() > 0) {
        }
    }
}
```
13. This is a negative test case
```java
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}
```
14. This is a positive test case
```java
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
15. This is a negative test case
```java
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
16. This is a negative test case
```java
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}
```
17. This is a positive test case
```java
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}
```
18. This is a positive test case
```java
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List<String> field = new ArrayList<>();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i < args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}
```
19. This is a positive test case
```java
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List<ByteBuffer> buffers = new ArrayList<>();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}
```
20. This is a positive test case
```java
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}
```
21. This is a positive test case
```java
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i < 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}
```
22. This is a positive test case
```java
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i < 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i < 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}
```
23. This is a positive test case
```java
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List<String> data = new ArrayList<>();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
2. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that will be run while the guard evaluates to true.
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
7. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isFindBoundary()
8. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
9. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
11. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
12. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this catch branch.
13. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
14. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
15. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
16. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
17. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public boolean equals(java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
20. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isQualifiedInstanceCreation(), //Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.
21. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getIterableExpr(), //Returns the expression that evaluates to the {@link Iterable} being looped upon.
22. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
23. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()
24. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean equals(java.lang.Object)
25. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isCallOnThisInstance(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
26. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```
2.  //Check whether the return type of called method is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
public boolean isReturnArrayType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isArray();
}
```
3.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;

import java.util.*;

import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {

    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        checkLoopBody(node.getBody(), data);
        return super.visit(node, data);
    }

    private void checkLoopBody(ASTStatement body, Object data) {
        body.descendants(ASTAllocationExpression.class)
            .filter(this::isNotInReturnOrThrow)
            .forEach(n -> addViolation(data, n));
    }

    private boolean isNotInReturnOrThrow(ASTAllocationExpression node) {
        return !node.ancestors(ASTReturnStatement.class, ASTThrowStatement.class).findFirst().isPresent();
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第4轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: New objects can not be created within loops;

The following are the test cases of the rule:
1. This is a negative test case
```java
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}
```
2. This is a negative test case
```java
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}
```
3. This is a negative test case
```java
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
4. This is a negative test case
```java
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
5. This is a positive test case
```java
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}
```
6. This is a positive test case
```java
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}
```
7. This is a positive test case
```java
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}
```
8. This is a positive test case
```java
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList<String>()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}
```
9. This is a positive test case
```java
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}
```
10. This is a positive test case
```java
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i < cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection<Car> cars = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}
```
11. This is a negative test case
```java
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List<Function<Message, Boolean>> filters;

    public Message(Message message) {}

    private SortedSet<Message> getFilteredMessages(List<Message> messages) {
        final SortedSet<Message> result = new TreeSet<>(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function<Message, Boolean> filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}
```
12. This is a negative test case
```java
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() > 0) {
        }
    }
}
```
13. This is a negative test case
```java
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}
```
14. This is a positive test case
```java
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
15. This is a negative test case
```java
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
16. This is a negative test case
```java
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}
```
17. This is a positive test case
```java
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}
```
18. This is a positive test case
```java
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List<String> field = new ArrayList<>();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i < args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}
```
19. This is a positive test case
```java
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List<ByteBuffer> buffers = new ArrayList<>();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}
```
20. This is a positive test case
```java
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}
```
21. This is a positive test case
```java
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i < 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}
```
22. This is a positive test case
```java
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i < 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i < 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}
```
23. This is a positive test case
```java
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List<String> data = new ArrayList<>();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
2. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that will be run while the guard evaluates to true.
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
7. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isFindBoundary()
8. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
9. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
11. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
12. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this catch branch.
13. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
14. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
15. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
16. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
17. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public boolean equals(java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
20. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isQualifiedInstanceCreation(), //Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.
21. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getIterableExpr(), //Returns the expression that evaluates to the {@link Iterable} being looped upon.
22. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
23. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()
24. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean equals(java.lang.Object)
25. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isCallOnThisInstance(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
26. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```
2.  //Check whether the return type of called method is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
public boolean isReturnArrayType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isArray();
}
```
3.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class, ASTForeachStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        checkForInstantiation(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        checkForInstantiation(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        checkForInstantiation(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTForeachStatement node, Object data) {
        checkForInstantiation(node, data);
        return super.visit(node, data);
    }

    private void checkForInstantiation(Node node, Object data) {
        node.findDescendantsOfType(ASTAllocationExpression.class)
                .stream()
                .filter(n -> n.getFirstParentOfType(ASTTryStatement.class) == null &&
                        n.getFirstParentOfType(ASTThrowStatement.class) == null &&
                        n.getFirstParentOfType(ASTReturnStatement.class) == null &&
                        n.getFirstParentOfType(ASTArguments.class) == null &&
                        !(n.jjtGetChild(0) instanceof ASTArrayDimsAndInits) &&
                        n.getFirstParentOfType(ASTBlock.class).isFindBoundary())
                .forEach(n -> addViolation(data, n));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
==========================第5轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: New objects can not be created within loops;

The following are the test cases of the rule:
1. This is a negative test case
```java
// TEST1
public class Foo {
    public void test1() {
        for(;;) {
            String a = new String();
        }
    }
}
```
2. This is a negative test case
```java
// TEST2
public class Foo {
    public void test1() {
        while(true) {
            String a = new String();
        }
    }
}
```
3. This is a negative test case
```java
// TEST3
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
4. This is a negative test case
```java
// TEST4
public class Foo {
    public void test1() {
        do {
            String a = new String();
        } while(true);
    }
}
```
5. This is a positive test case
```java
// throw new is OK
public class Foo {
    public void test1() {
        for(;;) {
            throw new Exception();
        }
    }
}
```
6. This is a positive test case
```java
// return new in loop is OK
public class Foo {
    public String test1() {
        for(;;) {
            return new String();
        }
    }
}
```
7. This is a positive test case
```java
// #278 Semi-false positive for instantiating new object in loop
public class Foo {
    public void test1() {
        while (true) {
            try {
            } catch (Exception e) {
                url = new StringBuffer();
                break;
            }
        }
    }
}
```
8. This is a positive test case
```java
// #1215 AvoidInstantiatingObjectsInLoops matches the right side of a list iteration loop
import java.util.ArrayList;
import java.io.File;

public class TestInstantiationInLoop {
    public static void main(String args[]) {
        for (String test : new ArrayList<String>()) { // facetious but simple example
            System.out.println(test);
        }
        for (String filename : new File("subdirectory").list()) { // complex but realistically conceivable (albeit exagerrated/oversimplified/rarely advisable) example
            System.out.println(filename);
        }
    }
}
```
9. This is a positive test case
```java
// [java] False positive: AvoidInstantiatingObjectsInLoops should not flag objects with different parameters or objects assigned or passed as parameters #2207
import java.awt.Dimension;

public class PMDDemo {
    public static void main(final String[] args) {
        final Dimension[] arr = new Dimension[10];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = new Dimension(i, i); // rule violation here
        }
    }
}
```
10. This is a positive test case
```java
// False positive when assigning to a list/array (see #2207 and #1043)
import java.util.Collection;
import java.util.ArrayList;

public class PMDDemo {
    public void checkArray() {
        Car[] cars = new Car[3];
        for(int i = 0; i < cars.length; ++i) {
           cars[i] = new Car();
        }
    }
    public void checkCollection() {
        Collection<Car> cars = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
           cars.add(new Car());
        }
    }

    private static class Car {}
}
```
11. This is a negative test case
```java
// False negative with break in other for-loop
import java.util.function.Function;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

public class Message {
    private List<Function<Message, Boolean>> filters;

    public Message(Message message) {}

    private SortedSet<Message> getFilteredMessages(List<Message> messages) {
        final SortedSet<Message> result = new TreeSet<>(messages);
        for (Message element : messages) {
            Message event = new Message(element);
            for (Function<Message, Boolean> filter : filters) {
                if (!filter.apply(event)) {
                    result.remove(element);
                    break;
                }
            }
        }
        return result;
    }
}
```
12. This is a negative test case
```java
// Instantiation in loop condition
public class Foo {
    public void test1() {
        while(new String().length() > 0) {
        }
    }
}
```
13. This is a negative test case
```java
// false negative in anonymous classes
public class Sample {
    private static class Inner {
        private void baz() {
            for(;;) {
                String a = new String();
            }
        }
    }

    public void foo() {
        Sample anonymousClass = new Sample() {
            void bar() {
                for(;;) {
                    String a = new String();
                }
            }
        };
    }
}
```
14. This is a positive test case
```java
// false positive with list
import java.util.Collection;
import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
15. This is a negative test case
```java
// Collections with unresolved type
// Types are unresolved
//import java.util.Collection;
//import java.util.ArrayList;

public class Sample {
    public Collection<Car> checkCollection() {
        Collection<Car> thisIsACar = new ArrayList<>();
        for(int i = 0; i < 3; ++i) {
            thisIsACar.add(new Car());
        }
        return thisIsACar;
    }

    private static class Car {
    }
}
```
16. This is a negative test case
```java
// False negative with array allocations within loops
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        for (String arg : args) {
            String[] copy = new String[] { arg };
        }
    }
}
```
17. This is a positive test case
```java
// False positive with for-each loop over new array
public class AvoidInstantiatingArrayInLoops {
    public static void main(String[] args) {
        for (String configName : new String[] {"config", "test"}) {
            System.out.println(configName);
        }
    }
}
```
18. This is a positive test case
```java
// False positive with adding to a collection/array field
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    private List<String> field = new ArrayList<>();
    private String[] arrayField = new String[10];

    public static void main(String[] args) {
        for (String arg : args) {
            this.field.add(new String(arg));
        }
        for (int i = 0; i < args.length; i++) {
            this.arrayField[i] = new String(args[i]);
        }
    }
}
```
19. This is a positive test case
```java
// False positive with adding wrapped new arrays to collection
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class AvoidInstantiatingObjectsInLoops {
    public void testBytes(String s) {
        byte[] bytes = s.getBytes(StandardCharsets.UTF_8);
        List<ByteBuffer> buffers = new ArrayList<>();
        for (byte b : bytes) {
            buffers.add(ByteBuffer.wrap(new byte[]{b}));
        }
    }
}
```
20. This is a positive test case
```java
// False positive with temporary object assigned to an array
public class AvoidInstantiatingObjectsInLoops {
    public static void main(String[] args) {
        String[] data = new String[10];
        for (int i = 0; i < data.length; i++) {
            data[i] = new StringBuilder().append("foo").toString();
        }
    }
}
```
21. This is a positive test case
```java
// False positive with array allocation and assignment
public class AvoidInstantiatingArraysInLoops {
    public static void main(String[] args) {
        int[][] arr = new int[10];
        for (int i = 0; i < 10; i++) {
            arr[i] = new int[] { i };
        }
    }
}
```
22. This is a positive test case
```java
// False positive when array is returned
public class AvoidInstantiatingArraysInLoops {
    public int[] test() {
        for (int i = 0; i < 10; i++) {
            return new int[] { i };
        }

        for (int i = 0; i < 10; i++) {
            int[] a = new int[] { i };
            break;
        }
    }
}
```
23. This is a positive test case
```java
// False positive when converting collection to array
import java.util.ArrayList;
import java.util.List;

public class AvoidInsantiatingArraysInLoops {
    public void test() {
        List<String> data = new ArrayList<>();

        for (String arg : args) {
            this.consume(data.toArray(new String[0]));
        }
    }

    private void consume(String[] array) { }
}
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.performance;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTForStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
2. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
3. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.
4. net.sourceforge.pmd.lang.java.ast.ASTDoStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that will be run while the guard evaluates to true.
5. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean equals(java.lang.Object)
6. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
7. net.sourceforge.pmd.lang.java.ast.ASTBlock: public boolean isFindBoundary()
8. net.sourceforge.pmd.lang.java.ast.ASTThrowStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
9. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public boolean equals(java.lang.Object)
10. net.sourceforge.pmd.lang.java.ast.ASTReturnStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getExpr()
11. net.sourceforge.pmd.lang.java.ast.ASTTryStatement: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this try statement.
12. net.sourceforge.pmd.lang.java.ast.ASTCatchClause: public net.sourceforge.pmd.lang.java.ast.ASTBlock getBody(), //Returns the body of this catch branch.
13. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.document.Chars getText()
14. net.sourceforge.pmd.lang.java.ast.ASTAssignmentExpression: public net.sourceforge.pmd.lang.java.ast.ASTExpression getRightOperand()
15. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTStatement getBody(), //Returns the statement that represents the body of this loop.
16. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTArgumentList getArguments()
17. net.sourceforge.pmd.lang.java.ast.ASTArgumentList: public boolean equals(java.lang.Object)
18. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean equals(java.lang.Object)
19. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public net.sourceforge.pmd.lang.java.ast.ASTExpression getQualifier()
20. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public boolean isQualifiedInstanceCreation(), //Returns true if this expression begins with a primary expression. Such an expression creates an instance of inner member classes and their anonymous subclasses. For example, {@code new Outer().new Inner()} evaluates to an instance of the Inner class, which is nested inside the new instance of Outer.
21. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getIterableExpr(), //Returns the expression that evaluates to the {@link Iterable} being looped upon.
22. net.sourceforge.pmd.lang.java.ast.ASTWhileStatement: public net.sourceforge.pmd.lang.java.ast.ASTExpression getCondition()
23. net.sourceforge.pmd.lang.java.ast.ASTForeachStatement: public net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId getVarId()
24. net.sourceforge.pmd.lang.java.ast.ASTArrayAllocation: public boolean equals(java.lang.Object)
25. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public boolean isCallOnThisInstance(net.sourceforge.pmd.lang.java.ast.ASTMethodCall)
26. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public boolean isExpression(), //Always returns true. This is to allow XPath queries to query like {@code /[@Expression=true()]} to match any expression, but is useless in Java code.

1.  //Check whether the array is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTArrayType;
import net.sourceforge.pmd.lang.java.ast.ASTType;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isArrayStringType(ASTVariableDeclaratorId node) {
    if(node.getType().isArray()){
        ASTArrayType arrayType = (ASTArrayType)node.getTypeNode();
        ASTType astType = (ASTType) arrayType.getChild(0);
        if(astType instanceof ASTClassOrInterfaceType){
            ASTClassOrInterfaceType classOrInterfaceType = (ASTClassOrInterfaceType)astType;
            return TypeTestUtil.isA(String.class, classOrInterfaceType);
        }
    }
    return false;
}
```
2.  //Check whether the return type of called method is array type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodCall;
import net.sourceforge.pmd.lang.java.types.JMethodSig;
public boolean isReturnArrayType(ASTMethodCall call) {
    JMethodSig m = call.getMethodType();
    return m.getReturnType().isArray();
}
```
3.  //Get the number of arguments of called method
```java
import net.sourceforge.pmd.lang.java.ast.*;
public int getArgumentNumber(ASTMethodCall node){
    ASTArgumentList arguments = node.getArguments();
    return arguments.size();
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.performance;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule {
    public AvoidInstantiatingObjectsInLoopsRule() {
        super(ASTForStatement.class, ASTWhileStatement.class, ASTDoStatement.class);
    }

    @Override
    public Object visit(ASTForStatement node, Object data) {
        checkLoop(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTWhileStatement node, Object data) {
        checkLoop(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTDoStatement node, Object data) {
        checkLoop(node, data);
        return super.visit(node, data);
    }

    private void checkLoop(JavaNode node, Object data) {
        NodeStream<ASTConstructorCall> constructorCalls = node.descendants(ASTConstructorCall.class);
        constructorCalls.forEach((ASTConstructorCall constructorCall) -> {
            if (!isInsideBlockStatement(constructorCall) && !isInsideReturnOrThrowStatement(constructorCall)) {
                addViolation(data, constructorCall);
            }
        });
    }

    private boolean isInsideBlockStatement(ASTConstructorCall constructorCall) {
        return constructorCall.ancestors(ASTBlock.class).anyMatch(block -> block.isFindBoundary());
    }

    private boolean isInsideReturnOrThrowStatement(ASTConstructorCall constructorCall) {
        return constructorCall.ancestors(ASTReturnStatement.class).anyMatch(returnStatement -> returnStatement.getExpr().equals(constructorCall))
                || constructorCall.ancestors(ASTThrowStatement.class).anyMatch(throwStatement -> throwStatement.getExpr().equals(constructorCall));
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
False
编译错误不在预期范围内，重新生成
5轮生成失败
结束

规则执行完毕，时间总花销： 1199.9801590442657 秒
