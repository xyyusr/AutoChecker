开始

========================================== Rule UnnecessaryImportRule ===========================================
一共 73 个测试用例
正例 50 个
反例 23 个
157
137
85
71
84
70
11
9
11
8
15
13
85
71
19
14
23
19
12
9
12
10
97
91
38
34
40
37
9
7
9
7
90
76
10
8
12
10
30
28
12
10
27
17
=========================logics=========================
1. Get the name of imported class.
2. Check whether the imported class is used in current class.
3. Check whether the imported class is in java.lang package.
4. Get the name of the package where the current class is located.
5. Check whether the imported class is in the current package.
If the import statement is unused or the members they import are implicitly in scope, then this test case violate the rule.

*Get the name of imported class.* 匹配到的元操作或API：
logic: Get the name of imported class.
most similar meta operation: Get the name of class
cosine Similarity: 0.8612568378448486
*Check whether the imported class is used in current class.* 匹配到的元操作或API：
query: Check whether the imported class is used in current class.
most similar API: Check whether is declared in class
cosine Similarity: 0.804072916507721
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the package where the current class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the current class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9542686939239502
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
117
102
107
91
83
69
149
133
=========================logics=========================
1. Get the import statements of the class.
2. Check whether the imported class is used in this class.
3. Check whether the imported class is duplicated in the import statements.
4. Check whether the imported class is in java.lang package.
5. Check whether the imported class is in the current package.
The test case does not violate the rule as there is only one import statement importing java.io.File, and this class is used in the class Foo, it is not duplicated, not in java.lang package nor in the current package. So, there is no violation in this test case.
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Check whether the imported class is used in this class.* 匹配到的元操作或API：
query: Check whether the imported class is used in this class.
most similar API: Check whether the import equals
cosine Similarity: 0.809768557548523
*Check whether the imported class is duplicated in the import statements.* 匹配到的元操作或API：
query: Check whether the imported class is duplicated in the import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.839349091053009
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
=========================logics=========================
1. Get all import statements from the class.
2. For each import statement, get the name of imported class.
3. Check whether the imported class is used in the class.
4. Check whether the imported class is a java.lang class.
5. Check whether the imported class is in the current package.
6. Check whether the imported class is duplicated in the import statements.
If the import statement is unused, or the imported class is a java.lang class, or the imported class is in the current package, or the imported class is duplicated, then this test case violates the rule.
*Get all import statements from the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, get the name of imported class.* 匹配到的元操作或API：
query: For each import statement, get the name of imported class.
most similar API: get imported name of import
cosine Similarity: 0.8748750686645508
*Check whether the imported class is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8184274435043335
*Check whether the imported class is a java.lang class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Check whether the imported class is duplicated in the import statements.* 匹配到的元操作或API：
query: Check whether the imported class is duplicated in the import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.839349091053009
96
79
97
81
92
78
96
79
96
81
77
63
94
78
144
127
106
90
=========================logics=========================
1. Get all import statements in the Java file.
2. For each import, check whether it is a single type import or a type-import-on-demand declaration.
3. If it's a single type import, check whether the type is used in the current file.
4. If it's a type-import-on-demand declaration, get all types declared in the imported package and check whether any of them are used in the current file.
5. Check whether the imported type is in java.lang or the current package.
6. Check whether there are duplicate import statements.
If there are unused imports, duplicated imports, or the imported types are already in scope, the rule is violated. In this case, no violations are found.
*Get all import statements in the Java file.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import, check whether it is a single type import or a type-import-on-demand declaration.* 匹配到的元操作或API：
query: For each import, check whether it is a single type import or a type-import-on-demand declaration.
most similar API: Check whether the import is import on demand
cosine Similarity: 0.8515851497650146
*If it's a single type import, check whether the type is used in the current file.* 匹配到的元操作或API：
query: If it's a single type import, check whether the type is used in the current file.
most similar API: Check whether the import equals
cosine Similarity: 0.82345050573349
*If it's a type-import-on-demand declaration, get all types declared in the imported package and check whether any of them are used in the current file.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported type is in java.lang or the current package.* 匹配到的元操作或API：
query: Check whether the imported type is in java.lang or the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8044103384017944
*Check whether there are duplicate import statements.* 匹配到的元操作或API：
query: Check whether there are duplicate import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8665925860404968
96
80
=========================logics=========================
1. Get the name of the class.
2. Check whether the class has import statements.
3. Get the import statements of the class.
4. Get the name of the imported class in the import statement.
5. Check whether the imported class is java.rmi.RemoteException.
6. Get all methods declared in the class.
7. Get a throw exception in method signature.
8. Check whether the method signature throws RemoteException.
If the imported class is java.rmi.RemoteException and it is used in the throws clause of a method, then this test case does not violate the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class has import statements.* 匹配到的元操作或API：
query: Check whether the class has import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8589881658554077
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Get the name of the imported class in the import statement.* 匹配到的元操作或API：
query: Get the name of the imported class in the import statement.
most similar API: get class of import
cosine Similarity: 0.8787828683853149
*Check whether the imported class is java.rmi.RemoteException.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all methods declared in the class.* 匹配到的元操作或API：
query: Get all methods declared in the class.
most similar API: get declared annotations of method
cosine Similarity: 0.837310254573822
*Get a throw exception in method signature.* 匹配到的元操作或API：
logic: Get a throw exception in method signature.
most similar meta operation: Get a throw exception in method signature
cosine Similarity: 0.9811146259307861
*Check whether the method signature throws RemoteException.* 匹配到的元操作或API：
未匹配成功元操作或API
93
78
116
101
119
103
82
68
=========================logics=========================
1. Get the name of the class where the import statement is located.
2. Get all import statements in the class.
3. Check whether the imported class or package is java.util.ArrayList.
4. Check whether the imported class or package is used in the class.
5. If the imported class or package is not used in the class, it violates the rule.
6. Check whether the imported class or package is duplicated.
7. If the imported class or package is duplicated, it violates the rule.
8. Check whether the imported class or package is in java.lang package.
9. If the imported class or package is in java.lang package, it violates the rule.
10. Check whether the imported class or package is in the current package.
11. If the imported class or package is in the current package, it violates the rule.
*Get the name of the class where the import statement is located.* 匹配到的元操作或API：
query: Get the name of the class where the import statement is located.
most similar API: get class of import
cosine Similarity: 0.8685207366943359
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is java.util.ArrayList.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class or package is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8027447462081909
*If the imported class or package is not used in the class, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class or package is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8247717022895813
*If the imported class or package is duplicated, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the imported class or package is in java.lang package, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class or package is in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.822014570236206
*If the imported class or package is in the current package, it violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
96
80
106
91
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements.
3. For each import statement, get the name of imported class.
4. Check whether the imported class is in the same package as the class.
5. Check whether the imported class is in java.lang package.
6. Get all fields in the class.
7. For each field, get the type of field.
8. Check whether the type of field is the same as the imported class.
If all imported classes are either in the same package as the class, in java.lang package, or used as the type of a field in the class, then this test case does not violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements.* 匹配到的元操作或API：
query: Get all import statements.
most similar API: get text of import
cosine Similarity: 0.8120476007461548
*For each import statement, get the name of imported class.* 匹配到的元操作或API：
query: For each import statement, get the name of imported class.
most similar API: get imported name of import
cosine Similarity: 0.8748750686645508
*Check whether the imported class is in the same package as the class.* 匹配到的元操作或API：
query: Check whether the imported class is in the same package as the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8456937074661255
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all fields in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each field, get the type of field.* 匹配到的元操作或API：
logic: For each field, get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.92115718126297
*Check whether the type of field is the same as the imported class.* 匹配到的元操作或API：
query: Check whether the type of field is the same as the imported class.
most similar API: Check whether the import equals
cosine Similarity: 0.8175469636917114
=========================logics=========================
1. Check whether the class is in the package java.util.
2. Get the list of import statements in the class.
3. Check whether the import statement is for java.util.Collection.
4. Check whether the import statement is for java.util.List.
5. Check whether the import statement is for java.util.ArrayList.
6. Get the field declarations in the class.
7. Check whether the type of field is List<Collection>.
8. Check whether the field is initialized to ArrayList<Collection>.
If the class is not in the java.util package, and there are import statements for Collection, List, and ArrayList from the java.util package, and a field of type List<Collection> is initialized to a new ArrayList<Collection>, then this test case does not violate the rule.
*Check whether the class is in the package java.util.* 匹配到的元操作或API：
query: Check whether the class is in the package java.util.
most similar API: Check whether is utility class
cosine Similarity: 0.8047564625740051
*Get the list of import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is for java.util.Collection.* 匹配到的元操作或API：
query: Check whether the import statement is for java.util.Collection.
most similar API: Check whether the import equals
cosine Similarity: 0.8275836706161499
*Check whether the import statement is for java.util.List.* 匹配到的元操作或API：
query: Check whether the import statement is for java.util.List.
most similar API: Check whether the import equals
cosine Similarity: 0.8256899118423462
*Check whether the import statement is for java.util.ArrayList.* 匹配到的元操作或API：
query: Check whether the import statement is for java.util.ArrayList.
most similar API: Check whether the import equals
cosine Similarity: 0.8001886606216431
*Get the field declarations in the class.* 匹配到的元操作或API：
query: Get the field declarations in the class.
most similar API: get declared annotations of field
cosine Similarity: 0.8731256723403931
*Check whether the type of field is List<Collection>.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the field is initialized to ArrayList<Collection>.* 匹配到的元操作或API：
logic: Check whether the field is initialized to ArrayList<Collection>.
most similar meta operation: Check whether the field is initialized
cosine Similarity: 0.8619661331176758
95
78
156
136
96
80
81
67
99
82
90
76
=========================logics=========================
1. Get all import statements in the source code.
2. For each import statement:
    2.1. Get the imported package or class.
    2.2. Check whether the imported package or class is used in the source code.
    3. Check for any implicit imports such as java.lang or the current package.
    4. Check for duplicate imports.
If there are unused, duplicated, or implicitly imported packages or classes, then this test case violates the rule.
*Get all import statements in the source code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement:* 匹配到的元操作或API：
query: For each import statement:
most similar API: to string of import
cosine Similarity: 0.8046336770057678
*Get the imported package or class.* 匹配到的元操作或API：
query: Get the imported package or class.
most similar API: get class of import
cosine Similarity: 0.9013066291809082
*Check whether the imported package or class is used in the source code.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check for any implicit imports such as java.lang or the current package.* 匹配到的元操作或API：
query: Check for any implicit imports such as java.lang or the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8247266411781311
*Check for duplicate imports.* 匹配到的元操作或API：
query: Check for duplicate imports.
most similar API: Check whether the import equals
cosine Similarity: 0.873688817024231
=========================logics=========================
1. Get the name of class.
2. Check whether the class has declared annotations.
3. Get a declared annotation of class.
4. Get the name of the package where the annotation is located.
5. Check whether the package name matches the import statement.
6. Check for duplicate import statements.
7. Check whether the imported class is in java.lang or in the current package.
If all the imports are used, unique, and not in java.lang or the current package, then this test case follows the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class has declared annotations.* 匹配到的元操作或API：
logic: Check whether the class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9833341240882874
*Get a declared annotation of class.* 匹配到的元操作或API：
logic: Get a declared annotation of class.
most similar meta operation: Get a declared annotation of class
cosine Similarity: 0.987838864326477
*Get the name of the package where the annotation is located.* 匹配到的元操作或API：
logic: Get the name of the package where the annotation is located.
most similar meta operation: Get the name of the package where the annotation declaration is located
cosine Similarity: 0.9570351839065552
*Check whether the package name matches the import statement.* 匹配到的元操作或API：
query: Check whether the package name matches the import statement.
most similar API: Check whether the import equals
cosine Similarity: 0.866875171661377
*Check for duplicate import statements.* 匹配到的元操作或API：
query: Check for duplicate import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8639484643936157
*Check whether the imported class is in java.lang or in the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all import statements in the source code.
2. For each import statement, get the name of the imported type.
3. Check whether the imported type is present in the current source code.
4. Check whether the imported type is duplicated in the import statements.
5. Check whether the imported type is from the java.lang package.
6. Get the package of the current source code.
7. Check whether the imported type is from the current package.
If any import statement is unused, duplicated, from the java.lang package, or from the current package, then this test case violates the rule.
*Get all import statements in the source code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, get the name of the imported type.* 匹配到的元操作或API：
query: For each import statement, get the name of the imported type.
most similar API: get imported name of import
cosine Similarity: 0.8673330545425415
*Check whether the imported type is present in the current source code.* 匹配到的元操作或API：
query: Check whether the imported type is present in the current source code.
most similar API: Check whether the import has descendant of type
cosine Similarity: 0.8412719368934631
*Check whether the imported type is duplicated in the import statements.* 匹配到的元操作或API：
query: Check whether the imported type is duplicated in the import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8532115817070007
*Check whether the imported type is from the java.lang package.* 匹配到的元操作或API：
query: Check whether the imported type is from the java.lang package.
most similar API: Check whether the import has descendant of type
cosine Similarity: 0.8111741542816162
*Get the package of the current source code.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported type is from the current package.* 匹配到的元操作或API：
query: Check whether the imported type is from the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8462985754013062
89
74
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statements of the class.
3. Get the name of the imported class from the import statement.
4. Check whether the imported class is in the same package as the current class.
5. Check whether the imported class is in the java.lang package.
6. Get all methods declared in the class.
7. Get the return type of the method.
8. Check whether the return type matches the imported class.
If the imported class is neither from the java.lang package nor the same package as the current class, and the return type of the method in the class is not the same as the imported class, then the test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Get the name of the imported class from the import statement.* 匹配到的元操作或API：
query: Get the name of the imported class from the import statement.
most similar API: get class of import
cosine Similarity: 0.8754078149795532
*Check whether the imported class is in the same package as the current class.* 匹配到的元操作或API：
query: Check whether the imported class is in the same package as the current class.
most similar API: Check whether the import equals
cosine Similarity: 0.8376612067222595
*Check whether the imported class is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all methods declared in the class.* 匹配到的元操作或API：
query: Get all methods declared in the class.
most similar API: get declared annotations of method
cosine Similarity: 0.837310254573822
*Get the return type of the method.* 匹配到的元操作或API：
logic: Get the return type of the method.
most similar meta operation: Get the return type of method
cosine Similarity: 0.9745092988014221
*Check whether the return type matches the imported class.* 匹配到的元操作或API：
query: Check whether the return type matches the imported class.
most similar API: Check whether the import equals
cosine Similarity: 0.8186121582984924
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements of the class.
3. For each import statement, get the name of imported class.
4. Check whether the imported class is in the same package.
5. Check whether the imported class is in java.lang package.
6. Get all classes used in the class.
7. Check whether the imported class is used in the class.
If the imported class is in java.lang package, or in the same package, or not used in the class, then this test case violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, get the name of imported class.* 匹配到的元操作或API：
query: For each import statement, get the name of imported class.
most similar API: get imported name of import
cosine Similarity: 0.8748750686645508
*Check whether the imported class is in the same package.* 匹配到的元操作或API：
query: Check whether the imported class is in the same package.
most similar API: Check whether the import equals
cosine Similarity: 0.8530256748199463
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all classes used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8184274435043335
114
98
125
108
=========================logics=========================
1. Get the name of imported class.
2. Check whether the imported class is used in the current class.
3. Check whether the imported class is duplicated.
4. Check whether the imported class is in java.lang package.
5. Check whether the imported class is in the current package.
If the imported class is not used, duplicated, in java.lang package or in the current package, then this test case violate the rule.
*Get the name of imported class.* 匹配到的元操作或API：
logic: Get the name of imported class.
most similar meta operation: Get the name of class
cosine Similarity: 0.8612568378448486
*Check whether the imported class is used in the current class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the current class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8030582666397095
*Check whether the imported class is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8349400758743286
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
=========================logics=========================
1. Check whether the class has declared imports
2. Get a declared import of class
3. Check whether the declared import is a static import
4. Check whether the static import is used in the class
If the class has declared static imports that are not used, then this test case violate the rule.
*Check whether the class has declared imports* 匹配到的元操作或API：
query: Check whether the class has declared imports
most similar API: Check whether the import equals
cosine Similarity: 0.8485075235366821
*Get a declared import of class* 匹配到的元操作或API：
query: Get a declared import of class
most similar API: get class of import
cosine Similarity: 0.9062063694000244
*Check whether the declared import is a static import* 匹配到的元操作或API：
query: Check whether the declared import is a static import
most similar API: Check whether the import is static
cosine Similarity: 0.9524227976799011
*Check whether the static import is used in the class* 匹配到的元操作或API：
query: Check whether the static import is used in the class
most similar API: Check whether the import is static
cosine Similarity: 0.9154090285301208
=========================logics=========================
1. Get the import statements in the file.
2. Check whether the import statement is a on-demand (wildcard) import.
3. Check whether the imported classes are used in the file.
4. If the imported classes are not used in the file, the rule is violated.
5. Check for duplicate import statements in the file.
6. If there are duplicate import statements, the rule is violated.
7. Check whether the imported classes are in 'java.lang' or the current package.
8. If the imported classes are in 'java.lang' or the current package, the rule is violated.
*Get the import statements in the file.* 匹配到的元操作或API：
query: Get the import statements in the file.
most similar API: get text of import
cosine Similarity: 0.8513489961624146
*Check whether the import statement is a on-demand (wildcard) import.* 匹配到的元操作或API：
query: Check whether the import statement is a on-demand (wildcard) import.
most similar API: Check whether the import is import on demand
cosine Similarity: 0.8925912380218506
*Check whether the imported classes are used in the file.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the imported classes are not used in the file, the rule is violated.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check for duplicate import statements in the file.* 匹配到的元操作或API：
query: Check for duplicate import statements in the file.
most similar API: Check whether the import equals
cosine Similarity: 0.838436484336853
*If there are duplicate import statements, the rule is violated.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported classes are in 'java.lang' or the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the imported classes are in 'java.lang' or the current package, the rule is violated.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the list of import statements.
2. Get the name of the imported type for each import statement.
3. Get the list of types used in the javadoc comment of the method.
4. Check whether the imported type is used in the javadoc comment.
5. Get the list of types used in the method body.
6. Check whether the imported type is used in the method body.
7. Check whether the imported type is in java.lang package.
8. Get the name of the package where the class is located.
9. Check whether the imported type is in the same package as the class.
10. Check whether the import statement is duplicated.

If all import statements are used in either the javadoc comment or the method body, or the imported types are in java.lang package or the same package as the class, and no import statement is duplicated, then this test case does not violate the rule.
*Get the list of import statements.* 匹配到的元操作或API：
query: Get the list of import statements.
most similar API: get text of import
cosine Similarity: 0.824322521686554
*Get the name of the imported type for each import statement.* 匹配到的元操作或API：
query: Get the name of the imported type for each import statement.
most similar API: get imported name of import
cosine Similarity: 0.8625102043151855
*Get the list of types used in the javadoc comment of the method.* 匹配到的元操作或API：
logic: Get the list of types used in the javadoc comment of the method.
most similar meta operation: Get the javadoc comment of method
cosine Similarity: 0.8509084582328796
*Check whether the imported type is used in the javadoc comment.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the list of types used in the method body.* 匹配到的元操作或API：
query: Get the list of types used in the method body.
most similar API: get type parameters of method
cosine Similarity: 0.8081567287445068
*Check whether the imported type is used in the method body.* 匹配到的元操作或API：
query: Check whether the imported type is used in the method body.
most similar API: Check whether the import has descendant of type
cosine Similarity: 0.8072443008422852
*Check whether the imported type is in java.lang package.* 匹配到的元操作或API：
query: Check whether the imported type is in java.lang package.
most similar API: Check whether the import has descendant of type
cosine Similarity: 0.810635507106781
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the imported type is in the same package as the class.* 匹配到的元操作或API：
query: Check whether the imported type is in the same package as the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8430788516998291
*Check whether the import statement is duplicated.* 匹配到的元操作或API：
query: Check whether the import statement is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8743733167648315
=========================logics=========================
1. Check whether the class has declared import statements.
2. Get the name of the imported class.
3. Check whether the imported class is used in the javadoc comment of the current class.
4. Check whether the imported class is used in any method or field declaration of the current class.
5. Check whether the imported class is in the same package as the current class.
6. Check whether the imported class is in the java.lang package.
If the imported class is not used in any method or field declaration, not in the same package as the current class, not in the java.lang package, and not used in the javadoc comment, then this test case violates the rule.

*Check whether the class has declared import statements.* 匹配到的元操作或API：
query: Check whether the class has declared import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8425775170326233
*Get the name of the imported class.* 匹配到的元操作或API：
logic: Get the name of the imported class.
most similar meta operation: Get the name of class
cosine Similarity: 0.8629578948020935
*Check whether the imported class is used in the javadoc comment of the current class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the javadoc comment of the current class.
most similar API: get javadoc comment of class or interface
cosine Similarity: 0.81174236536026
*Check whether the imported class is used in any method or field declaration of the current class.* 匹配到的元操作或API：
query: Check whether the imported class is used in any method or field declaration of the current class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8032783269882202
*Check whether the imported class is in the same package as the current class.* 匹配到的元操作或API：
query: Check whether the imported class is in the same package as the current class.
most similar API: Check whether the import equals
cosine Similarity: 0.8376612067222595
*Check whether the imported class is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the imported class.
2. Check whether the class is used in the code.
3. Check whether the class is duplicated in import statements.
4. Check whether the class is in the java.lang package.
5. Check whether the class is in the current package.
6. Get the javadoc comment of the method.
7. Check whether the imported class is used in the javadoc comment.
If the imported class is not used in the code, not used in javadoc comment, not in java.lang package, not in the current package and not duplicated in import statements, then this test case violates the rule.
*Get the name of the imported class.* 匹配到的元操作或API：
logic: Get the name of the imported class.
most similar meta operation: Get the name of class
cosine Similarity: 0.8629578948020935
*Check whether the class is used in the code.* 匹配到的元操作或API：
query: Check whether the class is used in the code.
most similar API: Check whether is declared in class
cosine Similarity: 0.8449767231941223
*Check whether the class is duplicated in import statements.* 匹配到的元操作或API：
query: Check whether the class is duplicated in import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8438591957092285
*Check whether the class is in the java.lang package.* 匹配到的元操作或API：
query: Check whether the class is in the java.lang package.
most similar API: Check whether is declared in class
cosine Similarity: 0.800115704536438
*Check whether the class is in the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the javadoc comment of the method.* 匹配到的元操作或API：
logic: Get the javadoc comment of the method.
most similar meta operation: Get the javadoc comment of method
cosine Similarity: 0.9848002791404724
*Check whether the imported class is used in the javadoc comment.* 匹配到的元操作或API：
query: Check whether the imported class is used in the javadoc comment.
most similar API: get javadoc comment of class or interface
cosine Similarity: 0.8123087286949158
90
75
=========================logics=========================
1. Get all import statements in the file.
2. Get the name of the imported class or package for each import statement.
3. Get all identifiers used in the file.
4. For each import statement, check whether the imported class or package is used in the file.
5. Check whether the imported class or package is in the java.lang package or the current package.
6. Check whether the import statement is a duplicate.
If there's any unused, duplicated, or implicitly imported class or package, then this test case violate the rule.
*Get all import statements in the file.* 匹配到的元操作或API：
query: Get all import statements in the file.
most similar API: get text of import
cosine Similarity: 0.8178803324699402
*Get the name of the imported class or package for each import statement.* 匹配到的元操作或API：
query: Get the name of the imported class or package for each import statement.
most similar API: get imported name of import
cosine Similarity: 0.8799018859863281
*Get all identifiers used in the file.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, check whether the imported class or package is used in the file.* 匹配到的元操作或API：
query: For each import statement, check whether the imported class or package is used in the file.
most similar API: Check whether the import equals
cosine Similarity: 0.8118640184402466
*Check whether the imported class or package is in the java.lang package or the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is a duplicate.* 匹配到的元操作或API：
query: Check whether the import statement is a duplicate.
most similar API: Check whether the import equals
cosine Similarity: 0.8791882991790771
87
72
97
81
94
78
=========================logics=========================
1. Get the name of class.
2. Get all import statements in the class.
3. Check whether the import statement is unused.
4. Check whether the import statement is duplicated.
5. Check whether the imported members are in java.lang package.
6. Check whether the imported members are in the current package.
7. Check whether the imported members are referenced in javadoc comments.
If the import statement is not used, duplicated, or the imported members are in java.lang or the current package and not referenced in javadoc comments, then this test case violates the rule.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is unused.* 匹配到的元操作或API：
query: Check whether the import statement is unused.
most similar API: Check whether the import is static
cosine Similarity: 0.8273834586143494
*Check whether the import statement is duplicated.* 匹配到的元操作或API：
query: Check whether the import statement is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8743733167648315
*Check whether the imported members are in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported members are in the current package.* 匹配到的元操作或API：
query: Check whether the imported members are in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8138056993484497
*Check whether the imported members are referenced in javadoc comments.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of class.
2. Get all import declarations in the same file.
3. For each import declaration, get the name of the imported class or package.
4. Get all the methods in the class.
5. For each method, get the javadoc comment.
6. Check whether the imported class or package name appears in the javadoc comment.
7. Get all the fields in the class.
8. For each field, get the type of field.
9. Check whether the imported class or package name matches the field type.
10. Get all the local variables in the class.
11. For each local variable, get the type of local variable.
12. Check whether the imported class or package name matches the local variable type.
13. Check whether the imported class or package name is java.lang or the current package.
14. Check whether the imported class or package name is duplicated.

If the import declaration does not appear in the javadoc comment, does not match any field type, does not match any local variable type, or if the imported class or package name is java.lang, the current package, or duplicated, then the import declaration is unused and can be removed.
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all import declarations in the same file.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import declaration, get the name of the imported class or package.* 匹配到的元操作或API：
query: For each import declaration, get the name of the imported class or package.
most similar API: get imported name of import
cosine Similarity: 0.8845499753952026
*Get all the methods in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each method, get the javadoc comment.* 匹配到的元操作或API：
logic: For each method, get the javadoc comment.
most similar meta operation: Get the javadoc comment of method
cosine Similarity: 0.954023003578186
*Check whether the imported class or package name appears in the javadoc comment.* 匹配到的元操作或API：
query: Check whether the imported class or package name appears in the javadoc comment.
most similar API: get javadoc comment of class or interface
cosine Similarity: 0.8083024024963379
*Get all the fields in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each field, get the type of field.* 匹配到的元操作或API：
logic: For each field, get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.92115718126297
*Check whether the imported class or package name matches the field type.* 匹配到的元操作或API：
query: Check whether the imported class or package name matches the field type.
most similar API: Check whether the import equals
cosine Similarity: 0.8155636787414551
*Get all the local variables in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each local variable, get the type of local variable.* 匹配到的元操作或API：
logic: For each local variable, get the type of local variable.
most similar meta operation: Get the type of local variable
cosine Similarity: 0.9361092448234558
*Check whether the imported class or package name matches the local variable type.* 匹配到的元操作或API：
query: Check whether the imported class or package name matches the local variable type.
most similar API: Check whether the import equals
cosine Similarity: 0.8150432109832764
*Check whether the imported class or package name is java.lang or the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package name is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class or package name is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.816487193107605
=========================logics=========================
1. Get the name of imported class.
2. Check whether the imported class is used in the file.
3. Check whether the imported class is duplicated.
4. Check whether the imported class is in java.lang package.
5. Check whether the imported class is in the current package.
6. Get the javadoc comment of class.
7. Check whether the imported class is used in the javadoc comment.
If the imported class is not used in the file, or duplicated, or in java.lang package, or in the current package, or not used in the javadoc comment, then this test case violates the rule.
*Get the name of imported class.* 匹配到的元操作或API：
logic: Get the name of imported class.
most similar meta operation: Get the name of class
cosine Similarity: 0.8612568378448486
*Check whether the imported class is used in the file.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8349400758743286
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Get the javadoc comment of class.* 匹配到的元操作或API：
logic: Get the javadoc comment of class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9901880025863647
*Check whether the imported class is used in the javadoc comment.* 匹配到的元操作或API：
query: Check whether the imported class is used in the javadoc comment.
most similar API: get javadoc comment of class or interface
cosine Similarity: 0.8123087286949158
107
91
=========================logics=========================
1. Get all import statements.
2. For each import statement, check whether the imported class or package is used in the class.
3. Check whether the imported class or package is in java.lang package.
4. Check whether the imported class or package is in the current package.
5. Check whether the imported class or package is duplicated.
6. Check whether the imported class or package is a static import.
7. Check whether the static import is a wildcard import.
If any import statement is not used in the class, or duplicated, or the imported class or package is in java.lang package or the current package, or if it's a static wildcard import, then the test case violates the rule.
*Get all import statements.* 匹配到的元操作或API：
query: Get all import statements.
most similar API: get text of import
cosine Similarity: 0.8120476007461548
*For each import statement, check whether the imported class or package is used in the class.* 匹配到的元操作或API：
query: For each import statement, check whether the imported class or package is used in the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8171916007995605
*Check whether the imported class or package is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class or package is in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.822014570236206
*Check whether the imported class or package is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class or package is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8247717022895813
*Check whether the imported class or package is a static import.* 匹配到的元操作或API：
query: Check whether the imported class or package is a static import.
most similar API: Check whether the import is static
cosine Similarity: 0.934743344783783
*Check whether the static import is a wildcard import.* 匹配到的元操作或API：
query: Check whether the static import is a wildcard import.
most similar API: Check whether the import is static
cosine Similarity: 0.8840579986572266
=========================logics=========================
1. Get the name of the class.
2. Get all import statements in the class.
3. Check whether the imported class or package is used in the class.
4. Check whether the imported class or package is duplicated.
5. Check whether the imported class or package is in java.lang, or the current package.
6. Check whether the imported class or package is used in Javadoc comments.
If an imported class or package is not used in the class, or it's duplicated, or it's in java.lang or the current package, or it's not used in Javadoc comments, then it violates the rule. In this case, all imports are used, so the rule is not violated.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class or package is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8027447462081909
*Check whether the imported class or package is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class or package is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8247717022895813
*Check whether the imported class or package is in java.lang, or the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or package is used in Javadoc comments.* 匹配到的元操作或API：
query: Check whether the imported class or package is used in Javadoc comments.
most similar API: get javadoc comment of class or interface
cosine Similarity: 0.8131061792373657
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statements of the file.
3. For each import statement, get the name of imported class.
4. Check whether the imported class is in java.lang package.
5. Check whether the imported class is in the current package.
6. Check whether the imported class is used in the file.
7. Check whether the import statement is duplicated.
If the imported class is unused or in java.lang package or in the current package or the import statement is duplicated, then this test case violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statements of the file.* 匹配到的元操作或API：
query: Get the import statements of the file.
most similar API: get text of import
cosine Similarity: 0.8522223234176636
*For each import statement, get the name of imported class.* 匹配到的元操作或API：
query: For each import statement, get the name of imported class.
most similar API: get imported name of import
cosine Similarity: 0.8748750686645508
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Check whether the imported class is used in the file.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is duplicated.* 匹配到的元操作或API：
query: Check whether the import statement is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8743733167648315
=========================logics=========================
1. Get the import statements of the class.
2. Get the name of the imported class.
3. Check whether the name is "javax.swing.GroupLayout".
4. Get the javadoc comment of method.
5. Check whether the javadoc comment contains "GroupLayout.Group".
If the class imports "javax.swing.GroupLayout" and the javadoc comment of the method contains "GroupLayout.Group", then this test case does not violate the rule.
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Get the name of the imported class.* 匹配到的元操作或API：
logic: Get the name of the imported class.
most similar meta operation: Get the name of class
cosine Similarity: 0.8629578948020935
*Check whether the name is "javax.swing.GroupLayout".* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the javadoc comment of method.* 匹配到的元操作或API：
logic: Get the javadoc comment of method.
most similar meta operation: Get the javadoc comment of method
cosine Similarity: 0.9902204871177673
*Check whether the javadoc comment contains "GroupLayout.Group".* 匹配到的元操作或API：
未匹配成功元操作或API
100
82
=========================logics=========================
1. Get the name of the package where the class is located.
2. Check whether any import statements are declared in the class.
3. Get all import statements declared in the class.
4. Check whether the imported class is implicitly in scope.
5. Check whether the imported class is in java.lang package.
6. Check whether the imported class is in the current package.
7. Check whether the imported class is unused in the class.
8. Check whether the imported class is duplicated in the import statements.
If any of the imported classes are implicitly in scope, in java.lang package, in the current package, unused, or duplicated, this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether any import statements are declared in the class.* 匹配到的元操作或API：
query: Check whether any import statements are declared in the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8358645439147949
*Get all import statements declared in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is implicitly in scope.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Check whether the imported class is unused in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is duplicated in the import statements.* 匹配到的元操作或API：
query: Check whether the imported class is duplicated in the import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.839349091053009
84
69
109
93
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. For each import statement, perform the following checks:
    3.1. Check whether the imported member is used in the class.
    3.2. Check whether the imported member is duplicated in other import statements.
    3.3. Check whether the imported member is in the java.lang package.
    4. Check whether the imported member is in the same package as the class.
If all import statements in the class are used, not duplicated, and the imported members are neither in the java.lang package nor in the same package as the class, then this test case does not violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, perform the following checks:* 匹配到的元操作或API：
query: For each import statement, perform the following checks:
most similar API: Check whether the import equals
cosine Similarity: 0.857874870300293
*Check whether the imported member is used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is duplicated in other import statements.* 匹配到的元操作或API：
query: Check whether the imported member is duplicated in other import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8297620415687561
*Check whether the imported member is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is in the same package as the class.* 匹配到的元操作或API：
query: Check whether the imported member is in the same package as the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8218135237693787
77
63
97
80
111
94
99
82
=========================logics=========================
1. Get the name of the class.
2. Check whether the class name is "Imports".
3. Get the import statements in the class.
4. Get the name of the package where the class is located.
5. Check each import whether it is in the same package as the class.
6. Check each import whether it is from java.lang package.
7. Check each import whether it is being used in the class.
8. Check each import whether it is a duplicate of another import.
If all the imports are either used in the class, not in the same package as the class, not from java.lang package, and not duplicate of another import, then the test case does not violate the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class name is "Imports".* 匹配到的元操作或API：
query: Check whether the class name is "Imports".
most similar API: Check whether the import equals
cosine Similarity: 0.8498739004135132
*Get the import statements in the class.* 匹配到的元操作或API：
query: Get the import statements in the class.
most similar API: get text of import
cosine Similarity: 0.8173618316650391
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check each import whether it is in the same package as the class.* 匹配到的元操作或API：
query: Check each import whether it is in the same package as the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8733997941017151
*Check each import whether it is from java.lang package.* 匹配到的元操作或API：
query: Check each import whether it is from java.lang package.
most similar API: Check whether the import equals
cosine Similarity: 0.8461732864379883
*Check each import whether it is being used in the class.* 匹配到的元操作或API：
query: Check each import whether it is being used in the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8438676595687866
*Check each import whether it is a duplicate of another import.* 匹配到的元操作或API：
query: Check each import whether it is a duplicate of another import.
most similar API: Check whether the import equals
cosine Similarity: 0.8726559281349182
94
78
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. Get the name of each imported class or package.
4. Check whether the imported class or package is used in the class.
5. Check whether the imported class or package is located in java.lang package.
6. Check whether the imported class or package is located in the same package as the current class.
7. Check whether the imported class or package is duplicated in the import statements.
If there are unused, duplicated, or the members they import are already implicitly in scope because they are in java.lang, or the current package, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of each imported class or package.* 匹配到的元操作或API：
query: Get the name of each imported class or package.
most similar API: get imported name of import
cosine Similarity: 0.8848023414611816
*Check whether the imported class or package is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class or package is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8027447462081909
*Check whether the imported class or package is located in java.lang package.* 匹配到的元操作或API：
query: Check whether the imported class or package is located in java.lang package.
most similar API: compare location of import
cosine Similarity: 0.8045755624771118
*Check whether the imported class or package is located in the same package as the current class.* 匹配到的元操作或API：
query: Check whether the imported class or package is located in the same package as the current class.
most similar API: Check whether the package equals
cosine Similarity: 0.8215062618255615
*Check whether the imported class or package is duplicated in the import statements.* 匹配到的元操作或API：
query: Check whether the imported class or package is duplicated in the import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.832131028175354
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the file.
3. For each import statement, check whether it is used in the class.
4. For each import statement, check whether it is duplicated.
5. For each import statement, check whether the members they import are in java.lang.
6. For each import statement, check whether the members they import are in the current package.
If there is any import statement that is unused, duplicated, or the members they import are in java.lang or the current package, then this test case violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the file.* 匹配到的元操作或API：
query: Get all import statements in the file.
most similar API: get text of import
cosine Similarity: 0.8178803324699402
*For each import statement, check whether it is used in the class.* 匹配到的元操作或API：
query: For each import statement, check whether it is used in the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8271740078926086
*For each import statement, check whether it is duplicated.* 匹配到的元操作或API：
query: For each import statement, check whether it is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8537863492965698
*For each import statement, check whether the members they import are in java.lang.* 匹配到的元操作或API：
query: For each import statement, check whether the members they import are in java.lang.
most similar API: Check whether the import equals
cosine Similarity: 0.8194820880889893
*For each import statement, check whether the members they import are in the current package.* 匹配到的元操作或API：
query: For each import statement, check whether the members they import are in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8324735164642334
=========================logics=========================
1. Get the name of the class.
2. Get the javadoc comment of class.
3. Check whether the javadoc comment contains @see keyword.
4. Get the imported classes.
5. Check whether the imported class is used in the javadoc comment.
6. Check whether the imported class is in the java.lang package.
7. Check whether the imported class is in the current package.
8. Check whether the imported class is used in the class or not.
If the imported class is used in the javadoc comment or in the java.lang package or in the current package or used in the class, then it does not violate the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the javadoc comment of class.* 匹配到的元操作或API：
logic: Get the javadoc comment of class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9901880025863647
*Check whether the javadoc comment contains @see keyword.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the imported classes.* 匹配到的元操作或API：
query: Get the imported classes.
most similar API: get class of import
cosine Similarity: 0.8813480734825134
*Check whether the imported class is used in the javadoc comment.* 匹配到的元操作或API：
query: Check whether the imported class is used in the javadoc comment.
most similar API: get javadoc comment of class or interface
cosine Similarity: 0.8123087286949158
*Check whether the imported class is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Check whether the imported class is used in the class or not.* 匹配到的元操作或API：
query: Check whether the imported class is used in the class or not.
most similar API: Check whether is declared in class
cosine Similarity: 0.8164283037185669
=========================logics=========================
1. Get the name of the class.
    2. Get the name of the package where the class is located.
    3. Get all import statements of the class.
    4. Check whether the import statement is duplicated.
    5. Check whether the imported members are in java.lang package.
    6. Check whether the imported members are in the current package.
    7. Get the javadoc comment of the class.
    8. Check whether the imported members are used in the javadoc comment.
    9. Get all members of the class.
    10. Check whether the imported members are used in the class members.
    If the imported members are not used in class members, javadoc comments, and not in java.lang or the current package, and are not duplicated, then this test case does not violate the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is duplicated.* 匹配到的元操作或API：
query: Check whether the import statement is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8743733167648315
*Check whether the imported members are in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported members are in the current package.* 匹配到的元操作或API：
query: Check whether the imported members are in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8138056993484497
*Get the javadoc comment of the class.* 匹配到的元操作或API：
logic: Get the javadoc comment of the class.
most similar meta operation: Get the javadoc comment of class
cosine Similarity: 0.9860010147094727
*Check whether the imported members are used in the javadoc comment.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all members of the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported members are used in the class members.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statements of the class.
3. For each import statement, get the name of the imported package or class.
4. Check whether the imported package or class belongs to java.lang package.
5. Check whether the imported package or class belongs to the current package.
6. Check whether the imported package or class is used in the class.
7. Check whether the imported package or class is imported more than once.
If the imported package or class is not used, or it belongs to java.lang or the current package, or it is imported more than once, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*For each import statement, get the name of the imported package or class.* 匹配到的元操作或API：
query: For each import statement, get the name of the imported package or class.
most similar API: get package name of import
cosine Similarity: 0.8840351104736328
*Check whether the imported package or class belongs to java.lang package.* 匹配到的元操作或API：
query: Check whether the imported package or class belongs to java.lang package.
most similar API: Check whether the package equals
cosine Similarity: 0.8126451969146729
*Check whether the imported package or class belongs to the current package.* 匹配到的元操作或API：
query: Check whether the imported package or class belongs to the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.835960328578949
*Check whether the imported package or class is used in the class.* 匹配到的元操作或API：
query: Check whether the imported package or class is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8004333972930908
*Check whether the imported package or class is imported more than once.* 匹配到的元操作或API：
query: Check whether the imported package or class is imported more than once.
most similar API: Check whether the import equals
cosine Similarity: 0.8264577984809875
=========================logics=========================
1. Get all import statements in the class.
2. Check whether the imported member is unused.
3. Check whether the imported member is duplicated.
4. Check whether the imported member is already in java.lang package.
5. Check whether the imported member is in the current package.
If all import statements are used, not duplicated, and not already in java.lang or the current package, then this test case does not violate the rule.
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is unused.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is duplicated.* 匹配到的元操作或API：
query: Check whether the imported member is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8216882944107056
*Check whether the imported member is already in java.lang package.* 匹配到的元操作或API：
query: Check whether the imported member is already in java.lang package.
most similar API: Check whether the import equals
cosine Similarity: 0.8060162663459778
*Check whether the imported member is in the current package.* 匹配到的元操作或API：
query: Check whether the imported member is in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8151288628578186
=========================logics=========================
1. Get the package name where the class is located.
2. Get all import statements in the class.
3. For each import statement:
    3.1. Check whether the import is static.
    3.2. Get the imported member.
    3.3. Check whether the imported member is used in the class.
    3.4. Check whether the imported member belongs to java.lang package.
    3.5. Check whether the imported member belongs to the current package.
4. Check whether there are any duplicated imports.
If there are unused, duplicated, or implicitly in scope imports, then this test case violates the rule.
*Get the package name where the class is located.* 匹配到的元操作或API：
logic: Get the package name where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9792709350585938
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement:* 匹配到的元操作或API：
query: For each import statement:
most similar API: to string of import
cosine Similarity: 0.8046336770057678
*Check whether the import is static.* 匹配到的元操作或API：
query: Check whether the import is static.
most similar API: Check whether the import is static
cosine Similarity: 0.9887028932571411
*Get the imported member.* 匹配到的元操作或API：
query: Get the imported member.
most similar API: get child of import
cosine Similarity: 0.809410810470581
*Check whether the imported member is used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member belongs to java.lang package.* 匹配到的元操作或API：
query: Check whether the imported member belongs to java.lang package.
most similar API: Check whether the import equals
cosine Similarity: 0.801577627658844
*Check whether the imported member belongs to the current package.* 匹配到的元操作或API：
query: Check whether the imported member belongs to the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8237372636795044
*Check whether there are any duplicated imports.* 匹配到的元操作或API：
query: Check whether there are any duplicated imports.
most similar API: Check whether the import equals
cosine Similarity: 0.8668489456176758
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statement in the class.
3. Check whether the imported class or member is used in the class.
4. Check whether the imported class or member is already in the same package.
5. Check whether the imported class or member is in java.lang package.
6. Check whether the imported class or member is a static import.
7. Get the name of the superclass.
8. Check whether the imported member is a method in the superclass.
If the imported class or member is unused, or in the same package, or in java.lang package, or the imported member is a method in the superclass, then this test case violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statement in the class.* 匹配到的元操作或API：
query: Get the import statement in the class.
most similar API: get class of import
cosine Similarity: 0.8391987085342407
*Check whether the imported class or member is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class or member is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8165108561515808
*Check whether the imported class or member is already in the same package.* 匹配到的元操作或API：
query: Check whether the imported class or member is already in the same package.
most similar API: Check whether the import equals
cosine Similarity: 0.826662540435791
*Check whether the imported class or member is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class or member is a static import.* 匹配到的元操作或API：
query: Check whether the imported class or member is a static import.
most similar API: Check whether the import is static
cosine Similarity: 0.9199559688568115
*Get the name of the superclass.* 匹配到的元操作或API：
logic: Get the name of the superclass.
most similar meta operation: Get the super class of class
cosine Similarity: 0.8648006319999695
*Check whether the imported member is a method in the superclass.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. For each import statement, check whether it is a static import.
4. For each static import, get the name of the imported member.
5. Check whether the imported member is in the javax.swing.WindowConstants package.
   If the imported member is in the javax.swing.WindowConstants package, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, check whether it is a static import.* 匹配到的元操作或API：
query: For each import statement, check whether it is a static import.
most similar API: Check whether the import is static
cosine Similarity: 0.9260262250900269
*For each static import, get the name of the imported member.* 匹配到的元操作或API：
query: For each static import, get the name of the imported member.
most similar API: get imported name of import
cosine Similarity: 0.8624646067619324
*Check whether the imported member is in the javax.swing.WindowConstants package.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all import statements in the source code.
2. For each import statement, get the name of the imported class or package.
3. Check whether the imported class or package is used in the source code.
4. Check whether the import statement is a duplicate of a previous import statement.
5. Check whether the imported class is in the java.lang package.
6. Get the name of the package where the current class is located.
7. Check whether the imported class or package is in the same package as the current class.
If an import statement imports a class or package that is not used, is duplicated, is in the java.lang package, or is in the same package as the current class, then this test case violates the rule.
*Get all import statements in the source code.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, get the name of the imported class or package.* 匹配到的元操作或API：
query: For each import statement, get the name of the imported class or package.
most similar API: get imported name of import
cosine Similarity: 0.8778100609779358
*Check whether the imported class or package is used in the source code.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is a duplicate of a previous import statement.* 匹配到的元操作或API：
query: Check whether the import statement is a duplicate of a previous import statement.
most similar API: Check whether the import equals
cosine Similarity: 0.8617565631866455
*Check whether the imported class is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the package where the current class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the current class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9542686939239502
*Check whether the imported class or package is in the same package as the current class.* 匹配到的元操作或API：
query: Check whether the imported class or package is in the same package as the current class.
most similar API: Check whether the import equals
cosine Similarity: 0.8355454206466675
=========================logics=========================
1. Get all import statements in the class.
2. Check whether there are duplicate import statements.
If there are duplicate import statements, then this test case violates the rule.
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether there are duplicate import statements.* 匹配到的元操作或API：
query: Check whether there are duplicate import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8665925860404968
=========================logics=========================
1. Get all import statements from the class.
        2. Check whether the import statement is a single type import.
        3. Check whether there is a wildcard import statement that imports the same package as the single type import statement.
        If there is a single type import statement that imports a type from a package that is already imported by a wildcard import statement, then this test case violates the rule.
*Get all import statements from the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is a single type import.* 匹配到的元操作或API：
query: Check whether the import statement is a single type import.
most similar API: Check whether the import equals
cosine Similarity: 0.8501864671707153
*Check whether there is a wildcard import statement that imports the same package as the single type import statement.* 匹配到的元操作或API：
query: Check whether there is a wildcard import statement that imports the same package as the single type import statement.
most similar API: Check whether the import equals
cosine Similarity: 0.8405553102493286
=========================logics=========================
1. Get the name of the imported package.
2. Check whether the imported package is java.util.
3. Get the class that the import statement is located in.
4. Get all fields in the class.
5. Get the type of field.
6. Check whether the type is in the imported package.
7. Repeat steps 2-6 for the package java.util.logging.
If all used types in the class are in the imported packages, then this test case does not violate the rule.
*Get the name of the imported package.* 匹配到的元操作或API：
query: Get the name of the imported package.
most similar API: get package name of import
cosine Similarity: 0.9581836462020874
*Check whether the imported package is java.util.* 匹配到的元操作或API：
query: Check whether the imported package is java.util.
most similar API: Check whether the import equals
cosine Similarity: 0.8190497159957886
*Get the class that the import statement is located in.* 匹配到的元操作或API：
query: Get the class that the import statement is located in.
most similar API: get class of import
cosine Similarity: 0.8945753574371338
*Get all fields in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the type is in the imported package.* 匹配到的元操作或API：
query: Check whether the type is in the imported package.
most similar API: Check whether the import equals
cosine Similarity: 0.8504298329353333
*Repeat steps 2-6 for the package java.util.logging.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all import declarations in the file.
2. Check whether the import declaration is a wildcard import.
3. Get all types in the import declaration.
4. Check whether the type is in java.lang package.
5. Check whether the type is in the current package.
6. Get all classes and interfaces in the file.
7. Get all fields in the class or interface.
8. Get the type of the field.
9. Check whether the type of the field is the same as the type in the import declaration.
10. Get all methods in the class or interface.
11. Get all formal parameters in the method.
12. Get the type of the formal parameter.
13. Check whether the type of the formal parameter is the same as the type in the import declaration.
14. Get the return type of the method.
15. Check whether the return type of the method is the same as the type in the import declaration.
If the import declaration is not a wildcard import, the type in the import declaration is not in java.lang package or the current package, and the type in the import declaration is not used in any field, formal parameter, or return type, then this test case does not violate the rule.
*Get all import declarations in the file.* 匹配到的元操作或API：
query: Get all import declarations in the file.
most similar API: get text of import
cosine Similarity: 0.800934910774231
*Check whether the import declaration is a wildcard import.* 匹配到的元操作或API：
query: Check whether the import declaration is a wildcard import.
most similar API: Check whether the import equals
cosine Similarity: 0.8480076193809509
*Get all types in the import declaration.* 匹配到的元操作或API：
query: Get all types in the import declaration.
most similar API: get type system of import
cosine Similarity: 0.8272992968559265
*Check whether the type is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the type is in the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all classes and interfaces in the file.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all fields in the class or interface.* 匹配到的元操作或API：
query: Get all fields in the class or interface.
most similar API: get record components of class or interface
cosine Similarity: 0.8129918575286865
*Get the type of the field.* 匹配到的元操作或API：
logic: Get the type of the field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9713408946990967
*Check whether the type of the field is the same as the type in the import declaration.* 匹配到的元操作或API：
query: Check whether the type of the field is the same as the type in the import declaration.
most similar API: Check whether the import equals
cosine Similarity: 0.835075318813324
*Get all methods in the class or interface.* 匹配到的元操作或API：
query: Get all methods in the class or interface.
most similar API: get operations of class or interface
cosine Similarity: 0.8052576780319214
*Get all formal parameters in the method.* 匹配到的元操作或API：
logic: Get all formal parameters in the method.
most similar meta operation: Get a formal parameter of method
cosine Similarity: 0.875221312046051
*Get the type of the formal parameter.* 匹配到的元操作或API：
logic: Get the type of the formal parameter.
most similar meta operation: Get the type of formal parameter
cosine Similarity: 0.9761149883270264
*Check whether the type of the formal parameter is the same as the type in the import declaration.* 匹配到的元操作或API：
query: Check whether the type of the formal parameter is the same as the type in the import declaration.
most similar API: Check whether the import equals
cosine Similarity: 0.8188614845275879
*Get the return type of the method.* 匹配到的元操作或API：
logic: Get the return type of the method.
most similar meta operation: Get the return type of method
cosine Similarity: 0.9745092988014221
*Check whether the return type of the method is the same as the type in the import declaration.* 匹配到的元操作或API：
logic: Check whether the return type of the method is the same as the type in the import declaration.
most similar meta operation: Check whether the return type of method is string type
cosine Similarity: 0.8519277572631836
=========================logics=========================
1. Get the name of imported package.
2. Check whether the name is "foo.*".
3. Get the name of class.
4. Check whether the name is "Foo".
5. Get the field declared in class.
6. Get the type of field.
7. Check whether the type is "System".
If the imported package is "foo.*" and the class is "Foo" and the type of field is "System", then this test case does not violate the rule.
*Get the name of imported package.* 匹配到的元操作或API：
query: Get the name of imported package.
most similar API: get package name of import
cosine Similarity: 0.9634512662887573
*Check whether the name is "foo.*".* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the name is "Foo".* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the field declared in class.* 匹配到的元操作或API：
logic: Get the field declared in class.
most similar meta operation: Get a declared annotation of field
cosine Similarity: 0.8602324724197388
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the type is "System".* 匹配到的元操作或API：
query: Check whether the type is "System".
most similar API: get type system of class or interface
cosine Similarity: 0.8024309873580933
78
64
=========================logics=========================
1. Get the name of the package where the class is located.
2. Check whether class has declared annotations.
3. Get the name of class.
4. Check whether the class is public.
5. Get all import statements.
6. Check whether the imported package or class is in java.lang or in the current package.
7. Check whether the imported package or class is unused.
8. Check whether the imported package or class is duplicated.
If any imported package or class is in java.lang or in the current package, or unused, or duplicated, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether class has declared annotations.* 匹配到的元操作或API：
logic: Check whether class has declared annotations.
most similar meta operation: Check whether class has declared annotations
cosine Similarity: 0.9901518821716309
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get all import statements.* 匹配到的元操作或API：
query: Get all import statements.
most similar API: get text of import
cosine Similarity: 0.8120476007461548
*Check whether the imported package or class is in java.lang or in the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported package or class is unused.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported package or class is duplicated.* 匹配到的元操作或API：
query: Check whether the imported package or class is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8244054913520813
=========================logics=========================
1. Get all import statements in the class.
2. Check whether the import statements are static.
3. Get the name of imported classes or methods.
4. Check whether the imported classes or methods are used in the class.
5. Check for duplicates in the list of imported classes or methods.
6. Check whether the imported classes or methods are in the java.lang package.
7. Check whether the imported classes or methods are in the current package.
If the imported classes or methods are unused, duplicated, or are already implicitly in scope because they are in java.lang or the current package, then this test case violates the rule.
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statements are static.* 匹配到的元操作或API：
query: Check whether the import statements are static.
most similar API: Check whether the import is static
cosine Similarity: 0.9561450481414795
*Get the name of imported classes or methods.* 匹配到的元操作或API：
query: Get the name of imported classes or methods.
most similar API: get imported name of import
cosine Similarity: 0.8740293979644775
*Check whether the imported classes or methods are used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check for duplicates in the list of imported classes or methods.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported classes or methods are in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported classes or methods are in the current package.* 匹配到的元操作或API：
query: Check whether the imported classes or methods are in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8128036260604858
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. For each import statement, get the name of the imported package or class.
4. Check whether the imported package or class is "java.lang".
5. Check whether the imported package or class is the same as the package where the class is located.
6. Check whether the import statement is static.
7. Get the number of times each import statement appears in the class.
8. Check whether the import statement is used in the class.
If the imported package or class is "java.lang", or the same as the package where the class is located, or the import statement is static but not used in the class, or the import statement appears more than once in the class, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, get the name of the imported package or class.* 匹配到的元操作或API：
query: For each import statement, get the name of the imported package or class.
most similar API: get package name of import
cosine Similarity: 0.8840351104736328
*Check whether the imported package or class is "java.lang".* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported package or class is the same as the package where the class is located.* 匹配到的元操作或API：
query: Check whether the imported package or class is the same as the package where the class is located.
most similar API: Check whether the import equals
cosine Similarity: 0.8491925597190857
*Check whether the import statement is static.* 匹配到的元操作或API：
query: Check whether the import statement is static.
most similar API: Check whether the import is static
cosine Similarity: 0.9610241651535034
*Get the number of times each import statement appears in the class.* 匹配到的元操作或API：
query: Get the number of times each import statement appears in the class.
most similar API: get num children of import
cosine Similarity: 0.8085767030715942
*Check whether the import statement is used in the class.* 匹配到的元操作或API：
query: Check whether the import statement is used in the class.
most similar API: Check whether the import equals
cosine Similarity: 0.8363474011421204
=========================logics=========================
1. Get the name of the class.
2. Get the import statements of the class.
3. Check whether the imported class or package is used in the class.
4. Check whether the imported class or package is duplicated.
5. Check whether the imported class or package is in java.lang or the current package.
If the imported class or package is not used, or duplicated, or in java.lang or the current package, then this test case violates the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Check whether the imported class or package is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class or package is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8027447462081909
*Check whether the imported class or package is duplicated.* 匹配到的元操作或API：
query: Check whether the imported class or package is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8247717022895813
*Check whether the imported class or package is in java.lang or the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all the import statements in the class.
2. Check whether any import statement is static.
3. Get the type of object created by constructor call.
4. Check whether the type of object is in the current package.
5. Check whether the type of object is in java.lang.
6. Check whether the static import statement is unused.
If there is an unused static import statement or the type of object created by constructor call is in the current package or in java.lang, then this test case violates the rule.
*Get all the import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether any import statement is static.* 匹配到的元操作或API：
query: Check whether any import statement is static.
most similar API: Check whether the import is static
cosine Similarity: 0.9504071474075317
*Get the type of object created by constructor call.* 匹配到的元操作或API：
logic: Get the type of object created by constructor call.
most similar meta operation: Get the type of object created by constructor call
cosine Similarity: 0.9878885746002197
*Check whether the type of object is in the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the type of object is in java.lang.* 匹配到的元操作或API：
query: Check whether the type of object is in java.lang.
most similar API: Check whether the class or interface type is class or interface type
cosine Similarity: 0.8074026703834534
*Check whether the static import statement is unused.* 匹配到的元操作或API：
query: Check whether the static import statement is unused.
most similar API: Check whether the import is static
cosine Similarity: 0.8806405067443848
=========================logics=========================
1. Get all import declarations in the class.
        2. Get the name of each imported class.
        3. Check whether the imported class is in the "java.lang" package.
        4. Get the name of the package where the class is located.
        5. Check whether the imported class is in the same package as the current class.
        6. Check whether the imported class is used in the class.
        7. Check whether the same class has been imported more than once.
        If an imported class is in the "java.lang" package, in the same package as the current class, not used in the class, or has been imported more than once, then it violates the rule.
*Get all import declarations in the class.* 匹配到的元操作或API：
query: Get all import declarations in the class.
most similar API: get declarations of class or interface
cosine Similarity: 0.82541424036026
*Get the name of each imported class.* 匹配到的元操作或API：
query: Get the name of each imported class.
most similar API: get imported name of import
cosine Similarity: 0.8774767518043518
*Check whether the imported class is in the "java.lang" package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the imported class is in the same package as the current class.* 匹配到的元操作或API：
query: Check whether the imported class is in the same package as the current class.
most similar API: Check whether the import equals
cosine Similarity: 0.8376612067222595
*Check whether the imported class is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8184274435043335
*Check whether the same class has been imported more than once.* 匹配到的元操作或API：
query: Check whether the same class has been imported more than once.
most similar API: Check whether the import equals
cosine Similarity: 0.8317295908927917
=========================logics=========================
1. Get all import statements from the class.
2. Check whether the import is a static import.
3. Get the imported package or class name.
4. Check whether the same package or class name is imported in the non-static import.
5. Get all variables declared in the class.
6. Get the type of each declared variable.
7. Check whether the variable type matches with the imported class.
8. Get all method calls in the class.
9. Get the name of each called method.
10. Check whether the method name matches with the imported static method.
If a static import and a non-static import have the same package or class name, and both the imported class and method are used in the class, then this test case adheres to the rule.
*Get all import statements from the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import is a static import.* 匹配到的元操作或API：
query: Check whether the import is a static import.
most similar API: Check whether the import is static
cosine Similarity: 0.972751259803772
*Get the imported package or class name.* 匹配到的元操作或API：
logic: Get the imported package or class name.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.8603927493095398
*Check whether the same package or class name is imported in the non-static import.* 匹配到的元操作或API：
query: Check whether the same package or class name is imported in the non-static import.
most similar API: Check whether the import equals
cosine Similarity: 0.8534649610519409
*Get all variables declared in the class.* 匹配到的元操作或API：
query: Get all variables declared in the class.
most similar API: get loop variables: Returns the variable IDS corresponding to variables declared in the init clause of the loop.
cosine Similarity: 0.8072336912155151
*Get the type of each declared variable.* 匹配到的元操作或API：
logic: Get the type of each declared variable.
most similar meta operation: Get the type of local variable
cosine Similarity: 0.8806276321411133
*Check whether the variable type matches with the imported class.* 匹配到的元操作或API：
query: Check whether the variable type matches with the imported class.
most similar API: Check whether the import equals
cosine Similarity: 0.8206565976142883
*Get all method calls in the class.* 匹配到的元操作或API：
query: Get all method calls in the class.
most similar API: get method name of method call
cosine Similarity: 0.8157881498336792
*Get the name of each called method.* 匹配到的元操作或API：
logic: Get the name of each called method.
most similar meta operation: Get the name of called method
cosine Similarity: 0.9356565475463867
*Check whether the method name matches with the imported static method.* 匹配到的元操作或API：
query: Check whether the method name matches with the imported static method.
most similar API: Check whether the import is static
cosine Similarity: 0.8128482103347778
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statements in the class.
3. Get the name of the imported class or package from each import statement.
4. Compare the name of the imported package or class with the name of the package where the class is located.
5. Check whether the imported class or package is in java.lang.
6. Check whether the imported class or package is used in the class.
7. Check whether the imported class or package is duplicated in the import statements.
If the imported package or class is the same as the package where the class is located, or is in java.lang, or is not used in the class, or is duplicated in the import statements, then this test case violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statements in the class.* 匹配到的元操作或API：
query: Get the import statements in the class.
most similar API: get text of import
cosine Similarity: 0.8173618316650391
*Get the name of the imported class or package from each import statement.* 匹配到的元操作或API：
query: Get the name of the imported class or package from each import statement.
most similar API: get imported name of import
cosine Similarity: 0.8852412700653076
*Compare the name of the imported package or class with the name of the package where the class is located.* 匹配到的元操作或API：
logic: Compare the name of the imported package or class with the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.8652154207229614
*Check whether the imported class or package is in java.lang.* 匹配到的元操作或API：
query: Check whether the imported class or package is in java.lang.
most similar API: Check whether the import equals
cosine Similarity: 0.8054714798927307
*Check whether the imported class or package is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class or package is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8027447462081909
*Check whether the imported class or package is duplicated in the import statements.* 匹配到的元操作或API：
query: Check whether the imported class or package is duplicated in the import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.832131028175354
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. For each import statement, get the imported package name.
4. Check whether the imported package name is the same as the class's package name.
5. For each import statement, get the imported class name.
6. Check whether the imported class is used in the class.
7. Check whether the imported class is in java.lang package.
8. Check whether the imported class is in the current package.
9. Check whether the import statement is duplicated.

If any of the import statements imports a class from the same package as the class, or if any of the imported classes are not used in the class, or if any of the imported classes are in the java.lang package or in the current package, or if any of the import statements are duplicated, then the test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, get the imported package name.* 匹配到的元操作或API：
query: For each import statement, get the imported package name.
most similar API: get package name of import
cosine Similarity: 0.9005398750305176
*Check whether the imported package name is the same as the class's package name.* 匹配到的元操作或API：
query: Check whether the imported package name is the same as the class's package name.
most similar API: Check whether the import equals
cosine Similarity: 0.8333398699760437
*For each import statement, get the imported class name.* 匹配到的元操作或API：
query: For each import statement, get the imported class name.
most similar API: get imported name of import
cosine Similarity: 0.8607606887817383
*Check whether the imported class is used in the class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8184274435043335
*Check whether the imported class is in java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Check whether the import statement is duplicated.* 匹配到的元操作或API：
query: Check whether the import statement is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8743733167648315
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statements of the class.
3. Get the package name of the import statement.
4. Check whether the package name of the import statement is the same as the package where the class is located.
If the import statement imports from the same package where the class is located, the test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Get the package name of the import statement.* 匹配到的元操作或API：
query: Get the package name of the import statement.
most similar API: get package name of import
cosine Similarity: 0.9225884675979614
*Check whether the package name of the import statement is the same as the package where the class is located.* 匹配到的元操作或API：
query: Check whether the package name of the import statement is the same as the package where the class is located.
most similar API: Check whether the import equals
cosine Similarity: 0.8229468464851379
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the name of class.
3. Get all the import statements in the class.
4. Check whether the import statement is java.lang.String.
5. Check whether the class has used the imported class.
6. If the imported class is java.lang.String and it is used in the class, then this test case does not violate the rule.
7. If the imported class is java.lang.String and it is not used in the class, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Get all the import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is java.lang.String.* 匹配到的元操作或API：
query: Check whether the import statement is java.lang.String.
most similar API: Check whether the import equals
cosine Similarity: 0.814528226852417
*Check whether the class has used the imported class.* 匹配到的元操作或API：
query: Check whether the class has used the imported class.
most similar API: Check whether the import equals
cosine Similarity: 0.8087384104728699
*If the imported class is java.lang.String and it is used in the class, then this test case does not violate the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
*If the imported class is java.lang.String and it is not used in the class, then this test case violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Check whether the class is public.
2. Get the name of the class.
3. Get the declared import statements in the file.
4. Check whether the imported type is java.lang.String.
5. Check whether the imported type is used in the class.
If the class is public, its name is Foo, and there is an import statement for java.lang.String that is not used in the class, then this test case violates the rule.
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Get the declared import statements in the file.* 匹配到的元操作或API：
query: Get the declared import statements in the file.
most similar API: get text of import
cosine Similarity: 0.8243904113769531
*Check whether the imported type is java.lang.String.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported type is used in the class.* 匹配到的元操作或API：
query: Check whether the imported type is used in the class.
most similar API: Check whether the import has descendant of type
cosine Similarity: 0.8265097141265869
=========================logics=========================
1. Get the name of the package where the class is located.
2. Check whether the class has declared import statements.
3. Get an import statement from the class.
4. Get the package name of the imported type.
5. Check whether the imported package name is java.lang.
6. Get the name of imported type.
7. Check whether the name of imported type shadows a type in the current package.
8. Get all fields declared in the class.
9. Get the type of field.
10. Check whether the field type is the same as the imported type.
If the class has an import statement from java.lang, and the imported type shadows a type in the class's package, and the type of field in the class is the same as the imported type, then this test case does not violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the class has declared import statements.* 匹配到的元操作或API：
query: Check whether the class has declared import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8425775170326233
*Get an import statement from the class.* 匹配到的元操作或API：
query: Get an import statement from the class.
most similar API: get class of import
cosine Similarity: 0.83062344789505
*Get the package name of the imported type.* 匹配到的元操作或API：
query: Get the package name of the imported type.
most similar API: get package name of import
cosine Similarity: 0.9197733402252197
*Check whether the imported package name is java.lang.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of imported type.* 匹配到的元操作或API：
query: Get the name of imported type.
most similar API: get imported name of import
cosine Similarity: 0.899060845375061
*Check whether the name of imported type shadows a type in the current package.* 匹配到的元操作或API：
query: Check whether the name of imported type shadows a type in the current package.
most similar API: Check whether the import has descendant of type
cosine Similarity: 0.8144472241401672
*Get all fields declared in the class.* 匹配到的元操作或API：
query: Get all fields declared in the class.
most similar API: get declared annotations of field
cosine Similarity: 0.8222572803497314
*Get the type of field.* 匹配到的元操作或API：
logic: Get the type of field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9832500219345093
*Check whether the field type is the same as the imported type.* 匹配到的元操作或API：
query: Check whether the field type is the same as the imported type.
most similar API: Check whether the import equals
cosine Similarity: 0.8410626649856567
=========================logics=========================
1. Get the name of the package where the class is located.
        2. Check whether class has declared imports.
        3. Get the name of import.
        4. Check whether the import is java.lang.String.
        5. Get the name of class.
        6. Check whether the name of class shadows the import.
        If the package contains a class that shadows a java.lang.String import, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether class has declared imports.* 匹配到的元操作或API：
query: Check whether class has declared imports.
most similar API: Check whether the import equals
cosine Similarity: 0.8447408676147461
*Get the name of import.* 匹配到的元操作或API：
query: Get the name of import.
most similar API: get imported name of import
cosine Similarity: 0.9702714681625366
*Check whether the import is java.lang.String.* 匹配到的元操作或API：
query: Check whether the import is java.lang.String.
most similar API: Check whether the import equals
cosine Similarity: 0.8252198100090027
*Get the name of class.* 匹配到的元操作或API：
logic: Get the name of class.
most similar meta operation: Get the name of class
cosine Similarity: 0.9738673567771912
*Check whether the name of class shadows the import.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all import statements in the program.
2. Check whether the import statement is importing java.lang.*.
If there is an import statement importing java.lang.*, then this test case violates the rule.
*Get all import statements in the program.* 匹配到的元操作或API：
query: Get all import statements in the program.
most similar API: get text of import
cosine Similarity: 0.805495023727417
*Check whether the import statement is importing java.lang.*.* 匹配到的元操作或API：
query: Check whether the import statement is importing java.lang.*.
most similar API: Check whether the import equals
cosine Similarity: 0.8353426456451416
=========================logics=========================
1. Get all import statements in the code.
2. For each import statement, check whether it is importing java.lang.ref, java.lang.reflect, java.lang.annotation, or java.lang.management.
3. Get all field declarations in the class.
4. For each field, get the type of the field.
5. Check whether the field type matches any of the imported packages.
If there are import statements for the packages java.lang.ref, java.lang.reflect, java.lang.annotation, or java.lang.management, and none of the fields in the class are of these types, then the import statements are unused and the test case violates the rule.
*Get all import statements in the code.* 匹配到的元操作或API：
query: Get all import statements in the code.
most similar API: get text of import
cosine Similarity: 0.8101212382316589
*For each import statement, check whether it is importing java.lang.ref, java.lang.reflect, java.lang.annotation, or java.lang.management.* 匹配到的元操作或API：
query: For each import statement, check whether it is importing java.lang.ref, java.lang.reflect, java.lang.annotation, or java.lang.management.
most similar API: Check whether the import equals
cosine Similarity: 0.8059728145599365
*Get all field declarations in the class.* 匹配到的元操作或API：
query: Get all field declarations in the class.
most similar API: get declared annotations of field
cosine Similarity: 0.8462485074996948
*For each field, get the type of the field.* 匹配到的元操作或API：
logic: For each field, get the type of the field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9196294546127319
*Check whether the field type matches any of the imported packages.* 匹配到的元操作或API：
query: Check whether the field type matches any of the imported packages.
most similar API: Check whether the import equals
cosine Similarity: 0.832492470741272
=========================logics=========================
1. Get the name of the class.
2. Check whether the class has import statements.
3. Get all import statements.
4. Check whether the import statement is static.
5. Get the class being imported in the import statement.
6. Check whether the imported class is java.lang.String.
7. Get all static members used in the class.
8. Check whether the static member used is from java.lang.String.
If the class has static import statements from java.lang.String and uses static members from this class, then the test case does not violate the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class has import statements.* 匹配到的元操作或API：
query: Check whether the class has import statements.
most similar API: Check whether the import equals
cosine Similarity: 0.8589881658554077
*Get all import statements.* 匹配到的元操作或API：
query: Get all import statements.
most similar API: get text of import
cosine Similarity: 0.8120476007461548
*Check whether the import statement is static.* 匹配到的元操作或API：
query: Check whether the import statement is static.
most similar API: Check whether the import is static
cosine Similarity: 0.9610241651535034
*Get the class being imported in the import statement.* 匹配到的元操作或API：
query: Get the class being imported in the import statement.
most similar API: get class of import
cosine Similarity: 0.9178645610809326
*Check whether the imported class is java.lang.String.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get all static members used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the static member used is from java.lang.String.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get all import statements in the java file.
2. Check whether the imported class is used in the java file.
3. Check whether the imported class is in package java.lang.
4. Get the name of the package where the class is located.
5. Check whether the imported class is in the current package.
If an import statement imports a class that is not used, or is in package java.lang, or is in the current package, it violates the rule.
*Get all import statements in the java file.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is used in the java file.* 匹配到的元操作或API：
query: Check whether the imported class is used in the java file.
most similar API: Check whether is declared in class
cosine Similarity: 0.8054828643798828
*Check whether the imported class is in package java.lang.* 匹配到的元操作或API：
未匹配成功元操作或API
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
=========================logics=========================
1. Get the name of the class.
2. Check whether the class is public.
3. Get the list of import statements in the class.
4. Check whether the imported class is in the java.lang package.
5. Check whether the imported class is used in the current class.
6. Check whether the imported class is in the current package.
7. Check whether the imported class is duplicated in the import statement list.
If the imported class is not used in the current class, or in the java.lang package, or in the current package, or duplicated, then this test case violates the rule.
*Get the name of the class.* 匹配到的元操作或API：
logic: Get the name of the class.
most similar meta operation: Get the name of class
cosine Similarity: 0.968898594379425
*Check whether the class is public.* 匹配到的元操作或API：
logic: Check whether the class is public.
most similar meta operation: Check whether the class is public
cosine Similarity: 0.9849746227264404
*Get the list of import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported class is used in the current class.* 匹配到的元操作或API：
query: Check whether the imported class is used in the current class.
most similar API: Check whether is declared in class
cosine Similarity: 0.8030582666397095
*Check whether the imported class is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class is in the current package.
most similar API: get class of import
cosine Similarity: 0.8231996297836304
*Check whether the imported class is duplicated in the import statement list.* 匹配到的元操作或API：
query: Check whether the imported class is duplicated in the import statement list.
most similar API: Check whether the import equals
cosine Similarity: 0.8226730823516846
=========================logics=========================
1. Get the import statements of the class.
2. Check the package of each imported class.
3. Compare the package of the imported class with java.lang and the current package where the class is located.
4. Get all the fields declared in class.
5. Get the type of each field.
6. Compare the type of each field with the imported classes.
If the imported classes are in java.lang or current package or not used in the current class, then this test case violates the rule.
*Get the import statements of the class.* 匹配到的元操作或API：
query: Get the import statements of the class.
most similar API: get text of import
cosine Similarity: 0.8111062049865723
*Check the package of each imported class.* 匹配到的元操作或API：
query: Check the package of each imported class.
most similar API: get class of import
cosine Similarity: 0.8323447704315186
*Compare the package of the imported class with java.lang and the current package where the class is located.* 匹配到的元操作或API：
query: Compare the package of the imported class with java.lang and the current package where the class is located.
most similar API: compare location of import
cosine Similarity: 0.8076082468032837
*Get all the fields declared in class.* 匹配到的元操作或API：
query: Get all the fields declared in class.
most similar API: get declared annotations of field
cosine Similarity: 0.8174477815628052
*Get the type of each field.* 匹配到的元操作或API：
logic: Get the type of each field.
most similar meta operation: Get the type of field
cosine Similarity: 0.9246454834938049
*Compare the type of each field with the imported classes.* 匹配到的元操作或API：
query: Compare the type of each field with the imported classes.
most similar API: get class of field
cosine Similarity: 0.8041956424713135
=========================logics=========================
1. Get the name of imported package
2. Check whether the name of imported package is 'java.lang'
3. Get the name of class
4. Check whether the class uses any member of 'java.lang' package explicitly
5. Check whether the class has duplicate import statements
6. Check whether the class uses all imported members
If the imported package is 'java.lang' or the class has duplicate import statements or the class does not use all imported members, then the test case violates the rule.
*Get the name of imported package* 匹配到的元操作或API：
query: Get the name of imported package
most similar API: get package name of import
cosine Similarity: 0.978571891784668
*Check whether the name of imported package is 'java.lang'* 匹配到的元操作或API：
query: Check whether the name of imported package is 'java.lang'
most similar API: get package name of import
cosine Similarity: 0.8085508942604065
*Get the name of class* 匹配到的元操作或API：
logic: Get the name of class
most similar meta operation: Get the name of class
cosine Similarity: 1.0
*Check whether the class uses any member of 'java.lang' package explicitly* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the class has duplicate import statements* 匹配到的元操作或API：
query: Check whether the class has duplicate import statements
most similar API: Check whether the import equals
cosine Similarity: 0.8440725207328796
*Check whether the class uses all imported members* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get the import statements in the class.
3. For each import statement, get the name of imported class or package.
4. Check whether the imported class or package is in the current package.
5. Check whether the imported class or package is in java.lang.
6. Get all accessed variables in the class.
7. For each accessed variable, get the type of variable.
8. Check whether the type of variable is the same as the imported class.
9. If the imported class or package is not in current package, not in java.lang, and the type of accessed variable is not the same as imported class, then this import statement is unnecessary. 
10. Count the number of unnecessary import statements.
If the number of unnecessary import statements is 0, then this test case does not violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get the import statements in the class.* 匹配到的元操作或API：
query: Get the import statements in the class.
most similar API: get text of import
cosine Similarity: 0.8173618316650391
*For each import statement, get the name of imported class or package.* 匹配到的元操作或API：
query: For each import statement, get the name of imported class or package.
most similar API: get imported name of import
cosine Similarity: 0.8816492557525635
*Check whether the imported class or package is in the current package.* 匹配到的元操作或API：
query: Check whether the imported class or package is in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.822014570236206
*Check whether the imported class or package is in java.lang.* 匹配到的元操作或API：
query: Check whether the imported class or package is in java.lang.
most similar API: Check whether the import equals
cosine Similarity: 0.8054714798927307
*Get all accessed variables in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each accessed variable, get the type of variable.* 匹配到的元操作或API：
logic: For each accessed variable, get the type of variable.
most similar meta operation: Get the type of accessed variable
cosine Similarity: 0.9388359785079956
*Check whether the type of variable is the same as the imported class.* 匹配到的元操作或API：
query: Check whether the type of variable is the same as the imported class.
most similar API: Check whether the import equals
cosine Similarity: 0.8302286267280579
*If the imported class or package is not in current package, not in java.lang, and the type of accessed variable is not the same as imported class, then this import statement is unnecessary.* 匹配到的元操作或API：
未匹配成功元操作或API
*Count the number of unnecessary import statements.* 匹配到的元操作或API：
未匹配成功元操作或API
94
78
94
78
98
81
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the file.
3. For each import statement, check whether the imported type is statically imported.
4. Check whether the statically imported type is used in the file.
5. Check whether the type is already in scope due to being in java.lang or the current package.
6. Check whether the import statement is a duplicate.
If there is an import statement that is either unused, duplicated, or the members it imports are already implicitly in scope, because they’re in java.lang, or the current package, then this test case violates the rule.

*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the file.* 匹配到的元操作或API：
query: Get all import statements in the file.
most similar API: get text of import
cosine Similarity: 0.8178803324699402
*For each import statement, check whether the imported type is statically imported.* 匹配到的元操作或API：
query: For each import statement, check whether the imported type is statically imported.
most similar API: Check whether the import is static
cosine Similarity: 0.9003013372421265
*Check whether the statically imported type is used in the file.* 匹配到的元操作或API：
query: Check whether the statically imported type is used in the file.
most similar API: Check whether the import is static
cosine Similarity: 0.8637140393257141
*Check whether the type is already in scope due to being in java.lang or the current package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the import statement is a duplicate.* 匹配到的元操作或API：
query: Check whether the import statement is a duplicate.
most similar API: Check whether the import equals
cosine Similarity: 0.8791882991790771
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. For each import statement:
    4. Check if the statement is a wildcard import.
    5. If it is a wildcard import:
        6. Get the package or class name that the wildcard import is referring to.
        7. Check if the imported package or class name matches the package of the current class. If it does match, then the import is unnecessary.
        8. Check if the imported package is java.lang. If it is, then the import is unnecessary.
    9. If it is not a wildcard import:
        10. Get the fully qualified name of the import.
        11. Check if the import is used in the class. If it is not used, then the import is unnecessary.
        12. Check if the import is duplicated. If it is, then the import is unnecessary.
If any of the checks result in an unnecessary import, then the rule is violated.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement:* 匹配到的元操作或API：
query: For each import statement:
most similar API: to string of import
cosine Similarity: 0.8046336770057678
*Check if the statement is a wildcard import.* 匹配到的元操作或API：
query: Check if the statement is a wildcard import.
most similar API: Check whether the import equals
cosine Similarity: 0.8317667245864868
*If it is a wildcard import:* 匹配到的元操作或API：
query: If it is a wildcard import:
most similar API: Check whether the import equals
cosine Similarity: 0.8461090326309204
*Get the package or class name that the wildcard import is referring to.* 匹配到的元操作或API：
query: Get the package or class name that the wildcard import is referring to.
most similar API: get package name of import
cosine Similarity: 0.8831404447555542
*Check if the imported package or class name matches the package of the current class. If it does match, then the import is unnecessary.* 匹配到的元操作或API：
query: Check if the imported package or class name matches the package of the current class. If it does match, then the import is unnecessary.
most similar API: Check whether the import equals
cosine Similarity: 0.8344470262527466
*Check if the imported package is java.lang. If it is, then the import is unnecessary.* 匹配到的元操作或API：
query: Check if the imported package is java.lang. If it is, then the import is unnecessary.
most similar API: Check whether the import equals
cosine Similarity: 0.8098530769348145
*If it is not a wildcard import:* 匹配到的元操作或API：
query: If it is not a wildcard import:
most similar API: Check whether the import equals
cosine Similarity: 0.8620589375495911
*Get the fully qualified name of the import.* 匹配到的元操作或API：
query: Get the fully qualified name of the import.
most similar API: get imported name of import
cosine Similarity: 0.8957251310348511
*Check if the import is used in the class. If it is not used, then the import is unnecessary.* 匹配到的元操作或API：
query: Check if the import is used in the class. If it is not used, then the import is unnecessary.
most similar API: Check whether the import equals
cosine Similarity: 0.8128731846809387
*Check if the import is duplicated. If it is, then the import is unnecessary.* 匹配到的元操作或API：
query: Check if the import is duplicated. If it is, then the import is unnecessary.
most similar API: Check whether the import equals
cosine Similarity: 0.8632053136825562
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the file.
3. For each import statement, do the following checks:
    1. Check whether the import is static.
    2. Check whether the import is on-demand (i.e., ends with .*).
    3. Get the name of the package being imported.
    4. Check whether the imported package is java.lang or the same package as the current class.
    5. Check whether the imports are duplicated.
    6. Check whether the imported classes or members are used in the class.
If any import statement is static, on-demand, not from java.lang or the same package as the current class, not duplicated, and the imported classes or members are used in the class, then this test case does not violate the rule. If any import statement does not meet these conditions, then this test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the file.* 匹配到的元操作或API：
query: Get all import statements in the file.
most similar API: get text of import
cosine Similarity: 0.8178803324699402
*For each import statement, do the following checks:* 匹配到的元操作或API：
query: For each import statement, do the following checks:
most similar API: Check whether the import equals
cosine Similarity: 0.8606471419334412
*Check whether the import is static.* 匹配到的元操作或API：
query: Check whether the import is static.
most similar API: Check whether the import is static
cosine Similarity: 0.9887028932571411
*Check whether the import is on-demand (i.e., ends with .*).* 匹配到的元操作或API：
query: Check whether the import is on-demand (i.e., ends with .*).
most similar API: Check whether the import is import on demand
cosine Similarity: 0.9171692132949829
*Get the name of the package being imported.* 匹配到的元操作或API：
query: Get the name of the package being imported.
most similar API: get package name of import
cosine Similarity: 0.9559223055839539
*Check whether the imported package is java.lang or the same package as the current class.* 匹配到的元操作或API：
query: Check whether the imported package is java.lang or the same package as the current class.
most similar API: Check whether the package equals
cosine Similarity: 0.8167464137077332
*Check whether the imports are duplicated.* 匹配到的元操作或API：
query: Check whether the imports are duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8791886568069458
*Check whether the imported classes or members are used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. Check whether the imported package or class is java.lang.
4. Check whether the imported package or class is the current package.
5. Get all classes, interfaces, and enum declarations in the class.
6. Get all method declarations in the class.
7. Get all field declarations in the class.
8. Check whether the imported class or interface is used in the declaration of classes, interfaces, enums, methods, and fields.
If the imported package or class is java.lang, is the current package, or is not used in the declaration of classes, interfaces, enums, methods, and fields, then the test case violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported package or class is java.lang.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported package or class is the current package.* 匹配到的元操作或API：
query: Check whether the imported package or class is the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8309117555618286
*Get all classes, interfaces, and enum declarations in the class.* 匹配到的元操作或API：
query: Get all classes, interfaces, and enum declarations in the class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8784898519515991
*Get all method declarations in the class.* 匹配到的元操作或API：
query: Get all method declarations in the class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8432708978652954
*Get all field declarations in the class.* 匹配到的元操作或API：
query: Get all field declarations in the class.
most similar API: get declarations of class or interface
cosine Similarity: 0.8413090705871582
*Check whether the imported class or interface is used in the declaration of classes, interfaces, enums, methods, and fields.* 匹配到的元操作或API：
query: Check whether the imported class or interface is used in the declaration of classes, interfaces, enums, methods, and fields.
most similar API: Check whether the class or interface is enum
cosine Similarity: 0.8122784495353699
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all the import statements in the class.
3. For each import statement, perform the following checks:
     1. Check whether the imported member is used in the class.
     2. Check whether the imported member is in the java.lang package.
     3. Check whether the imported member is in the current package.
     4. Check whether the import statement is duplicated.
If there are import statements that are either unused, duplicated, or the imported members are in java.lang or the current package, then this test case violate the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all the import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, perform the following checks:* 匹配到的元操作或API：
query: For each import statement, perform the following checks:
most similar API: Check whether the import equals
cosine Similarity: 0.857874870300293
*Check whether the imported member is used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is in the java.lang package.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is in the current package.* 匹配到的元操作或API：
query: Check whether the imported member is in the current package.
most similar API: Check whether the import equals
cosine Similarity: 0.8151288628578186
*Check whether the import statement is duplicated.* 匹配到的元操作或API：
query: Check whether the import statement is duplicated.
most similar API: Check whether the import equals
cosine Similarity: 0.8743733167648315
=========================logics=========================
1. Get the name of the package where the class is located.
2. Get all import statements in the class.
3. For each import statement, check whether it is a static import.
4. Get the name of the imported member.
5. Check whether the imported member is used in the class.
6. Check whether the imported member is a method.
7. If it is a method, get the method signature.
8. Check whether there are overloaded methods with the same name in the class.
9. If there are, check whether the imported method is one of them.
10. If the imported member is a method and it is not used or it is an overloaded method, then the import statement is unnecessary and violates the rule.
*Get the name of the package where the class is located.* 匹配到的元操作或API：
logic: Get the name of the package where the class is located.
most similar meta operation: Get the name of the package where the class is located
cosine Similarity: 0.9851533770561218
*Get all import statements in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*For each import statement, check whether it is a static import.* 匹配到的元操作或API：
query: For each import statement, check whether it is a static import.
most similar API: Check whether the import is static
cosine Similarity: 0.9260262250900269
*Get the name of the imported member.* 匹配到的元操作或API：
query: Get the name of the imported member.
most similar API: get imported name of import
cosine Similarity: 0.8716901540756226
*Check whether the imported member is used in the class.* 匹配到的元操作或API：
未匹配成功元操作或API
*Check whether the imported member is a method.* 匹配到的元操作或API：
query: Check whether the imported member is a method.
most similar API: Check whether is test method
cosine Similarity: 0.8014792203903198
*If it is a method, get the method signature.* 匹配到的元操作或API：
logic: If it is a method, get the method signature.
most similar meta operation: Get the signature of method
cosine Similarity: 0.9489259719848633
*Check whether there are overloaded methods with the same name in the class.* 匹配到的元操作或API：
query: Check whether there are overloaded methods with the same name in the class.
most similar API: Check whether the method is overridden
cosine Similarity: 0.824474573135376
*If there are, check whether the imported method is one of them.* 匹配到的元操作或API：
query: If there are, check whether the imported method is one of them.
most similar API: Check whether the import equals
cosine Similarity: 0.8187711834907532
*If the imported member is a method and it is not used or it is an overloaded method, then the import statement is unnecessary and violates the rule.* 匹配到的元操作或API：
未匹配成功元操作或API
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// simple unused single type import
import java.io.File;
public class Foo {}
```
2. This is a positive test case
```java
// one used single type import
import java.io.File;
public class Foo {
    private File file;
}
```
3. This is a negative test case
```java
// 2 unused single-type imports
import java.io.File;
import java.util.List;
public class Foo {
}
```
4. This is a positive test case
```java
// 1 used single type import
import java.security.AccessController;
public class Foo {
    public void foo() {
        AccessController.doPrivileged(null);
    }
}
```
5. This is a positive test case
```java
// 1 import stmt, used only in throws clause
import java.rmi.RemoteException;
public class Foo {
    public void foo() throws RemoteException {}
}
```
6. This is a positive test case
```java
// for loop
import java.util.ArrayList;
public class Foo {
    public void foo(ArrayList list) {
        for (String s : list) {}
    }
}
```
7. This is a positive test case
```java
// Generics
import foo.TestInterfaceTwo;
import java.util.*;
public class Foo {
    private List<TestInterfaceTwo> x = new ArrayList<TestInterfaceTwo>();
}
```
8. This is a positive test case
```java
// Generics 2
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
public class Foo {
    private List<Collection> x = new ArrayList<Collection>();
}
```
9. This is a positive test case
```java
// Annotations
import foo.annotation.Retention;
import foo.annotation.RetentionPolicy;
@Retention(RetentionPolicy.RUNTIME)
public @interface Foo {
}
```
10. This is a positive test case
```java
// Annotations 2
import foo.FooAnnotation1;
import foo.FooAnnotation2;
@FooAnnotation1
@FooAnnotation2
public class Foo {}
```
11. This is a negative test case
```java
// import from default package
import Bar;
public class Foo {
    public Bar foo() {}
}
```
12. This is a positive test case
```java
// import from default package from somewhere else
package somewhere;
import Bar;
public class Foo {
    public Bar foo() {}
}
```
13. This is a negative test case
```java
// import from default package
package somewhere;
import Bar;
public class Foo {
    public void foo() {}
}
```
14. This is a negative test case
```java
// Used static import
import static com.foo.MyClass.staticMethod;
public class Foo {
    public Foo(){
        staticMethod("This is OK");
    }
}
```
15. This is a negative test case
```java
// Unused static import
import static com.foo.MyClass.staticMethod;
public class Foo {
    public Foo() {
    }
}
```
16. This is a positive test case
```java
// On demand import
import java.util.*;
public class Foo {
    List list = new ArrayList();
}
```
17. This is a positive test case
```java
// imports used in javadoc comment, see also bug #254
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.LinkedList;
import java.util.File;
import java.util.NoSuchElementException;
import java.io.IOException;

public class Foo {
    /**
     * {@linkplain  List list}
     * {@link  ArrayList  arraylist}
     * {@link  LinkedList}
     * {@value  Calendar#DATE}
     * @see File
     * @throws NoSuchElementException no such element
     * @exception IOException IO operation exception
     */
    public void test() {}
}
```
18. This is a positive test case
```java
// #1280 False Positive in UnusedImports when import used in javadoc
import some.pack.SomeUtility;

public class Foo {
    /**
     * The {@link SomeUtility#someHelperMethod(String, SomeObject)} method does something.
     */
    public void someMethod() {
    }
}
```
19. This is a positive test case
```java
// #1720 False Positive in UnusedImports for Javadoc link with array type
import some.pack.SomeUtility;

public class Foo {
    /**
     * The {@link SomeUtility#someHelperMethod(String, SomeObjectArray[])} method does something.
     */
    public void someMethod() {
    }
}
```
20. This is a positive test case
```java
// Bug 2606609 : False "UnusedImports" positive in package-info.java
@DefaultAnnotation(NonNull.class)
package net.sourceforge.pmd.test;

import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
import edu.umd.cs.findbugs.annotations.NonNull;
```
21. This is a positive test case
```java
// bug #254 False+ : UnusedImport with Javadoc @link
import java.util.ArrayList;
import java.util.Collections;
import java.util.NoSuchElementException;

public class Test {
    /**
     * {@link ArrayList#add(Object)}
     * @see Collections
     * @throws NoSuchElementException no such element
     */
    String[] getList() { }
}
```
22. This is a positive test case
```java
// #1181 unused import false positive if used as parameter in javadoc only.
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Vector;

public class Foo {
    /**
     * See here: {@link Collections#reverse(List, Collection)}
     * @see Collections#reverse(ArrayList, Vector)
     */
    public Object bar() {}
}
```
23. This is a positive test case
```java
// #1280 False Positive in UnusedImports when import used in javadoc
import some.pack.SomeUtility;

public class Foo {
    /**
     * The {@link SomeUtility#someHelperMethod(String, test.SomeObject)} method does something.
     */
    public void someMethod() {
    }
}
```
24. This is a positive test case
```java
// #914 False +ve from UnusedImports with wildcard static imports
import static org.junit.Assert.*;
import org.junit.Test;
import static java.lang.Math.*;

public class FooTest {
    @Test
    public void testStuff() {
        assertEquals( "a", "a" );
        assertFalse( false );
        assertTrue( true );
        assertNull( null );
    }
    public static void main(String[] args) {
        System.out.println(PI);
    }
}
```
25. This is a positive test case
```java
// #1465 False Positve UnusedImports with javadoc @link
import a.b.c.d.AgentState;
import a.b.c.d.OtherState;

public interface Foo {
    /**
     * Gets all active AgentHandles.
     * <p/>
     * An agent is active if it has not posted a {@link AgentStateChangeEvent} containing {@link AgentState#TERMINATED}.
     *
     * @return agent handles.
     * @see OtherState#TERMINATED
     */
    Iterable<AgentHandle> getAgentHandles();
}
```
26. This is a positive test case
```java
// #1547 False Positve UnusedImports with javadoc for identifiers with underscores
import java.net.HttpURLConnection;

import foo.bar.Some_Thing;
import foo.bar.Under_Score_Exception;
import foo.bar.Fixed_Values;

/**
 * {@link HttpURLConnection#HTTP_NOT_ACCEPTABLE}
 *
 * {@value Fixed_Values#FOO_BAR}
 *
 * @see Some_Thing#SOMETHING_ELSE
 */
public interface Interface {

    /**
     * @throws Under_Score_Exception
     */
    void doSomething();

}
```
27. This is a positive test case
```java
// #348 False Positive UnusedImports with javadoc for public static inner classes of imports
import javax.swing.GroupLayout;

public class Foo {

    /**
     * {@link Bar#doSomething(GroupLayout.Group)}
     */
    void doSomething();
}
```
28. This is a positive test case
```java
// #925 [java] UnusedImports false positive for static import
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.ClassWithConstants.*;

            public class ClassWithImport {

                public static void main(String[] args) {
                    System.out.println("List 1: " + LIST1);
                    System.out.println("List 2: " + LIST2);
                }
            }
```
29. This is a positive test case
```java
// #1404 [java] UnusedImports false positive for static import
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.ClassWithStringConstants.*;

            public class ClassWithImport {

                public static void main(String[] args) {
                    if (CONST1.equals("a")) {
                        System.out.println("CONST1 is a");
                    }
                }
            }
```
30. This is a positive test case
```java
// #1209 [java] UnusedImports false positive for static import with package-private method usage
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.PackagePrivateUtils.*;
            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.PublicUtils.*;

            public class Imports {

                int importtest() {
                    int i = 0;
                    i = f1(i);
                    i = g1(i);
                    i = f2(i);
                    i = g2(i);
                    i = f3(i);
                    i = g3(i);
                    return i;
                }
            }
```
31. This is a positive test case
```java
// #1625 [java] UnusedImports false positive for method parameter type in @see Javadoc
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

import java.io.File;
import java.io.FileInputStream;

public class Derived extends FileInputStream {
    /** @see #FileInputStream(File) */
    void main() {}
}
```
32. This is a positive test case
```java
// #1720 False Positive in UnusedImports for Javadoc @see with array type
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

import java.io.File;
import java.io.FileInputStream;

public class Derived extends FileInputStream {
    /** @see #FileInputStream(File, File[]) */
    void main() {}
}
```
33. This is a positive test case
```java
// #2025 False Positive in UnusedImports for params when using @see with FQCN
import spark.Response; // flaged, should not

/**
 * @see foo.bar.MyController#startTransaction(Response)
 */
public class VendingV2PaymentRequest {
}
```
34. This is a positive test case
```java
// #2025 False Positive in UnusedImports for params when using @link with FQCN
import spark.Request; // flaged, should not

/**
 * {@link foo.bar.MyController#startTransaction(Request)}
 */
public class VendingV2PaymentRequest {
}
```
35. This is a positive test case
```java
// #2016 [java] UnusedImports: False positive if wildcard is used and only static methods
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

// star import is important here for the test case!!
import java.util.*;

/**
 * Note: In order for this test case to work, the class "Issue2016" must also be compiled and available
 * on the auxclasspath.
 */
public class Issue2016 {
    public void testFunction() {
        Objects.toString(null);
    }
}
```
36. This is a positive test case
```java
// resolve ambiguous static on-demand imports (#2277)
import static java.lang.Integer.*;
import static java.lang.Long.valueOf;
import static java.lang.Long.*;

public class Foo {
    public void foo() {
        // the "valueOf" method is both in Integer.* and Long.*
        // we need an explicit static import to specify one of them, e.g. Long.valueOf
        valueOf("123", 10);

        // covered by Integer.*
        int i = parseInt("123");

        // covered by Long.*
        long l = parseLong("123");
    }
}
```
37. This is a positive test case
```java
// [java] UnusedImports with static imports on subclasses #3132
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.HelloMore.*; // flagged as unused

public class Test {
    public static void main(String... args) {
        sayHello();
    }
}
```
38. This is a negative test case
```java
// Unused import with member inherited AND imported
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.HelloMore.sayHello;

public class Test extends HelloMore {
    public static void main(String... args) {
        // import is unused as the method is inherited here
        sayHello();
    }
}
```
39. This is a negative test case
```java
// NPE with static import on interface
import static javax.swing.WindowConstants.*; //warn

class NPEImport {}
```
40. This is a negative test case
```java
// duplicate single type imports
import java.io.File;
            import java.util.*;
            import java.io.File;
            public class Foo {
                File f;
            }
```
41. This is a negative test case
```java
// duplicate wildcard imports
import java.io.*;
            import java.io.*;
            public class Foo {
                File f;
            }
```
42. This is a negative test case
```java
// single type import after wildcard import
import java.io.*;
            import java.io.File;
            public class Foo {
                File f;
            }
```
43. This is a positive test case
```java
// subpackage import, ok
import java.util.*;
            import java.util.logging.*;
            public class Foo {
                List c; Logger f;
            }
```
44. This is a positive test case
```java
// 674394, disambiguation import should be allowed
import java.awt.*;
            import java.util.*;
            import java.util.List; //False positive

            class Foo{
                Color color;
                List list;
                Set set;
            }
```
45. This is a negative test case
```java
// 674394, disambiguation import because of conflict with java.lang
import foo.*;
            import foo.System;  //False positive

            class Foo {
                System system;  //No, I do not mean java.lang.System
            }
```
46. This is a negative test case
```java
// #1306 False positive on duplicate when using static imports
import static org.junit.Assert.*;
            import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryImportTest.*;
            import static org.junit.Assert.assertTrue;
            // this import is needed for disambiguation - as DuplicateImportsTest
            // defines assertTrue with the same signature, too.

            public class DuplicateImports {
                static {
                    assertTrue("", true); // the one from the disambiguation import
                    assertSomething("", true); // from UnnecessaryImportTest.*
                    assertFalse("", true); // from Assert.*
                }
            }
```
47. This is a positive test case
```java
// Static on-demand import is used
import static org.junit.Assert.*;
            import static org.junit.Assert.assertTrue;

            public class DuplicateImports {
                static {
                    assertTrue("", true);
                    assertFalse("", true);
                }
            }
```
48. This is a negative test case
```java
// [java]  similar imports static/nonstatic with method #2546
// imports NonStatic -- unused
            import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;
            // imports foo -- used
            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;

            public class DuplicateImports {
                static {
                    foo();
                }
            }
```
49. This is a negative test case
```java
// [java] #2546 -- similar imports static/nonstatic - static is used
// imports NonStatic -- unused
            import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;
            // imports Static
            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;

            public class DuplicateImports {
                static {
                    Static b;
                }
            }
```
50. This is a negative test case
```java
// [java] #2546 -- similar imports static/nonstatic - static is unused
// imports NonStatic
            import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;
            // imports Static -- unused
            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;

            public class DuplicateImports {
                static {
                    NonStatic b;
                }
            }
```
51. This is a positive test case
```java
// [java] #2546 -- similar imports static/nonstatic - both are used
// imports NonStatic
            import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;
            // imports Static
            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;

            public class DuplicateImports {
                static {
                    // both are used
                    NonStatic a;
                    Static b;
                }
            }
```
52. This is a positive test case
```java
// [java] #2546 -- similar imports static/nonstatic - both are used (method)
// imports NonStatic
            import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;
            // imports foo()
            import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.NonStaticContainer.*;

            public class DuplicateImports {
                static {
                    // both are used
                    NonStatic a;
                    foo();
                }
            }
```
53. This is a negative test case
```java
// ImportFromSamePackage: simple failure
package foo;
            import foo.Bar;
            public class Baz {
                Bar bar;
            }
```
54. This is a positive test case
```java
// ImportFromSamePackage: class in default package importing from sub package
package foo;
            import foo.buz.Bar;
            public class Baz{
                Bar b;
            }
```
55. This is a negative test case
```java
// ImportFromSamePackage: importing all from same package
package foo.bar;
            import foo.bar.*;
            public class Baz{}
```
56. This is a negative test case
```java
// import java.lang.String (used)
import java.lang.String;
            public class Foo {
                String foo;
            }
```
57. This is a negative test case
```java
// import java.lang.String (unused)
import java.lang.String;
            public class Foo { }
```
58. This is a positive test case
```java
// import java.lang type when it shadows a same package type
// this package redefines a String type
            package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.javalang;

            import java.lang.String;
            public class Foo {
                String foo;
            }
```
59. This is a negative test case
```java
// import java.lang type when it shadows a same package type (unused)
// this package redefines a String type
            package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.javalang;

            import java.lang.String;
            public class Foo { }
```
60. This is a negative test case
```java
// import java.lang.*
import java.lang.*;
            public class Foo {}
```
61. This is a positive test case
```java
// import java.lang.ref/reflect/annotation/instrument/management
import java.lang.ref.*;
            import java.lang.reflect.*;
            import java.lang.annotation.*;
            import java.lang.management.*;
            public class Foo {
                Annotation a; Method m; WeakReference r;
                RuntimeMXBean x;
            }
```
62. This is a positive test case
```java
// Static Java imports are OK
import static java.lang.String.*;
            public class Foo {
                static {
                    valueOf(1);
                }
            }
```
63. This is a negative test case
```java
// Importing java.lang.Thread.UncaughtExceptionHandler, unused
import java.lang.Thread.UncaughtExceptionHandler;
            public class Foo {
                Thread.UncaughtExceptionHandler unused;
            }
```
64. This is a positive test case
```java
// Importing java.lang.Thread.UncaughtExceptionHandler
import java.lang.Thread.UncaughtExceptionHandler;
            public class Foo {
                UncaughtExceptionHandler used;
            }
```
65. This is a positive test case
```java
// import java.lang.ProcessBuilder.Redirect: #1031 false DontImportJavaLang
import java.lang.ProcessBuilder.Redirect;

            public class Foo {
                Redirect r;
            }
```
66. This is a positive test case
```java
// import java.lang.invoke.MethodHandles: #339 false DontImportJavaLang
import java.lang.invoke.MethodHandles;

            public class Foo {
                static {
                    MethodHandles.argumentsWithCombiner();// use it
                }
            }
```
67. This is a positive test case
```java
// [java] UnnecessaryImport false positive for on-demand imports #2655
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.package1;

import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.package2.*; // SUPPRESS CHECKSTYLE needed for test case

public class U {
    private void g() {
        String k = C.V;
    }
}
```
68. This is a positive test case
```java
// static import of a type
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport;

import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.ConcFlow.Subscriber;
import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.ConcFlow.Publisher;
import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.ConcFlow.Subscription;

/**
 * {@link Flow.Subscription#request(long) request}
 * {@link Flow.Subscription}
 */
public class SubmissionPublisher<T> implements Publisher<T> {
    static final class ConsumerSubscriber<T> implements Subscriber<T> {
        Subscription subscription;
    }
}
```
69. This is a positive test case
```java
// [java] UnnecessaryImport false positive for on-demand imports of non-static nested classes
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.package1;

import net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.package2.C.*; // SUPPRESS CHECKSTYLE needed for test case

public class U {
    IC c;
}
```
70. This is a positive test case
```java
// [java] UnnecessaryImport false positive for static on-demand imports of static nested classes
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.package1;

import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryimport.package2.C.*; // SUPPRESS CHECKSTYLE needed for test case

public class U {
    ISC sc;
}
```
71. This is a positive test case
```java
// Necessary imports for @snippet tags introduced with JEP 413 in Java 18
import java.math.BigDecimal;
import java.util.ArrayList;

/**
 * {@snippet :
 *    BigDecimal n = new BigDecimal("10.0"); // @link substring="BigDecimal" target="BigDecimal"
 * }
 *
 * <p>Other example:
 * {@snippet :
 *    Sample.add(this); // @link target="ArrayList#add(Object)"
 * }
 */
public class Sample {
    // ...
}
```
72. This is a positive test case
```java
// #4432 - Necessary import for interface method
package p;

            import static p.Top2.foo;

            class Klass implements Top {
                static {
                    foo(); // This is Top2.foo
                }

                static class Child {
                    {
                        foo(); // This is also Top2.foo
                    }
                }
            }
            interface Top {
                static void foo() {}
            }
            interface Top2 {
                static void foo() {}
            }
```
73. This is a positive test case
```java
// #4557 - UnnecessaryImport FP with static imports of overloaded methods
package p;

            import static p.Static.assertThat;

            class Klass {
                static {
                    assertThat(1); // This is assertThat(Integer)
                }
            }
            class Static {

                public static Object assertThat(Integer actual) {
                    return null;
                }

                public static Object assertThat(Long actual) {
                    return null;
                }
            }
```


The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.codestyle;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class UnnecessaryImportRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getSimpleName()
2. net.sourceforge.pmd.lang.java.types.TypeTestUtil: static public boolean isDeclaredInClass(java.lang.Class, net.sourceforge.pmd.lang.java.types.JMethodSig), //Returns true if the signature is that of a method declared in the given class. @param klass Class @param sig   Method signature to test @throws NullPointerException If any argument is null
3. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public java.lang.String getPackageName()
4. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.Class<Class<?> getClass()
5. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.document.Chars getText()
6. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)
7. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getImportedName(), //Returns the full name of the import. For on-demand imports, this is the name without the final dot and asterisk.
8. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isImportOnDemand()
9. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
10. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTThrowsList getThrowsList()
11. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
12. net.sourceforge.pmd.lang.java.rule.internal.JavaRuleUtil: static public boolean isUtilityClass(net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration), //Returns true if the node is a utility class, according to this custom definition.
13. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
14. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String toString()
15. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTAnnotation> getDeclaredAnnotations()
16. net.sourceforge.pmd.lang.java.ast.ASTAnnotationTypeDeclaration: public java.lang.String getPackageName()
17. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean hasDescendantOfType(java.lang.Class)
18. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getResultTypeNode()
19. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean isStatic(), //Returns true if this is a static import. If this import is not on-demand, {@link #getImportedSimpleName()} returns the name of the imported member.
20. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
21. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTTypeParameters getTypeParameters(), //Returns the type parameter declaration of this node, or null if there is none.
22. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment(), //Returns the javadoc comment that applies to this declaration. If there is none, returns null.
23. net.sourceforge.pmd.lang.java.ast.ASTLocalVariableDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
24. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.JavadocComment getJavadocComment()
25. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int compareLocation(net.sourceforge.pmd.lang.ast.Node)
26. net.sourceforge.pmd.lang.java.ast.ASTPackageDeclaration: public boolean equals(java.lang.Object)
27. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public java.lang.String getPackageName(), //Returns the "package" prefix of the imported name. For type imports, including on-demand imports, this is really the package name of the imported type(s). For static imports, this is actually the qualified name of the enclosing type, including the type name.
28. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.ast.impl.GenericNode getChild(int)
29. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getSuperClassTypeNode()
30. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()
31. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTRecordComponentList getRecordComponents(), //Returns the record components declared by this class. If this is not a record declaration, returns null.
32. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<ASTMethodOrConstructorDeclaration> getOperations(), //Returns the operations declared in this class (methods and constructors).
33. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.ast.ASTFormalParameters getFormalParameters()
34. net.sourceforge.pmd.lang.java.ast.ASTFormalParameter: public net.sourceforge.pmd.lang.java.ast.ASTType getTypeNode()
35. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.java.types.TypeSystem getTypeSystem()
36. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isPublic()
37. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
38. net.sourceforge.pmd.lang.java.ast.ASTConstructorCall: public net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType getTypeNode()
39. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceType: public boolean isClassOrInterfaceType()
40. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public net.sourceforge.pmd.lang.ast.NodeStream<NodeStream<T> getDeclarations(java.lang.Class)
41. net.sourceforge.pmd.lang.java.ast.internal.JavaAstUtils: static public net.sourceforge.pmd.lang.ast.NodeStream<ASTVariableDeclaratorId> getLoopVariables(net.sourceforge.pmd.lang.java.ast.ASTForStatement), //Returns the variable IDS corresponding to variables declared in the init clause of the loop.
42. net.sourceforge.pmd.lang.java.ast.ASTMethodCall: public java.lang.String getMethodName()
43. net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration: public java.lang.Class<Class<?> getClass()
44. net.sourceforge.pmd.lang.java.ast.ASTVariableAccess: public net.sourceforge.pmd.lang.java.types.JTypeMirror getTypeMirror()
45. net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration: public boolean isEnum(), //Returns true if this is an {@linkplain ASTEnumDeclaration enum class declaration}.
46. net.sourceforge.pmd.lang.java.rule.internal.TestFrameworksUtil: static public boolean isTestMethod(net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration), //Returns true if this is either a JUnit test or a TestNG test.
47. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public net.sourceforge.pmd.lang.java.types.JMethodSig getGenericSignature()
48. net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration: public boolean isOverridden(), //Returns true if this method is overridden.

1.  //Check whether the field is initialized
```java
import net.sourceforge.pmd.lang.java.ast.ASTFieldDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
import net.sourceforge.pmd.lang.java.ast.ASTExpression;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean isInitialized(ASTFieldDeclaration node){
    NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
    for(ASTVariableDeclaratorId varId : varIds){
        // a field declaration may have several variables, choose which one we want, here we use name to filter, you can also select other ways
        if(varId.getName().equals("x")){
            ASTExpression init = varId.getInitializer();
            if (init != null) {
                return true;
            }
        }
    }
    return false;
}
```
2.  //Check whether class has declared annotations
```java
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.ast.NodeStream;
public boolean hasAnnotations(ASTClassOrInterfaceDeclaration node){
    NodeStream<ASTAnnotation> annotations = node.getDeclaredAnnotations();
    return annotations.nonEmpty();
}
```
3.  //Check whether the return type of method is string type
```java
import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.lang.java.types.TypeTestUtil;
public boolean isReturnValueStringType(ASTMethodDeclaration method) {
    return TypeTestUtil.isA(String.class, method.getResultTypeNode());
}
```


Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============

第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 1462.3406901359558 秒
