开始

========================================== Rule ExcessiveImportsRule ===========================================
一共 2 个测试用例
正例 1 个
反例 1 个
90
76
30
28
38
34
15
13
12
9
11
8
97
91
19
14
12
10
9
7
10
8
84
70
11
9
9
7
12
10
12
10
27
17
23
19
157
137
85
71
85
71
40
37
=========================logics=========================
1. Get the number of import statements in the class.
2. Check whether the number of import statements is greater than the threshold (3 in this case).
If the number of import statements is greater than the threshold, the test case violates the rule.
*Get the number of import statements in the class.* 匹配到的元操作或API：
query: Get the number of import statements in the class.
most similar API: get num children of import
cosine Similarity: 0.8206785917282104
*Check whether the number of import statements is greater than the threshold (3 in this case).* 匹配到的元操作或API：
未匹配成功元操作或API
=========================logics=========================
1. Get the number of import statements in the java file.
2. Check whether the number of import statements is above 3.
If the number of import statements is not above 3, then this test case adheres to the rule.
*Get the number of import statements in the java file.* 匹配到的元操作或API：
query: Get the number of import statements in the java file.
most similar API: get num children of import
cosine Similarity: 0.8010748624801636
*Check whether the number of import statements is above 3.* 匹配到的元操作或API：
query: Check whether the number of import statements is above 3.
most similar API: Check whether the import equals
cosine Similarity: 0.8139098882675171
==========================第1轮生成checker========================
开始写checker
==========================The_first_checker_query=========================
You are an expert in writing java rule checkers and I need your help to generate a custom java rule checker in PMD tool version 7.0.0. 
I will give you a rule description and its several test cases.

The following is the description of the rule:
Rule description: A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.;

The following are the test cases of the rule:
1. This is a negative test case
```java
// bad
import java.util.Vector;
import java.util.Vector;
import java.util.Vector;
import java.util.Vector;
public class Foo{}
```
Its abstract syntax tree is:
ASTCompilationUnit
――ASTImportDeclaration
――ASTImportDeclaration
――ASTImportDeclaration
――ASTImportDeclaration
――ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ――ASTModifierList
  ――ASTClassOrInterfaceBody

2. This is a positive test case
```java
// ok
import java.util.Vector;
public class Foo{}
```
Its abstract syntax tree is:
ASTCompilationUnit
――ASTImportDeclaration
――ASTClassOrInterfaceDeclaration (class name = 'Foo')
  ――ASTModifierList
  ――ASTClassOrInterfaceBody



The checker code framework(you must conform to):
```java
package net.sourceforge.pmd.lang.java.rule.design;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast.*;
import net.sourceforge.pmd.lang.java.ast.internal.*;
import net.sourceforge.pmd.lang.java.types.*;
import net.sourceforge.pmd.lang.java.symbols.*;
import net.sourceforge.pmd.lang.java.ast.JavaNode;
import net.sourceforge.pmd.lang.ast.NodeStream;
import java.util.*;
import java.lang.*;

public class ExcessiveImportsRule extends AbstractJavaRulechainRule {
    public rule_name() {
        super(node1_Of_AST_to_visit.class, node2_Of_AST_to_visit.class, ...);
    }
    @Override
    public Object visit(node1_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    @Override
    public Object visit(node2_Of_AST_to_visit node, Object data) {
        return super.visit(node, data);
    }
    ...
}
```
Some useful packages are already imported, if you need other packages, please import additionally.
Please give me the complete checker code including the import info, do not contain pseudocode, and do not give it step by step. No comment needed.

Below are some APIs and code snippets consisting of existing APIs, they implement specific functionality, you can selectively use them directly without changing it if you need:
1. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public int getNumChildren()
2. net.sourceforge.pmd.lang.java.ast.ASTImportDeclaration: public boolean equals(java.lang.Object)



Below are some edge-related APIs to help traverse abstract syntax tree, if you need, you can use them:
1. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children()
2. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> children(java.lang.Class)
3. public N getChild(int i)
4. public N getFirstChild()
5. public N getLastChild()
6. public N firstChild(java.lang.Class)
7. public int getNumChildren()
8. public int getIndexInParent()
9. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants()
10. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendants(java.lang.Class)
11. public net.sourceforge.pmd.lang.ast.NodeStream.DescendantNodeStream<JavaNode> descendantsOrSelf()
12. public N getParent()
13. public N getNthParent(int i)
14. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors()
15. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestors(java.lang.Class)
16. public net.sourceforge.pmd.lang.ast.NodeStream<JavaNode> ancestorsOrSelf()
17. public N getPreviousSibling()
18. public N getNextSibling()

Please do not use the following API:


==========5轮中每一轮为第一个测试用例生成的checker===============
package net.sourceforge.pmd.lang.java.rule.design;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class ExcessiveImportsRule extends AbstractJavaRulechainRule {

    private static final int MAX_IMPORTS = 3;

    public ExcessiveImportsRule() {
        super(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        if(node.children(ASTImportDeclaration.class).count() > MAX_IMPORTS){
            addViolation(data, node);
        }
        return super.visit(node, data);
    }
}
第一个测试用例生成的checker开始编译
一开始编译是否通过：
True
编译通过
结束

规则执行完毕，时间总花销： 243.5652298927307 秒
