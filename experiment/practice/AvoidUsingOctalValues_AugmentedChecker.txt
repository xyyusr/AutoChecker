 further augmented final checker
 ```java
 package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.rule.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule {

    public AvoidUsingOctalValuesRule() {
        super(ASTFieldDeclaration.class, ASTMethodCall.class, ASTLocalVariableDeclaration.class, ASTInfixExpression.class);
    }

    @Override
    public Object visit(ASTFieldDeclaration node, Object data) {
        checkIfOctalValue(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTMethodCall node, Object data) {
        for (ASTExpression expression : node.getArguments()) {
            if (expression instanceof ASTCastExpression) {
                ASTCastExpression castExpression = (ASTCastExpression) expression;
                ASTExpression operand = castExpression.getOperand();
                checkNumericLiteral(data, operand);
            } else if (expression instanceof ASTNumericLiteral) {
                checkNumericLiteral(data, expression);
            } else if (expression instanceof ASTUnaryExpression) {
                ASTUnaryExpression unaryExpression = (ASTUnaryExpression) expression;
                ASTExpression operand = unaryExpression.getOperand();
                checkNumericLiteral(data, operand);
            }
        }
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        checkIfOctalValue(node, data);
        return super.visit(node, data);
    }

    @Override
    public Object visit(ASTInfixExpression node, Object data) {
        checkNumericLiteral(data, node.getLeftOperand());
        checkNumericLiteral(data, node.getRightOperand());
        return super.visit(node, data);
    }

    public boolean isFieldIntType(ASTFieldDeclaration node) {
        ASTType type = node.getTypeNode();
        if(type == null) {
            return false;
        }
        JTypeMirror t = type.getTypeMirror();
        return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT);
    }

    public boolean isFieldLongType(ASTFieldDeclaration node) {
        ASTType type = node.getTypeNode();
        if(type == null) {
            return false;
        }
        JTypeMirror t = type.getTypeMirror();
        return t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.LONG);
    }

    public ASTLiteral getInitializedValue(ASTFieldDeclaration node) {
        NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
        for (ASTVariableDeclaratorId varId : varIds) {
            ASTExpression init = varId.getInitializer();
            if (init instanceof ASTLiteral) {
                return (ASTLiteral) init;
            }
        }
        return null;
    }

    public void checkIfOctalValue(ASTFieldDeclaration node, Object data) {
        if (isFieldIntType(node) || isFieldLongType(node)) {
            ASTLiteral literal = getInitializedValue(node);
            if (literal instanceof ASTNumericLiteral) {
                checkNumericLiteral(data, literal);
            }
        }
    }

    public void checkIfOctalValue(ASTLocalVariableDeclaration node, Object data) {
        ASTType type = node.getTypeNode();
        if(type == null) {
            return;
        }
        JTypeMirror t = type.getTypeMirror();
        if (t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.INT) || t.isPrimitive(JPrimitiveType.PrimitiveTypeKind.LONG)) {
            NodeStream<ASTVariableDeclaratorId> varIds = node.getVarIds();
            for (ASTVariableDeclaratorId varId : varIds) {
                ASTExpression init = varId.getInitializer();
                if (init instanceof ASTLiteral) {
                    checkNumericLiteral(data, init);
                }
            }
        }
    }

    public void checkNumericLiteral(Object data, ASTExpression expression) {
        if (expression instanceof ASTNumericLiteral) {
            ASTNumericLiteral numericLiteral = (ASTNumericLiteral) expression;
            if ((numericLiteral.isIntLiteral() || numericLiteral.isLongLiteral())
                    && numericLiteral.getBase() == 8
                    && numericLiteral.getValueAsInt() > 7) {
                addViolation(data, numericLiteral);
            }
        }
    }
}
 ```