further augmented final checker
```java
package net.sourceforge.pmd.lang.java.rule.errorprone;


import net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule;
import net.sourceforge.pmd.lang.java.ast. *;
import net.sourceforge.pmd.lang.java.ast.internal. *;
import net.sourceforge.pmd.lang.java.rule.internal. *;
import net.sourceforge.pmd.lang.java.types. *;
import net.sourceforge.pmd.lang.java.symbols. *;
import net.sourceforge.pmd.lang.ast.NodeStream;
public class NullAssignmentRule extends AbstractJavaRulechainRule {

    public NullAssignmentRule() {
        super(ASTAssignmentExpression.class);
    }

    @Override
    public Object visit(ASTAssignmentExpression node, Object data) {
        checkForNullAssignment(node.getRightOperand(), data, node);
        return super.visit(node, data);
    }

    private void checkForNullAssignment(Object node, Object data, ASTAssignmentExpression originalNode) {
        if (node instanceof ASTNullLiteral) {
            if (originalNode.getLeftOperand() instanceof ASTArrayAccess) {
                addViolationWithMessage(data, originalNode, "Assigning null to an array element is usually bad form.");
            } else if (originalNode.getLeftOperand() instanceof ASTVariableAccess ||
                       originalNode.getLeftOperand() instanceof ASTFieldAccess) {

                JVariableSymbol symbol;
                ASTVariableDeclaratorId declaratorId = null;
                if (originalNode.getLeftOperand() instanceof ASTVariableAccess) {
                    ASTVariableAccess varAccess = (ASTVariableAccess) originalNode.getLeftOperand();
                    symbol = varAccess.getReferencedSym();
                    if(symbol != null){
                        declaratorId = symbol.tryGetNode();
                    }
                } else {
                    ASTFieldAccess fieldAccess = (ASTFieldAccess) originalNode.getLeftOperand();
                    symbol = fieldAccess.getReferencedSym();
                    if(symbol != null){
                        declaratorId = symbol.tryGetNode();
                    }
                }

                if (declaratorId != null && !declaratorId.isFinal()) {
                    addViolationWithMessage(data, originalNode, "Assigning null to a variable is usually bad form.");
                } else if (declaratorId == null) {
                    addViolationWithMessage(data, originalNode, "Assigning null to a variable with no original declaration is usually bad form.");
                }
            }
        } else if (node instanceof ASTConditionalExpression) {
            ASTConditionalExpression conditionalExpression = (ASTConditionalExpression) node;
            checkForNullAssignment(conditionalExpression.getThenBranch(), data, originalNode);
            checkForNullAssignment(conditionalExpression.getElseBranch(), data, originalNode);
            if ((conditionalExpression.getThenBranch() instanceof ASTNullLiteral ||
                 conditionalExpression.getElseBranch() instanceof ASTNullLiteral) &&
                (originalNode.getLeftOperand() instanceof ASTVariableAccess ||
                 originalNode.getLeftOperand() instanceof ASTFieldAccess)) {

                JVariableSymbol symbol;
                ASTVariableDeclaratorId declaratorId = null;
                if (originalNode.getLeftOperand() instanceof ASTVariableAccess) {
                    ASTVariableAccess varAccess = (ASTVariableAccess) originalNode.getLeftOperand();
                    symbol = varAccess.getReferencedSym();
                    if(symbol != null){
                        declaratorId = symbol.tryGetNode();
                    }
                } else {
                    ASTFieldAccess fieldAccess = (ASTFieldAccess) originalNode.getLeftOperand();
                    symbol = fieldAccess.getReferencedSym();
                    if(symbol != null){
                        declaratorId = symbol.tryGetNode();
                    }
                }

                if (declaratorId != null && declaratorId.isFinal()) {
                    addViolationWithMessage(data, originalNode, "Assigning null to a final variable is usually bad form.");
                } else if (declaratorId == null) {
                    addViolationWithMessage(data, originalNode, "Assigning null to a variable with no original declaration is usually bad form.");
                }
            }
        }
    }
}
```