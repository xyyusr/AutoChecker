{
  "ruleList" : [ {
    "id" : 1,
    "rule_Name" : "public class LiteralsFirstInComparisonsRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.bestpractices",
    "rule_Description" : "Position literals first in all String comparison methods: non-overloaded 'boolean equals(Object o)' and 'equalsIgnoreCase' and 'compareTo' and 'compareToIgnoreCase' and 'contentEquals', if the second argument is null then NullPointerExceptions can be avoided, they will just return false.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/bestpractices/xml/LiteralsFirstInComparisons.xml"
  }, {
    "id" : 2,
    "rule_Name" : "public class SignatureDeclareThrowsExceptionRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.design",
    "rule_Description" : "A method/constructor shouldn’t explicitly throw the generic java.lang.Exception.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/design/xml/SignatureDeclareThrowsException.xml"
  }, {
    "id" : 3,
    "rule_Name" : "public class ExcessivePublicCountRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.design",
    "rule_Description" : "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. The default threshold above which a node is reported is 2.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/design/xml/ExcessivePublicCount.xml"
  }, {
    "id" : 4,
    "rule_Name" : "public class ExcessiveImportsRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.design",
    "rule_Description" : "A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of imports and reports a violation if the count is above the threshold. The default threshold above which a node is reported is 3.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/design/xml/ExcessiveImports.xml"
  }, {
    "id" : 5,
    "rule_Name" : "public class NullAssignmentRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.errorprone",
    "rule_Description" : "Assigning a null to a variable (outside of its declaration) is usually bad form.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/NullAssignment.xml"
  }, {
    "id" : 6,
    "rule_Name" : "public class BrokenNullCheckRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.errorprone",
    "rule_Description" : "The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of && or vice versa.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/BrokenNullCheck.xml"
  }, {
    "id" : 7,
    "rule_Name" : "public class AvoidDuplicateLiteralsRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.errorprone",
    "rule_Description" : "Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The duplicate string literals number threshold is 4. Strings with length less than 3 are ignored.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/AvoidDuplicateLiterals.xml"
  }, {
    "id" : 8,
    "rule_Name" : "public class AvoidUsingOctalValuesRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.errorprone",
    "rule_Description" : "Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/AvoidUsingOctalValues.xml"
  }, {
    "id" : 9,
    "rule_Name" : "public class AssignmentToNonFinalStaticRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.errorprone",
    "rule_Description" : "Assignment to non-final static fields in constructor is unsafe. Prevent it.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/errorprone/xml/AssignmentToNonFinalStatic.xml"
  }, {
    "id" : 10,
    "rule_Name" : "public class EmptyControlStatementRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.codestyle",
    "rule_Description" : "Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: bodies of try statements、 finally clauses of try statements、 switch statements、 synchronized statements、 if statements、 loop statements: while, for, do .. while、initializers and blocks used as statements (for scoping).",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/codestyle/xml/EmptyControlStatement.xml"
  }, {
    "id" : 11,
    "rule_Name" : "public class MethodNamingConventionsRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.codestyle",
    "rule_Description" : "This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). By default this rule uses the standard Java naming convention (Camel case). Regex which applies to instance method names is \"[a-z][a-zA-Z0-9]*\". Regex which applies to static method names is \"[a-z][a-zA-Z0-9]*\". Regex which applies to native method names is \"[a-z][a-zA-Z0-9]*\". Regex which applies to JUnit 3 test method names is \"test[A-Z0-9][a-zA-Z0-9]*\". Regex which applies to JUnit 4 test method names is \"[a-z][a-zA-Z0-9]*\". Regex which applies to JUnit 5 test method names is \"[a-z][a-zA-Z0-9]*\".",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/codestyle/xml/MethodNamingConventions.xml"
  }, {
    "id" : 12,
    "rule_Name" : "public class StringInstantiationRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.performance",
    "rule_Description" : "Avoid instantiating String objects.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/performance/xml/StringInstantiation.xml"
  }, {
    "id" : 13,
    "rule_Name" : "public class AvoidInstantiatingObjectsInLoopsRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.performance",
    "rule_Description" : "New objects can not be created within loops",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/performance/xml/AvoidInstantiatingObjectsInLoops.xml"
  }, {
    "id" : 14,
    "rule_Name" : "public class InefficientEmptyStringCheckRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.performance",
    "rule_Description" : "String.trim().length() == 0 and String.trim().isEmpty() are inefficient ways to check if a String is really blank. Prevent it.",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/performance/xml/InefficientEmptyStringCheck.xml"
  }, {
    "id" : 15,
    "rule_Name" : "public class UseStringBufferForStringAppendsRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.performance",
    "rule_Description" : "The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If it is used more than once then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.",
    "rule_Keynodes": "ASTVariableDeclaratorId",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/performance/xml/UseStringBufferForStringAppends.xml"
  }, {
    "id" : 16,
    "rule_Name" : "public class UnnecessaryImportRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.codestyle",
    "rule_Description" : "Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they’re in java.lang, or the current package.",
    "rule_Keynodes": "ASTCompilationUnit, ASTClassOrInterfaceType, ASTMethodCall, ASTVariableAccess",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/codestyle/xml/UnnecessaryImport.xml"
  }, {
    "id" : 17,
    "rule_Name" : "public class ExceptionAsFlowControlRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.design",
    "rule_Description" : "This rule reports exceptions thrown and caught in an enclosing try statement. This use of exceptions as a form of goto statement is discouraged, as that may hide actual exceptions, and obscures control flow, especially when debugging. To fix a violation, add the necessary validation or use an alternate control structure.",
    "rule_Keynodes": "ASTThrowStatement",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/design/xml/ExceptionAsFlowControl.xml"
  }, {
    "id" : 18,
    "rule_Name" : "public class IdenticalCatchBranchesRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.codestyle",
    "rule_Description" : "Identical catch branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.",
    "rule_Keynodes": "ASTTryStatement",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/codestyle/xml/IdenticalCatchBranches.xml"
  }, {
    "id" : 19,
    "rule_Name" : "public class ClassWithOnlyPrivateConstructorsShouldBeFinalRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.design",
    "rule_Description" : "Reports classes that may be made final because they cannot be extended from outside their compilation unit anyway. This is because all their constructors are private, so a subclass could not call the super constructor.",
    "rule_Keynodes": "ASTClassOrInterfaceDeclaration",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/design/xml/ClassWithOnlyPrivateConstructorsShouldBeFinal.xml"
  }, {
    "id" : 20,
    "rule_Name" : "public class AvoidThrowingNullPointerExceptionRule extends AbstractJavaRulechainRule",
    "rule_Package" : "net.sourceforge.pmd.lang.java.rule.design",
    "rule_Description" : "Avoid throwing NullPointerExceptions manually.",
    "rule_Keynodes": "ASTThrowStatement",
    "xml_Path" : "/src/test/resources/net/sourceforge/pmd/lang/java/rule/design/xml/AvoidThrowingNullPointerException.xml"
  }]
}